Import-Module "D:\Program Files\Microsoft Configuration Manager\AdminConsole\bin\ConfigurationManager.psd1"function Get-Updates  {param ([String]$Architecture, [String]$OperatingSystem, [String]$Namespace, $Updates )$Updates = @()$Updates = Get-WmiObject -Class SMS_SoftwareUpdate -Namespace $Namespace$Updates = $Updates | where-object { ($_.LocalizedDisplayName -match $OperatingSystem) }If ($Architecture -eq "x86") {$Updates = $Updates | where-object { ($_.LocalizedDisplayName -notmatch "x64") }} elseif ($Architecture -eq "x64") {$Updates = Get-WmiObject -Class SMS_SoftwareUpdate -Namespace $Namespace | where-object { ($_.LocalizedDisplayName -match $OperatingSystem) -and ($_.LocalizedDisplayName -match "x64") }}Return $Updates}function Set-Filters {param($Filters, $Updates, $UpdateTypes)Set-Variable -Name Filter -Scope Local -ForceSet-Variable -Name UpdateType -Scope Local -Forceforeach ($Filter in $Filters) {$Updates = $Updates | Where-Object { $_.LocalizedDisplayName -notmatch $Filter }}If ($UpdateTypes.Count -ge 1) {foreach ($UpdateType in $UpdateTypes) {$Updates = $Updates | Where-Object { $_.LocalizedCategoryInstanceNames -match $UpdateType }}If ($UpdateTypes -eq "Update") {$Updates = $Updates | Where-Object { $_.LocalizedDisplayName -notmatch "Security Update" }}}return $UpdatesRemove-Variable -Name Filter -Scope Local -ForceRemove-Variable -Name UpdateType -Scope Local -Force}function Set-TimeSpanByMonthsOld {param ($MonthsOld, $Updates)Set-Variable -Name Day -Scope Local -ForceSet-Variable -Name Month -Scope Local -ForceSet-Variable -Name FirstDayOfMonth -Scope Local -ForceSet-Variable -Name LastDayOfMonth -Scope Local -ForceSet-Variable -Name Today -Scope Local -ForceIf ($MonthsOld -ge 1) {$MonthsOld = $MonthsOld * -1}$Today = Get-Date$Month = $Today.AddMonths($MonthsOld)$Day = $Month.Day$FirstDayOfMonth = $Month.AddDays(($Day - 1) * -1)$LastDayOfMonth = [System.DateTime]::DaysInMonth($Month.Year, $Month.Month)$LastDayOfMonth = $LastDayOfMonth - 1$LastDayOfMonth = $FirstDayOfMonth.AddDays($LastDayOfMonth)$FirstDayOfMonth = [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($FirstDayOfMonth)$LastDayOfMonth = [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($LastDayOfMonth)$Updates = $Updates | Where { ($_.DateCreated -ge $FirstDayOfMonth) -and ($_.DateCreated -le $LastDayOfMonth) }return $UpdatesRemove-Variable -Name Day -Scope Local -ForceRemove-Variable -Name Month -Scope Local -ForceRemove-Variable -Name FirstDayOfMonth -Scope Local -ForceRemove-Variable -Name LastDayOfMonth -Scope Local -Force}function Set-TimeSpanByDatePeriod {param ([String]$StartDate,[String]$EndDate,$Updates)$StartDate = [DateTime]$StartDate$StartDate = [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($StartDate)$EndDate = [DateTime]$EndDate$EndDate = [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($EndDate)$Updates = $Updates | Where { ($_.DateCreated -ge $StartDate) -and ($_.DateCreated -le $EndDate) }return $Updates}function Set-TimeSpanAllUpdatesBeforeDate {param ([String]$StartDate, $Updates)$StartDate = [DateTime]$StartDate$StartDate = [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($StartDate)$Updates = $Updates | Where { $_.DateCreated -lt $StartDate }return $Updates}function CreateSoftwareUpdateGroup {param ($OperatingSystem, $Architecture, $Updates)Set-Variable -Name Description -Scope Local -ForceSet-Variable -Name Month -Scope Local -ForceSet-Variable -Name SoftwareUpdateGroupName -Scope Local -ForceSet-Variable -Name SoftwareUpdates -Scope Local -ForceSet-Variable -Name Temp -Scope Local -ForceSet-Variable -Name Update -Scope Local -ForceSet-Variable -Name Year -Scope Local -Force$SoftwareUpdates = @()$Year = (Get-Date).Year$Month = Get-Date -format "MMMM"$SoftwareUpdateGroupName = $OperatingSystem + $Architecture + [char]32 + $Month + [char]45 + $Year$Description = $SoftwareUpdateGroupName + [char]32 + "Updates"foreach ($Update in $Updates) {$SoftwareUpdates += ($Update.CI_ID)}cd BNA:$TEMP = New-CMSoftwareUpdateGroup -Name $SoftwareUpdateGroupName -UpdateID $SoftwareUpdates -Description $Descriptioncd c:$SoftwareUpdates = $nullRemove-Variable -Name Description -Scope Local -ForceRemove-Variable -Name Month -Scope Local -ForceRemove-Variable -Name SoftwareUpdateGroupName -Scope Local -ForceRemove-Variable -Name SoftwareUpdates -Scope Local -ForceRemove-Variable -Name Temp -Scope Local -ForceRemove-Variable -Name Update -Scope Local -ForceRemove-Variable -Name Year -Scope Local -Force}function ProcessLogFile {param([String]$OperatingSystem, [String]$Architecture)Set-Variable -Name LogFile -Scope Local -ForceSet-Variable -Name Month -Scope Local -ForceSet-Variable -Name Output -Scope Local -ForceSet-Variable -Name temp -Scope Local -Force$Month = Get-Date -format "MMMM"$OperatingSystem = $OperatingSystem -replace '\s',''$LogFile = $env:TEMP + "\" + $OperatingSystem + $Architecture + $Month + "UpdatesReport.csv"if ((Test-Path $LogFile) -eq $true) {Remove-Item $LogFile -Force}if ((Test-Path $LogFile) -eq $false) {$temp = New-Item $LogFile -ItemType file -Force$Output = "Update Name, Article ID, Update Type, Release Date"Out-File -FilePath $LogFile -InputObject $Output -Force -Encoding UTF8}Return $LogFileRemove-Variable -Name LogFile -Scope Local -ForceRemove-Variable -Name Month -Scope Local -ForceRemove-Variable -Name Output -Scope Local -ForceRemove-Variable -Name temp -Scope Local -Force}function New-Report  {param($EmailAddressList, $Updates, $OperatingSystem, $Architecture)Set-Variable -Name ArticleID -Scope Local -ForceSet-Variable -Name Body -Scope Local -ForceSet-Variable -Name DateCreated -Scope Local -ForceSet-Variable -Name EmailAddress -Scope Local -ForceSet-Variable -Name Month -Scope Local -ForceSet-Variable -Name Output -Scope Local -ForceSet-Variable -Name Subject -Scope Local -ForceSet-Variable -Name Update -Scope Local -Forceforeach ($Update in $Updates) {$Update.LocalizedDisplayName = $Update.LocalizedDisplayName -replace ",", ""$ArticleID = "KB" + $Update.ArticleID[String]$DateCreated = [System.Management.ManagementDateTimeConverter]::ToDateTime($Update.DateCreated)If ($Update.LocalizedCategoryInstanceNames -match "Security Updates") {$Output = $Update.LocalizedDisplayName + "," + $ArticleID + ",Security Update," + $DateCreated} elseif (($Update.LocalizedCategoryInstanceNames -notmatch "Security Updates") -and ($Update.LocalizedCategoryInstanceNames -match "Update")) {$Output = $Update.LocalizedDisplayName + "," + $ArticleID + ",Update," + $DateCreated} else {$Output = $Update.LocalizedDisplayName + "," + $ArticleID + ", ," + $DateCreated}Out-File -FilePath $LogFile -InputObject $Output -Append -Force -Encoding UTF8}$Month = Get-Date -format "MMMM"$Subject = $OperatingSystem + $Architecture + [char]32 + $Month + [char]32 + "SCCM Windows Update List"$Body = "List of Windows updates added to the" + $OperatingSystem + $Architecture + [char]32 + $Month + " software update group."foreach ($EmailAddress in $EmailAddressList) {Send-MailMessage -To $EmailAddress -From "engineers@wallerlaw.com" -Subject $Subject -Body $Body -Attachments $LogFile -SmtpServer "smtp.wallerlaw.com"}$EmailAddresses = $nullRemove-Variable -Name ArticleID -Scope Local -ForceRemove-Variable -Name Body -Scope Local -ForceRemove-Variable -Name DateCreated -Scope Local -ForceRemove-Variable -Name EmailAddress -Scope Local -ForceRemove-Variable -Name Month -Scope Local -ForceRemove-Variable -Name Output -Scope Local -ForceRemove-Variable -Name Subject -Scope Local -ForceRemove-Variable -Name Update -Scope Local -Force}Set-Variable -Name Architecture -Scope Local -ForceSet-Variable -Name EmailAddresses -Scope Local -ForceSet-Variable -Name Filters -Scope Local -ForceSet-Variable -Name LogFile -Scope Local -ForceSet-Variable -Name Namespace -Value root\sms\site_bna -Scope Local -ForceSet-Variable -Name OperatingSystem -Scope Local -ForceSet-Variable -Name Updates -Scope Local -ForceSet-Variable -Name UpdateTypes -Scope Local -Forcecls$EmailAddresses = @("mick.pletcher@test.com")$OperatingSystem = "Windows 7" $Architecture = "x86" $UpdateTypes = @() $Filters = @("Internet Explorer 8", "Internet Explorer 9", "Internet Explorer 10")$Updates = @()$LogFile = ProcessLogFile -OperatingSystem $OperatingSystem -Architecture $Architecture$Updates = Get-Updates -Architecture $Architecture -Namespace $Namespace -OperatingSystem $OperatingSystem -Updates $Updates$Updates = Set-Filters -Filters $Filters -Updates $Updates -UpdateTypes $UpdateTypes$Updates = Set-TimeSpanByMonthsOld -MonthsOld 1 -Updates $UpdatesCreateSoftwareUpdateGroup -OperatingSystem $OperatingSystem -Updates $Updates -Architecture $ArchitectureNew-Report -EmailAddressList $EmailAddresses -Updates $Updates -OperatingSystem $OperatingSystem -Architecture $ArchitectureWrite-HostWrite-Host "Total Number of Updates:"$Updates.Count$Filters = $null$Updates = $null$UpdateTypes = $nullRemove-Variable -Name Architecture -Scope Local -ForceRemove-Variable -Name EmailAddresses -Scope Local -ForceRemove-Variable -Name Filters -Scope Local -ForceRemove-Variable -Name LogFile -Scope Local -ForceRemove-Variable -Name Namespace -Scope Local -ForceRemove-Variable -Name OperatingSystem -Scope Local -ForceRemove-Variable -Name Updates -Scope Local -ForceRemove-Variable -Name UpdateTypes -Scope Local -Force