function Test-ShareCrud{$resourceGroup = getAssetNametry{$AccountName = getAssetName$ShareName = getAssetName$description = "Test Share"$terms = "Test terms"$shareKind = "CopyBased"$createdShare = New-AzDataShare -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareName -Description $description -Terms $termsAssert-NotNull $createdShareAssert-AreEqual $ShareName $createdShare.NameAssert-AreEqual "CopyBased" $createdShare.ShareKindAssert-AreEqual $description $createdShare.DescriptionAssert-AreEqual $terms $createdShare.TermsAssert-AreEqual "Succeeded" $createdShare.ProvisioningState$retrievedShare = Get-AzDataShare -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareNameAssert-NotNull $retrievedShareAssert-AreEqual $ShareName $retrievedShare.NameAssert-AreEqual "Succeeded" $retrievedShare.ProvisioningState$newDescription = "SDK Description"$newTerms = "SDK Terms of Use"$updateShare = Set-AzDataShare -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareName -Description $newDescription -Terms $newTerms Assert-NotNull $updateShareAssert-AreEqual $ShareName $updateShare.NameAssert-AreEqual $newDescription $updateShare.DescriptionAssert-AreEqual $newTerms $updateShare.TermsAssert-AreEqual "Succeeded" $updateShare.ProvisioningState$removed = Remove-AzDataShare -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareName -PassThruAssert-True { $removed }Assert-ThrowsContains { Get-AzDataShare -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareName } "Resource 'sdktestingshare1' does not exist"}finally{Remove-AzResourceGroup -Name $resourceGroup -Force}}