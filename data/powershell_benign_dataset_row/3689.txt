function Test-ShareSubscriptionCrud{$resourceGroup = getAssetNametry{$AccountName = getAssetName$ShareSubscriptionName = getAssetName$InvitationId = "80f618dc-2ca8-4f99-83ee-9d2889066c6d"$createdShareSubscription = New-AzDataShareSubscription -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareSubscriptionName -InvitationId $InvitationIdAssert-NotNull $createdShareSubscriptionAssert-AreEqual $ShareSubscriptionName $createdShareSubscription.NameAssert-AreEqual "Active" $createdShareSubscription.ShareSubscriptionStatusAssert-AreEqual $InvitationId $createdShareSubscription.InvitationIdAssert-AreEqual "Succeeded" $createdShareSubscription.ProvisioningState$retrievedShareSubscription = Get-AzDataShareSubscription -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareSubscriptionNameAssert-NotNull $retrievedShareSubscriptionAssert-AreEqual $ShareSubscriptionName $retrievedShareSubscription.NameAssert-AreEqual "Succeeded" $retrievedShareSubscription.ProvisioningStateAssert-AreEqual "Active" $retrievedShareSubscription.ShareSubscriptionStatus$removed = Remove-AzDataShareSubscription -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareSubscriptionName -PassThruAssert-True { $removed }Assert-ThrowsContains { Get-AzDataShareSubscription -AccountName $AccountName -ResourceGroupName $resourceGroup -Name $ShareSubscriptionName } "Resource 'sdktestingsharesub1' does not exist"}finally{Remove-AzResourceGroup -Name $resourceGroup -Force}}