$accountName='fbs-aa-01'$location = "East US"$resourceGroupName = "to-delete-01"function AssertContains{param([string] $str, [string] $substr, [string] $message)if (!$message){$message = "Assertion failed because '$str' does not contain '$substr'"}if (!$str.Contains($substr)) {throw $message}return $true}  function CreateRunbook{param([string] $runbookPath, [boolean] $byName=$false, [string[]] $tag, [string] $description, [string] $type = "PowerShell")$runbookName = gci $runbookPath | %{$_.BaseName}$runbook = Get-AzAutomationRunbook -AutomationAccountName $accountName -ResourceGroupName $resourceGroupName | where {$_.Name -eq $runbookName -and $_.RunbookType -eq $type} if ($runbook.Count -eq 1){$runbook | Remove-AzAutomationRunbook -Force}if(!$byName){return Import-AzAutomationRunbook -AutomationAccountName $accountName -ResourceGroupName $resourceGroupName -Path $runbookPath -Tag $tag -Description $description -Type $type}else {return New-AzAutomationRunbook -AutomationAccountName $accountName -ResourceGroupName $resourceGroupName -Name $runbookName -Tag $tag -Description $description -Type $type}}function WaitForJobStatus{param([Guid] $Id, [Int] $numOfSeconds = 150, [String] $Status)$timeElapse = 0$interval = 3$endStatus = @('completed','failed')while($timeElapse -lt $numOfSeconds){Wait-Seconds $interval$timeElapse = $timeElapse + $interval$job = Get-AzAutomationJob -AutomationAccountName $accountName -ResourceGroupName $resourceGroupName -Id $Idif($job.Status -eq $Status){break}elseif($endStatus -contains $job.Status.ToLower()){	    Write-Output ("The Job with ID $($job.Id) reached $($job.Status) Status already.")return}}Assert-AreEqual $Status $job.Status "Job did not reach $Status status within $numOfSeconds seconds.";}function Test-RunbookWithParameter{param([string] $runbookPath, [string] $type, [HashTable] $parameters, [int]$expectedResult)$automationAccount = Get-AzAutomationAccount -Name $accountName -ResourceGroupName $resourceGroupNameAssert-NotNull $automationAccount "Automation account $accountName does not exist."$runbook = CreateRunbook  $runbookPath -type $typeAssert-NotNull $runbook  "runBook $runbookPath does not import successfully."$automationAccount | Publish-AzAutomationRunbook -Name $runbook.Name$job = $automationAccount | Start-AzAutomationRunbook -Name $runbook.Name -Parameters $parametersWaitForJobStatus -Id $job.JobId -Status "Completed"$jobOutput = $automationAccount | Get-AzAutomationJobOutput -Id $job.JobId -Stream Output[int]$Result = $jobOutput | Select-Object -Last 1 -ExpandProperty SummaryAssert-AreEqual $expectedResult $Resulttry {$jobOutputRecord = $jobOutput | Get-AzAutomationJobOutputRecord -ErrorAction Stop}catch {$jobOutputRecord = $null}Assert-NotNull $JobOutputRecord$automationAccount | Remove-AzAutomationRunbook -Name $runbook.Name -Force Assert-Throws { $automationAccount | Get-AzAutomationRunbook -Name $runbook.Name}}function Test-AutomationStartAndStopRunbook{param([string] $runbookPath)$automationAccount = Get-AzAutomationAccount -Name $accountNameAssert-NotNull $automationAccount "Automation account $accountName does not exist."$runbook = CreateRunbook $runbookPathAssert-NotNull $runbook  "runBook $runbookPath does not import successfully."$automationAccount | Publish-AzAutomationRunbook -Name $runbook.Name$job = Start-AzAutomationRunbook -Name $runbook.Name -AutomationAccountName $accountNameWaitForJobStatus -Id $job.Id -Status "Running"$automationAccount | Stop-AzAutomationJob -Id $job.IdWaitForJobStatus -Id $job.Id -Status "Stopped"$automationAccount | Remove-AzAutomationRunbook -Name $runbook.Name  -Force Assert-Throws { $automationAccount | Get-AzAutomationRunbook -Name $runbook.Name}}function Test-AutomationPublishAndEditRunbook{param([string] $runbookPath, [string] $editRunbookPath)$runbook = CreateRunbook $runbookPath $truePublish-AzAutomationRunbook $accountName -Name $runbook.Name$publishedRunbook = Get-AzAutomationRunbook  $accountName -Name $runbook.Name$runbookState = "Published"Assert-AreEqual $publishedRunbook.State $runbookState "Runbook should be in $runbookState state"$publishedRunbookDefn = Get-AzAutomationRunbookDefinition $accountName -Name $runbook.NameSet-AzAutomationRunbookDefinition $accountName -Name $runbook.Name -Path $runbookPath -Overwrite$runbook = Get-AzAutomationRunbook  $accountName -Name $runbook.Name$runbookState = "Edit"Assert-AreEqual $runbook.State $runbookState "Runbook should be in $runbookState state"$editedRunbookDefn = Get-AzAutomationRunbookDefinition $accountName -Name $runbook.Name -Slot "Draft"Assert-AreNotEqual $editedRunbookDefn.Content $publishedRunbookDefn.Content "Old content and edited content of the runbook shouldn't be equal"Assert-Throws {Set-AzAutomationRunbookDefinition $accountName -Name $runbook.Name -Path $editRunbookPath -PassThru -ErrorAction Stop} Set-AzAutomationRunbookDefinition $accountName -Name $runbook.Name -Path $editRunbookPath -Overwrite$editedRunbookDefn2 = Get-AzAutomationRunbookDefinition $accountName -Name $runbook.Name -Slot "Draft"Assert-AreNotEqual $editedRunbookDefn2.Content $editedRunbookDefn.Content "Old content and edited content of the runbook shouldn't be equal"Remove-AzAutomationRunbook $accountName -Name $runbook.Name -ForceAssert-Throws {Get-AzAutomationRunbook $accountName -Name $runbook.Name}}function Test-AutomationConfigureRunbook{param([string] $runbookPath)$automationAccount = Get-AzAutomationAccount -Name $accountNameAssert-NotNull $automationAccount "Automation account $accountName does not exist."$runbook = CreateRunbook $runbookPathAssert-NotNull $runbook  "runbook ($runbookPath) isn't imported successfully."Publish-AzAutomationRunbook -Name $runbook.Name -AutomationAccountName $accountName$automationAccount | Set-AzAutomationRunbook -Name $runbook.Name -LogVerbose $true -LogProgress $false$runbook = $automationAccount | Get-AzAutomationRunbook -Name $runbook.NameAssert-NotNull $runbook "Runbook shouldn't be Null"Assert-AreEqual $true $runbook.LogVerbose "Log Verbose mode should be true."Assert-AreEqual $false $runbook.LogProgress "Log Progress mode should be false."$job = $automationAccount | Start-AzAutomationRunbook -Name $runbook.NameWaitForJobStatus -Id $job.Id -Status "Completed"$jobOutputs = $automationAccount | Get-AzAutomationJobOutput -Id $job.Id -Stream "Output"Assert-AreEqual 1 $jobOutputs.CountAssertContains $jobOutputs[0].Text "output message" "The output stream is wrong."$jobVerboseOutputs = Get-AzAutomationJobOutput $accountName -Id $job.Id -Stream "Verbose"Assert-AreEqual 1 $jobVerboseOutputs.CountAssertContains $jobVerboseOutputs[0].Text "verbose message" "The verbose stream is wrong."$jobProgressOutputs = Get-AzAutomationJobOutput -AutomationAccountName $accountName -Id $job.Id -Stream "Progress"Assert-AreEqual 0 $jobProgressOutputs.CountSet-AzAutomationRunbook $accountName -Name $runbook.Name -LogVerbose $false -LogProgress $true$job = Start-AzAutomationRunbook $accountName -Name $runbook.NameWaitForJobStatus -Id $job.Id -Status "Completed"$jobProgressOutputs = Get-AzAutomationJobOutput $accountName -Id $job.Id -Stream "Progress"Assert-AreNotEqual 0 $jobProgressOutputs.CountAssert-AreEqual $jobProgressOutputs[0].Type "Progress"$jobVerboseOutputs = Get-AzAutomationJobOutput $accountName -Id $job.Id -Stream "Verbose"Assert-AreEqual 0 $jobVerboseOutputs.Count$jobs = Get-AzAutomationJob $accountName -RunbookName $runbook.NameAssert-AreEqual 2 $jobs.Count "There should be 2 jobs in total for this runbook."$automationAccount | Remove-AzAutomationRunbook -Name $runbook.Name -Force Assert-Throws {$automationAccount | Get-AzAutomationRunbook -Name $runbook.Name}}function Test-AutomationSuspendAndResumeJob{param([string] $runbookPath)$automationAccount = Get-AzAutomationAccount $accountNameAssert-NotNull $automationAccount "Automation account $accountName does not exist."$runbook = CreateRunbook $runbookPath$automationAccount | Publish-AzAutomationRunbook -Name $runbook.Name$job = Start-AzAutomationRunbook $accountName -Name $runbook.NameWaitForJobStatus -Id $job.Id -Status "Running"Suspend-AzAutomationJob $accountName -Id $job.IdWaitForJobStatus -Id $job.Id -Status "Suspended"$automationAccount | Resume-AzAutomationJob -Id $job.IdWaitForJobStatus -Id $job.Id -Status "Completed"Remove-AzAutomationRunbook -AutomationAccountName $accountName -Name $runbook.Name -Force Assert-Throws {Get-AzAutomationRunbook $accountName -Name $runbook.Name}}function Test-AutomationStartRunbookOnASchedule{param([string] $runbookPath)$automationAccount = Get-AzAutomationAccount -Name $accountName$runbook = CreateRunbook $runbookPathPublish-AzAutomationRunbook $accountName -Name $runbook.Name$oneTimeScheName = "oneTimeSchedule"$schedule = Get-AzAutomationSchedule $accountName | where {$_.Name -eq $oneTimeScheName} if ($schedule.Count -eq 1){Remove-AzAutomationSchedule $accountName -Name $oneTimeScheName -Force}$startTime = (Get-Date).AddMinutes(7)New-AzAutomationSchedule $accountName -Name $oneTimeScheName -OneTime -StartTime $startTime$oneTimeSchedule = Get-AzAutomationSchedule $accountName -Name $oneTimeScheNameAssert-NotNull $oneTimeSchedule "$oneTimeScheName doesn't exist!"$dailyScheName = "dailySchedule"$schedule = Get-AzAutomationSchedule $accountName | where {$_.Name -eq $dailyScheName} if ($schedule.Count -eq 1){Remove-AzAutomationSchedule $accountName -Name $dailyScheName -Force}$startTime = (Get-Date).AddDays(1)$expiryTime = (Get-Date).AddDays(3)New-AzAutomationSchedule $accountName -Name $DailyScheName -StartTime $startTime -ExpiryTime $expiryTime -DayInterval 1$dailySchedule = Get-AzAutomationSchedule $accountName -Name $dailyScheNameAssert-NotNull $dailySchedule "$dailyScheName doesn't exist!"$runbook = Register-AzAutomationScheduledRunbook $accountName -Name $runbook.Name -ScheduleName $oneTimeScheNameAssert-AreEqual $oneTimeScheName $runbook.ScheduleNames "The runbook should be associated with $oneTimeScheName"$runbook = Register-AzAutomationScheduledRunbook $accountName -Name $runbook.Name -ScheduleName $dailyScheNameAssert-True { $runbook.ScheduleNames -Contains $dailyScheName} "The runbook should be associated with $dailyScheName"Wait-Seconds 420 $job = Get-AzAutomationJob $accountName -Name $runbook.Name | where {$_.ScheduleName -eq $oneTimeScheName}$jobSchedule = Get-AzAutomationScheduledRunbook $accountName -RunbookName $runbook.Name -ScheduleName $oneTimeScheNameAssert-AreEqual 1 $jobSchedule.CountAssert-AreEqual 1 $job.CountWaitForJobStatus -Id $job.Id -Status "Completed"$description = "Daily Schedule Description"Set-AzAutomationSchedule $accountName -Name $dailyScheName -Description $description$dailySchedule = Get-AzAutomationSchedule $accountName -Name $dailyScheNameAssert-AreEqual $description $dailySchedule.DescriptionUnregister-AzAutomationScheduledRunbook $accountName -Name $runbook.Name -ScheduleName $dailyScheName$jobSchedule = Get-AzAutomationScheduledRunbook $accountName -RunbookName $runbook.Name -ScheduleName $dailyScheNameAssert-Null $jobSchedule "The runbook shouldn't have an association with $dailyScheName"Remove-AzAutomationSchedule $accountName -Name $oneTimeScheName -ForceAssert-Throws {$automationAccount | Get-AzAutomationSchedule -Name $oneTimeScheName}$automationAccount | Remove-AzAutomationSchedule -Name $dailyScheName -ForceAssert-Throws {$automationAccount | Get-AzAutomationSchedule -Name $dailyScheName}Remove-AzAutomationRunbook $accountName -Name $runbook.Name -ForceAssert-Throws {Get-AzAutomationRunbook $accountName -Name $runbook.Name}}function Test-AutomationStartUnpublishedRunbook{param([string] $runbookPath)$tags = @("tag1","tag2")$description = "Runbook Description"$c = Get-Date$runbookParameters = @{"a" = "stringParameter"; "b" = 123; "c" = $c}$runbook = CreateRunbook $runbookPath $false $tags $descriptionAssert-NotNull $runbook "runBook $runbookPath does not import successfully."Assert-NotNull $runbook.Tags "Tags of the runbook shouldn't be Null."Assert-NotNull $runbook.Description "Description of the runbook shouldn't be Null."Assert-Throws {Start-AzAutomationRunbook $accountName -Name $runbook.Name -Parameters $runbookParameters -PassThru -ErrorAction Stop} Remove-AzAutomationRunbook $accountName -Name $runbook.Name -Force Assert-Throws {Get-AzAutomationRunbook $accountName -Name $runbook.Name -Parameters $runbookParameters -PassThru -ErrorAction Stop}}function Test-RunbookWithParameterAndWait{param([string] $runbookPath, [string] $type, [HashTable] $parameters, [int]$expectedResult)$automationAccount = Get-AzAutomationAccount -Name $accountName -ResourceGroupName $resourceGroupNameAssert-NotNull $automationAccount "Automation account $accountName does not exist."$runbook = CreateRunbook  $runbookPath -type $typeAssert-NotNull $runbook  "runBook $runbookPath does not import successfully."$automationAccount | Publish-AzAutomationRunbook -Name $runbook.Name$job = $automationAccount | Start-AzAutomationRunbook -Name $runbook.Name -Parameters $parameters  -WaitAssert-NotNull  $job[int]$Result = $job[$job.Length-1]Assert-AreEqual $expectedResult $Result$automationAccount | Remove-AzAutomationRunbook -Name $runbook.Name -ForceAssert-Throws { $automationAccount | Get-AzAutomationRunbook -Name $runbook.Name}}