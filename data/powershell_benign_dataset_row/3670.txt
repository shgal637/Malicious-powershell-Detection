function Test-AdvancedDataSecurityPolicyTest{$testSuffix = getAssetNameCreate-AdvancedDataSecurityTestEnvironment $testSuffix$params = Get-SqlAdvancedDataSecurityTestEnvironmentParameters $testSuffixtry{$policy = Get-AzSqlServerAdvancedDataSecurityPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $policy.ResourceGroupNameAssert-AreEqual $params.serverName $policy.ServerNameAssert-False { $policy.IsEnabled }Enable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment$policy = Get-AzSqlServerAdvancedDataSecurityPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $policy.ResourceGroupNameAssert-AreEqual $params.serverName $policy.ServerNameAssert-True { $policy.IsEnabled }Disable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName $policy = Get-AzSqlServerAdvancedDataSecurityPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $policy.ResourceGroupNameAssert-AreEqual $params.serverName $policy.ServerNameAssert-False { $policy.IsEnabled }Update-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com" -EmailAdmins $false -ExcludedDetectionType Sql_Injection_VulnerabilityDisable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName $policy = Get-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.ThreatDetectionState "Disabled"Assert-AreEqual $policy.NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com"Assert-False {$policy.EmailAdmins}Assert-AreEqual $policy.ExcludedDetectionTypes.Count 1Assert-True {$policy.ExcludedDetectionTypes.Contains([Microsoft.Azure.Commands.Sql.ThreatDetection.Model.DetectionType]::Sql_Injection_Vulnerability)}Enable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment$policy = Get-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.ThreatDetectionState "Enabled"Assert-AreEqual $policy.NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com"Assert-False {$policy.EmailAdmins}Assert-AreEqual $policy.ExcludedDetectionTypes.Count 1Assert-True {$policy.ExcludedDetectionTypes.Contains([Microsoft.Azure.Commands.Sql.ThreatDetection.Model.DetectionType]::Sql_Injection_Vulnerability)}Disable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName Enable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName -DeploymentName "EnableVA_sql-ads-cmdlet-test-srv1"$policy = Get-AzSqlServerAdvancedDataSecurityPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $policy.ResourceGroupNameAssert-AreEqual $params.serverName $policy.ServerNameAssert-True { $policy.IsEnabled }$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreNotEqual "" $settings.StorageAccountName	Assert-AreEqual Weekly $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-AreEqualArray @() $settings.NotificationEmailUpdate-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com" -EmailAdmins $false -ExcludedDetectionType Sql_Injection_VulnerabilityDisable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName $policy = Get-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.ThreatDetectionState "Disabled"Assert-AreEqual $policy.NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com"Assert-False {$policy.EmailAdmins}Assert-AreEqual $policy.ExcludedDetectionTypes.Count 1Assert-True {$policy.ExcludedDetectionTypes.Contains([Microsoft.Azure.Commands.Sql.ThreatDetection.Model.DetectionType]::Sql_Injection_Vulnerability)}Enable-AzSqlServerAdvancedDataSecurity -ResourceGroupName $params.rgname -ServerName $params.serverName -DeploymentName "EnableVA_sql-ads-cmdlet-test-srv2"$policy = Get-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.ThreatDetectionState "Enabled"Assert-AreEqual $policy.NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com"Assert-False {$policy.EmailAdmins}Assert-AreEqual $policy.ExcludedDetectionTypes.Count 1Assert-True {$policy.ExcludedDetectionTypes.Contains([Microsoft.Azure.Commands.Sql.ThreatDetection.Model.DetectionType]::Sql_Injection_Vulnerability)}}finally{Remove-AdvancedDataSecurityTestEnvironment $testSuffix}}function Create-AdvancedDataSecurityTestEnvironment ($testSuffix, $location = "West Central US", $serverVersion = "12.0"){$params = Get-SqlAdvancedDataSecurityTestEnvironmentParameters $testSuffixCreate-BasicTestEnvironmentWithParams $params $location $serverVersion}function Get-SqlAdvancedDataSecurityTestEnvironmentParameters ($testSuffix){return @{ rgname = "sql-ads-cmdlet-test-rg" +$testSuffix;serverName = "sql-ads-cmdlet-server" +$testSuffix;databaseName = "sql-ads-cmdlet-db" + $testSuffix;}}function Remove-AdvancedDataSecurityTestEnvironment ($testSuffix){$params = Get-SqlAdvancedDataSecurityTestEnvironmentParameters $testSuffixRemove-AzResourceGroup -Name $params.rgname -Force}