function Test-Media{$rgname = GetResourceGroupName$preferedlocation = "East US"$location = Get-AvailableLocation $preferedlocationWrite-Output $location$resourceGroup = CreateResourceGroup $rgname $location$storageAccountName1 = "sto" + $rgname$storageAccount1 = CreateStorageAccount $rgname $storageAccountName1 $location$storageAccountName2 = "sto" + $rgname + "2"$storageAccount2 = CreateStorageAccount $rgname $storageAccountName2 $location$accountName = "med" + $rgname$availability = Get-AzMediaServiceNameAvailability -AccountName $accountNameAssert-AreEqual $true $availability.nameAvailable$accountName = "med" + $rgname$tags = @{"tag1" = "value1"; "tag2" = "value2"}$storageAccount1 = GetStorageAccount -ResourceGroupName $rgname -Name $storageAccountName1$mediaService = New-AzMediaService -ResourceGroupName $rgname -AccountName $accountName -Location $location -StorageAccountId $storageAccount1.Id -Tag $tagsAssert-NotNull $mediaServiceAssert-AreEqual $accountName $mediaService.AccountNameAssert-AreEqual $rgname $mediaService.ResourceGroupNameAssert-AreEqual $location $mediaService.LocationAssert-Tags $tags $mediaService.TagsAssert-AreEqual $storageAccountName1 $mediaService.StorageAccounts[0].AccountNameAssert-AreEqual $true $mediaService.StorageAccounts[0].IsPrimaryAssert-AreEqual $rgname $mediaService.StorageAccounts[0].ResourceGroupName$availability = Get-AzMediaServiceNameAvailability -AccountName $accountNameAssert-AreEqual $false $availability.nameAvailable$mediaServices = Get-AzMediaService -ResourceGroupName $rgnameAssert-NotNull $mediaServicesAssert-AreEqual 1 $mediaServices.CountAssert-AreEqual $accountName $mediaServices[0].AccountNameAssert-AreEqual $rgname $mediaServices[0].ResourceGroupNameAssert-AreEqual $location $mediaServices[0].LocationAssert-AreEqual $storageAccountName1 $mediaServices[0].StorageAccounts[0].AccountNameAssert-AreEqual $true $mediaService.StorageAccounts[0].IsPrimaryAssert-AreEqual $rgname $mediaServices[0].StorageAccounts[0].ResourceGroupName$mediaService = Get-AzMediaService -ResourceGroupName $rgname -AccountName $accountNameAssert-NotNull $mediaServiceAssert-AreEqual $accountName $mediaService.AccountNameAssert-AreEqual $rgname $mediaService.ResourceGroupNameAssert-AreEqual $location $mediaService.LocationAssert-AreEqual $storageAccountName1 $mediaService.StorageAccounts[0].AccountNameAssert-AreEqual $true $mediaService.StorageAccounts[0].IsPrimaryAssert-AreEqual $rgname $mediaService.StorageAccounts[0].ResourceGroupName$tagsUpdated = @{"tag3" = "value3"; "tag4" = "value4"}$storageAccount2 = GetStorageAccount -ResourceGroupName $rgname -Name $storageAccountName2$primaryStorageAccount = New-AzMediaServiceStorageConfig -storageAccountId $storageAccount1.Id -IsPrimary$secondaryStorageAccount = New-AzMediaServiceStorageConfig -storageAccountId $storageAccount2.Id$storageAccounts = @($primaryStorageAccount, $secondaryStorageAccount)$mediaServiceUpdated = Set-AzMediaService -ResourceGroupName $rgname -AccountName $accountName -Tag $tagsUpdated -StorageAccounts $storageAccountsAssert-NotNull $mediaServiceUpdatedAssert-Tags $tagsUpdated $mediaServiceUpdated.TagsAssert-AreEqual $storageAccountName1 $mediaServiceUpdated.StorageAccounts[0].AccountNameAssert-AreEqual $true $mediaService.StorageAccounts[0].IsPrimaryAssert-AreEqual $storageAccountName2 $mediaServiceUpdated.StorageAccounts[1].AccountNameAssert-AreEqual $false $mediaServiceUpdated.StorageAccounts[1].IsPrimary$serviceKeys = Get-AzMediaServiceKeys -ResourceGroupName $rgname -AccountName $accountNameAssert-NotNull $serviceKeysAssert-NotNull $serviceKeys.PrimaryAuthEndpointAssert-NotNull $serviceKeys.PrimaryKeyAssert-NotNull $serviceKeys.SecondaryAuthEndpointAssert-NotNull $serviceKeys.SecondaryKeyAssert-NotNull $serviceKeys.Scope$serviceKeysUpdated1 = Set-AzMediaServiceKey -ResourceGroupName $rgname -AccountName $accountName -KeyType PrimaryAssert-NotNull $serviceKeysUpdated1Assert-NotNull $serviceKeysUpdated1.KeyAssert-AreNotEqual $serviceKeys.PrimaryKey $serviceKeysUpdated1.Key$serviceKeysUpdated2 = Set-AzMediaServiceKey -ResourceGroupName $rgname -AccountName $accountName -KeyType SecondaryAssert-NotNull $serviceKeysUpdated2Assert-NotNull $serviceKeysUpdated2.KeyAssert-AreNotEqual $serviceKeys.SecondaryKey $serviceKeysUpdated2.KeyRemove-AzMediaService -ResourceGroupName $rgname -AccountName $accountName -Force$mediaServices = Get-AzMediaService -ResourceGroupName $rgnameAssert-Null $mediaServices$tags = @{"tag1" = "value1"; "tag2" = "value2"}$mediaService = New-AzMediaService -ResourceGroupName $rgname -AccountName $accountName -Location $location -StorageAccounts $storageAccounts -Tag $tagsAssert-NotNull $mediaServiceAssert-AreEqual $accountName $mediaService.AccountNameAssert-AreEqual $rgname $mediaService.ResourceGroupNameAssert-AreEqual $location $mediaService.LocationAssert-Tags $tags $mediaService.TagsAssert-AreEqual $storageAccountName1 $mediaService.StorageAccounts[0].AccountNameAssert-AreEqual $true $mediaService.StorageAccounts[0].IsPrimaryAssert-AreEqual $rgname $mediaService.StorageAccounts[0].ResourceGroupNameAssert-AreEqual $storageAccountName2 $mediaService.StorageAccounts[1].AccountNameAssert-AreEqual $false $mediaService.StorageAccounts[1].IsPrimaryAssert-AreEqual $rgname $mediaService.StorageAccounts[1].ResourceGroupNameRemove-AzMediaService -ResourceGroupName $rgname -AccountName $accountName -ForceRemoveStorageAccount $rgname $storageAccountName1RemoveStorageAccount $rgname $storageAccountName2RemoveResourceGroup $rgname}function Test-MediaWithPiping{$rgname = GetResourceGroupName$preferedlocation = "East US"$location = Get-AvailableLocation $preferedlocation$resourceGroup = CreateResourceGroup $rgname $locationAssert-NotNull $resourceGroupAssert-AreEqual $rgname $resourceGroup.ResourceGroupNameAssert-AreEqual $location $resourceGroup.Location$storageAccountName1 = "sto" + $rgname$storageAccount1 = CreateStorageAccount $rgname $storageAccountName1 $location$accountName = "med" + $rgname$tags = @{"tag1" = "value1"; "tag2" = "value2"}$mediaService = GetStorageAccount -ResourceGroupName $rgname -Name $storageAccountName1 | New-AzMediaService -ResourceGroupName $rgname -AccountName $accountName -Location $location -Tag $tagsAssert-NotNull $mediaServiceAssert-AreEqual $accountName $mediaService.AccountNameAssert-AreEqual $rgname $mediaService.ResourceGroupNameAssert-AreEqual $location $mediaService.LocationAssert-Tags $tags $mediaService.TagsAssert-AreEqual $storageAccountName1 $mediaService.StorageAccounts[0].AccountNameAssert-AreEqual $true $mediaService.StorageAccounts[0].IsPrimaryAssert-AreEqual $rgname $mediaService.StorageAccounts[0].ResourceGroupName$tagsUpdated = @{"tag3" = "value3"; "tag4" = "value4"}$mediaServiceUpdated = Get-AzMediaService -ResourceGroupName $rgname -AccountName $accountName | Set-AzMediaService -Tag $tagsUpdatedAssert-NotNull $mediaServiceUpdatedAssert-Tags $tagsUpdated $mediaServiceUpdated.Tags$serviceKeys = Get-AzMediaService -ResourceGroupName $rgname -AccountName $accountName | Get-AzMediaServiceKeysAssert-NotNull $serviceKeysAssert-NotNull $serviceKeys.PrimaryAuthEndpointAssert-NotNull $serviceKeys.PrimaryKeyAssert-NotNull $serviceKeys.SecondaryAuthEndpointAssert-NotNull $serviceKeys.SecondaryKeyAssert-NotNull $serviceKeys.Scope$serviceKeysUpdated2 = Get-AzMediaService -ResourceGroupName $rgname -AccountName $accountName | Set-AzMediaServiceKey -KeyType SecondaryAssert-NotNull $serviceKeysUpdated2Assert-NotNull $serviceKeysUpdated2.KeyAssert-AreNotEqual $serviceKeys.SecondaryKey $serviceKeysUpdated2.KeyGet-AzMediaService -ResourceGroupName $rgname -AccountName $accountName | Remove-AzMediaService -ForceRemoveStorageAccount $rgname $storageAccountNameRemoveResourceGroup $rgname}