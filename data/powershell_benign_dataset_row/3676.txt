function Test-BlobAuditDatabaseUpdatePolicyWithStorage{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry {Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.StorageAccountResourceId $params.storageAccountResourceIdAssert-AreEqual $policy.BlobStorageTargetState "Enabled"  }finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditDatabaseUpdatePolicyWithSameNameStorageOnDifferentRegion{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry {Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.StorageAccountResourceId $params.storageAccountResourceIdAssert-AreEqual $policy.BlobStorageTargetState "Enabled"  $newResourceGroupName =  "test-rg2-for-sql-cmdlets-" + $testSuffixNew-AzureRmResourceGroup -Location "West Europe" -ResourceGroupName $newResourceGroupNameNew-AzureRmStorageAccount -StorageAccountName $params.storageAccount  -ResourceGroupName $newResourceGroupName -Location "West Europe" -Type Standard_GRSSet-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.StorageAccountResourceId $params.storageAccountResourceIdAssert-AreEqual $policy.BlobStorageTargetState "Enabled"  }finally{Remove-AzureRmResourceGroup -Name $newResourceGroupName -ForceRemove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditServerUpdatePolicyWithStorage{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.StorageAccountResourceId $params.storageAccountResourceIdAssert-AreEqual $policy.BlobStorageTargetState "Enabled" }finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditDatabaseUpdatePolicyKeepPreviousStorage{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry {Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId$policyBefore = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameSet-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policyAfter = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policyBefore.StorageAccountResourceId $policyAfter.StorageAccountResourceIdAssert-AreEqual $policyAfter.StorageAccountResourceId $params.storageAccountResourceId }finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditServerUpdatePolicyKeepPreviousStorage{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry {Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId$policyBefore = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameSet-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName $policyAfter = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policyBefore.StorageAccountResourceId $policyAfter.StorageAccountResourceIdAssert-AreEqual $policyAfter.StorageAccountResourceId $params.storageAccountResourceId }finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditDisableDatabaseAudit{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceIdSet-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.BlobStorageTargetState "Enabled"Set-AzSqlDatabaseAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.BlobStorageTargetState "Disabled"}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditDisableServerAudit{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceIdSet-AzSqlServerAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.BlobStorageTargetState "Disabled"}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditFailedDatabaseUpdatePolicyWithNoStorage{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Assert-Throws { Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverWithoutPolicy -DatabaseName $params.databaseWithoutPolicy }}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditFailedServerUpdatePolicyWithNoStorage{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Assert-Throws { Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverWithoutPolicy}}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditFailWithBadDatabaseIndentity{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry {Assert-Throws { Get-AzSqlDatabaseAudit -ResourceGroupName "NONEXISTING-RG" -ServerName $params.serverName -DatabaseName $params.databaseName }Assert-Throws { Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName "NONEXISTING-SERVER"-DatabaseName $params.databaseName }Assert-Throws { Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName "NONEXISTING-RG"  -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId}Assert-Throws { Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName "NONEXISTING-SERVER" -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId}}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditFailWithBadServerIndentity{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry {Assert-Throws { Get-AzSqlServerAudit -ResourceGroupName "NONEXISTING-RG" -ServerName $params.serverName }Assert-Throws { Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName "NONEXISTING-SERVER" }Assert-Throws { Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName "NONEXISTING-RG"  -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId}Assert-Throws { Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName "NONEXISTING-SERVER" -StorageAccountResourceId $params.storageAccountResourceId}}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditServerStorageKeyRotation{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Primary"$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-True { $policy.StorageKeyType -eq  "Primary"}Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Secondary"$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-True { $policy.StorageKeyType -eq  "Secondary"}Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Primary"$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-True { $policy.StorageKeyType -eq  "Primary"}}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditDatabaseStorageKeyRotation{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName  -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Primary"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName  -DatabaseName $params.databaseNameAssert-True { $policy.StorageKeyType -eq  "Primary"}Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName  -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Secondary"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName  -DatabaseName $params.databaseNameAssert-True { $policy.StorageKeyType -eq  "Secondary"}Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName  -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Primary"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName  -DatabaseName $params.databaseNameAssert-True { $policy.StorageKeyType -eq  "Primary"}}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditServerRetentionKeepProperties{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -RetentionInDays 10;Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -RetentionInDays 11;$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.RetentionInDays 11Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId;$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.RetentionInDays 11}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditDatabaseRetentionKeepProperties{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -RetentionInDays 10;Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -RetentionInDays 11;$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.RetentionInDays 11Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId;$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.RetentionInDays 11}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditOnDatabase{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$dbName = $params.databaseNametry{Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8 $policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.BlobStorageTargetState "Enabled"Assert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual $policy.AuditAction.Length 0Assert-AreEqual $policy.RetentionInDays 8Assert-True { $policy.StorageKeyType -eq  "Primary"}Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Secondary" -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8 -AuditAction "UPDATE ON database::[$($params.databaseName)] BY [public]"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.BlobStorageTargetState "Enabled"Assert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual $policy.RetentionInDays 8Assert-True { $policy.StorageKeyType -eq  "Secondary"}Assert-AreEqual $policy.AuditAction.Length 1Assert-AreEqual $policy.AuditAction "UPDATE ON database::[$($params.databaseName)] BY [public]"Set-AzSqlDatabaseAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.BlobStorageTargetState "Disabled"Assert-AreEqual $policy.AuditAction.Length 1Set-AzSqlDatabaseAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -AuditActionGroup @() -AuditAction "UPDATE ON database::[$($params.databaseName)] BY [public]"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.AuditActionGroup.Length 0Assert-AreEqual $policy.AuditAction.Length 1Assert-AreEqual $policy.AuditAction[0] "UPDATE ON database::[$($params.databaseName)] BY [public]"}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditOnServer{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.BlobStorageTargetState "Enabled"Assert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual $policy.RetentionInDays 8Assert-AreEqual $policy.StorageKeyType "Primary"Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -StorageKeyType "Secondary" -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.BlobStorageTargetState "Enabled"Assert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual $policy.RetentionInDays 8Assert-AreEqual $policy.StorageKeyType "Secondary"Set-AzSqlServerAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.BlobStorageTargetState "Disabled"}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-BlobAuditWithAuditActionGroups{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.AuditActionGroup.Length 3Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::BATCH_COMPLETED_GROUP)}Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP","DATABASE_OBJECT_PERMISSION_CHANGE_GROUP"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::APPLICATION_ROLE_CHANGE_PASSWORD_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_OBJECT_PERMISSION_CHANGE_GROUP)} Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "DATABASE_OPERATION_GROUP","DATABASE_LOGOUT_GROUP"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_OPERATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_LOGOUT_GROUP)}Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_OPERATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_LOGOUT_GROUP)}Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.AuditActionGroup.Length 3Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::BATCH_COMPLETED_GROUP)}Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP","DATABASE_OBJECT_PERMISSION_CHANGE_GROUP"$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::APPLICATION_ROLE_CHANGE_PASSWORD_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_OBJECT_PERMISSION_CHANGE_GROUP)}Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "DATABASE_OPERATION_GROUP","DATABASE_LOGOUT_GROUP"$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_OPERATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_LOGOUT_GROUP)}Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $policy.AuditActionGroup.Length 2Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_OPERATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::DATABASE_LOGOUT_GROUP)}}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-ExtendedAuditOnServer{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "" $policy.PredicateExpressionSet-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8 -PredicateExpression "statement <> 'select 1'"$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "statement <> 'select 1'" $policy.PredicateExpressionSet-AzSqlServerAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateSet-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "statement <> 'select 1'" $policy.PredicateExpressionSet-AzSqlServerAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8 -PredicateExpression ""$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "" $policy.PredicateExpressionSet-AzSqlServerAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-ExtendedAuditOnDatabase{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffixtry{Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "" $policy.PredicateExpressionSet-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8 -PredicateExpression "statement <> 'select 1'"$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "statement <> 'select 1'" $policy.PredicateExpressionSet-AzSqlDatabaseAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName $policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateSet-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "statement <> 'select 1'" $policy.PredicateExpressionSet-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8 -PredicateExpression ""$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual "" $policy.PredicateExpressionSet-AzSqlDatabaseAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName }finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-AuditOnDatabase{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/" + $params.databaseNametry{Assert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count$policy = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseAuditAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-Null $policy.PredicateExpressionAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdGet-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlDatabaseAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlDatabaseAudit -LogAnalyticsTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -WorkspaceResourceId $workspaceResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlDatabaseAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlDatabaseAudit -LogAnalyticsTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlDatabaseAudit -EventHubTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-RemoveAuditOnDatabase{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/" + $params.databaseNametry{Assert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count$policy = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseAuditAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-Null $policy.PredicateExpressionAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdGet-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Set-AzSqlDatabaseAudit -BlobStorageTargetState Enabled -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlDatabaseAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlDatabaseAudit -LogAnalyticsTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -WorkspaceResourceId $workspaceResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-AuditOnServer{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/master"try{Assert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count$policy = Get-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Get-AzSqlServerAuditAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdGet-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Set-AzSqlServerAudit -BlobStorageTargetState Enabled -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlServerAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlServerAudit -LogAnalyticsTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -WorkspaceResourceId $workspaceResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlServerAudit -BlobStorageTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlServerAudit -LogAnalyticsTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlServerAudit -EventHubTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDays$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count}	finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-RemoveAuditOnServer{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/master"try{Assert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count$policy = Get-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Get-AzSqlServerAuditAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdGet-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Set-AzSqlServerAudit -BlobStorageTargetState Enabled -StorageAccountResourceId $params.storageAccountResourceId -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP", "FAILED_DATABASE_AUTHENTICATION_GROUP" -RetentionInDays 8$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlServerAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countSet-AzSqlServerAudit -LogAnalyticsTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -WorkspaceResourceId $workspaceResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.BlobStorageTargetStateAssert-AreEqual $params.storageAccountResourceId $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-AreEqual 8 $policy.RetentionInDaysAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 1 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.BlobStorageTargetStateAssert-AreEqual 2 $policy.AuditActionGroup.LengthAssert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP)}Assert-True {$policy.AuditActionGroup.Contains([Microsoft.Azure.Commands.Sql.Auditing.Model.AuditActionGroups]::FAILED_DATABASE_AUTHENTICATION_GROUP)}Assert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.StorageAccountResourceIdAssert-AreEqual "Primary" $policy.StorageKeyTypeAssert-Null $policy.RetentionInDaysAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-NewDatabaseAuditDiagnosticsAreCreatedOnNeed{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/" + $params.databaseNametry{$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-Null $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdSet-AzSqlDatabaseAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsightsSet-AzSqlDatabaseAudit -LogAnalyticsTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -WorkspaceResourceId $workspaceResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsights$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceSet-AzSqlDatabaseAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsights$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdSet-AzSqlDatabaseAudit -EventHubTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdSet-AzSqlDatabaseAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsightsSet-AzSqlDatabaseAudit -LogAnalyticsTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceSet-AzSqlDatabaseAudit -EventHubTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-NewServerAuditDiagnosticsAreCreatedOnNeed{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/master"try{$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdSet-AzSqlServerAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count (($diagnostics).count + "1")$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsightsSet-AzSqlServerAudit -LogAnalyticsTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -WorkspaceResourceId $workspaceResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).count "2"Remove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count "3"$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsights$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceSet-AzSqlServerAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).count "4"Remove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count "5"$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsights$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdSet-AzSqlServerAudit -EventHubTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).count "6"Remove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count "7"$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceIdSet-AzSqlServerAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Enabled" $policy.LogAnalyticsTargetStateAssert-AreEqual $workspaceResourceId $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count "8"$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsightsSet-AzSqlServerAudit -LogAnalyticsTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).count "9"Remove-AzDiagnosticSetting -ResourceId $resourceId -Name $settingsName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceSet-AzSqlServerAudit -EventHubTargetState Disabled -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdAssert-AreEqual 0 (Get-AzDiagnosticSetting -ResourceId $resourceId).count}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-RemoveDatabaseAuditingSettingsMultipleDiagnosticSettings{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/" + $params.databaseNametry{$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-Null $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdSet-AzSqlDatabaseAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsightsSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Category SQLSecurityAuditEvents -WorkspaceId $workspaceResourceIdAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$policy = Get-AzSqlDatabaseAudit -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual 0 $policy.AuditAction.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$foundAuditCategory = $FalseForeach ($log in $diagnostics[0].Logs){if ($log.Category -eq "SQLSecurityAuditEvents"){$foundAuditCategory = $TrueAssert-AreEqual $False $log.Enabledbreak}}Assert-AreEqual $True $foundAuditCategory}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}function Test-RemoveServerAuditingSettingsMultipleDiagnosticSettings{$testSuffix = getAssetNameCreate-BlobAuditingTestEnvironment $testSuffix$params = Get-SqlBlobAuditingTestEnvironmentParameters $testSuffix$subscriptionId = (Get-AzContext).Subscription.Id$workspaceResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.operationalinsights/workspaces/" + $params.workspaceName$eventHubAuthorizationRuleResourceId = "/subscriptions/" + $subscriptionId + "/resourcegroups/" + $params.rgname + "/providers/microsoft.EventHub/namespaces/" + $params.eventHubNamespace + "/authorizationrules/RootManageSharedAccessKey"$resourceId = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $params.rgname + "/providers/Microsoft.Sql/servers/" + $params.serverName + "/databases/master"try{$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 0 $policy.AuditActionGroup.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceIdSet-AzSqlServerAudit -EventHubTargetState Enabled -ResourceGroupName $params.rgname -ServerName $params.serverName -EventHubAuthorizationRuleResourceId $eventHubAuthorizationRuleResourceId -BlobStorageTargetState Enabled -StorageAccountResourceId $params.storageAccountResourceId$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Enabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-AreEqual $eventHubAuthorizationRuleResourceId $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$settingsName = ($diagnostics)[0].NameSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Name $settingsName -Category SQLInsightsSet-AzDiagnosticSetting -ResourceId $resourceId -Enabled $True -Category SQLSecurityAuditEvents -WorkspaceId $workspaceResourceIdAssert-AreEqual 2 (Get-AzDiagnosticSetting -ResourceId $resourceId).countRemove-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverName$policy = Get-AzSqlServerAudit -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual "Disabled" $policy.EventHubTargetStateAssert-AreEqual 3 $policy.AuditActionGroup.LengthAssert-AreEqual "" $policy.PredicateExpressionAssert-Null $policy.EventHubAuthorizationRuleResourceIdAssert-Null $policy.EventHubNamespaceAssert-AreEqual "Disabled" $policy.LogAnalyticsTargetStateAssert-Null $policy.WorkspaceResourceId$diagnostics = Get-AzDiagnosticSetting -ResourceId $resourceIdAssert-AreEqual 1 ($diagnostics).count$foundAuditCategory = $FalseForeach ($log in $diagnostics[0].Logs){if ($log.Category -eq "SQLSecurityAuditEvents"){$foundAuditCategory = $TrueAssert-AreEqual $False $log.Enabledbreak}}Assert-AreEqual $True $foundAuditCategory}finally{Remove-BlobAuditingTestEnvironment $testSuffix}}