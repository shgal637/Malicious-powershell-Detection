function Test-VolumeCrud{$currentSub = (Get-AzureRmContext).Subscription	$subsid = $currentSub.SubscriptionId$resourceGroup = Get-ResourceGroupName$accName = Get-ResourceName$poolName = Get-ResourceName$poolName2 = Get-ResourceName$volName1 = Get-ResourceName$volName2 = Get-ResourceName$volName3 = Get-ResourceName$volName4 = Get-ResourceName$gibibyte = 1024 * 1024 * 1024$usageThreshold = 100 * $gibibyte$doubleUsage = 2 * $usageThreshold$resourceLocation = Get-ProviderLocation "Microsoft.NetApp"$subnetName = "default"$poolSize = 4398046511104$serviceLevel = "Premium"$vnetName = $resourceGroup + "-vnet"$subnetId = "/subscriptions/$subsId/resourceGroups/$resourceGroup/providers/Microsoft.Network/virtualNetworks/$vnetName/subnets/$subnetName"$rule1 = @{RuleIndex = 1UnixReadOnly = $falseUnixReadWrite = $trueCifs = $falseNfsv3 = $trueNfsv41 = $falseAllowedClients = '0.0.0.0/0'}$rule2 = @{RuleIndex = 2UnixReadOnly = $falseUnixReadWrite = $trueCifs = $falseNfsv3 = $falseNfsv41 = $trueAllowedClients = '1.2.3.0/24'}$rule3 = @{RuleIndex = 2UnixReadOnly = $falseUnixReadWrite = $trueCifs = $falseNfsv3 = $trueNfsv41 = $falseAllowedClients = '2.3.4.0/24'}$rule5 = @{RuleIndex = 1UnixReadOnly = $falseUnixReadWrite = $trueCifs = $falseNfsv3 = $falseNfsv41 = $trueAllowedClients = '1.2.3.0/24'}$exportPolicy = @{Rules = ($rule1, $rule2)}$exportPolicyv4 = @{Rules = ($rule5)}$exportPolicyMod = @{Rules = ($rule3)}$protocolTypes = New-Object string[] 1$protocolTypes[0] = "NFSv3"try{New-AzResourceGroup -Name $resourceGroup -Location $resourceLocation$virtualNetwork = New-AzVirtualNetwork -ResourceGroupName $resourceGroup -Location $resourceLocation -Name $vnetName -AddressPrefix 10.0.0.0/16$delegation = New-AzDelegation -Name "netAppVolumes" -ServiceName "Microsoft.Netapp/volumes"Add-AzVirtualNetworkSubnetConfig -Name $subnetName -VirtualNetwork $virtualNetwork -AddressPrefix "10.0.1.0/24" -Delegation $delegation | Set-AzVirtualNetwork$retrievedAcc = New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName $retrievedPool = New-AzNetAppFilesPool -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName -PoolSize $poolSize -ServiceLevel $serviceLevel$newTagName = "tag1"$newTagValue = "tagValue1"$retrievedVolume = New-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName -VolumeName $volName1 -CreationToken $volName1 -UsageThreshold $usageThreshold -ServiceLevel $serviceLevel -SubnetId $subnetId -Tag @{$newTagName = $newTagValue} -ExportPolicy $exportPolicy -ProtocolType $protocolTypesAssert-AreEqual "$accName/$poolName/$volName1" $retrievedVolume.NameAssert-AreEqual $serviceLevel $retrievedVolume.ServiceLevelAssert-AreEqual True $retrievedVolume.Tags.ContainsKey($newTagName)Assert-AreEqual "tagValue1" $retrievedVolume.Tags[$newTagName].ToString()Assert-NotNull $retrievedVolume.ExportPolicyAssert-AreEqual $retrievedVolume.ExportPolicy.Rules[0].AllowedClients '0.0.0.0/0'Assert-AreEqual $retrievedVolume.ExportPolicy.Rules[1].AllowedClients '1.2.3.0/24'Assert-AreEqual $retrievedVolume.ProtocolTypes[0] 'NFSv3'Assert-NotNull $retrievedVolume.MountTargets$protocolTypesv4 = New-Object string[] 1$protocolTypesv4[0] = "NFSv4.1"$retrievedVolume = New-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName -VolumeName $volName2 -CreationToken $volName2 -UsageThreshold $usageThreshold -ServiceLevel $serviceLevel -SubnetId $subnetId -ExportPolicy $exportPolicyv4 -ProtocolType $protocolTypesv4 -Confirm:$falseAssert-AreEqual "$accName/$poolName/$volName2" $retrievedVolume.NameAssert-AreEqual $serviceLevel $retrievedVolume.ServiceLevelAssert-AreEqual $retrievedVolume.ProtocolTypes[0] 'NFSv4.1'$retrievedVolume = New-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName -VolumeName $volName3 -CreationToken $volName2 -UsageThreshold $usageThreshold -ServiceLevel $serviceLevel -SubnetId $subnetId -WhatIf$retrievedVolume = Get-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolNameAssert-True {"$accName/$poolName/$volName1" -eq $retrievedVolume[0].Name -or "$accName/$poolName/$volName2" -eq $retrievedVolume[0].Name}Assert-True {"$accName/$poolName/$volName1" -eq $retrievedVolume[1].Name -or "$accName/$poolName/$volName2" -eq $retrievedVolume[1].Name}Assert-AreEqual 2 $retrievedVolume.Length$retrievedVolume = Get-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolName -VolumeName $volName1Assert-AreEqual "$accName/$poolName/$volName1" $retrievedVolume.Name$retrievedVolumeById = Get-AzNetAppFilesVolume -ResourceId $retrievedVolume.IdAssert-AreEqual "$accName/$poolName/$volName1" $retrievedVolumeById.NameAssert-AreEqual $retrievedVolume.ExportPolicy.Rules[0].AllowedClients '0.0.0.0/0'Assert-AreEqual $retrievedVolume.ExportPolicy.Rules[1].AllowedClients '1.2.3.0/24'$retrievedVolume = Update-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName -VolumeName $volName1 -UsageThreshold $doubleUsageAssert-AreEqual $doubleUsage $retrievedVolume.usageThresholdAssert-AreEqual "Premium" $retrievedVolume.ServiceLevelAssert-AreEqual $retrievedVolume.ExportPolicy.Rules[0].AllowedClients '0.0.0.0/0'Assert-AreEqual $retrievedVolume.ExportPolicy.Rules[1].AllowedClients '1.2.3.0/24'$rule4 = @{RuleIndex = 3UnixReadOnly = $falseUnixReadWrite = $trueCifs = $falseNfsv3 = $trueNfsv41 = $falseAllowedClients = '1.2.3.0/24'}$exportPolicyUpdate = @{Rules = ($rule2, $rule4)}$retrievedVolume = Update-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName -VolumeName $volName1 -ExportPolicy $exportPolicyUpdateAssert-AreEqual $retrievedVolume.ExportPolicy.Rules[0].AllowedClients '1.2.3.0/24'Remove-AzNetAppFilesVolume -ResourceId $retrievedVolumeById.IdRemove-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolName -Name $volName2 -WhatIf$retrievedVolume = Get-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolNameAssert-AreEqual 1 $retrievedVolume.LengthRemove-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolName -VolumeName $volName2$retrievedVolume = Get-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolNameAssert-AreEqual 0 $retrievedVolume.Length$retrievedPool = New-AzNetAppFilesPool -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName2 -PoolSize $poolSize -ServiceLevel "Standard"$newTagName = "tag1"$newTagValue = "tagValue1"$retrievedVolume = New-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName2 -VolumeName $volName4 -CreationToken $volName4 -UsageThreshold $doubleUsage -ServiceLevel "Standard" -SubnetId $subnetId -Tag @{$newTagName = $newTagValue} -ExportPolicy $exportPolicyAssert-AreEqual "$accName/$poolName2/$volName4" $retrievedVolume.NameAssert-AreEqual "Standard" $retrievedVolume.ServiceLevelAssert-AreEqual True $retrievedVolume.Tags.ContainsKey($newTagName)Assert-AreEqual "tagValue1" $retrievedVolume.Tags[$newTagName].ToString()Assert-NotNull $retrievedVolume.ExportPolicyAssert-AreEqual '0.0.0.0/0' $retrievedVolume.ExportPolicy.Rules[0].AllowedClientsAssert-AreEqual '1.2.3.0/24' $retrievedVolume.ExportPolicy.Rules[1].AllowedClientsAssert-AreEqual $retrievedVolume.ProtocolTypes[0] 'NFSv3'$retrievedVolume = Update-AzNetAppFilesVolume -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -PoolName $poolName2 -VolumeName $volName4 -ExportPolicy $exportPolicyModAssert-AreEqual '2.3.4.0/24' $retrievedVolume.ExportPolicy.Rules[0].AllowedClientsAssert-AreEqual "Standard" $retrievedVolume.ServiceLevelAssert-AreEqual $doubleUsage $retrievedVolume.usageThresholdAssert-AreEqual True $retrievedVolume.Tags.ContainsKey($newTagName)Assert-AreEqual "tagValue1" $retrievedVolume.Tags[$newTagName].ToString()}finally{Clean-ResourceGroup $resourceGroup}}function Test-VolumePipelines{$currentSub = (Get-AzureRmContext).Subscription	$subsid = $currentSub.SubscriptionId$resourceGroup = Get-ResourceGroupName$accName = Get-ResourceName$poolName = Get-ResourceName$volName1 = Get-ResourceName$volName2 = Get-ResourceName$gibibyte = 1024 * 1024 * 1024$usageThreshold = 100 * $gibibyte$doubleUsage = 2 * $usageThreshold$resourceLocation = Get-ProviderLocation "Microsoft.NetApp"$subnetName = "default"$poolSize = 4398046511104$serviceLevel = "Premium"$vnetName = $resourceGroup + "-vnet"$subnetId = "/subscriptions/$subsId/resourceGroups/$resourceGroup/providers/Microsoft.Network/virtualNetworks/$vnetName/subnets/$subnetName"try{New-AzResourceGroup -Name $resourceGroup -Location $resourceLocation$virtualNetwork = New-AzVirtualNetwork -ResourceGroupName $resourceGroup -Location $resourceLocation -Name $vnetName -AddressPrefix 10.0.0.0/16$delegation = New-AzDelegation -Name "netAppVolumes" -ServiceName "Microsoft.Netapp/volumes"Add-AzVirtualNetworkSubnetConfig -Name $subnetName -VirtualNetwork $virtualNetwork -AddressPrefix "10.0.1.0/24" -Delegation $delegation | Set-AzVirtualNetwork$retrievedAcc = New-AnfAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName New-AnfPool -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName -Name $poolName -PoolSize $poolSize -ServiceLevel $serviceLevel $retrievedVolume = Get-AnfPool -ResourceGroupName $resourceGroup -AccountName $accName -Name $poolName | New-AnfVolume -Name $volName1 -CreationToken $volName1 -UsageThreshold $usageThreshold -SubnetId $subnetId -ServiceLevel $serviceLevelAssert-AreEqual "$accName/$poolName/$volName1" $retrievedVolume.NameAssert-AreEqual "Premium" $retrievedVolume.ServiceLeveltry{$retrievedVolume = Get-AnfPool -ResourceGroupName $resourceGroup -AccountName $accName -Name $poolName | New-AnfVolume -Name $volName2 -CreationToken $volName2 -UsageThreshold $usageThreshold -ServiceLevel "Standard" -SubnetId $subnetIdAssert-AreEqual "$accName/$poolName/$volName2" $retrievedVolume.NameAssert-AreEqual "Standard" $retrievedVolume.ServiceLevelAssert-True { $false }}catch{Assert-True { $true }}$retrievedVolume = Get-AnfVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolName -Name $volName1 | Update-AnfVolume -UsageThreshold $doubleUsageAssert-AreEqual "Premium" $retrievedVolume.ServiceLevel  Assert-AreEqual $doubleUsage $retrievedVolume.usageThreshold$retrievedVolume = Get-AnfVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolName$numVolumes = $retrievedVolume.LengthGet-AnfVolume -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolName -Name $volName1 | Remove-AnfVolume$retrievedVolume = Get-AnfPool -ResourceGroupName $resourceGroup -AccountName $accName -PoolName $poolName | Get-AnfVolume Assert-AreEqual ($numVolumes-1) $retrievedVolume.Length}finally{Clean-ResourceGroup $resourceGroup}}