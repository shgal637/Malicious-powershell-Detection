function Test-AzureContainerRegistry{$resourceGroupName = Get-RandomResourceGroupName$classicRegistryName = Get-RandomRegistryName$location = Get-ProviderLocation "Microsoft.ContainerRegistry/registries"$replicationLocation = 'westus2'try{New-AzResourceGroup -Name $resourceGroupName -Location $location$classicRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryName -Sku "Classic"Verify-ContainerRegistry $classicRegistry $resourceGroupName $classicRegistryName "Classic" $null $false$nameStatus = Test-AzContainerRegistryNameAvailability -Name $classicRegistryNameAssert-True {!$nameStatus.nameAvailable}Assert-AreEqual "AlreadyExists" $nameStatus.ReasonAssert-AreEqual "The registry $($classicRegistryName) is already in use." $nameStatus.Message$storageAccountName = $classicRegistry.StorageAccountName$retrievedRegistry = Get-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryNameVerify-ContainerRegistry $retrievedRegistry $resourceGroupName $classicRegistryName "Classic" $storageAccountName $false$basicRegistryName = Get-RandomRegistryName$basicRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $basicRegistryName -Sku "Basic" -EnableAdminUserVerify-ContainerRegistry $basicRegistry $resourceGroupName $basicRegistryName "Basic" $null $true$standardRegistryName = Get-RandomRegistryName$standardRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $standardRegistryName -Sku "Standard"Verify-ContainerRegistry $standardRegistry $resourceGroupName $standardRegistryName "Standard" $null $false$premiumRegistryName = Get-RandomRegistryName$premiumRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName -Sku "Premium"Verify-ContainerRegistry $premiumRegistry $resourceGroupName $premiumRegistryName "Premium" $null $false$registry = Get-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName -IncludeDetailAssert-AreEqual "Size" $registry.Usages[0].NameAssert-AreEqual "Webhooks" $registry.Usages[1].Name$registries = Get-AzContainerRegistry -ResourceGroupName $resourceGroupNameAssert-AreEqual 4 $registries.Countforeach($r in $registries){switch($r.SkuName){"Classic" { Verify-ContainerRegistry $r $resourceGroupName $classicRegistryName "Classic" $storageAccountName $false }"Basic" { Verify-ContainerRegistry $r $resourceGroupName $basicRegistryName "Basic" $null $true }"Standard" { Verify-ContainerRegistry $r $resourceGroupName $standardRegistryName "Standard" $null $false }"Premium" { Verify-ContainerRegistry $r $resourceGroupName $premiumRegistryName "Premium" $null $false }}}Get-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryName | Remove-AzContainerRegistryGet-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $standardRegistryName | Remove-AzContainerRegistryRemove-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryNameRemove-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $basicRegistryName$registries = Get-AzContainerRegistry -ResourceGroupName $resourceGroupNameAssert-AreEqual 0 $registries.Count$classicRegistryName = Get-RandomRegistryName$classicRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryName -Sku "Classic" -StorageAccountName $storageAccountNameVerify-ContainerRegistry $classicRegistry $resourceGroupName $classicRegistryName "Classic" $storageAccountName $false$premiumRegistryName = Get-RandomRegistryNameAssert-Error {New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName -Sku "Premium" -StorageAccountName $storageAccountName} "User cannot provide storage account in SKU Premium"$updatedClassicRegistry = Update-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryName -EnableAdminUser -StorageAccountName $storageAccountNameVerify-ContainerRegistry $updatedClassicRegistry $resourceGroupName $classicRegistryName "Classic" $storageAccountName $true$premiumRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName -Sku "Premium"Assert-Error {Update-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName -EnableAdminUser -StorageAccountName $storageAccountName} "Storage account cannot be updated in SKU Premium"Get-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName | Update-AzContainerRegistry -DisableAdminUserVerify-ContainerRegistry $premiumRegistry $resourceGroupName $premiumRegistryName "Premium" $null $falseRemove-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryName	}finally{Remove-AzResourceGroup -Name $resourceGroupName -Force}}function Verify-ContainerRegistry{param([Microsoft.Azure.Commands.ContainerRegistry.PSContainerRegistry] $registry, [string] $resourceGroupName, [string] $registryName, [string] $sku, [string] $storageAccountName, [bool] $adminUserEnabled) Assert-NotNull $registryAssert-AreEqual $resourceGroupName $registry.ResourceGroupNameAssert-AreEqual $registryName  $registry.NameAssert-AreEqual "Microsoft.ContainerRegistry/registries" $registry.TypeAssert-AreEqual $sku $registry.SkuNameAssert-AreEqual $sku $registry.SkuTier Assert-AreEqual "$($registryName.ToLower()).azurecr.io" $registry.LoginServerAssert-AreEqual "Succeeded" $registry.ProvisioningStateAssert-AreEqual $adminUserEnabled $registry.AdminUserEnabledIf($sku -eq 'Classic'){If(!$storageAccountName){Assert-NotNull $registry.StorageAccountName}Else{Assert-AreEqual $storageAccountName $registry.StorageAccountName}}Else{Assert-Null $registry.StorageAccountName}}function Test-AzureContainerRegistryCredential{$resourceGroupName = Get-RandomResourceGroupName    $location = Get-ProviderLocation "Microsoft.ContainerRegistry/registries"New-AzResourceGroup -Name $resourceGroupName -Location $locationTest-AzureContainerRegistryCredentialBySku $resourceGroupName $location "Classic"Test-AzureContainerRegistryCredentialBySku $resourceGroupName $location "Basic"	Test-AzureContainerRegistryCredentialBySku $resourceGroupName $location "Standard"	Test-AzureContainerRegistryCredentialBySku $resourceGroupName $location "Premium"	Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-AzureContainerRegistryCredentialBySku{param([string] $resourceGroupName, [string] $location, [string] $sku) $registryName = Get-RandomRegistryName$registry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $registryName -Sku $sku -EnableAdminUserVerify-ContainerRegistry $registry $resourceGroupName $registryName $sku $null $true$credential = Get-AzContainerRegistryCredential -ResourceGroupName $resourceGroupName -Name $registryNameAssert-AreEqual $registryName $credential.UsernameAssert-NotNull $credential.PasswordAssert-NotNull $credential.Password2$newCredential1 = Update-AzContainerRegistryCredential -ResourceGroupName $resourceGroupName -Name $registryName -PasswordName PasswordAssert-AreEqual $registryName $newCredential1.UsernameAssert-AreNotEqual $credential.Password $newCredential1.PasswordAssert-AreEqual $credential.Password2 $newCredential1.Password2$newCredential2 = Update-AzContainerRegistryCredential -ResourceGroupName $resourceGroupName -Name $registryName -PasswordName Password2Assert-AreEqual $registryName $newCredential2.UsernameAssert-AreEqual $newCredential1.Password $newCredential2.PasswordAssert-NotNull $newCredential1.Password2 $newCredential2.Password2}function Test-AzureContainerRegistryNameAvailability{$nameStatus = Test-AzContainerRegistryNameAvailability -Name $(Get-RandomRegistryName)Assert-True {$nameStatus.nameAvailable}Assert-Null $nameStatus.ReasonAssert-Null $nameStatus.Message$nameStatus = Test-AzContainerRegistryNameAvailability -Name "Microsoft"Assert-True {!$nameStatus.nameAvailable}Assert-AreEqual "Invalid" $nameStatus.ReasonAssert-AreEqual "The specified resource name is disallowed" $nameStatus.Message}function Test-AzureContainerRegistryReplication{$resourceGroupName = Get-RandomResourceGroupName    $location = Get-ProviderLocation "Microsoft.ContainerRegistry/registries"try{$replicationLocation = "centralus"$replicationLocation2 = "westus2"New-AzResourceGroup -Name $resourceGroupName -Location $location$classicRegistryName = Get-RandomRegistryName$classicRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryName -Sku "Classic" -Location $locationAssert-Error {New-AzContainerRegistryReplication -Registry $classicRegistry -Location $replicationLocation} "The resource type replications is not supported for the registry"$basicRegistryName = Get-RandomRegistryName$basicRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $basicRegistryName -Sku "Basic" -Location $locationAssert-Error {New-AzContainerRegistryReplication -Registry $basicRegistry -Location $replicationLocation} "The resource type replications is not supported for the registry"$standardRegistryName = Get-RandomRegistryName$standardRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $standardRegistryName -Sku "Standard" -Location $locationAssert-Error {New-AzContainerRegistryReplication -Registry $standardRegistry -Location $replicationLocation} "The resource type replications is not supported for the registry"$premiumRegistryName = Get-RandomRegistryName$replicationName = Get-RandomReplicationName$premiumRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName -Sku "Premium" -Location $location$replication = New-AzContainerRegistryReplication -ResourceGroupName $premiumRegistry.ResourceGroupName -RegistryName $premiumRegistry.Name -Location $replicationLocation -Name $replicationName -Tag @{key='val'}Verify-AzureContainerRegistryReplication $replication $replicationLocation @{key='val'} $replicationName$replication2 = New-AzContainerRegistryReplication -ResourceGroupName $premiumRegistry.ResourceGroupName -RegistryName $premiumRegistry.Name -Location $replicationLocation2Verify-AzureContainerRegistryReplication $replication2 $replicationLocation2$replications = Get-AzContainerRegistryReplication -Registry $premiumRegistryAssert-AreEqual 3 $replications.CountRemove-AzContainerRegistryReplication -ResourceGroupName $premiumRegistry.ResourceGroupName -RegistryName $premiumRegistry.Name -Name $replication2.Name$replications = Get-AzContainerRegistryReplication -ResourceGroupName $premiumRegistry.ResourceGroupName -RegistryName $premiumRegistry.NameAssert-AreEqual 2 $replications.Count}finally{Remove-AzResourceGroup -Name $resourceGroupName -Force}}function Verify-AzureContainerRegistryReplication{param([Microsoft.Azure.Commands.ContainerRegistry.PSContainerRegistryReplication] $replication, [string] $location, [System.Collections.Hashtable] $tags = $null, [string] $name = $location)Assert-NotNull $replicationAssert-AreEqual $name $replication.NameAssert-AreEqual $location $replication.LocationAssert-AreEqual "Microsoft.ContainerRegistry/registries/replications" $replication.TypeAssert-AreEqual "Succeeded"	$replication.ProvisioningStateAssert-NotNull $replication.StatusTimestampAssert-True { ($replication.Status -eq "Syncing") -or ($replication.Status -eq "Ready") }if($tags){Verify-Dictionary $tags $replication.Tags}}function Verify-Dictionary{param([System.Collections.Hashtable] $expected, [System.Collections.Generic.Dictionary`2[System.String,System.String]] $actual)Assert-AreEqualArray $expected.Keys $actual.KeysAssert-AreEqualArray $expected.Values $actual.Values}function Test-AzureContainerRegistryWebhook{$resourceGroupName = Get-RandomResourceGroupName    $location = Get-ProviderLocation "Microsoft.ContainerRegistry/registries"try{$replicationLocation = "centralus"$replicationLocation2 = "westus2"$webhookUri = "http://bing.com/"$webhookUri2 = "http://microsoft.com/"New-AzResourceGroup -Name $resourceGroupName -Location $location		$classicRegistryName = Get-RandomRegistryName$webhookName = Get-RandomWebhookName$classicRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $classicRegistryName -Sku "Classic" -Location $locationAssert-Error {New-AzContainerRegistryWebhook -Registry $classicRegistry -Location $location -Name $webhookName -Action "push","delete" -Uri $webhookUri} "The resource type webhooks is not supported for the registry"$basicRegistryName = Get-RandomRegistryName$webhookName = Get-RandomWebhookName$basicRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $basicRegistryName -Sku "Basic" -Location $replicationLocation$webhook = New-AzContainerRegistryWebhook -Registry $basicRegistry -Name $webhookName -Action "push","delete" -Uri $webhookUri -Location $replicationLocationVerify-AzureContainerRegistryWebhook $webhook $webhookName $replicationLocation "push","delete"$standardRegistryName = Get-RandomRegistryName$webhookName = Get-RandomWebhookName$standardRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $standardRegistryName -Sku "Standard" -Location $replicationLocation$webhook = New-AzContainerRegistryWebhook -Registry $standardRegistry -Name $webhookName -Action "push","delete" -Uri $webhookUriVerify-AzureContainerRegistryWebhook $webhook $webhookName $replicationLocation "push","delete"$premiumRegistryName = Get-RandomRegistryName$webhookName = Get-RandomWebhookName$premiumRegistry = New-AzContainerRegistry -ResourceGroupName $resourceGroupName -Name $premiumRegistryName -Sku "Premium" -Location $replicationLocation$webhook = New-AzContainerRegistryWebhook -Registry $premiumRegistry -Name $webhookName -Action "push","delete" -Uri $webhookUri -Tag @{key='val'} -Scope "foo:*"Verify-AzureContainerRegistryWebhook $webhook $webhookName $replicationLocation "push","delete" @{key='val'} "enabled" "foo:*"$webhookName2 = Get-RandomWebhookName$webhook2 = New-AzContainerRegistryWebhook  -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName2 -Action "push" -Uri $webhookUri -Status "Disabled"Verify-AzureContainerRegistryWebhook $webhook2 $webhookName2 $replicationLocation "push" $null "disabled"$webhook2 = Get-AzContainerRegistryWebhook  -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName2 -IncludeConfigurationAssert-AreEqual $webhookUri $webhook2.Config.ServiceUri$updatedWebhook = Update-AzContainerRegistryWebhook -Webhook $webhook2 -Action "push","delete" -Uri $webhookUri2 -Status "Enabled" -Tag @{key='val'} -Scope "foo:*" -Header @{customheader="abc";testheader="123"}Verify-AzureContainerRegistryWebhook $updatedWebhook $webhookName2 $replicationLocation "push","delete" @{key='val'} "enabled" "foo:*"$webhook2 = Get-AzContainerRegistryWebhook  -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName2 -IncludeConfigurationAssert-AreEqual $webhookUri2 $webhook2.Config.ServiceUriVerify-Dictionary @{customheader="abc";testheader="123"} $webhook2.Config.CustomHeaders$webhookName3 = Get-RandomWebhookNameAssert-Error {New-AzContainerRegistryWebhook  -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName3 -Action "push" -Uri $webhookUri -Location $replicationLocation2} "The registry resource $($premiumRegistryName) could not be found"New-AzContainerRegistryReplication -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Location $replicationLocation2$webhook3 = New-AzContainerRegistryWebhook -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName3 -Action "push" -Uri $webhookUri -Location $replicationLocation2Verify-AzureContainerRegistryWebhook $webhook3 $webhookName3 $replicationLocation2 "push"$webhooks = Get-AzContainerRegistryWebhook -Registry $premiumRegistryAssert-AreEqual 3 $webhooks.CountTest-AzContainerRegistryWebhook -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName3Test-AzContainerRegistryWebhook -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName3		$pingEvents = Get-AzContainerRegistryWebhookEvent  -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -WebhookName $webhookName3Assert-AreEqual 2 $pingEvents.Count$pingEvents = Get-AzContainerRegistryWebhookEvent  -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -WebhookName $webhookName2Assert-AreEqual 0 $pingEvents.CountRemove-AzContainerRegistryWebhook -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName2Remove-AzContainerRegistryWebhook -ResourceGroupName $resourceGroupName -RegistryName $premiumRegistryName -Name $webhookName3$webhooks = Get-AzContainerRegistryWebhook -Registry $premiumRegistryAssert-AreEqual 1 $webhooks.Count}finally{Remove-AzResourceGroup -Name $resourceGroupName -Force}}function Verify-AzureContainerRegistryWebhook{param([Microsoft.Azure.Commands.ContainerRegistry.PSContainerRegistryWebhook] $webhook, [string] $name, [string] $location, [Array] $actions, [Hashtable] $tags = $null, [string] $status="enabled", [string] $scope = "")Assert-NotNull $webhookAssert-AreEqual $name $webhook.NameAssert-AreEqual "Microsoft.ContainerRegistry/registries/webhooks" $webhook.TypeAssert-AreEqual $location $webhook.LocationAssert-AreEqual $status $webhook.StatusAssert-AreEqual "Succeeded" $webhook.ProvisioningStateAssert-AreEqualArray $actions $webhook.Actionsif($scope){Assert-AreEqual $scope $webhook.Scope}if($tags){Verify-Dictionary $tags $webhook.Tags}}