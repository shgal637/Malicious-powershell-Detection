function Test-DataLakeStoreTrustedIdProvider{param($location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AdlStore -Name $accountName}$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -Encryption ServiceManagedAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account is not in succeeded state even after 30 min."}Assert-True {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}$trustedIdName = getAssetName$trustedIdEndpoint = "https://sts.windows.net/6b04908c-b91f-40ce-8024-7ee8a4fd6150"Assert-AreEqual "Disabled" $accountCreated.TrustedIdProviderState$accountSet = Set-AdlStore -Name $accountName -TrustedIdProviderState EnabledAssert-AreEqual "Enabled" $accountSet.TrustedIdProviderStateAdd-AdlStoreTrustedIdProvider -AccountName $accountName -Name $trustedIdName -ProviderEndpoint $trustedIdEndpoint$result = Get-AdlStoreTrustedIdProvider -AccountName $accountName -Name $trustedIdNameAssert-AreEqual $trustedIdName $result.NameAssert-AreEqual $trustedIdEndpoint $result.IdProviderRemove-AdlStoreTrustedIdProvider -AccountName $accountName -Name $trustedIdNameAssert-Throws {Get-AdlStoreTrustedIdProvider -AccountName $accountName -Name $trustedIdName}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeStoreFirewall{param($location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AdlStore -Name $accountName}$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -Encryption ServiceManagedAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account is not in succeeded state even after 30 min."}Assert-True {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-AreEqual "Disabled" $accountCreated.FirewallState $accountSet = Set-AdlStore -Name $accountName -FirewallState "Enabled" -AllowAzureIpState "Enabled"Assert-AreEqual "Enabled" $accountSet.FirewallState$firewallRuleName = getAssetName$startIp = "127.0.0.1"$endIp = "127.0.0.2"Add-AdlStoreFirewallRule -AccountName $accountName -Name $firewallRuleName -StartIpAddress $startIp -EndIpAddress $endIp$result = Get-AdlStoreFirewallRule -AccountName $accountName -Name $firewallRuleNameAssert-AreEqual $firewallRuleName $result.NameAssert-AreEqual $startIp $result.StartIpAddressAssert-AreEqual $endIp $result.EndIpAddressRemove-AdlStoreFirewallRule -AccountName $accountName -Name $firewallRuleNameAssert-Throws {Get-AdlStoreFirewallRule -AccountName $accountName -Name $firewallRuleName}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeStoreVirtualNetwork{param($location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AdlStore -Name $accountName}$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -Encryption ServiceManagedAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account is not in succeeded state even after 30 min."}Assert-True {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-AreEqual "Disabled" $accountCreated.FirewallState $accountSet = Set-AdlStore -Name $accountName -FirewallState "Enabled" -AllowAzureIpState "Enabled"Assert-AreEqual "Enabled" $accountSet.FirewallState$virtualNetworkRuleName = getAssetName$vnetName1 = "vnet1"$virtualNetwork1 = CreateAndGetVirtualNetwork $resourceGroupName $vnetName1 $location$virtualNetworkSubnetId1 = $virtualNetwork1.Subnets[0].Id$vnetName2 = "vnet2"$virtualNetwork2 = CreateAndGetVirtualNetwork $resourceGroupName $vnetName2 $location$virtualNetworkSubnetId2 = $virtualNetwork2.Subnets[0].IdAdd-AdlStoreVirtualNetworkRule -Account $accountName -Name $vnetName1 -SubnetId $virtualNetworkSubnetId1$result = Get-AdlStoreVirtualNetworkRule -Account $accountName -Name $vnetName1Assert-AreEqual $vnetName1 $result.VirtualNetworkRuleNameAssert-AreEqual $virtualNetworkSubnetId1 $result.VirtualNetworkSubnetIdRemove-AdlStoreVirtualNetworkRule -Account $accountName -Name $vnetName1Assert-Throws {Get-AdlStoreVirtualNetworkRule -Account $accountName -Name $vnetName1}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeStoreAccountTiers{param($location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountName$secondAccountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AdlStore -Name $accountName}$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $locationAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}Assert-AreEqual "Consumption" $accountCreated.CurrentTierAssert-AreEqual "Consumption" $accountCreated.NewTier$accountUpdated = Set-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Tier Commitment1TBAssert-AreEqual "Consumption" $accountUpdated.CurrentTierAssert-AreEqual "Commitment1TB" $accountUpdated.NewTier$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $secondAccountName -Location $location -Tier Commitment1TBAssert-AreEqual "Commitment1TB" $accountCreated.CurrentTierAssert-AreEqual "Commitment1TB" $accountCreated.NewTier}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $secondAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeStoreAccount{param($location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AdlStore -Name $accountName}$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -Encryption ServiceManagedAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}Assert-True {$accountGet[0].Identity -ne $null}Assert-True {$accountGet[0].EncryptionConfig -ne $null}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account is not in succeeded state even after 30 min."}Assert-True {Test-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}Assert-True {Test-AdlStore -Name $accountName}$tagsToUpdate = @{"TestTag" = "TestUpdate"}$accountUpdated = Set-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Tag $tagsToUpdateAssert-AreEqual $accountName $accountUpdated.NameAssert-AreEqual $location $accountUpdated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountUpdated.TypeAssert-True {$accountUpdated.Id -like "*$resourceGroupName*"}Assert-NotNull $accountUpdated.Tags "Tags do not exists"Assert-NotNull $accountUpdated.Tags["TestTag"] "The updated tag 'TestTag' does not exist"[array]$accountsInResourceGroup = Get-AdlStore -ResourceGroupName $resourceGroupNameAssert-True {$accountsInResourceGroup.Count -ge 1}$found = 0for ($i = 0; $i -lt $accountsInResourceGroup.Count; $i++){if ($accountsInResourceGroup[$i].Name -eq $accountName){$found = 1Assert-AreEqual $location $accountsInResourceGroup[$i].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountsInResourceGroup[$i].TypeAssert-True {$accountsInResourceGroup[$i].Id -like "*$resourceGroupName*"}break}}Assert-True {$found -eq 1} "Account created earlier is not found when listing all in resource group: $resourceGroupName."[array]$accountsInSubscription = Get-AdlStoreAssert-True {$accountsInSubscription.Count -ge 1}Assert-True {$accountsInSubscription.Count -ge $accountsInResourceGroup.Count}$found = 0for ($i = 0; $i -lt $accountsInSubscription.Count; $i++){if ($accountsInSubscription[$i].Name -eq $accountName){$found = 1Assert-AreEqual $location $accountsInSubscription[$i].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountsInSubscription[$i].TypeAssert-True {$accountsInSubscription[$i].Id -like "*$resourceGroupName*"}break}}Assert-True {$found -eq 1} "Account created earlier is not found when listing all in subscription."$secondAccountName = Get-DataLakeStoreAccountName$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $secondAccountName -Location $locationAssert-True {$accountCreated.EncryptionConfig -ne $null}Assert-AreEqual "ServiceManaged" $accountCreated.EncryptionConfig.TypeAssert-AreEqual "Enabled" $accountCreated.EncryptionStateAssert-Throws {Enable-AdlStoreKeyVault -ResourceGroupName $resourceGroupName -Account $secondAccountName}$thirdAccountName = Get-DataLakeStoreAccountName$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $thirdAccountName -Location $location -DisableEncryptionAssert-True {[string]::IsNullOrEmpty(($accountCreated.EncryptionConfig.Type))}Assert-AreEqual "Disabled" $accountCreated.EncryptionStateAssert-True {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $secondAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $thirdAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeStoreFileSystem{param($fileToCopy,$location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $location$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DisableEncryptionAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account is not in succeeded state even after 30 min."}$encodingFolder="/encodingFolder"$folderToCreate = "/adlspstestfolder"$emptyFilePath = "$folderToCreate\emptyfile.txt" $contentFilePath = "$folderToCreate/contentfile.txt"$unicodeContentFilePath="$encodingFolder/unicodecontentfile.txt"$unicodetext="I am unicode text"$utf32ContentFilePath="$encodingFolder/utf32contentfile.txt"$utf32text="I am utf32 text"$concatFile = "$folderToCreate/concatfile.txt"$moveFile = "$folderToCreate/movefile.txt"$movefolder = "/adlspstestmovefolder"$importFile = "$folderToCreate/importfile.txt"$content = "Test file content! @ Azure PsTest01?"$summaryFolder="/adlspstestsummaryfolder"$subFolderToCreate = "$summaryFolder/Folder0"$subSubFolderToCreate = "$summaryFolder/Folder0/SubFolder0"$subFileToCreate = "$summaryFolder/File0"$result = New-AdlStoreItem -Account $accountName -path $folderToCreate -FolderAssert-NotNull $result "No value was returned on folder creation"$result = Get-AdlStoreItem -Account $accountName -path $folderToCreateAssert-NotNull $result "No value was returned on folder get"Assert-AreEqual "Directory" $result.Type$result = New-AdlStoreItem -Account $accountName -path $emptyFilePathAssert-NotNull $result "No value was returned on empty file creation"$result = Get-AdlStoreItem -Account $accountName -path $emptyFilePath$emptyFileCreationDate=$result.LastWriteTime Assert-NotNull $result "No value was returned on empty file get"Assert-AreEqual "File" $result.TypeAssert-AreEqual 0 $result.Length$result = New-AdlStoreItem -Account $accountName -path $contentFilePath -Value $contentAssert-NotNull $result "No value was returned on content file creation"$result = Get-AdlStoreItem -Account $accountName -path $contentFilePathAssert-NotNull $result "No value was returned on content file get"Assert-AreEqual "File" $result.TypeAssert-AreEqual $content.length $result.Length$result = New-AdlStoreItem -Account $accountName -path $unicodeContentFilePathAssert-NotNull $result "No value was returned on content file creation"Add-AdlStoreItemContent -Account $accountName -Path $unicodeContentFilePath -Value $unicodetext -Encoding Unicode$retrievedContent = Get-AdlStoreItemContent -Account $accountName -Path $unicodeContentFilePath -Encoding UnicodeAssert-AreEqual $unicodetext $retrievedContent$result = New-AdlStoreItem -Account $accountName -path $utf32ContentFilePath -Value $utf32text -Encoding UTF32Assert-NotNull $result "No value was returned on content file creation"$retrievedContent = Get-AdlStoreItemContent -Account $accountName -Path $utf32ContentFilePath -Encoding UTF32Assert-AreEqual $utf32text $retrievedContentAssert-True {253402300800000 -ge $result.ExpirationTime -or 0 -le $result.ExpirationTime} [DateTimeOffset]$timeToUse = [Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::GetVariable("absoluteTime", [DateTimeOffset]::UtcNow.AddSeconds(120))$result = Set-AdlStoreItemExpiry -Account $accountName -path $contentFilePath -Expiration $timeToUseAssert-NumAreInRange $timeToUse.UtcTicks $result.Expiration.UtcTicks 500000 $result = Set-AdlStoreItemExpiry -Account $accountName -path $contentFilePathAssert-True {253402300800000 -ge $result.ExpirationTime -or 0 -le $result.ExpirationTime} $result = Get-AdlStoreChildItem -Account $accountName -path $folderToCreateAssert-NotNull $result "No value was returned on folder list"Assert-AreEqual 2 $result.lengthAdd-AdlStoreItemContent -Account $accountName -Path $emptyFilePath -Value $content$result = Get-AdlStoreItem -Account $accountName -path $emptyFilePathAssert-NotNull $result "No value was returned on empty file get with content added"Assert-AreEqual "File" $result.TypeAssert-AreEqual $content.length $result.Length$result = Join-AdlStoreItem -Account $accountName -Paths $emptyFilePath,$contentFilePath -Destination $concatFileAssert-NotNull $result "No value was returned on concat file"$result = Get-AdlStoreItem -Account $accountName -path $concatFileAssert-NotNull $result "No value was returned on concat file get"Assert-AreEqual "File" $result.TypeAssert-AreEqual $($content.length*2) $result.Length$previewContent = Get-AdlStoreItemContent -Account $accountName -Path $concatFileAssert-AreEqual $($content.length*2) $previewContent.Length$previewContent = Get-AdlStoreItemContent -Account $accountName -Path $concatFile -Offset 2Assert-AreEqual $(($content.length*2) - 2) $previewContent.Length$previewContent = Get-AdlStoreItemContent -Account $accountName -Path $concatFile -Offset 2 -Length $content.LengthAssert-AreEqual $content.length $previewContent.Length$previewHeadTailFile = "/headtail/filetest.txt"$headTailContent = @"1234"@New-AdlStoreItem -Account $accountName -Path $previewHeadTailFile -Force -Value $headTailContent$headTailResult = Get-AdlStoreItemContent -Account $accountName -Path $previewHeadTailFile -Head 2Assert-AreEqual 2 $headTailResult.LengthAssert-AreEqual 1 $headTailResult[0]Assert-AreEqual 2 $headTailResult[1]$headTailResult = Get-AdlStoreItemContent -Account $accountName -Path $previewHeadTailFile -Tail 2Assert-AreEqual 2 $headTailResult.LengthAssert-AreEqual 3 $headTailResult[0]Assert-AreEqual 4 $headTailResult[1]$localFileInfo = Get-ChildItem $fileToCopy$result = Import-AdlStoreItem -Account $accountName -Path $fileToCopy -Destination $importFileAssert-NotNull $result "No value was returned on import file"$result = Get-AdlStoreItem -Account $accountName -path $importFileAssert-NotNull $result "No value was returned on import file get"Assert-AreEqual "File" $result.TypeAssert-AreEqual $localFileInfo.length $result.Length$currentDir = Split-Path $fileToCopy$targetFile = Join-Path $currentDir "adlspstestdownload.txt"if(Test-Path $targetFile){Remove-Item -path $targetFile -force -confirm:$false}Export-AdlStoreItem -Account $accountName -Path $concatFile -Destination $targetFile$downloadedFileInfo = Get-ChildItem $targetFileAssert-AreEqual $($content.length*2) $downloadedFileInfo.lengthRemove-Item -path $targetFile -force -confirm:$false$result = Move-AdlStoreItem -Account $accountName -Path $concatFile -Destination $moveFileAssert-NotNull $result "No value was returned on move file"$result = Get-AdlStoreItem -Account $accountName -path $moveFileAssert-NotNull $result "No value was returned on move file get"Assert-AreEqual "File" $result.TypeAssert-AreEqual $($content.length*2) $result.LengthAssert-Throws {Get-AdlStoreItem -Account $accountName -path $concatFile}$result = Move-AdlStoreItem -Account $accountName -Path $folderToCreate -Destination $moveFolderAssert-NotNull $result "No value was returned on move folder"$result = Get-AdlStoreItem -Account $accountName -path $moveFolderAssert-NotNull $result "No value was returned on move folder get"Assert-AreEqual "Directory" $result.TypeAssert-AreEqual 0 $result.LengthAssert-Throws {Get-AdlStoreItem -Account $accountName -path $folderToCreate}$result = New-AdlStoreItem -Account $accountName -path $summaryFolder -FolderAssert-NotNull $result "No value was returned on folder creation"$result = New-AdlStoreItem -Account $accountName -path $subFolderToCreate -FolderAssert-NotNull $result "No value was returned on folder creation"$result = New-AdlStoreItem -Account $accountName -path $subSubFolderToCreate -FolderAssert-NotNull $result "No value was returned on folder creation"New-AdlStoreItem -Account $accountName -Path $subFileToCreate -Force -Value $content$result = Get-AdlStoreChildItemSummary -Account $accountName -Path $summaryFolderAssert-AreEqual $result.Length $content.LengthAssert-AreEqual $result.FileCount 1$targetFile = Join-Path $currentDir "DuOutputAlias"Export-AdlStoreChildItemProperties -Account $accountName -Path $summaryFolder -OutputPath $targetFile -GetDiskUsage -IncludeFile$result = Get-Item -Path $targetFileAssert-NotNull $result "No file was created on export properties"Remove-Item -Path $targetFileAssert-True {Remove-AdlStoreItem -Account $accountName -paths "$moveFolder/movefile.txt" -force -passthru } "Remove File Failed"Assert-Throws {Get-AdlStoreItem -Account $accountName -path $moveFile}Assert-True {Remove-AdlStoreItem -Account $accountName -paths $moveFolder -force -recurse -passthru} "Remove folder failed"Assert-Throws {Get-AdlStoreItem -Account $accountName -path $moveFolder}Assert-True {Remove-AdlStoreItem -Account $accountName -paths $summaryFolder -force -recurse -passthru} "Remove folder failed"Assert-Throws {Get-AdlStoreItem -Account $accountName -path $summaryFolder}Assert-True {Remove-AdlStoreItem -Account $accountName -paths $encodingFolder -force -recurse -passthru} "Remove folder failed"Assert-True {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeStoreFileSystemPermissions{param($location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $location$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DisableEncryptionAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account is not in succeeded state even after 30 min."}$folderToCreate = "/aclRecurseFolder"$aceUserId = "027c28d5-c91d-49f0-98c5-d10134b169b3"New-AdlStoreItem -Account $accountName -Path "/temp"$prevOwner=Get-AdlStoreItemOwner -Account $accountName -Path "/temp" -Type User$prevGroup=Get-AdlStoreItemOwner -Account $accountName -Path "/temp" -Type Group$currentOwner=Set-AdlStoreItemOwner -Account $accountName -Path "/temp" -Type User -Id $aceUserId -PassThru$currentGroup=Get-AdlStoreItemOwner -Account $accountName -Path "/temp" -Type GroupAssert-AreEqual $aceUserId $currentOwnerAssert-AreNotEqual $prevOwner $currentOwnerAssert-AreEqual $prevGroup $currentGroupRemove-AdlStoreItem -Account $accountName -paths "/temp" -force$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-NotNull $result "Did not get any result from ACL get" Assert-True {$result.Count -ge 0} "UserAces is negative or null"$currentCount = $result.Count$result.Add("user:$aceUserId`:rwx")$toRemove = $result[$result.Count -1]Assert-AreEqual $aceUserId $toRemove.IdSet-AdlStoreItemAcl -Account $accountName -path "/" -Acl $result$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount+1) $result.Count$found = $falsefor($i = 0; $i -lt $result.Count; $i++){if($result[$i].Id -like $aceUserId){$found = $true$result.RemoveAt($i)break}}Assert-True { $found } "Failed to remove the element: $($toRemove.Entry)"Set-AdlStoreItemAcl -Account $accountName -path "/" -Acl $result$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount) $result.CountSet-AdlStoreItemAclEntry -Account $accountName -path "/" -AceType User -Id $aceUserId -Permissions All$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount+1) $result.CountRemove-AdlStoreItemAclEntry -Account $accountName -path "/" -AceType User -Id $aceUserId$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount) $result.CountSet-AdlStoreItemAclEntry -Account $accountName -path "/" -Acl $([string]::Format("user:{0}:rwx", $aceUserId))$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount+1) $result.CountRemove-AdlStoreItemAclEntry -Account $accountName -path "/" -Acl $([string]::Format("user:{0}:---", $aceUserId))$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount) $result.Count$result = New-AdlStoreItem -Account $accountName -path $folderToCreate -FolderAssert-NotNull $result "No value was returned on folder creation"Set-AdlStoreItemAclEntry -Account $accountName -path "/" -AceType User -Permissions All -Id $aceUserId -Recurse$result = Get-AzDataLakeStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount+1) $result.Count$targetFile = "./ScenarioTests/acloutput"Export-AdlStoreChildItemProperties -Account $accountName -Path "/" -OutputPath $targetFile -GetAcl -IncludeFile$result = Get-Item -Path $targetFileAssert-NotNull $result "No file was created on export properties"Remove-Item -Path $targetFileRemove-AdlStoreItemAclEntry -Account $accountName -path "/" -AceType User -Id $aceUserId -Recurse$result = Get-AzDataLakeStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual $($currentCount) $result.CountRemove-AdlStoreItemAcl -Account $accountName -Path "/" -Force -Default$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual 4 $result.CountRemove-AdlStoreItemAcl -Account $accountName -Path "/" -Force$result = Get-AdlStoreItemAclEntry -Account $accountName -path "/"Assert-AreEqual 3 $result.Count$permission = Get-AdlStoreItemPermission -Account $accountName -path "/"Assert-AreEqual 770 $permissionSet-AdlStoreItemPermission -Account $accountName -path "/" -Permission 777 | Out-Null$permission = Get-AdlStoreItemPermission -Account $accountName -path "/"Assert-AreEqual 777 $permissionAssert-True {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-NegativeDataLakeStoreAccount{param($location,$fakeaccountName = "psfakedataLakeaccounttest")if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountNameNew-AzResourceGroup -Name $resourceGroupName -Location $location$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $locationAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account not in succeeded state even after 30 min."}Assert-Throws {New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $location}$tagsToUpdate = @{"TestTag" = "TestUpdate"}Assert-Throws {Set-AdlStore -ResourceGroupName $resourceGroupName -Name $fakeaccountName -Tag $tagsToUpdate}Assert-Throws {Get-AdlStore -ResourceGroupName $resourceGroupName -Name $fakeaccountName}Assert-True {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru}Assert-Throws {Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function CreateAndGetVirtualNetwork ($resourceGroupName, $vnetName, $location = "westcentralus"){$subnetName = "Public"$addressPrefix = "10.0.0.0/24"$serviceEndpoint = "Microsoft.AzureActiveDirectory"$subnet = New-AzVirtualNetworkSubnetConfig -Name $subnetName -AddressPrefix $addressPrefix -ServiceEndpoint $serviceEndpoint$vnet = New-AzVirtualNetwork -Name $vnetName -ResourceGroupName $resourceGroupName -Location $location -AddressPrefix 10.0.0.0/16 -Subnet $subnet$getVnet = Get-AzVirtualNetwork -Name $vnetName -ResourceGroupName $resourceGroupNamereturn $getVnet}function Test-AdlsEnumerateAndRestoreDeletedItem{param($fileToCopy,$location)if ([string]::IsNullOrEmpty($location)){$location = Get-Location -providerNamespace "Microsoft.CognitiveServices" -resourceType "accounts" -preferredLocation "West US";}try{$resourceGroupName = Get-ResourceGroupName$accountName = Get-DataLakeStoreAccountName + "-c12" New-AzureRmResourceGroup -Name $resourceGroupName -Location $location$accountCreated = New-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Location $locationAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeStore/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Store account is not in succeeded state even after 30 min."}$folderToCreate1 = "/adlfolderTest1"$folderToCreate2 = "/adlfolderTest2"$fileToCreate1 = "/adlfolderTest1/adlfile1"$fileToCreate2 = "/adlfolderTest2/adlfile2"$result = New-AdlStoreItem -Account $accountName -path $folderToCreate1 -FolderAssert-NotNull $result "No value was returned on folder creation"$result = New-AdlStoreItem -Account $accountName -path $folderToCreate2 -FolderAssert-NotNull $result "No value was returned on folder creation"$result = New-AdlStoreItem -Account $accountName -path $fileToCreate1Assert-NotNull $result "No value was returned on empty file creation"$result = New-AdlStoreItem -Account $accountName -path $fileToCreate2Assert-NotNull $result "No value was returned on empty file creation"Assert-True {Remove-AdlStoreItem -Account $accountName -paths $fileToCreate1 -force -passthru } "Remove File Failed"Assert-Throws {Get-AdlStoreItem -Account $accountName -path $fileToCreate1}Assert-True {Remove-AdlStoreItem -Account $accountName -paths $fileToCreate2 -force -passthru } "Remove File Failed"Assert-Throws {Get-AdlStoreItem -Account $accountName -path $fileToCreate2}$out = Get-AdlStoreDeletedItem -Account $accountName -filter "adlfolderTest1" -Count 1000foreach($item in $out){Assert-True { Restore-AdlStoreDeletedItem -Account $accountName -Path $item.TrashDirPath -Destination $item.OriginalPath -Type "file" -Force -Passthru}}$out = Get-AdlStoreDeletedItem -Account $accountName -filter "adlfolderTest2" -Count 1000foreach($item in $out){Assert-True { Restore-AdlStoreDeletedItem -Account $accountName $item -Force -Passthru}}Assert-True {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AdlStore -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}