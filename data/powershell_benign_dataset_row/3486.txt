function Test-MonitoringRelatedCommands{try{$location = "West US 2"$cluster = Create-Cluster -Location $location$workspaceName = Generate-Name("workspace-ps-test")$resourceGroupName = $cluster.ResourceGroup$sku = "pernode"$workspace = New-AzOperationalInsightsWorkspace -Location $location -Name $workspaceName -ResourceGroupName $resourceGroupName -Sku $sku$keys = Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName $resourceGroupName -Name $workspace.NameAssert-NotNull $keys$result = Get-AzHDInsightMonitoring -ClusterName $cluster.Name -ResourceGroupName $cluster.ResourceGroupAssert-Null $result.WorkspaceId$workspaceId = $workspace.CustomerId$primaryKey = $keys.PrimarySharedKeyAssert-NotNull $workspaceIdAssert-NotNull $primaryKeyEnable-AzHDInsightMonitoring -ClusterName $cluster.Name -ResourceGroup $cluster.ResourceGroup -WorkspaceId $workspaceId -Primary  $primaryKey$result = Get-AzHDInsightMonitoring -ClusterName $cluster.Name -ResourceGroupName $cluster.ResourceGroupAssert-True {$result.ClusterMonitoringEnabled}Assert-AreEqual $result.WorkspaceId $workspaceIdDisable-AzHDInsightMonitoring -ClusterName $cluster.Name -ResourceGroupName $cluster.ResourceGroup$result = Get-AzHDInsightMonitoring -ClusterName $cluster.Name -ResourceGroupName $cluster.ResourceGroupAssert-False {$result.ClusterMonitoringEnabled}Assert-Null $result.WorkspaceId}finally{Remove-AzHDInsightCluster -ClusterName $cluster.NameRemove-AzResourceGroup -ResourceGroupName $cluster.ResourceGroup}}