function Search-AzureRmGraph-Query{$queryResult = Search-AzGraph "project id, tags, properties | limit 2"Assert-IsInstance $queryResult Object[]Assert-AreEqual $queryResult.Count 2Assert-IsInstance $queryResult[0] System.Management.Automation.PSCustomObjectAssert-IsInstance $queryResult[1] System.Management.Automation.PSCustomObjectAssert-PropertiesCount $queryResult[0] 4Assert-PropertiesCount $queryResult[1] 4Assert-IsInstance $queryResult[0].id StringAssert-IsInstance $queryResult[1].id StringAssert-IsInstance $queryResult[0].ResourceId StringAssert-IsInstance $queryResult[1].ResourceId String	Assert-IsInstance $queryResult[0].tags System.Management.Automation.PSCustomObjectAssert-IsInstance $queryResult[1].tags System.Management.Automation.PSCustomObjectAssert-IsInstance $queryResult[0].properties System.Management.Automation.PSCustomObjectAssert-IsInstance $queryResult[1].properties System.Management.Automation.PSCustomObjectAssert-AreEqual $queryResult[0].id $queryResult[0].ResourceIdAssert-AreEqual $queryResult[1].id $queryResult[1].ResourceIdAssert-PropertiesCount $queryResult[0].properties 6Assert-PropertiesCount $queryResult[1].properties 4}function Search-AzureRmGraph-PagedQuery{$queryResult = Search-AzGraph "project id" -First 3 -Skip 2Assert-IsInstance $queryResult Object[]Assert-AreEqual $queryResult.Count 3Assert-IsInstance $queryResult[0] System.Management.Automation.PSCustomObjectAssert-IsInstance $queryResult[1] System.Management.Automation.PSCustomObjectAssert-IsInstance $queryResult[2] System.Management.Automation.PSCustomObjectAssert-PropertiesCount $queryResult[0] 2Assert-PropertiesCount $queryResult[1] 2Assert-PropertiesCount $queryResult[2] 2Assert-IsInstance $queryResult[0].id StringAssert-IsInstance $queryResult[1].id StringAssert-IsInstance $queryResult[2].id StringAssert-IsInstance $queryResult[0].ResourceId StringAssert-IsInstance $queryResult[1].ResourceId StringAssert-IsInstance $queryResult[2].ResourceId StringAssert-True { $queryResult[0].id.Length -gt 0 }Assert-True { $queryResult[1].id.Length -gt 0 }Assert-True { $queryResult[2].id.Length -gt 0 }}function Search-AzureRmGraph-Subscriptions{$testSubId1 = "11111111-1111-1111-1111-111111111111"$testSubId2 = "22222222-2222-2222-2222-222222222222"$mockedSubscriptionId = "00000000-0000-0000-0000-000000000000"$query = "distinct subscriptionId | order by subscriptionId asc"$queryResultNoSubs = Search-AzGraph $query$queryResultOneSub = Search-AzGraph $query -Subscription $testSubId1$queryResultMultipleSubs = Search-AzGraph $query -Subscription @($testSubId1, $testSubId2)Assert-IsInstance $queryResultNoSubs System.Management.Automation.PSCustomObjectAssert-AreEqual $queryResultNoSubs.subscriptionId $mockedSubscriptionIdAssert-IsInstance $queryResultOneSub System.Management.Automation.PSCustomObjectAssert-AreEqual $queryResultOneSub.subscriptionId $testSubId1Assert-IsInstance $queryResultMultipleSubs Object[]Assert-AreEqual $queryResultMultipleSubs.Count 2Assert-AreEqual $queryResultMultipleSubs[0].subscriptionId $testSubId1Assert-AreEqual $queryResultMultipleSubs[1].subscriptionId $testSubId2}function Search-AzureRmGraph-IncludeSubscriptionNames{$mockedScopeId = "00000000-0000-0000-0000-000000000000"$mockedSubscriptionName = "Test Subscription"$mockedTenantName = "Test Tenant"$query = "project subscriptionId, tenantId, subscriptionDisplayName, tenantDisplayName"$queryResult = Search-AzGraph $query -Include "DisplayNames"Assert-IsInstance $queryResult System.Management.Automation.PSCustomObjectAssert-AreEqual $queryResult.subscriptionId $mockedScopeIdAssert-AreEqual $queryResult.tenantId $mockedScopeIdAssert-AreEqual $queryResult.subscriptionDisplayName $mockedSubscriptionNameAssert-AreEqual $queryResult.tenantDisplayName $mockedTenantName}function Search-AzureRmGraph-QueryError{$expectedErrorId = 'InvalidQuery,' + [Microsoft.Azure.Commands.ResourceGraph.Cmdlets.SearchAzureRmGraph].FullName$expectedErrorDetails = '{"error": {"code": "InvalidQuery","message": "Query validation error","details": [{"code": "ParserFailure","message": "Parser failure","line": 1,"characterPositionInLine": 11,"token": "<EOF>","expectedToken": "Ÿ"}]}}'try{Search-AzGraph "where where"Assert-True $false  }catch [Exception]{Assert-AreEqual $PSItem.FullyQualifiedErrorId $expectedErrorIdAssert-AreEqual $PSItem.ErrorDetails.Message $expectedErrorDetailsAssert-IsInstance $PSItem.Exception Microsoft.Azure.Management.ResourceGraph.Models.ErrorResponseExceptionAssert-IsInstance $PSItem.Exception.Body Microsoft.Azure.Management.ResourceGraph.Models.ErrorResponseAssert-NotNull $PSItem.Exception.Body.Error.CodeAssert-NotNull $PSItem.Exception.Body.Error.MessageAssert-NotNull $PSItem.Exception.Body.Error.DetailsAssert-AreEqual $PSItem.Exception.Body.Error.Details.Count 1Assert-NotNull $PSItem.Exception.Body.Error.Details[0].CodeAssert-NotNull $PSItem.Exception.Body.Error.Details[0].MessageAssert-NotNull $PSItem.Exception.Body.Error.Details[0].AdditionalPropertiesAssert-AreEqual $PSItem.Exception.Body.Error.Details[0].AdditionalProperties.Count 4}}function Search-AzureRmGraph-SubscriptionQueryError{$expectedErrorId = '400,' + [Microsoft.Azure.Commands.ResourceGraph.Cmdlets.SearchAzureRmGraph].FullName$expectedErrorMessage = 'No subscriptions were found to run query. Please try to add them implicitly as param to your request (e.g. Search-AzGraph -Query '''' -Subscription ''11111111-1111-1111-1111-111111111111'')'try{Search-AzGraph "project id, type" -Subscription @()Assert-True $false  }catch [Exception]{Assert-AreEqual $expectedErrorId $PSItem.FullyQualifiedErrorIdAssert-AreEqual $expectedErrorMessage $PSItem.Exception.MessageAssert-IsInstance $PSItem.Exception System.ArgumentException}}