$user = 'CarbonTestUser1'$group1 = 'CarbonTestGroup1'$password = 'a1z2b3y4!'$containerPath = $null$childPath = $nullfunction Start-TestFixture{& (Join-Path -Path $PSScriptRoot -ChildPath '..\Initialize-CarbonTest.ps1' -Resolve)}function Start-Test{Install-User -Username $user -Password $password -Description 'Carbon test user 1'Install-Group -Name $group1 -Description 'Carbon test group 1'$containerPath = 'Carbon-Test-GetPermissions-{0}' -f ([IO.Path]::GetRandomFileName())$containerPath = Join-Path $env:Temp $containerPath$null = New-Item $containerPath -ItemType DirectoryGrant-Permission -Path $containerPath -Identity $group1 -Permission Read$childPath = Join-Path $containerPath 'Child1'$null = New-Item $childPath -ItemType FileGrant-Permission -Path $childPath -Identity $user -Permission Read}function Test-ShouldGetPermissions{$perms = Get-Permission -Path $childPathAssert-NotNull $perms$group1Perms = $perms | Where-Object { $_.IdentityReference.Value -like "*\$group1" }Assert-Null $group1Perms$userPerms = $perms | Where-Object { $_.IdentityReference.Value -like "*\$user" }Assert-NotNull $userPermsAssert-True ($userPerms -is [Security.AccessControl.FileSystemAccessrule])}function Test-ShouldGetInheritedPermissions{$perms = Get-Permission -Path $childPath -InheritedAssert-NotNull $perms$group1Perms = $perms | Where-Object { $_.IdentityReference.Value -like "*\$group1" }Assert-NotNull $group1PermsAssert-True ($group1Perms -is [Security.AccessControl.FileSystemAccessrule])$userPerms = $perms | Where-Object { $_.IdentityReference.Value -like "*\$user" }Assert-NotNull $userPermsAssert-True ($userPerms -is [Security.AccessControl.FileSystemAccessrule])}function Test-ShouldGetSpecificUserPermissions{$perms = Get-Permission -Path $childPath -Identity $group1Assert-Null $perms$perms = @( Get-Permission -Path $childPath -Identity $user )Assert-NotNull $permsAssert-Equal 1 $perms.LengthAssert-NotNull $perms[0]Assert-True ($perms[0] -is [Security.AccessControl.FileSystemAccessrule])}function Test-ShouldGetSpecificUsersInheritedPermissions{$perms = Get-Permission -Path $childPath -Identity $group1 -InheritedAssert-NotNull $permsAssert-True ($perms -is [Security.AccessControl.FileSystemAccessRule])}function Test-ShouldGetPermissionsOnRegistryKey{$perms = Get-Permission -Path 'hkcu:\'Assert-NotNull $perms$perms | ForEach-Object {Assert-True ($_ -is [Security.AccessControl.RegistryAccessRule])}}function Test-ShouldGetPrivateCertPermission{$foundPermission = $falseGet-ChildItem -Path 'cert:\*\*' -Recurse |Where-Object { -not $_.PsIsContainer } |Where-Object { $_.HasPrivateKey } |Where-Object { $_.PrivateKey } |ForEach-Object { Join-Path -Path 'cert:' -ChildPath (Split-Path -NoQualifier -Path $_.PSPath) } |ForEach-Object { Get-Permission -Path $_ } |ForEach-Object {$foundPermission = $trueAssert-NotNull $_Assert-Is $_ ([Security.AccessControl.CryptoKeyAccessRule])}Assert-True $foundPermission}function Test-ShouldGetSpecificIdentityCertPermission{Get-ChildItem -Path 'cert:\*\*' -Recurse |Where-Object { -not $_.PsIsContainer } |Where-Object { $_.HasPrivateKey } |Where-Object { $_.PrivateKey } |ForEach-Object { Join-Path -Path 'cert:' -ChildPath (Split-Path -NoQualifier -Path $_.PSPath) } |ForEach-Object { [object[]]$rules = Get-Permission -Path $_foreach( $rule in $rules ){[object[]]$identityRule = Get-Permission -Path $_ -Identity $rule.IdentityReference.ValueAssert-NotNull $identityRuleAssert-True ($identityRule.Count -le $rules.Count) $}}}