function Test-NewIntegrationAccountBatchConfiguration{$batchConfigurationFilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "SampleBatchConfiguration.json"$batchConfigurationContent = [IO.File]::ReadAllText($batchConfigurationFilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$sampleMetadata = (SampleMetadata)$batchConfigurationName = "BCJson"$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationDefinition $batchConfigurationContentAssert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.Name$batchConfigurationName = "BCJsonParObj"$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ParentObject $integrationAccount -BatchConfigurationName $batchConfigurationName -BatchConfigurationDefinition $batchConfigurationContentAssert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.Name$batchConfigurationName = "BCJsonId"$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ParentResourceId $integrationAccount.Id -BatchConfigurationName $batchConfigurationName -BatchConfigurationDefinition $batchConfigurationContentAssert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.Name$batchConfigurationName = "BCFilePath"$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathAssert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.Name$batchConfigurationName = "BCFilePathParObj"$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ParentObject $integrationAccount -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathAssert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.Name$batchConfigurationName = "BCFilePathId"$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ParentResourceId $integrationAccount.Id -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathAssert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.Name$batchConfigurationName = "BCParameters"$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -MessageCount 199 -BatchSize 5 -ScheduleInterval 1 -ScheduleFrequency "Month"Assert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.NameAssert-AreEqual 199 $integrationAccountBatchConfiguration.Properties.ReleaseCriteria.MessageCountAssert-AreEqual 5 $integrationAccountBatchConfiguration.Properties.ReleaseCriteria.BatchSizeAssert-AreEqual 1 $integrationAccountBatchConfiguration.Properties.ReleaseCriteria.Recurrence.IntervalAssert-AreEqual "Month" $integrationAccountBatchConfiguration.Properties.ReleaseCriteria.Recurrence.Frequency$batchConfigurationName = "BCMetadata"$batchConfigurationMetadata =  New-AzIntegrationAccountBatchConfiguration -ParentResourceId $integrationAccount.Id -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePath -Metadata $sampleMetadataAssert-AreEqual $batchConfigurationName $batchConfigurationMetadata.NameAssert-AreEqual $sampleMetadata["key1"] $batchConfigurationMetadata.Properties.Metadata["key1"].Value$batchConfigurationName = "BCNoParameters"Assert-ThrowsContains { New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName } "At least one release criteria must be provided."Remove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-GetIntegrationAccountBatchConfiguration{$batchConfigurationFilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "SampleBatchConfiguration.json"$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$sampleMetadata = (SampleMetadata)$batchConfigurationName = "BC" + (getAssetname)$integrationAccountBatchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePath -Metadata $sampleMetadataAssert-AreEqual $batchConfigurationName $integrationAccountBatchConfiguration.Name$resultByName = Get-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $integrationAccountBatchConfiguration.NameAssert-AreEqual $batchConfigurationName $resultByName.NameAssert-AreEqual $sampleMetadata["key1"] $resultByName.Properties.Metadata["key1"].Value$resultByResourceId = Get-AzIntegrationAccountBatchConfiguration -ParentResourceId $integrationAccount.Id -BatchConfigurationName $batchConfigurationNameAssert-AreEqual $batchConfigurationName $resultByResourceId.Name$resultByResourceId = Get-AzIntegrationAccountBatchConfiguration -ParentResourceId $integrationAccount.IdAssert-AreEqual 1 $resultByResourceId.Count$resultByInputObject = Get-AzIntegrationAccountBatchConfiguration -ParentObject $integrationAccount -BatchConfigurationName $batchConfigurationNameAssert-AreEqual $batchConfigurationName $resultByInputObject.Name$resultByPipingInputObject = $integrationAccount | Get-AzIntegrationAccountBatchConfiguration -BatchConfigurationName $batchConfigurationNameAssert-AreEqual $batchConfigurationName $resultByPipingInputObject.Name$resultByInputObject = Get-AzIntegrationAccountBatchConfiguration -ParentObject $integrationAccountAssert-AreEqual 1 $resultByInputObject.Count$resultByPipingInputObject = $integrationAccount | Get-AzIntegrationAccountBatchConfigurationAssert-AreEqual 1 $resultByPipingInputObject.CountRemove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-RemoveIntegrationAccountBatchConfiguration{$batchConfigurationFilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "SampleBatchConfiguration.json"$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$batchConfigurationName = "BC" + (getAssetname)	$batchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathRemove-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName$batchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathRemove-AzIntegrationAccountBatchConfiguration -ResourceId $batchConfiguration.Id$batchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathRemove-AzIntegrationAccountBatchConfiguration -InputObject $batchConfiguration$batchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathRemove-AzIntegrationAccountBatchConfiguration  -InputObject $batchConfiguration$batchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePath$batchConfiguration | Remove-AzIntegrationAccountBatchConfigurationRemove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-SetIntegrationAccountBatchConfiguration{$batchConfigurationFilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "SampleBatchConfiguration.json"$batchConfigurationContent = [IO.File]::ReadAllText($batchConfigurationFilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$batchConfigurationName = "OriginalBC"$batchConfiguration =  New-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationDefinition $batchConfigurationContentAssert-AreEqual $batchConfigurationName $batchConfiguration.Name$edittedBatchConfiguration =  Set-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationDefinition $batchConfigurationContentAssert-AreEqual $batchConfigurationName $edittedBatchConfiguration.Name$edittedBatchConfiguration =  Set-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -BatchConfigurationFilePath $batchConfigurationFilePathAssert-AreEqual $batchConfigurationName $edittedBatchConfiguration.Name$edittedBatchConfiguration =  Set-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName -MessageCount 199 -BatchSize 5 -ScheduleInterval 1 -ScheduleFrequency "Month"Assert-AreEqual $batchConfigurationName $edittedBatchConfiguration.NameAssert-AreEqual 199 $edittedBatchConfiguration.Properties.ReleaseCriteria.MessageCountAssert-AreEqual 5 $edittedBatchConfiguration.Properties.ReleaseCriteria.BatchSizeAssert-AreEqual 1 $edittedBatchConfiguration.Properties.ReleaseCriteria.Recurrence.IntervalAssert-AreEqual "Month" $edittedBatchConfiguration.Properties.ReleaseCriteria.Recurrence.FrequencyAssert-ThrowsContains { Set-AzIntegrationAccountBatchConfiguration -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -BatchConfigurationName $batchConfigurationName } "At least one release criteria must be provided."Remove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force} 