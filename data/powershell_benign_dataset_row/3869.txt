function Test-CreateNewWebAppBackup{$rgName = Get-ResourceGroupName$wName = Get-WebsiteName$location = Get-Location$whpName = Get-WebHostPlanName$backupName = Get-BackupName$tier = "Standard"$stoName = 'sto' + $rgName$stoContainerName = 'container' + $rgName$stoType = 'Standard_LRS'try{$app = Create-TestWebApp $rgName $location $whpName $tier $wName$sasUri = Create-TestStorageAccount $rgName $location $stoName $stoType $stoContainerName$result = New-AzWebAppBackup -ResourceGroupName $rgName -Name $wName -StorageAccountUrl $sasUri -BackupName $backupName Assert-AreEqual $backupName $result.BackupNameAssert-NotNull $result.StorageAccountUrl}finally{Remove-AzStorageAccount -ResourceGroupName $rgName -Name $stoNameRemove-AzWebApp -ResourceGroupName $rgName -Name $wName -ForceRemove-AzAppServicePlan -ResourceGroupName $rgName -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgName -Force}}function Test-CreateNewWebAppBackupPiping{$rgName = Get-ResourceGroupName$wName = Get-WebsiteName$location = Get-Location$whpName = Get-WebHostPlanName$backupName = Get-BackupName$backupName2 = Get-BackupName$tier = "Standard"$stoName = 'sto' + $rgName$stoContainerName = 'container' + $rgName$stoType = 'Standard_LRS'try{$app = Create-TestWebApp $rgName $location $whpName $tier $wName$sasUri = Create-TestStorageAccount $rgName $location $stoName $stoType $stoContainerName$backup = $app | New-AzWebAppBackup -StorageAccountUrl $sasUri -BackupName $backupNameAssert-AreEqual $backupName $backup.BackupNameAssert-NotNull $backup.StorageAccountUrl$count = 0while (($backup.BackupStatus -like "Created" -or $backup.BackupStatus -like "InProgress") -and $count -le 20){Wait-Seconds 30$backup = $backup | Get-AzWebAppBackup$count++}$backup.BackupName = $backupName2$backup2 = $backup | New-AzWebAppBackupAssert-AreEqual $backupName2 $backup2.BackupNameAssert-NotNull $backup2.StorageAccountUrl}finally{Remove-AzStorageAccount -ResourceGroupName $rgName -Name $stoNameRemove-AzWebApp -ResourceGroupName $rgName -Name $wName -ForceRemove-AzAppServicePlan -ResourceGroupName $rgName -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgName -Force}}function Test-GetWebAppBackup{$rgName = Get-ResourceGroupName$wName = Get-WebsiteName$location = Get-Location$whpName = Get-WebHostPlanName$backupName = Get-BackupName$tier = "Standard"$stoName = 'sto' + $rgName$stoType = 'Standard_LRS'$stoContainerName = 'container' + $rgNametry{$app = Create-TestWebApp $rgName $location $whpName $tier $wName$sasUri = Create-TestStorageAccount $rgName $location $stoName $stoType $stoContainerName$newBackup = New-AzWebAppBackup -ResourceGroupName $rgName -Name $wName -StorageAccountUrl $sasUri -BackupName $backupName$result = Get-AzWebAppBackup -ResourceGroupName $rgName -Name $wName -BackupId $newBackup.BackupIdAssert-AreEqual $backupName $result.BackupNameAssert-NotNull $result.StorageAccountUrlAssert-NotNull $result.BackupId$pipeResult = $result | Get-AzWebAppBackupAssert-AreEqual $backupName $pipeResult.BackupNameAssert-AreEqual $result.StorageAccountUrl $pipeResult.StorageAccountUrl Assert-AreEqual $result.BackupId $pipeResult.BackupId}finally{Remove-AzStorageAccount -ResourceGroupName $rgName -Name $stoNameRemove-AzWebApp -ResourceGroupName $rgName -Name $wName -ForceRemove-AzAppServicePlan -ResourceGroupName $rgName -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgName -Force}}function Test-GetWebAppBackupList{$rgName = Get-ResourceGroupName$wName = Get-WebsiteName$location = Get-Location$whpName = Get-WebHostPlanName$backupName = Get-BackupName$tier = "Standard"$stoName = 'sto' + $rgName$stoType = 'Standard_LRS'$stoContainerName = 'container' + $rgNametry{$app = Create-TestWebApp $rgName $location $whpName $tier $wName$sasUri = Create-TestStorageAccount $rgName $location $stoName $stoType $stoContainerName$backup = New-AzWebAppBackup -ResourceGroupName $rgName -Name $wName -StorageAccountUrl $sasUri -BackupName $backupName -Databases $dbBackupSetting$backupList = Get-AzWebAppBackupList -ResourceGroupName $rgName -Name $wName$listBackup = $backupList | where {$_.BackupId -eq $backup.BackupId}Assert-AreEqual 1 $backupList.CountAssert-NotNull $listBackupAssert-AreEqual $backup.BackupName $listBackup.BackupName$pipeBackupList = $app | Get-AzWebAppBackupList$pipeBackup = $pipeBackupList | where {$_.BackupId -eq $backup.BackupId}Assert-AreEqual 1 $pipeBackupList.CountAssert-NotNull $pipeBackupAssert-AreEqual $backup.BackupName $pipeBackup.BackupName}finally{Remove-AzStorageAccount -ResourceGroupName $rgName -Name $stoNameRemove-AzWebApp -ResourceGroupName $rgName -Name $wName -ForceRemove-AzAppServicePlan -ResourceGroupName $rgName -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgName -Force}}function Test-EditAndGetWebAppBackupConfiguration{$rgName = Get-ResourceGroupName$wName = Get-WebsiteName$location = Get-Location$whpName = Get-WebHostPlanName$tier = "Standard"$stoName = 'sto' + $rgName$stoContainerName = 'container' + $rgName$stoType = 'Standard_LRS'try{$app = Create-TestWebApp $rgName $location $whpName $tier $wName$sasUri = Create-TestStorageAccount $rgName $location $stoName $stoType $stoContainerName$startTime = (Get-Date).ToUniversalTime().AddDays(1)$frequencyInterval = 7$frequencyUnit = "Day"$retentionPeriod = 3$config = Edit-AzWebAppBackupConfiguration `-ResourceGroupName $rgName -Name $wName -StorageAccountUrl $sasUri `-FrequencyInterval $frequencyInterval -FrequencyUnit $frequencyUnit `-RetentionPeriodInDays $retentionPeriod -StartTime $startTime `-KeepAtLeastOneBackup Assert-True { $config.Enabled }Assert-NotNull $config.StorageAccountUrlAssert-AreEqual $frequencyInterval $config.FrequencyIntervalAssert-AreEqual $frequencyUnit $config.FrequencyUnit Assert-True { $config.KeepAtLeastOneBackup }Assert-AreEqual $retentionPeriod $config.RetentionPeriodInDaysAssert-NotNull $config.StartTime$getConfig = Get-AzWebAppBackupConfiguration -ResourceGroupName $rgName -Name $wNameAssert-True { $getConfig.Enabled }Assert-NotNull $getConfig.StorageAccountUrlAssert-AreEqual $frequencyInterval $getConfig.FrequencyIntervalAssert-AreEqual $frequencyUnit $getConfig.FrequencyUnit Assert-True { $getConfig.KeepAtLeastOneBackup }Assert-AreEqual $retentionPeriod $getConfig.RetentionPeriodInDaysAssert-NotNull $getConfig.StartTime}finally{Remove-AzStorageAccount -ResourceGroupName $rgName -Name $stoNameRemove-AzWebApp -ResourceGroupName $rgName -Name $wName -ForceRemove-AzAppServicePlan -ResourceGroupName $rgName -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgName -Force}}function Test-EditAndGetWebAppBackupConfigurationPiping{$rgName = Get-ResourceGroupName$wName = Get-WebsiteName$location = Get-Location$whpName = Get-WebHostPlanName$tier = "Standard"$stoName = 'sto' + $rgName$stoContainerName = 'container' + $rgName$stoType = 'Standard_LRS'try{$app = Create-TestWebApp $rgName $location $whpName $tier $wName$sasUri = Create-TestStorageAccount $rgName $location $stoName $stoType $stoContainerName$startTime = (Get-Date).ToUniversalTime().AddDays(1)$frequencyInterval = 7$frequencyUnit = "Day"$retentionPeriod = 3$app | Edit-AzWebAppBackupConfiguration `-StorageAccountUrl $sasUri -FrequencyInterval $frequencyInterval `-FrequencyUnit $frequencyUnit -RetentionPeriodInDays $retentionPeriod `-StartTime $startTime -KeepAtLeastOneBackup$config = $app | Get-AzWebAppBackupConfigurationAssert-True { $config.Enabled }Assert-NotNull $config.StorageAccountUrlAssert-AreEqual $frequencyInterval $config.FrequencyIntervalAssert-AreEqual $frequencyUnit $config.FrequencyUnit Assert-True { $config.KeepAtLeastOneBackup }Assert-AreEqual $retentionPeriod $config.RetentionPeriodInDaysAssert-NotNull $config.StartTime$newFrequencyInterval = 5$newRetentionPeriod = 2$newFrequencyUnit = "Hour"$config.FrequencyInterval = $newFrequencyInterval$config.RetentionPeriodInDays = $newRetentionPeriod$config.FrequencyUnit = $newFrequencyUnit$config | Edit-AzWebAppBackupConfiguration$pipeConfig = $app | Get-AzWebAppBackupConfigurationAssert-True { $pipeConfig.Enabled }Assert-NotNull $pipeConfig.StorageAccountUrlAssert-AreEqual $newFrequencyInterval $pipeConfig.FrequencyIntervalAssert-AreEqual $newFrequencyUnit $pipeConfig.FrequencyUnit Assert-True { $pipeConfig.KeepAtLeastOneBackup }Assert-AreEqual $newRetentionPeriod $pipeConfig.RetentionPeriodInDaysAssert-NotNull $pipeConfig.StartTime}finally{Remove-AzStorageAccount -ResourceGroupName $rgName -Name $stoNameRemove-AzWebApp -ResourceGroupName $rgName -Name $wName -ForceRemove-AzAppServicePlan -ResourceGroupName $rgName -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgName -Force}}function Test-GetWebAppSnapshot{$rgname = Get-ResourceGroupName$wname = Get-WebsiteName$slotName = "staging"$location = Get-WebLocation$whpName = Get-WebHostPlanName$tier = "Premium"$isRecordMode = ((Get-WebsitesTestMode) -ne 'Playback')try{New-AzResourceGroup -Name $rgname -Location $locationNew-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -Location  $location -Tier $tier$app = New-AzWebApp -ResourceGroupName $rgname -Name $wname -Location $location -AppServicePlan $whpName New-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotNamewhile ($snap -eq $null){$snap = Get-AzWebAppSnapshot $appif ($isRecordMode){Start-Sleep -Seconds 60}}$snapshots = Get-AzWebAppSnapshot -ResourceGroupName $rgname -Name $wname -UseDisasterRecoveryAssert-True { $snapshots.Length -gt 0 }Assert-NotNull $snapshots[0]Assert-NotNull $snapshots[0].SnapshotTimeAssert-AreEqual 'Production' $snapshots[0].Slot$snapshots = Get-AzWebAppSnapshot $rgname $wnameAssert-True { $snapshots.Length -gt 0 }Assert-NotNull $snapshots[0]Assert-NotNull $snapshots[0].SnapshotTimeAssert-AreEqual 'Production' $snapshots[0].Slot$snapshots = Get-AzWebAppSnapshot -ResourceGroupName $rgname -Name $wname -Slot $slotNameAssert-True { $snapshots.Length -gt 0 }Assert-NotNull $snapshots[0]Assert-NotNull $snapshots[0].SnapshotTimeAssert-AreEqual $slotName $snapshots[0].Slot$app = Get-AzWebApp -ResourceGroupName $rgname -Name $wname$snapshots = $app | Get-AzWebAppSnapshotAssert-True { $snapshots.Length -gt 0 }Assert-NotNull $snapshots[0]Assert-NotNull $snapshots[0].SnapshotTimeAssert-AreEqual 'Production' $snapshots[0].Slot}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotName -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $wname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-RestoreWebAppSnapshot{$rgname = Get-ResourceGroupName$wname = Get-WebsiteName$slotName = "staging"$location = Get-WebLocation$whpName = Get-WebHostPlanName$tier = "Premium"$isRecordMode = ((Get-WebsitesTestMode) -ne 'Playback')try{New-AzResourceGroup -Name $rgname -Location $locationNew-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -Location  $location -Tier $tier$app = New-AzWebApp -ResourceGroupName $rgname -Name $wname -Location $location -AppServicePlan $whpName New-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotNamewhile ($snap -eq $null){$snap = Get-AzWebAppSnapshot $appif ($isRecordMode){Start-Sleep -Seconds 60}}$snapshot = (Get-AzWebAppSnapshot $rgname $wname)[0]Restore-AzWebAppSnapshot -ResourceGroupName $rgname -Name $wname -InputObject $snapshot -Force -RecoverConfigurationif ($isRecordMode){Start-Sleep -Seconds 600}Restore-AzWebAppSnapshot $rgname $wname $slotName $snapshot -RecoverConfiguration -UseDisasterRecovery -Forceif ($isRecordMode){Start-Sleep -Seconds 600}$job = $snapshot | Restore-AzWebAppSnapshot -Force -AsJob$job | Wait-Jobif ($isRecordMode){Start-Sleep -Seconds 600}}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotName -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $wname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-GetDeletedWebApp{$rgname = Get-ResourceGroupName$wname = Get-WebsiteName$slotName = "staging"$location = Get-WebLocation$whpName = Get-WebHostPlanName$tier = "Standard"try{New-AzResourceGroup -Name $rgname -Location $locationNew-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -Location  $location -Tier $tierNew-AzWebApp -ResourceGroupName $rgname -Name $wname -Location $location -AppServicePlan $whpName New-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotNameRemove-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotName -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $wname -Force$deletedApp = Get-AzDeletedWebApp -ResourceGroupName $rgname -Name $wname -Slot "Production" -Location $locationAssert-NotNull $deletedAppAssert-AreEqual $rgname $deletedApp.ResourceGroupNameAssert-AreEqual $wname $deletedApp.Name$deletedSlot = Get-AzDeletedWebApp -ResourceGroupName $rgname -Name $wname -Slot $slotName -Location $locationAssert-NotNull $deletedSlotAssert-AreEqual $rgname $deletedSlot.ResourceGroupNameAssert-AreEqual $wname $deletedSlot.NameAssert-AreEqual $slotName $deletedSlot.Slot}finally{Remove-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-RestoreDeletedWebAppToExisting{$rgname = Get-ResourceGroupName$wname = Get-WebsiteName$slotName = "staging"$appWithSlotName = "$wname/$slotName"$delName = Get-WebsiteName$delSlot = "testslot"$location = Get-WebLocation$whpName = Get-WebHostPlanName$tier = "Premium"$isRecordMode = ((Get-WebsitesTestMode) -ne 'Playback')try{New-AzResourceGroup -Name $rgname -Location $locationNew-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -Location  $location -Tier $tierNew-AzWebApp -ResourceGroupName $rgname -Name $wname -Location $location -AppServicePlan $whpName New-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotName$tmpApp = New-AzWebApp -ResourceGroupName $rgname -Name $delName -Location $location -AppServicePlan $whpName New-AzWebAppSlot -ResourceGroupName $rgname -Name $delName -Slot $delSlotwhile ($snap -eq $null){$snap = Get-AzWebAppSnapshot $tmpAppif ($isRecordMode){Start-Sleep -Seconds 60}}Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $delName -Slot $delSlot -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $delName -Force$deletedApp = Get-AzDeletedWebApp -ResourceGroupName $rgname -Name $delName -Slot "Production"$restoredApp = Restore-AzDeletedWebApp $deletedApp -TargetResourceGroupName $rgname -TargetName $wname -Forceif ($isRecordMode) {Start-Sleep -Seconds 900}$restoredSlot = Restore-AzDeletedWebApp -ResourceGroupName $rgname -Name $delName -Slot $delSlot -TargetResourceGroupName $rgname -TargetName $wname -TargetSlot $slotName -Forceif ($isRecordMode) {Start-Sleep -Seconds 900}Assert-NotNull $restoredAppAssert-AreEqual $rgname $restoredApp.ResourceGroupAssert-AreEqual $wname $restoredApp.NameAssert-NotNull $restoredSlotAssert-AreEqual $rgname $restoredSlot.ResourceGroupAssert-AreEqual $appWithSlotName $restoredSlot.Name}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotName -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $wname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-RestoreDeletedWebAppToNew{$rgname = Get-ResourceGroupName$location = Get-WebLocation$whpName = Get-WebHostPlanName$tier = "Premium"$delName = Get-WebsiteName$isRecordMode = ((Get-WebsitesTestMode) -ne 'Playback')try{New-AzResourceGroup -Name $rgname -Location $locationNew-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -Location  $location -Tier $tier$tmpApp = New-AzWebApp -ResourceGroupName $rgname -Name $delName -Location $location -AppServicePlan $whpName while ($snap -eq $null){$snap = Get-AzWebAppSnapshot $tmpAppif ($isRecordMode){Start-Sleep -Seconds 60}}Remove-AzWebApp -ResourceGroupName $rgname -Name $delName -Force$deletedApp = Get-AzDeletedWebApp -ResourceGroupName $rgname -Name $delName -Slot "Production"$job = $deletedApp | Restore-AzDeletedWebApp -TargetResourceGroupName $rgname -TargetAppServicePlanName $whpName -UseDisasterRecovery -Force -AsJob$result = $job | Wait-JobAssert-AreEqual "Completed" $result.State;$restoredApp = $job | Receive-JobAssert-NotNull $restoredAppAssert-AreEqual $rgname $restoredApp.ResourceGroupAssert-AreEqual $delName $restoredApp.Nameif ($isRecordMode) {Start-Sleep -Seconds 900}}finally{Remove-AzWebApp -ResourceGroupName $rgname -Name $delName -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Create-TestWebApp{param ([string] $resourceGroup,[string] $location,[string] $hostingPlan,[string] $tier,[string] $appName)New-AzResourceGroup -Name $resourceGroup -Location $location | Out-NullNew-AzAppServicePlan -ResourceGroupName $resourceGroup -Name  $hostingPlan -Location  $location -Tier $tier | Out-Null$app = New-AzWebApp -ResourceGroupName $resourceGroup -Name $appName -Location $location -AppServicePlan $hostingPlan return $app}function Create-TestStorageAccount{param ([string] $resourceGroup,[string] $location,[string] $storageName,[string] $storageType,[string] $stoContainerName)New-AzStorageAccount -ResourceGroupName $resourceGroup -Name $storageName -Location $location -Type $storageType | Out-Null$stoKey = (Get-AzStorageAccountKey -ResourceGroupName $resourceGroup -Name $storageName).Key1;$accessDuration = New-Object -TypeName TimeSpan(2,0,0)$permissions = [Microsoft.WindowsAzure.Storage.Blob.SharedAccessBlobPermissions]::Write -bor[Microsoft.WindowsAzure.Storage.Blob.SharedAccessBlobPermissions]::Read -bor[Microsoft.WindowsAzure.Storage.Blob.SharedAccessBlobPermissions]::List -bor[Microsoft.WindowsAzure.Storage.Blob.SharedAccessBlobPermissions]::Delete$sasUri = Get-SasUri $storageName $stoKey $stoContainerName $accessDuration $permissionsreturn $sasUri}