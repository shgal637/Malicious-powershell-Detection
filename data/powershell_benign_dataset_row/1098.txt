$Port = 9878$SiteName = 'TestVirtualDirectory'$VDirName = 'VDir'$WebConfig = Join-Path $TestDir web.configfunction Start-TestFixture{& (Join-Path -Path $PSScriptRoot '..\Initialize-CarbonTest.ps1' -Resolve)Install-IisAppPool -Name $SiteName}function Stop-TestFixture{Uninstall-IisAppPool -Name $SiteName}function Start-Test{Uninstall-IisWebsite -Name $SiteNameInstall-IisWebsite -Name $SiteName -Path $TestDir -Bindings "http://*:$Port" -AppPoolName $SiteNameif( Test-Path $WebConfig ){Remove-Item $WebConfig}}function Stop-Test{Uninstall-IisWebsite -Name $SiteName}function Invoke-NewVirtualDirectory($Path = $TestDir){Install-IisVirtualDirectory -SiteName $SiteName -Name $VDirName -Path $PathAssert-LastProcessSucceeded 'Failed to create virtual directory.'}function Test-ShouldCreateVirtualDirectory{$output = Invoke-NewVirtualDirectoryAssert-Null $outputAssert-VirtualDirectoryRunning}function Test-ShouldHandleExtraDirectorySeparatorCharacter{Install-IisVirtualDirectory -SiteName $SiteName -VirtualPath ('/{0}/' -f $VDirName) -PhysicalPath $PSScriptRootAssert-VirtualDirectoryRunning$website = Get-IisWebsite -Name $SiteNameAssert-Equal ('/{0}' -f $VDirName) ($website.Applications[0].VirtualDirectories[1].Path)}function Test-ShouldResolvePhysicalPath{Install-IisVirtualDirectory -SiteName $SiteName -Name $VDirName -Path "$TestDir\..\..\Test\IIS"$physicalPath = Get-IisWebsite -SiteName $SiteName |Select-Object -ExpandProperty Applications |Where-Object { $_.Path -eq '/' } |Select-Object -ExpandProperty VirtualDirectories |Where-Object { $_.Path -eq "/$VDirName" } |Select-Object -ExpandProperty PhysicalPathAssert-Equal $TestDir $physicalPath}function Test-ShouldUpdatePhysicalPath{Invoke-NewVirtualDirectory -Path $env:SystemRootInvoke-NewVirtualDirectoryAssert-VirtualDirectoryRunning}function Test-ShouldCreateDoubleVitualDirectory{$virtualPath = '{0}/{0}' -f $VDirNameInstall-IisVirtualDirectory -SiteName $SiteName -VirtualPath $virtualPath -PhysicalPath $PSScriptRootAssert-VirtualDirectoryRunning $virtualPath}function Test-ShouldTurnOnDirectoryBrowsing{Invoke-NewVirtualDirectoryEnable-IisDirectoryBrowsing -SiteName $SiteName -Path $VDirNameAssert-LastProcessSucceeded 'Failed to enable directory browsing.'Assert-FileDoesNotExist $WebConfig 'Changes not committed to apphost config level.'$numTries = 0$maxTries = 10$foundDirectoryListing = $falsedo{$output = Read-Url "http://localhost:$Port/$VDirName"if( $output -like '*NewWebsite.html*' ){$foundDirectoryListing = $truebreak}$numTries += 1Start-Sleep -Milliseconds 100}while( $numTries -lt $maxTries )Assert-True $foundDirectoryListing "Didn't get directory list."}function Test-ShouldDeleteIfForced{$output = Install-IisVirtualDirectory -SiteName $SiteName -VirtualPath $VDirName -PhysicalPath $PSScriptRootAssert-Null $output$app = Get-IisApplication -SiteName $SiteName $vdir = $app.VirtualDirectories[('/{0}' -f $VDirName)]Assert-NotNull $vdir$defaultLogonMethod = $vdir.LogonMethodAssert-NotEqual 2 $defaultLogonMethod$vdir.LogonMethod = 2$app.CommitChanges()$output = Install-IisVirtualDirectory -SiteName $SiteName -VirtualPath $VDirName -PhysicalPath $PSScriptRoot -ForceAssert-Null $output$app = Get-IisApplication -SiteName $SiteName $vdir = $app.VirtualDirectories[('/{0}' -f $VDirName)]Assert-Equal $defaultLogonMethod $vdir.LogonMethod}function Assert-VirtualDirectoryRunning($vdir){$html = Read-Url "http://localhost:$Port/$vdir/NewWebsite.html"Assert-Like $html 'NewWebsite Test Page' 'Unable to download from new virtual directory.'   }function Read-Url($Url){$browser = New-Object Net.WebClient$numTries = 0$maxTries = 10do{try{return $browser.downloadString( $Url )}catch{Write-Verbose "Error downloading '$Url': $_"$numTries++Start-Sleep -Milliseconds 100}}while( $numTries -lt $maxTries )}