set-strictmode -v 2Describe 'for statement parsing' -Tags "CI" {ShouldBeParseError 'for' MissingOpenParenthesisAfterKeyword 4 -CheckColumnNumberShouldBeParseError 'for(' MissingEndParenthesisAfterStatement 5 -CheckColumnNumberShouldBeParseError 'for(;' MissingEndParenthesisAfterStatement 6 -CheckColumnNumberShouldBeParseError 'for(;;' MissingEndParenthesisAfterStatement 7 -CheckColumnNumberShouldBeParseError 'for($a' MissingEndParenthesisAfterStatement 7 -CheckColumnNumberShouldBeParseError 'for($a;' MissingEndParenthesisAfterStatement 8 -CheckColumnNumberShouldBeParseError 'for($a;$b' MissingEndParenthesisAfterStatement 10 -CheckColumnNumberShouldBeParseError 'for($a;$b;' MissingEndParenthesisAfterStatement 11 -CheckColumnNumberShouldBeParseError 'for($a;$b;$c' MissingEndParenthesisAfterStatement 13 -CheckColumnNumberShouldBeParseError 'for($a;$b;$c)' MissingLoopStatement 14 -CheckColumnNumberShouldBeParseError ':lab for' MissingOpenParenthesisAfterKeyword 9 -CheckColumnNumberShouldBeParseError ':lab for(' MissingEndParenthesisAfterStatement 9ShouldBeParseError ':lab for(;' MissingEndParenthesisAfterStatement 11 -CheckColumnNumberShouldBeParseError ':lab for(;;' MissingEndParenthesisAfterStatement 12 -CheckColumnNumberShouldBeParseError ':lab for($a' MissingEndParenthesisAfterStatement 12 -CheckColumnNumberShouldBeParseError ':lab for($a;' MissingEndParenthesisAfterStatement 12ShouldBeParseError ':lab for($a;$b' MissingEndParenthesisAfterStatement 14ShouldBeParseError ':lab for($a;$b;' MissingEndParenthesisAfterStatement 15ShouldBeParseError ':lab for($a;$b;$c' MissingEndParenthesisAfterStatement 17ShouldBeParseError ':lab for($a;$b;$c)' MissingLoopStatement 18Test-ErrorStmt 'for z' 'for'Test-ErrorStmt 'for {}' 'for'Test-ErrorStmt 'for ()' 'for ()'Test-ErrorStmt 'for(' 'for('Test-ErrorStmt 'for(;' 'for(;'Test-ErrorStmt 'for(;;' 'for(;;'Test-ErrorStmt 'for($a' 'for($a' '$a' '$a' '$a'Test-ErrorStmt 'for($a;$b' 'for($a;$b' '$a' '$a' '$a' '$b' '$b' '$b'Test-ErrorStmt 'for($a;$b;$c' 'for($a;$b;$c' '$a' '$a' '$a' '$b' '$b' '$b' '$c' '$c' '$c'Test-ErrorStmt 'for($a;$b;$c)' 'for($a;$b;$c)' '$a' '$a' '$a' '$b' '$b' '$b' '$c' '$c' '$c'Test-ErrorStmt 'for()zzzz' 'for()'Test-ErrorStmt ':lab for z'         ':lab for'Test-ErrorStmt ':lab for {}'        ':lab for'Test-ErrorStmt ':lab for ()'        ':lab for ()'Test-ErrorStmt ':lab for('          ':lab for('Test-ErrorStmt ':lab for(;'         ':lab for(;'Test-ErrorStmt ':lab for(;;'        ':lab for(;;'Test-ErrorStmt ':lab for($a'        ':lab for($a' '$a' '$a' '$a'Test-ErrorStmt ':lab for($a;$b'     ':lab for($a;$b' '$a' '$a' '$a' '$b' '$b' '$b'Test-ErrorStmt ':lab for($a;$b;$c'  ':lab for($a;$b;$c' '$a' '$a' '$a' '$b' '$b' '$b' '$c' '$c' '$c'Test-ErrorStmt ':lab for($a;$b;$c)' ':lab for($a;$b;$c)' '$a' '$a' '$a' '$b' '$b' '$b' '$c' '$c' '$c'Test-ErrorStmt ':lab for()zzzz'     ':lab for()'}Describe 'foreach statement parsing' -Tags "CI" {ShouldBeParseError 'foreach' MissingOpenParenthesisAfterKeyword 7ShouldBeParseError 'foreach (' MissingVariableNameAfterForeach 9ShouldBeParseError 'foreach ($a' MissingInInForeach 11ShouldBeParseError 'foreach ($a into' MissingInInForeach 11ShouldBeParseError 'foreach ($a in' MissingForeachExpression 14ShouldBeParseError 'foreach ($a in $x' MissingEndParenthesisAfterForeach 17ShouldBeParseError 'foreach ($a in $x)' MissingForeachStatement 18ShouldBeParseError ':lab foreach' MissingOpenParenthesisAfterKeyword 12ShouldBeParseError ':lab foreach (' MissingVariableNameAfterForeach 14ShouldBeParseError ':lab foreach ($a' MissingInInForeach 16ShouldBeParseError ':lab foreach ($a into' MissingInInForeach 17 -CheckColumnNumberShouldBeParseError ':lab foreach ($a in' MissingForeachExpression 20 -CheckColumnNumberShouldBeParseError ':lab foreach ($a in $x' MissingEndParenthesisAfterForeach 23 -CheckColumnNumberShouldBeParseError ':lab foreach ($a in $x)' MissingForeachStatement 24 -CheckColumnNumberTest-ErrorStmt 'foreach'                    'foreach'Test-ErrorStmt 'foreach z'                  'foreach'Test-ErrorStmt 'foreach ('                  'foreach ('Test-ErrorStmt 'foreach ($a'                'foreach ($a' '$a'Test-ErrorStmt 'foreach ($a zz'             'foreach ($a' '$a'Test-ErrorStmt 'foreach ($a Test-ErrorStmt 'foreach ($a $zz'            'foreach ($a' '$a'Test-ErrorStmt 'foreach ($a in'             'foreach ($a in' '$a'Test-ErrorStmt 'foreach ($a in $b'          'foreach ($a in $b' '$a' '$b' '$b' '$b'Test-ErrorStmt 'foreach ($a in $b )' 'foreach ($a in $b )' '$a' '$b' '$b' '$b'Test-ErrorStmt ':lab foreach'                    ':lab foreach'Test-ErrorStmt ':lab foreach z'                  ':lab foreach'Test-ErrorStmt ':lab foreach ('                  ':lab foreach ('Test-ErrorStmt ':lab foreach ($a'                ':lab foreach ($a' '$a'Test-ErrorStmt ':lab foreach ($a zz'             ':lab foreach ($a' '$a'Test-ErrorStmt ':lab foreach ($a Test-ErrorStmt ':lab foreach ($a $zz'            ':lab foreach ($a' '$a'Test-ErrorStmt ':lab foreach ($a in'             ':lab foreach ($a in' '$a'Test-ErrorStmt ':lab foreach ($a in $b'          ':lab foreach ($a in $b' '$a' '$b' '$b' '$b'Test-ErrorStmt ':lab foreach ($a in $b )' ':lab foreach ($a in $b )' '$a' '$b' '$b' '$b'}Describe 'do/while statement statement parsing' -Tags "CI" {ShouldBeParseError 'do' MissingLoopStatement 2ShouldBeParseError 'do {}' MissingWhileOrUntilInDoWhile 5ShouldBeParseError 'do {} while' MissingOpenParenthesisAfterKeyword 11ShouldBeParseError 'do {} while (' MissingExpressionAfterKeyword 13ShouldBeParseError 'do {} while (1' MissingEndParenthesisAfterStatement 14ShouldBeParseError ':lab do' MissingLoopStatement 8 -CheckColumnNumberShouldBeParseError ':lab do {}' MissingWhileOrUntilInDoWhile 11 -CheckColumnNumberShouldBeParseError ':lab do {} while' MissingOpenParenthesisAfterKeyword 17 -CheckColumnNumberShouldBeParseError ':lab do {} while (' MissingExpressionAfterKeyword 19 -CheckColumnNumberShouldBeParseError ':lab do {} while (1' MissingEndParenthesisAfterStatement 20 -CheckColumnNumberTest-ErrorStmt 'do'                  'do'Test-ErrorStmt 'do {1}'              'do {1}' '{1}' '1' '1' '1'Test-ErrorStmt 'do {1} while'        'do {1} while' '{1}' '1' '1' '1'Test-ErrorStmt 'do {1} while('       'do {1} while(' '{1}' '1' '1' '1'Test-ErrorStmt 'do {1} while($false' 'do {1} while($false' '{1}' '1' '1' '1' '$false' '$false' '$false'Test-ErrorStmt ':lab do'                  ':lab do'Test-ErrorStmt ':lab do {1}'              ':lab do {1}' '{1}' '1' '1' '1'Test-ErrorStmt ':lab do {1} while'        ':lab do {1} while' '{1}' '1' '1' '1'Test-ErrorStmt ':lab do {1} while('       ':lab do {1} while(' '{1}' '1' '1' '1'Test-ErrorStmt ':lab do {1} while($false' ':lab do {1} while($false' '{1}' '1' '1' '1' '$false' '$false' '$false'}Describe 'do/while statement statement parsing' -Tags "CI" {ShouldBeParseError 'do' MissingLoopStatement 3 -CheckColumnNumberShouldBeParseError 'do {}' MissingWhileOrUntilInDoWhile 6 -CheckColumnNumberShouldBeParseError 'do {} until' MissingOpenParenthesisAfterKeyword 12 -CheckColumnNumberShouldBeParseError 'do {} until (' MissingExpressionAfterKeyword 14 -CheckColumnNumberShouldBeParseError 'do {} until (1' MissingEndParenthesisAfterStatement 15 -CheckColumnNumberShouldBeParseError ':lab do' MissingLoopStatement 8 -CheckColumnNumberShouldBeParseError ':lab do {}' MissingWhileOrUntilInDoWhile 10ShouldBeParseError ':lab do {} until' MissingOpenParenthesisAfterKeyword 16ShouldBeParseError ':lab do {} until (' MissingExpressionAfterKeyword 18ShouldBeParseError ':lab do {} until (1' MissingEndParenthesisAfterStatement 19Test-ErrorStmt 'do'                  'do'Test-ErrorStmt 'do {1}'              'do {1}' '{1}' '1' '1' '1'Test-ErrorStmt 'do {1} until'        'do {1} until' '{1}' '1' '1' '1'Test-ErrorStmt 'do {1} until('       'do {1} until(' '{1}' '1' '1' '1'Test-ErrorStmt 'do {1} until($false' 'do {1} until($false' '{1}' '1' '1' '1' '$false' '$false' '$false'Test-ErrorStmt ':lab do'                  ':lab do'Test-ErrorStmt ':lab do {1}'              ':lab do {1}' '{1}' '1' '1' '1'Test-ErrorStmt ':lab do {1} until'        ':lab do {1} until' '{1}' '1' '1' '1'Test-ErrorStmt ':lab do {1} until('       ':lab do {1} until(' '{1}' '1' '1' '1'Test-ErrorStmt ':lab do {1} until($false' ':lab do {1} until($false' '{1}' '1' '1' '1' '$false' '$false' '$false'}Describe 'trap statement parsing' -Tags "CI" {ShouldBeParseError 'trap' MissingTrapStatement 4ShouldBeParseError 'trap [int]' MissingTrapStatement 11 -CheckColumnNumberTest-ErrorStmt 'trap' 'trap'Test-ErrorStmt 'trap [int]' 'trap [int]' '[int]'}Describe 'named blocks parsing' -Tags "CI" {ShouldBeParseError 'begin' MissingNamedStatementBlock 5ShouldBeParseError 'process' MissingNamedStatementBlock 7ShouldBeParseError 'end' MissingNamedStatementBlock 3ShouldBeParseError 'dynamicparam' MissingNamedStatementBlock 12ShouldBeParseError 'begin process {}' MissingNamedStatementBlock 6 -CheckColumnNumberShouldBeParseError 'end process {}' MissingNamedStatementBlock 4 -CheckColumnNumberShouldBeParseError 'dynamicparam process {}' MissingNamedStatementBlock 13 -CheckColumnNumberShouldBeParseError 'process begin {}' MissingNamedStatementBlock 8 -CheckColumnNumberShouldBeParseError 'begin process end' MissingNamedStatementBlock,MissingNamedStatementBlock,MissingNamedStatementBlock 6,14,18 -CheckColumnNumberTest-Ast 'begin' 'begin' 'begin'Test-Ast 'begin end' 'begin end' 'begin' 'end'Test-Ast 'begin end process' 'begin end process' 'begin' 'end' 'process'Test-Ast 'begin {} end' 'begin {} end' 'begin {}' 'end'}Describe 'data statement parsing' -Tags "CI" {ShouldBeParseError 'data' MissingStatementBlockForDataSection 5 -CheckColumnNumberShouldBeParseError 'data foo' MissingStatementBlockForDataSection 9 -CheckColumnNumberShouldBeParseError 'data -abc' InvalidParameterForDataSectionStatement 6 -CheckColumnNumberShouldBeParseError 'data -abc foo {}' InvalidParameterForDataSectionStatement 6 -CheckColumnNumberShouldBeParseError 'data -abc & {}' InvalidParameterForDataSectionStatement 5ShouldBeParseError 'data -s & {}' MissingValueForSupportedCommandInDataSectionStatement 7ShouldBeParseError 'data -s ) {}' MissingValueForSupportedCommandInDataSectionStatement,UnexpectedToken 8,9 -CheckColumnNumberShouldBeParseError 'data -s } {}' MissingValueForSupportedCommandInDataSectionStatement,UnexpectedToken 7,8ShouldBeParseError 'data -s ; {}' MissingValueForSupportedCommandInDataSectionStatement 7ShouldBeParseError 'data -sup a,' MissingValueForSupportedCommandInDataSectionStatement 13 -CheckColumnNumberShouldBeParseError 'data -sup a,b' MissingStatementBlockForDataSection 14 -CheckColumnNumberTest-ErrorStmt 'data' 'data'Test-ErrorStmt 'data -s & {}' 'data -s'Test-ErrorStmt 'data -s ) {}' 'data -s'Test-ErrorStmt 'data -s abc' 'data -s abc' 'abc'Test-ErrorStmt 'data -s abc,' 'data -s abc,' 'abc'Test-ErrorStmt 'data -s a,b' 'data -s a,b' 'a' 'b'}Describe 'try/catch/finally statement parsing' -Tags "CI" {ShouldBeParseError 'try' MissingTryStatementBlock 3ShouldBeParseError 'try {}' MissingCatchOrFinally 6ShouldBeParseError 'try {} catch' MissingCatchHandlerBlock 12ShouldBeParseError 'try {} finally' MissingFinallyStatementBlock 15 -CheckColumnNumberShouldBeParseError 'try {} catch [int]' MissingCatchHandlerBlock 19 -CheckColumnNumberShouldBeParseError 'try {} catch {} finally' MissingFinallyStatementBlock 23ShouldBeParseError 'try {} catch {} catch' MissingCatchHandlerBlock 21ShouldBeParseError 'try {} catch [int],' MissingTypeLiteralToken 19ShouldBeParseError 'try {} finally { return }' ControlLeavingFinally 17ShouldBeParseError 'try {} finally { break }' ControlLeavingFinally 17ShouldBeParseError 'try {} finally { continue }' ControlLeavingFinally 17Test-ErrorStmt 'try'                                   'try'Test-ErrorStmt 'try {1}'                               'try {1}' '{1}' '1' '1' '1'Test-ErrorStmt 'try {1} catch'                         'try {1} catch'  '{1}' '1' '1' '1'Test-ErrorStmt 'try {1} finally'                       'try {1} finally'  '{1}' '1' '1' '1'Test-ErrorStmt 'try {1} catch [int]'                   'try {1} catch [int]' '{1}' '1' '1' '1' '[int]'Test-ErrorStmt 'try {1} catch {2} finally'             'try {1} catch {2} finally' '{1}' '1' '1' '1' 'catch {2}' '{2}' '2' '2' '2'Test-ErrorStmt 'try {1} catch {2} catch'               'try {1} catch {2} catch' '{1}' '1' '1' '1' 'catch {2}' '{2}' '2' '2' '2'Test-ErrorStmt 'try {1} catch [int],[char] {2} catch'  'try {1} catch [int],[char] {2} catch' '{1}' '1' '1' '1' 'catch [int],[char] {2}' '{2}' '2' '2' '2' '[int]' '[char]'Test-ErrorStmt 'try {1} catch [int],'                  'try {1} catch [int],' '{1}' '1' '1' '1' '[int]'}Describe 'switch statement parsing' -Tags "CI" {ShouldBeParseError 'switch' PipelineValueRequired 6ShouldBeParseError 'switch -abc' InvalidSwitchFlag,PipelineValueRequired 7,11ShouldBeParseError 'switch -file' MissingFilenameOption 12ShouldBeParseError 'switch -file a (1)' PipelineValueRequired,MissingCurlyBraceInSwitchStatement 15,18ShouldBeParseError 'switch (' PipelineValueRequired 8ShouldBeParseError 'switch ()' PipelineValueRequired,MissingCurlyBraceInSwitchStatement 8,9ShouldBeParseError 'switch ("abc")  ' MissingCurlyBraceInSwitchStatement 14ShouldBeParseError 'switch ("abc")  {' MissingSwitchConditionExpression 17ShouldBeParseError 'switch ("abc")  { 1' MissingSwitchStatementClause 19ShouldBeParseError 'switch ("abc")  { 1 }' MissingSwitchStatementClause 19ShouldBeParseError 'switch (1) {default {} default {}}' MultipleSwitchDefaultClauses 23Test-ErrorStmt 'switch'                'switch'Test-ErrorStmt 'switch -abc'           'switch -abc'Test-ErrorStmt 'switch ('              'switch ('Test-ErrorStmt 'switch ()'             'switch ()'Test-ErrorStmt 'switch -file'          'switch -file'Test-ErrorStmt              'switch -file a'         'switch -file a'Test-ErrorStmtForSwitchFlag 'switch -file a'         'file'  'a' 'a' 'a'Test-ErrorStmt              'switch -file a (1)'     'switch -file a (1)'  '1' '1' '1'Test-ErrorStmtForSwitchFlag 'switch -file a (1)'     'file'  'a' 'a' 'a'Test-ErrorStmt 'switch (1) {foo'       'switch (1) {foo' 'foo' '1' '1' '1'Test-ErrorStmt 'switch (1) {foo}'      'switch (1) {foo' 'foo' '1' '1' '1'Test-ErrorStmt 'switch (1) {foo {bar}' 'switch (1) {foo {bar}' 'foo' '{bar}' 'bar' 'bar' 'bar' '1' '1' '1'Test-ErrorStmt 'switch (1) {default {9} default{2}' 'switch (1) {default {9} default{2}' 'default' '{9}' '9' '9' '9' 'default' '{2}' '2' '2' '2' '1' '1' '1'}Describe 'function statement parsing' -Tags "CI" {ShouldBeParseError 'function' MissingNameAfterKeyword 8ShouldBeParseError 'function foo' MissingFunctionBody 12ShouldBeParseError 'function foo(' MissingEndParenthesisInFunctionParameterList 13ShouldBeParseError 'function foo {' MissingEndCurlyBrace 13ShouldBeParseError 'function foo { function bar { if (1) {} }' MissingEndCurlyBrace 13ShouldBeParseError 'function f { param($a,[int]$a) }' DuplicateFormalParameter 27ShouldBeParseError 'function f($a,[int]$a){}' DuplicateFormalParameter 19ShouldBeParseError 'function foo {param(}' MissingEndParenthesisInFunctionParameterList 20Test-ErrorStmt 'function foo()' 'function foo()'Test-ErrorStmt 'function foo($a)' 'function foo($a)' '$a' '$a'Test-ErrorStmt 'function foo($a = 1)' 'function foo($a = 1)' '$a = 1' '1' '$a'Test-ErrorStmt 'function foo($a' 'function foo($a' '$a' '$a'Test-ErrorStmt 'function foo($a 1' 'function foo($a' '$a' '$a'Test-ErrorStmt 'function foo($a = 1' 'function foo($a = 1' '$a = 1' '1' '$a'}Describe 'assignment statement parsing' -Tags "CI" {ShouldBeParseError '$a,$b += 1,2' InvalidLeftHandSide 0}Describe 'null coalescing assignment statement parsing' -Tag 'CI' {BeforeAll {$skipTest = -not $EnabledExperimentalFeatures.Contains('PSCoalescingOperators')if ($skipTest) {Write-Verbose "Test Suite Skipped. The test suite requires the experimental feature 'PSCoalescingOperators' to be enabled." -Verbose$originalDefaultParameterValues = $PSDefaultParameterValues.Clone()$PSDefaultParameterValues["it:skip"] = $true}}AfterAll {if ($skipTest) {$global:PSDefaultParameterValues = $originalDefaultParameterValues}}ShouldBeParseError '1 ??= 1' InvalidLeftHandSide 0ShouldBeParseError '@() ??= 1' InvalidLeftHandSide 0ShouldBeParseError '@{} ??= 1' InvalidLeftHandSide 0ShouldBeParseError '1..2 ??= 1' InvalidLeftHandSide 0ShouldBeParseError '[int] ??= 1' InvalidLeftHandSide 0ShouldBeParseError '$cricket ?= $soccer' ExpectedValueExpression,InvalidLeftHandSide 10,0}Describe 'null coalescing statement parsing' -Tag "CI" {BeforeAll {$skipTest = -not $EnabledExperimentalFeatures.Contains('PSCoalescingOperators')if ($skipTest) {Write-Verbose "Test Suite Skipped. The test suite requires the experimental feature 'PSCoalescingOperators' to be enabled." -Verbose$originalDefaultParameterValues = $PSDefaultParameterValues.Clone()$PSDefaultParameterValues["it:skip"] = $true}}AfterAll {if ($skipTest) {$global:PSDefaultParameterValues = $originalDefaultParameterValues}}ShouldBeParseError '$x??=' ExpectedValueExpression 5ShouldBeParseError '$x ??Get-Thing' ExpectedValueExpression,UnexpectedToken 5,5ShouldBeParseError '$??=$false' ExpectedValueExpression,InvalidLeftHandSide 3,0ShouldBeParseError '$hello ??? $what' ExpectedValueExpression,MissingColonInTernaryExpression 9,17}Describe 'splatting parsing' -Tags "CI" {ShouldBeParseError '@a' SplattingNotPermitted 0ShouldBeParseError 'foreach (@a in $b) {}' SplattingNotPermitted 9ShouldBeParseError 'param(@a)' SplattingNotPermitted 6ShouldBeParseError 'function foo (@a) {}' SplattingNotPermitted 14}Describe 'Pipes parsing' -Tags "CI" {ShouldBeParseError '|gps' EmptyPipeElement 0ShouldBeParseError 'gps|' EmptyPipeElement 4ShouldBeParseError 'gps| |foreach name' EmptyPipeElement 4ShouldBeParseError '1|1' ExpressionsMustBeFirstInPipeline 2ShouldBeParseError '$a=' ExpectedValueExpression 3}Describe 'commands parsing' -Tags "CI" {ShouldBeParseError 'gcm -a:' ParameterRequiresArgument 7ShouldBeParseError 'gcm -a: 1,' MissingExpression 11 -CheckColumnNumberShouldBeParseError 'gcm ,' MissingArgument 4}Describe 'tokens parsing' -Tags "CI" {ShouldBeParseError '   )' UnexpectedToken 3ShouldBeParseError '   }' UnexpectedToken 4 -CheckColumnNumber}Describe 'expressions parsing' -Tags "CI" {ShouldBeParseError '1+' ExpectedValueExpression 2ShouldBeParseError '[a()][b]' UnexpectedAttribute 0ShouldBeParseError '[a()][b]2' UnexpectedAttribute 0ShouldBeParseError '[ref][ref]$x' ReferenceNeedsToBeByItselfInTypeSequence 5ShouldBeParseError '[int][ref]$x' ReferenceNeedsToBeLastTypeInTypeConversion 5ShouldBeParseError '[int][ref]$x = 42' ReferenceNeedsToBeByItselfInTypeConstraint 5}Describe 'Hash Expression parsing' -Tags "CI" {ShouldBeParseError '@{ a=1;b=2;c=3;' MissingEndCurlyBrace 2}Describe 'Unicode escape sequence parsing' -Tag "CI" {ShouldBeParseError '"`u{}"' InvalidUnicodeEscapeSequence 1                 ShouldBeParseError '"`u{219z}"' InvalidUnicodeEscapeSequence 7             ShouldBeParseError '"`u{12345z}"' InvalidUnicodeEscapeSequence 9           ShouldBeParseError '"`u{1234567}"' TooManyDigitsInUnicodeEscapeSequence 10 ShouldBeParseError '"`u{110000}"' InvalidUnicodeEscapeSequenceValue 4      ShouldBeParseError '"`u2195}"' InvalidUnicodeEscapeSequence 1ShouldBeParseError '"`u{' InvalidUnicodeEscapeSequence,TerminatorExpectedAtEndOfString 4,0ShouldBeParseError '"`u{1' InvalidUnicodeEscapeSequence,TerminatorExpectedAtEndOfString 5,0ShouldBeParseError '"`u{123456' MissingUnicodeEscapeSequenceTerminator,TerminatorExpectedAtEndOfString 10,0ShouldBeParseError '"`u{1234567' TooManyDigitsInUnicodeEscapeSequence,TerminatorExpectedAtEndOfString 10,0}Describe "Ternary Operator parsing" -Tags CI {BeforeAll {$skipTest = -not $EnabledExperimentalFeatures.Contains('PSTernaryOperator')if ($skipTest) {Write-Verbose "Test Suite Skipped. The test suite requires the experimental feature 'PSTernaryOperator' to be enabled." -Verbose$originalDefaultParameterValues = $PSDefaultParameterValues.Clone()$PSDefaultParameterValues["it:skip"] = $true}else {$testCases_basic = @(@{ Script = '$true?2:3'; TokenKind = [System.Management.Automation.Language.TokenKind]::Variable; }@{ Script = '$false?';   TokenKind = [System.Management.Automation.Language.TokenKind]::Variable; }@{ Script = '$:abc';     TokenKind = [System.Management.Automation.Language.TokenKind]::Variable; }@{ Script = '$env:abc';  TokenKind = [System.Management.Automation.Language.TokenKind]::Variable; }@{ Script = '$env:123';  TokenKind = [System.Management.Automation.Language.TokenKind]::Variable; }@{ Script = 'a?2:2';     TokenKind = [System.Management.Automation.Language.TokenKind]::Generic;  }@{ Script = '1?2:3';     TokenKind = [System.Management.Automation.Language.TokenKind]::Generic;  }@{ Script = 'a?';        TokenKind = [System.Management.Automation.Language.TokenKind]::Generic;  }@{ Script = 'a?b';       TokenKind = [System.Management.Automation.Language.TokenKind]::Generic;  }@{ Script = '1?';        TokenKind = [System.Management.Automation.Language.TokenKind]::Generic;  }@{ Script = '?2:3';      TokenKind = [System.Management.Automation.Language.TokenKind]::Generic;  })$testCases_incomplete = @(@{ Script = '$true ?';     ErrorId = "ExpectedValueExpression";         AstType = [System.Management.Automation.Language.ErrorExpressionAst] }@{ Script = '$true ? 3';   ErrorId = "MissingColonInTernaryExpression"; AstType = [System.Management.Automation.Language.ErrorExpressionAst] }@{ Script = '$true ? 3 :'; ErrorId = "ExpectedValueExpression";         AstType = [System.Management.Automation.Language.TernaryExpressionAst] }@{ Script = "`$true`t?";     ErrorId = "ExpectedValueExpression";         AstType = [System.Management.Automation.Language.ErrorExpressionAst] }@{ Script = "`$true`t?`t3";   ErrorId = "MissingColonInTernaryExpression"; AstType = [System.Management.Automation.Language.ErrorExpressionAst] }@{ Script = "`$true`t?`t3`t:"; ErrorId = "ExpectedValueExpression";         AstType = [System.Management.Automation.Language.TernaryExpressionAst] })}}AfterAll {if ($skipTest) {$global:PSDefaultParameterValues = $originalDefaultParameterValues}}It "Question-mark and colon parsed correctly in <Script> when not in ternary expression context" -TestCases $testCases_basic {param($Script, $TokenKind)$tks = $null$ers = $null$result = [System.Management.Automation.Language.Parser]::ParseInput($Script, [ref]$tks, [ref]$ers)$tks[0].Kind | Should -BeExactly $TokenKind$tks[0].Text | Should -BeExactly $Scriptif ($TokenKind -eq "Variable") {$result.EndBlock.Statements[0].PipelineElements[0].Expression | Should -BeOfType 'System.Management.Automation.Language.VariableExpressionAst'$result.EndBlock.Statements[0].PipelineElements[0].Expression.Extent.Text | Should -BeExactly $Script} else {$result.EndBlock.Statements[0].PipelineElements[0].CommandElements[0] | Should -BeOfType 'System.Management.Automation.Language.StringConstantExpressionAst'$result.EndBlock.Statements[0].PipelineElements[0].CommandElements[0].Extent.Text | Should -BeExactly $Script}}It "Question-mark and colon can be used as command names" {function a?b:c { 'a?b:c' }function 2?3:4 { '2?3:4' }a?b:c | Should -BeExactly 'a?b:c'2?3:4 | Should -BeExactly '2?3:4'}It "Incomplete ternary expression <Script> should generate correct error" -TestCases $testCases_incomplete {param($Script, $ErrorId, $AstType)$ers = $null$result = [System.Management.Automation.Language.Parser]::ParseInput($Script, [ref]$null, [ref]$ers)$ers.Count | Should -Be 1$ers.IncompleteInput | Should -BeTrue$ers.ErrorId | Should -BeExactly $ErrorId$result.EndBlock.Statements[0].PipelineElements[0].Expression | Should -BeOfType $AstType}It "Generate ternary AST when operands are missing - '`$true ? :'" {$ers = $null$result = [System.Management.Automation.Language.Parser]::ParseInput('$true ? :', [ref]$null, [ref]$ers)$ers.Count | Should -Be 2$ers[0].IncompleteInput | Should -BeFalse$ers[0].ErrorId | Should -BeExactly 'ExpectedValueExpression'$ers[1].IncompleteInput | Should -BeTrue$ers[1].ErrorId | Should -BeExactly 'ExpectedValueExpression'$expr = $result.EndBlock.Statements[0].PipelineElements[0].Expression$expr | Should -BeOfType 'System.Management.Automation.Language.TernaryExpressionAst'$expr.IfTrue | Should -BeOfType 'System.Management.Automation.Language.ErrorExpressionAst'$expr.IfFalse | Should -BeOfType 'System.Management.Automation.Language.ErrorExpressionAst'}It "Generate ternary AST when operands are missing - '`$true ? : 3'" {$ers = $null$result = [System.Management.Automation.Language.Parser]::ParseInput('$true ? : 3', [ref]$null, [ref]$ers)$ers.Count | Should -Be 1$ers.IncompleteInput | Should -BeFalse$ers.ErrorId | Should -BeExactly "ExpectedValueExpression"$expr = $result.EndBlock.Statements[0].PipelineElements[0].Expression$expr | Should -BeOfType 'System.Management.Automation.Language.TernaryExpressionAst'$expr.IfTrue | Should -BeOfType 'System.Management.Automation.Language.ErrorExpressionAst'$expr.IfFalse | Should -BeOfType 'System.Management.Automation.Language.ConstantExpressionAst'}}