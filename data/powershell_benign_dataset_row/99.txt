function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {Write-HostWrite-Host "AzureAD Powershell module not installed..." -f RedWrite-Host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f YellowWrite-Host "Script can't continue..." -f RedWrite-Hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {Write-Host $_.Exception.Message -f RedWrite-Host $_.Exception.ItemName -f RedWrite-Hostbreak}}Function Test-JSON(){param ($JSON)try {$TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop$validJson = $true}catch {$validJson = $false$_.Exception}if (!$validJson){Write-Host "Provided JSON isn't in valid JSON format" -f Redbreak}}Function Test-AppBundleId(){param ($bundleId)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileApps?`$filter=(microsoft.graph.managedApp/appAvailability eq null or microsoft.graph.managedApp/appAvailability eq 'lineOfBusiness' or isAssigned eq true) and (isof('microsoft.graph.iosLobApp') or isof('microsoft.graph.iosStoreApp') or isof('microsoft.graph.iosVppApp') or isof('microsoft.graph.managedIOSStoreApp') or isof('microsoft.graph.managedIOSLobApp'))"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"$mobileApps = Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}$app = $mobileApps.value | where {$_.bundleId -eq $bundleId}If($app){return $app.id}Else{return $false}}Function Test-AppPackageId(){param ($packageId)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileApps?`$filter=(isof('microsoft.graph.androidForWorkApp') or microsoft.graph.androidManagedStoreApp/supportsOemConfig eq false)"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"$mobileApps = Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}$app = $mobileApps.value | where {$_.packageId -eq $packageId}If($app){return $app.id}Else{return $false}}Function Add-ManagedAppAppConfigPolicy(){[cmdletbinding()]param($JSON)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/targetedManagedAppConfigurations"try {if($JSON -eq "" -or $JSON -eq $null){Write-Host "No JSON specified, please specify valid JSON for the App Configuration Policy..." -f Red}else {Test-JSON -JSON $JSON$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}}Function Add-ManagedDeviceAppConfigPolicy(){[cmdletbinding()]param($JSON)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileAppConfigurations"try {if($JSON -eq "" -or $JSON -eq $null){Write-Host "No JSON specified, please specify valid JSON for the App Configuration Policy..." -f Red}else {Test-JSON -JSON $JSON$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}}Write-Hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){Write-Host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor YellowWrite-Hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}$ImportPath = Read-Host -Prompt "Please specify a path to a JSON file to import data from e.g. C:\IntuneOutput\Policies\policy.json"$ImportPath = $ImportPath.replace('"','')if(!(Test-Path "$ImportPath")){Write-Host "Import Path for JSON file doesn't exist..." -ForegroundColor RedWrite-Host "Script can't continue..." -ForegroundColor RedWrite-Hostbreak}$JSON_Data = gc "$ImportPath"$JSON_Convert = $JSON_Data | ConvertFrom-Json | Select-Object -Property * -ExcludeProperty id,createdDateTime,lastModifiedDateTime,version,isAssigned,roleScopeTagIds$DisplayName = $JSON_Convert.displayNameWrite-HostWrite-Host "App Configuration Policy '$DisplayName' Found..." -ForegroundColor YellowIf(($JSON_Convert.'@odata.type' -eq "Write-Host "App Configuration JSON is for Managed Devices" -ForegroundColor YellowIf($JSON_Convert.'@odata.type' -eq "$targetedMobileApp = Test-AppBundleId -bundleId $JSON_Convert.bundleIdIf($targetedMobileApp){Write-HostWrite-Host "Targeted app $($JSON_Convert.bundleId) has already been added from the App Store" -ForegroundColor YellowWrite-Host "The App Configuration Policy will be created" -ForegroundColor YellowWrite-HostIf(!($targetedMobileApp -eq $JSON_Convert.targetedMobileApps)){$JSON_Convert.targetedMobileApps.SetValue($targetedMobileApp,0)}$JSON_Output = $JSON_Convert | ConvertTo-Json -Depth 5$JSON_OutputWrite-HostWrite-Host "Adding App Configuration Policy '$DisplayName'" -ForegroundColor YellowAdd-ManagedDeviceAppConfigPolicy -JSON $JSON_Output}Else{Write-HostWrite-Host "Targeted app bundle id '$($JSON_Convert.bundleId)' has not been added from the App Store" -ForegroundColor RedWrite-Host "The App Configuration Policy can't be created" -ForegroundColor Red}}ElseIf($JSON_Convert.'@odata.type' -eq "$targetedMobileApp = Test-AppPackageId -packageId $JSON_Convert.packageIdIf($targetedMobileApp){Write-HostWrite-Host "Targeted app $($JSON_Convert.packageId) has already been added from Managed Google Play" -ForegroundColor YellowWrite-Host "The App Configuration Policy will be created" -ForegroundColor YellowWrite-HostIf(!($targetedMobileApp -eq $JSON_Convert.targetedMobileApps)){$JSON_Convert.targetedMobileApps.SetValue($targetedMobileApp,0)}$JSON_Output = $JSON_Convert | ConvertTo-Json -Depth 5$JSON_OutputWrite-Host   Write-Host "Adding App Configuration Policy '$DisplayName'" -ForegroundColor Yellow                                                      Add-ManagedDeviceAppConfigPolicy -JSON $JSON_Output}Else{Write-HostWrite-Host "Targeted app package id '$($JSON_Convert.packageId)' has not been added from Managed Google Play" -ForegroundColor RedWrite-Host "The App Configuration Policy can't be created" -ForegroundColor Red}}}Else{Write-Host "App Configuration JSON is for Managed Apps" -ForegroundColor Yellow$JSON_Output = $JSON_Convert | ConvertTo-Json -Depth 5$JSON_OutputWrite-HostWrite-Host "Adding App Configuration Policy '$DisplayName'" -ForegroundColor YellowAdd-ManagedAppAppConfigPolicy -JSON $JSON_Output   }