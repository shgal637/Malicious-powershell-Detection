function Test-FrontDoorCrud{$Name = getAssetName$resourceGroup = TestSetup-CreateResourceGroup$resourceGroupName = $resourceGroup.ResourceGroupName$tags = @{"tag1" = "value1"; "tag2" = "value2"}$hostName = "$Name.azurefd.net"$routingrule1 = New-AzFrontDoorRoutingRuleObject -Name "routingrule1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -FrontendEndpointName "frontendEndpoint1" -BackendPoolName "backendPool1"$backend1 = New-AzFrontDoorBackendObject -Address "contoso1.azurewebsites.net" $healthProbeSetting1 = New-AzFrontDoorHealthProbeSettingObject -Name "healthProbeSetting1" $loadBalancingSetting1 = New-AzFrontDoorLoadBalancingSettingObject -Name "loadbalancingsetting1" $frontendEndpoint1 = New-AzFrontDoorFrontendEndpointObject -Name "frontendendpoint1" -HostName $hostName$backendpool1 = New-AzFrontDoorBackendPoolObject -Name "backendpool1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -Backend $backend1 -HealthProbeSettingsName "healthProbeSetting1" -LoadBalancingSettingsName "loadBalancingSetting1"New-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -RoutingRule $routingrule1 -BackendPool $backendpool1 -FrontendEndpoint $frontendEndpoint1 -LoadBalancingSetting $loadBalancingSetting1 -HealthProbeSetting $healthProbeSetting1 -Tag $tags$retrievedFrontDoor = Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupNameAssert-NotNull $retrievedFrontDoorAssert-AreEqual $Name $retrievedFrontDoor.NameAssert-AreEqual $routingrule1.Name $retrievedFrontDoor.RoutingRules[0].NameAssert-AreEqual $loadBalancingSetting1.Name $retrievedFrontDoor.LoadBalancingSettings[0].NameAssert-AreEqual $healthProbeSetting1.Name $retrievedFrontDoor.HealthProbeSettings[0].NameAssert-AreEqual $backendpool1.Name $retrievedFrontDoor.BackendPools[0].NameAssert-AreEqual $frontendEndpoint1.Name $retrievedFrontDoor.FrontendEndpoints[0].NameAssert-AreEqual $retrievedFrontDoor.RoutingRules[0].RouteConfiguration.GetType().Name "PSForwardingConfiguration"Assert-Tags $tags $retrievedFrontDoor.Tags$newTags = @{"tag1" = "value3"; "tag2" = "value4"}$updatedFrontDoor = Set-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -Tag $newTagsAssert-NotNull $updatedFrontDoorAssert-AreEqual $Name $updatedFrontDoor.NameAssert-AreEqual $routingrule1.Name $updatedFrontDoor.RoutingRules[0].NameAssert-AreEqual $loadBalancingSetting1.Name $updatedFrontDoor.LoadBalancingSettings[0].NameAssert-AreEqual $healthProbeSetting1.Name $updatedFrontDoor.HealthProbeSettings[0].NameAssert-AreEqual $backendpool1.Name $updatedFrontDoor.BackendPools[0].NameAssert-AreEqual $frontendEndpoint1.Name $updatedFrontDoor.FrontendEndpoints[0].NameAssert-Tags $newTags $updatedFrontDoor.Tags$removed = Remove-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -PassThruAssert-True { $removed }Assert-ThrowsContains { Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName } "does not exist"Remove-AzResourceGroup -Name $ResourceGroupName -Force}function Test-FrontDoorCrudRedirect{$Name = getAssetName$resourceGroup = TestSetup-CreateResourceGroup$resourceGroupName = $resourceGroup.ResourceGroupName$tags = @{"tag1" = "value1"; "tag2" = "value2"}$hostName = "$Name.azurefd.net"$customHost = "contoso2"$customPath = "/test"$routingrule1 = New-AzFrontDoorRoutingRuleObject -Name "routingrule1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -FrontendEndpointName "frontendEndpoint1" -CustomHost $customHost$backend1 = New-AzFrontDoorBackendObject -Address "contoso1.azurewebsites.net" $healthProbeSetting1 = New-AzFrontDoorHealthProbeSettingObject -Name "healthProbeSetting1" $loadBalancingSetting1 = New-AzFrontDoorLoadBalancingSettingObject -Name "loadbalancingsetting1" $frontendEndpoint1 = New-AzFrontDoorFrontendEndpointObject -Name "frontendendpoint1" -HostName $hostName$backendpool1 = New-AzFrontDoorBackendPoolObject -Name "backendpool1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -Backend $backend1 -HealthProbeSettingsName "healthProbeSetting1" -LoadBalancingSettingsName "loadBalancingSetting1"New-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -RoutingRule $routingrule1 -BackendPool $backendpool1 -FrontendEndpoint $frontendEndpoint1 -LoadBalancingSetting $loadBalancingSetting1 -HealthProbeSetting $healthProbeSetting1 -Tag $tags$retrievedFrontDoor = Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupNameAssert-NotNull $retrievedFrontDoorAssert-AreEqual $Name $retrievedFrontDoor.NameAssert-AreEqual $routingrule1.Name $retrievedFrontDoor.RoutingRules[0].NameAssert-AreEqual $loadBalancingSetting1.Name $retrievedFrontDoor.LoadBalancingSettings[0].NameAssert-AreEqual $healthProbeSetting1.Name $retrievedFrontDoor.HealthProbeSettings[0].NameAssert-AreEqual $backendpool1.Name $retrievedFrontDoor.BackendPools[0].NameAssert-AreEqual $frontendEndpoint1.Name $retrievedFrontDoor.FrontendEndpoints[0].NameAssert-Tags $tags $retrievedFrontDoor.TagsAssert-AreEqual $retrievedFrontDoor.RoutingRules[0].RouteConfiguration.GetType().Name "PSRedirectConfiguration"Assert-AreEqual $retrievedFrontDoor.RoutingRules[0].RouteConfiguration.CustomHost $customHostAssert-AreEqual $retrievedFrontDoor.EnforceCertificateNameCheck "Enabled"$routingrule1 = New-AzFrontDoorRoutingRuleObject -Name "routingrule1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -FrontendEndpointName "frontendEndpoint1" -CustomHost $customHost -CustomPath $customPath$updatedFrontDoor = Set-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -RoutingRule $routingrule1Assert-NotNull $updatedFrontDoorAssert-AreEqual $Name $updatedFrontDoor.NameAssert-AreEqual $routingrule1.Name $updatedFrontDoor.RoutingRules[0].NameAssert-AreEqual $loadBalancingSetting1.Name $updatedFrontDoor.LoadBalancingSettings[0].NameAssert-AreEqual $healthProbeSetting1.Name $updatedFrontDoor.HealthProbeSettings[0].NameAssert-AreEqual $backendpool1.Name $updatedFrontDoor.BackendPools[0].NameAssert-AreEqual $frontendEndpoint1.Name $updatedFrontDoor.FrontendEndpoints[0].NameAssert-AreEqual $updatedFrontDoor.RoutingRules[0].RouteConfiguration.GetType().Name "PSRedirectConfiguration"Assert-AreEqual $updatedFrontDoor.RoutingRules[0].RouteConfiguration.CustomHost $customHostAssert-AreEqual $updatedFrontDoor.RoutingRules[0].RouteConfiguration.CustomPath $customPathAssert-AreEqual $updatedFrontDoor.EnforceCertificateNameCheck "Enabled"$updatedFrontDoor = Set-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -DisableCertificateNameCheckAssert-NotNull $updatedFrontDoorAssert-AreEqual $Name $updatedFrontDoor.NameAssert-AreEqual $routingrule1.Name $updatedFrontDoor.RoutingRules[0].NameAssert-AreEqual $loadBalancingSetting1.Name $updatedFrontDoor.LoadBalancingSettings[0].NameAssert-AreEqual $healthProbeSetting1.Name $updatedFrontDoor.HealthProbeSettings[0].NameAssert-AreEqual $backendpool1.Name $updatedFrontDoor.BackendPools[0].NameAssert-AreEqual $frontendEndpoint1.Name $updatedFrontDoor.FrontendEndpoints[0].NameAssert-AreEqual $updatedFrontDoor.RoutingRules[0].RouteConfiguration.GetType().Name "PSRedirectConfiguration"Assert-AreEqual $updatedFrontDoor.RoutingRules[0].RouteConfiguration.CustomHost $customHostAssert-AreEqual $updatedFrontDoor.RoutingRules[0].RouteConfiguration.CustomPath $customPathAssert-AreEqual $updatedFrontDoor.EnforceCertificateNameCheck "Disabled"$removed = Remove-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -PassThruAssert-True { $removed }Assert-ThrowsContains { Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName } "does not exist"Remove-AzResourceGroup -Name $ResourceGroupName -Force}function Test-FrontDoorCrudWithPiping{$Name = getAssetName$resourceGroup = TestSetup-CreateResourceGroup$resourceGroupName = $resourceGroup.ResourceGroupName$tags = @{"tag1" = "value1"; "tag2" = "value2"}$hostName = "$Name.azurefd.net"$routingrule1 = New-AzFrontDoorRoutingRuleObject -Name "routingrule1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -FrontendEndpointName "frontendEndpoint1" -BackendPoolName "backendPool1"$backend1 = New-AzFrontDoorBackendObject -Address "contoso1.azurewebsites.net" $healthProbeSetting1 = New-AzFrontDoorHealthProbeSettingObject -Name "healthProbeSetting1" $loadBalancingSetting1 = New-AzFrontDoorLoadBalancingSettingObject -Name "loadbalancingsetting1" $frontendEndpoint1 = New-AzFrontDoorFrontendEndpointObject -Name "frontendendpoint1" -HostName $hostName$backendpool1 = New-AzFrontDoorBackendPoolObject -Name "backendpool1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -Backend $backend1 -HealthProbeSettingsName "healthProbeSetting1" -LoadBalancingSettingsName "loadBalancingSetting1"New-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -RoutingRule $routingrule1 -BackendPool $backendpool1 -FrontendEndpoint $frontendEndpoint1 -LoadBalancingSetting $loadBalancingSetting1 -HealthProbeSetting $healthProbeSetting1 -Tag $tags$newTags = @{"tag1" = "value3"; "tag2" = "value4"}$updatedFrontDoor = Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName | Set-AzFrontDoor -Tag $newTagsAssert-NotNull $updatedFrontDoorAssert-AreEqual $Name $updatedFrontDoor.NameAssert-AreEqual $routingrule1.Name $updatedFrontDoor.RoutingRules[0].NameAssert-AreEqual $loadBalancingSetting1.Name $updatedFrontDoor.LoadBalancingSettings[0].NameAssert-AreEqual $healthProbeSetting1.Name $updatedFrontDoor.HealthProbeSettings[0].NameAssert-AreEqual $backendpool1.Name $updatedFrontDoor.BackendPools[0].NameAssert-AreEqual $frontendEndpoint1.Name $updatedFrontDoor.FrontendEndpoints[0].NameAssert-Tags $newTags $updatedFrontDoor.TagsAssert-AreEqual $updatedFrontDoor.RoutingRules[0].RouteConfiguration.GetType().Name "PSForwardingConfiguration"$removed = Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName | Remove-AzFrontDoor  -PassThruAssert-True { $removed }Assert-ThrowsContains { Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName } "does not exist"}function Test-FrontDoorEndpointCustomDomainHTTPS-FrontDoor{$Name = "test-powershell-030620190342"$resourceGroup = TestSetup-CreateResourceGroup$resourceGroupName = $resourceGroup.ResourceGroupName$tags = @{"tag1" = "value1"; "tag2" = "value2"}$hostName = "$Name.azurefd.net"$randomName = getRandomItemName "test"$customDomainHostName = "$randomName.powershell-custom.azfdtest.xyz"$customFrontendEndpointName = "frontendendpoint2"$routingrule1 = New-AzFrontDoorRoutingRuleObject -Name "routingrule1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -FrontendEndpointName "frontendEndpoint1" -BackendPoolName "backendPool1"$backend1 = New-AzFrontDoorBackendObject -Address "contoso1.azurewebsites.net" $healthProbeSetting1 = New-AzFrontDoorHealthProbeSettingObject -Name "healthProbeSetting1" $loadBalancingSetting1 = New-AzFrontDoorLoadBalancingSettingObject -Name "loadbalancingsetting1" $frontendEndpoint1 = New-AzFrontDoorFrontendEndpointObject -Name "frontendendpoint1" -HostName $hostName$frontendEndpoint2 = New-AzFrontDoorFrontendEndpointObject -Name $customFrontendEndpointName -HostName $customDomainHostName$frontendEndpoints = $frontendEndpoint1, $frontendEndpoint2$backendpool1 = New-AzFrontDoorBackendPoolObject -Name "backendpool1" -FrontDoorName $Name -ResourceGroupName $resourceGroupName -Backend $backend1 -HealthProbeSettingsName "healthProbeSetting1" -LoadBalancingSettingsName "loadBalancingSetting1"New-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupName -RoutingRule $routingrule1 -BackendPool $backendpool1 -FrontendEndpoint $frontendEndpoints -LoadBalancingSetting $loadBalancingSetting1 -HealthProbeSetting $healthProbeSetting1 -Tag $tags$retrievedFrontDoor = Get-AzFrontDoor -Name $Name -ResourceGroupName $resourceGroupNameAssert-NotNull $retrievedFrontDoor$customDomain = Enable-AzFrontDoorCustomDomainHttps -ResourceGroupName $ResourceGroupName -FrontDoorName $Name -FrontendEndpointName $customFrontendEndpointNameAssert-AreEqual $customDomain.CustomHttpsProvisioningState "Enabling"[int]$counter = 0do {Wait-Seconds 600$customDomain = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName $ResourceGroupName -FrontDoorName $Name -Name $customFrontendEndpointName} while ($customDomain.CustomHttpsProvisioningState -ne "Enabled" -and $counter++ -lt 50)Assert-AreEqual $customDomain.CustomHttpsProvisioningState "Enabled"$customDomain = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName $ResourceGroupName -FrontDoorName $Name -Name $customFrontendEndpointName$disabledCustomDomain = $customDomain | Disable-AzFrontDoorCustomDomainHttpsAssert-AreEqual $disabledCustomDomain.CustomHttpsProvisioningState "Disabling"[int]$counter = 0do {Wait-Seconds 600$disabledCustomDomain = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName $ResourceGroupName -FrontDoorName $Name -Name $customFrontendEndpointName} while ($disabledCustomDomain.CustomHttpsProvisioningState -ne "Disabled" -and $counter++ -lt 50)Assert-AreEqual $disabledCustomDomain.CustomHttpsProvisioningState "Disabled"$disabledCustomDomain = Get-AzFrontDoorFrontendEndpoint -ResourceId $disabledCustomDomain.Id}