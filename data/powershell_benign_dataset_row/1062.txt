& (Join-Path -Path $PSScriptRoot -ChildPath 'Initialize-CarbonTest.ps1' -Resolve)function Init{}function GivenGroup{param($Name,$WithMember)GivenUser -UserName $WithMember$WithMember = $WithMember | ForEach-Object { Resolve-IdentityName -Name $_ }Install-Group -Name $Name -Description ('Carbon.{0} test group.' -f ($PSCommandPath | Split-Path -Leaf))$group = Get-Group -Name $Name$membersToRemove = $group.Members |Where-Object {$currentMemberName = Resolve-Identity -SID $_.Sidreturn ($currentMemberName -notin $WithMember )}foreach( $memberToRemove in $membersToRemove ){$group.Members.Remove($memberToRemove)}$group.Save()$group.Dispose()Add-GroupMember -Name $Name -Member $WithMember}function GivenUser{param($UserName)foreach( $member in $UserName ){Install-User -Credential (New-Credential -UserName $member -Password 'UVjh9DXN8YqD') -Description ('Carbon.{0} test user.' -f ($PSCommandPath | Split-Path -Leaf))}}function ThenError{param($Matches)It ('should write no errors') {$Global:Error | Should Match $Matches}}function ThenNoError{param()It ('should write no errors') {$Global:Error | Should BeNullOrEmpty}}function ThenGroup{param($Name,[string[]]$HasMember)$HasMember = $HasMember | ForEach-Object { Resolve-IdentityName -Name $_ }$group = Get-Group -Name $NameIt ('should remove members') {$group.Members.Count | Should Be $HasMember.Countforeach( $currentMember in $group.Members ){$currentMemberName = Resolve-IdentityName -SID $currentMember.Sid$currentMemberName -in $HasMember | Should Be $true}$group.Save()$group.Dispose()}}function WhenRemoving{[CmdletBinding(SupportsShouldProcess=$true)]param($Member,$FromGroup)$Global:Error.Clear()Remove-GroupMember -Name $FromGroup -Member $Member}Describe 'Remove-GroupMember.when removing single member' {InitGivenGroup 'FubarSnafu' -WithMember 'one','two'WhenRemoving 'one' -FromGroup 'FubarSnafu'ThenGroup 'FubarSnafu' -HasMember 'two'}Describe 'Remove-GroupMember.when removing multiple members' {InitGivenGroup 'FubarSnafu' -WithMember 'one','two','three'WhenRemoving 'one','two' -FromGroup 'FubarSnafu'ThenGroup 'FubarSnafu' -HasMember 'three'}Describe 'Remove-GroupMember.when removing all members' {InitGivenGroup 'FubarSnafu' -WithMember 'one','two','three'WhenRemoving 'one','two','three' -FromGroup 'FubarSnafu'ThenGroup 'FubarSnafu' -HasMember @()}Describe 'Remove-GroupMember.when removing user not in group' {InitGivenGroup 'FubarSnafu' -WithMember 'one'GivenUser 'two'WhenRemoving 'two' -FromGroup 'FubarSnafu'ThenGroup 'FubarSnafu' -HasMember 'one'ThenNoError}Describe 'Remove-GroupMember.when removing user that does not exist' {InitGivenGroup 'FubarSnafu' -WithMember 'one'WhenRemoving 'fdfsadfdsf' -FromGroup 'FubarSnafu' -ErrorAction SilentlyContinueThenGroup 'FubarSnafu' -HasMember 'one'ThenError -Matches 'Identity\ ''fdfsadfdsf'' not found\.'}Describe 'Remove-GroupMember.when group does not exist' {InitWhenRemoving 'fdfsadfdsf' -FromGroup 'jkfdsjfldsf' -ErrorAction SilentlyContinueThenError -Matches 'Local\ group\ "jkfdsjfldsf" not found\.'}Describe 'Remove-GroupMember.when using -WhatIf switch' {InitGivenGroup 'FubarSnafu' -WithMember 'one','two'WhenRemoving 'one' -FromGroup 'FubarSnafu' -WhatIfThenNoErrorThenGroup 'FubarSnafu' -HasMember 'one','two'}