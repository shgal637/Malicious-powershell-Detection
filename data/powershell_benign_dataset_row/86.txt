function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Get-RBACRole(){$graphApiVersion = "Beta"$Resource = "deviceManagement/roleDefinitions"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Add-RBACRole(){[cmdletbinding()]param($JSON)$graphApiVersion = "Beta"$Resource = "deviceManagement/roleDefinitions"try {if(!$JSON){write-host "No JSON was passed to the function, provide a JSON variable" -f Redbreak}Test-JSON -JSON $JSON$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $Json -ContentType "application/json"}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Test-JSON(){param ($JSON)try {$TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop$validJson = $true}catch {$validJson = $false$_.Exception}if (!$validJson){Write-Host "Provided JSON isn't in valid JSON format" -f Redbreak}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}Write-Host "Please specify which Intune Role you want to duplicate:" -ForegroundColor YellowWrite-Host$RBAC_Roles = (Get-RBACRole | Where-Object { $_.isBuiltInRoleDefinition -eq $true } | Select-Object displayName).displayName$menu = @{}for ($i=1;$i -le $RBAC_Roles.count; $i++) { Write-Host "$i. $($RBAC_Roles[$i-1])" $menu.Add($i,($RBAC_Roles[$i-1]))}Write-Host[int]$ans = Read-Host 'Enter Intune Role to Duplicate (Numerical value)'$selection = $menu.Item($ans)if($selection){Write-HostWrite-Host $selection -f CyanWrite-Host$RBAC_Role = (Get-RBACRole | Where-Object { $_.displayName -eq "$Selection" -and $_.isBuiltInRoleDefinition -eq $true })$RBAC_Actions = $RBAC_Role.permissions.actions | ConvertTo-Json$RBAC_DN = Read-Host "Please specify a displayName for the duplicated Intune Role"if($RBAC_DN -eq ""){Write-Host "Intune Role DisplayName can't be null, please specify a valid DisplayName..." -ForegroundColor RedWrite-Hostbreak}if(Get-RBACRole | Where-Object { $_.displayName -eq "$RBAC_DN"}){Write-Host "A Custom Intune role with the name '$RBAC_DN' already exists..." -ForegroundColor RedWrite-Hostbreak}$JSON = @"{"@odata.type": ""displayName": "$RBAC_DN","description": "$RBAC_DN","permissions": [{   "actions": $RBAC_Actions}],"isBuiltInRoleDefinition": false  }"@Write-Host$JSONWrite-HostWrite-Host "Duplicating Intune Role and Adding to the Intune Service..." -ForegroundColor YellowAdd-RBACRole -JSON $JSON}else {Write-HostWrite-Host "Intune Role specified is invalid..." -f RedWrite-Host "Please specify a valid Intune Role..." -f RedWrite-Hostbreak}Write-Host