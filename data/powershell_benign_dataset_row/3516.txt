function Test-LinkCrud{$createdLink = Create-VirtualNetworkLink $falseAssert-NotNull $createdLinkAssert-NotNull $createdLink.EtagAssert-NotNull $createdLink.NameAssert-NotNull $createdLink.ZoneNameAssert-NotNull $createdLink.ResourceGroupNameAssert-AreEqual 1 $createdLink.Tags.CountAssert-AreEqual $false $createdLink.RegistrationEnabledAssert-AreNotEqual $createdLink.VirtualNetworkId $createdZone.VirtualNetworkIdAssert-AreEqual $createdLink.ProvisioningState "Succeeded"Assert-Null $createdLink.Type$retrievedLink = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.NameAssert-NotNull $retrievedLinkAssert-NotNull $retrievedLink.EtagAssert-AreEqual $createdLink.Name $retrievedLink.NameAssert-AreEqual $createdLink.ResourceGroupName $retrievedLink.ResourceGroupNameAssert-AreEqual $retrievedLink.Etag $createdLink.EtagAssert-AreEqual 1 $retrievedLink.Tags.CountAssert-AreEqual $createdLink.VirtualNetworkId $retrievedLink.VirtualNetworkIdAssert-AreEqual $createdLink.ZoneName $retrievedLink.ZoneNameAssert-AreEqual $createdLink.RegistrationEnabled $retrievedLink.RegistrationEnabledAssert-AreEqual $retrievedLink.ProvisioningState "Succeeded"Assert-Null $retrievedLink.Type$updatedLink = Set-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name -Tag @{tag1="value1";tag2="value2"}Assert-NotNull $updatedLinkAssert-NotNull $updatedLink.EtagAssert-AreEqual $createdLink.Name $updatedLink.NameAssert-AreEqual $createdLink.ResourceGroupName $updatedLink.ResourceGroupNameAssert-AreNotEqual $updatedLink.Etag $createdLink.EtagAssert-AreEqual 2 $updatedLink.Tags.CountAssert-AreEqual $updatedLink.ProvisioningState "Succeeded"Assert-Null $updatedLink.Type$retrievedLink = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.NameAssert-NotNull $retrievedLinkAssert-NotNull $retrievedLink.EtagAssert-AreEqual $createdLink.Name $retrievedLink.NameAssert-AreEqual $createdLink.ResourceGroupName $retrievedLink.ResourceGroupNameAssert-AreEqual $retrievedLink.Etag $updatedLink.EtagAssert-AreEqual 2 $retrievedLink.Tags.CountAssert-AreEqual $retrievedLink.ProvisioningState "Succeeded"Assert-Null $retrievedLink.Type$removed = Remove-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name }Remove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force	}function Test-LinkCrudWithPiping{$createdLink = Create-VirtualNetworkLink $falseAssert-NotNull $createdLinkAssert-NotNull $createdLink.EtagAssert-NotNull $createdLink.NameAssert-NotNull $createdLink.ZoneNameAssert-NotNull $createdLink.ResourceGroupNameAssert-AreEqual 1 $createdLink.Tags.CountAssert-AreEqual $false $createdLink.RegistrationEnabledAssert-AreNotEqual $createdLink.VirtualNetworkId $createdZone.VirtualNetworkIdAssert-AreEqual $createdLink.ProvisioningState "Succeeded"Assert-Null $createdLink.Type$retrievedLink = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.NameAssert-NotNull $retrievedLinkAssert-NotNull $retrievedLink.EtagAssert-AreEqual $createdLink.Name $retrievedLink.NameAssert-AreEqual $createdLink.ResourceGroupName $retrievedLink.ResourceGroupNameAssert-AreEqual $retrievedLink.Etag $createdLink.EtagAssert-AreEqual 1 $retrievedLink.Tags.CountAssert-AreEqual $createdLink.VirtualNetworkId $retrievedLink.VirtualNetworkIdAssert-AreEqual $createdLink.ZoneName $retrievedLink.ZoneNameAssert-AreEqual $createdLink.RegistrationEnabled $retrievedLink.RegistrationEnabledAssert-AreEqual $retrievedLink.ProvisioningState "Succeeded"Assert-Null $retrievedLink.Type$updatedLink = $createdLink | Set-AzPrivateDnsVirtualNetworkLink -Tag @{tag1="value1";tag2="value2"}Assert-NotNull $updatedLinkAssert-NotNull $updatedLink.EtagAssert-AreEqual $createdLink.Name $updatedLink.NameAssert-AreEqual $createdLink.ResourceGroupName $updatedLink.ResourceGroupNameAssert-AreNotEqual $updatedLink.Etag $createdLink.EtagAssert-AreEqual 2 $updatedLink.Tags.CountAssert-AreEqual $updatedLink.ProvisioningState "Succeeded"Assert-Null $updatedLink.Type$retrievedLink = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.NameAssert-NotNull $retrievedLinkAssert-NotNull $retrievedLink.EtagAssert-AreEqual $createdLink.Name $retrievedLink.NameAssert-AreEqual $createdLink.ResourceGroupName $retrievedLink.ResourceGroupNameAssert-AreEqual $retrievedLink.Etag $updatedLink.EtagAssert-AreEqual 2 $retrievedLink.Tags.CountAssert-AreEqual $retrievedLink.ProvisioningState "Succeeded"Assert-Null $retrievedLink.Type$removed = $retrievedLink | Remove-AzPrivateDnsVirtualNetworkLink -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name }Remove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force	}function Test-RegistrationLinkCreate{$createdLink = Create-VirtualNetworkLink $trueAssert-NotNull $createdLinkAssert-AreEqual $true $createdLink.RegistrationEnabledAssert-AreEqual $createdLink.ProvisioningState "Succeeded"Remove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-LinkAlreadyExistsCreateThrow{$createdLink1 = Create-VirtualNetworkLink $false$message = "*exists already and hence cannot be created again*"Assert-ThrowsLike { New-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink1.zoneName -ResourceGroupName $createdLink1.ResourceGroupName -Name $createdLink1.Name -Tag @{tag1="value2"} -VirtualNetworkId $createdLink1.VirtualNetworkId } $messageRemove-AzResourceGroup -Name $createdLink1.ResourceGroupName -Force}function Test-CreateLinkWithVirtualNetworkObject{$zoneName = Get-RandomZoneName$linkName = Get-RandomLinkName$resourceGroup = TestSetup-CreateResourceGroup$createdZone = New-AzPrivateDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tag @{tag1="value1"}$createdVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$createdLink = New-AzPrivateDnsVirtualNetworkLink -ZoneName $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Name $linkName -Tag @{tag1="value1"} -VirtualNetwork $createdVirtualNetwork -EnableRegistrationAssert-NotNull $createdLinkAssert-NotNull $createdLink.EtagAssert-NotNull $createdLink.NameAssert-NotNull $createdLink.ZoneNameAssert-NotNull $createdLink.ResourceGroupNameAssert-AreEqual 1 $createdLink.Tags.CountAssert-AreEqual $true $createdLink.RegistrationEnabledAssert-AreEqual $createdLink.VirtualNetworkId $createdVirtualNetwork.IdAssert-AreEqual $createdLink.ProvisioningState "Succeeded"Assert-Null $createdLink.TypeRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-CreateLinkWithRemoteVirtualId{$zoneName = Get-RandomZoneName$linkName = Get-RandomLinkName$resourceGroup = TestSetup-CreateResourceGroup$createdZone = New-AzPrivateDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tag @{tag1="value1"}$createdLink = New-AzPrivateDnsVirtualNetworkLink -ZoneName $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Name $linkName -Tag @{tag1="value2"} -RemoteVirtualNetworkId $vnet2Id -EnableRegistrationAssert-NotNull $createdLinkAssert-NotNull $createdLink.EtagAssert-NotNull $createdLink.NameAssert-NotNull $createdLink.ZoneNameAssert-NotNull $createdLink.ResourceGroupNameAssert-AreEqual 1 $createdLink.Tags.CountAssert-AreEqual $true $createdLink.RegistrationEnabledAssert-AreEqual $createdLink.VirtualNetworkId $vnet2Assert-AreEqual $createdLink.ProvisioningState "Succeeded"Assert-Null $createdLink.TypeRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-UpdateLinkRegistrationStatusWithPiping{$createdLink = Create-VirtualNetworkLink $false$createdLink.RegistrationEnabled = $true$updatedLink = $createdLink | Set-AzPrivateDnsVirtualNetworkLink	Assert-AreEqual $updatedLink.RegistrationEnabled $true$updatedLink.RegistrationEnabled = $false$reUpdatedLink = $updatedLink | Set-AzPrivateDnsVirtualNetworkLinkAssert-AreEqual $updatedLink.RegistrationEnabled $falseRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-UpdateLinkRegistrationStatusWithResourceId{$createdLink = Create-VirtualNetworkLink $false$updatedLink = Set-AzPrivateDnsVirtualNetworkLink -ResourceId $createdLink.ResourceId -IsRegistrationEnabled $true -Tag @{}Assert-AreEqual $updatedLink.RegistrationEnabled $trueAssert-AreEqual 0 $updatedLink.Tags.CountRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-DeleteLinkWithResourceId{$createdLink = Create-VirtualNetworkLink $false$deletedLink = Remove-AzPrivateDnsVirtualNetworkLink -ResourceId $createdLink.ResourceId -PassThruAssert-True { $deletedLink }Assert-Throws { Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name }Remove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-UpdateLinkWithEtagMismatchThrow{$createdLink = Create-VirtualNetworkLink $false$createdLink.RegistrationEnabled = $true$createdLink.Etag = "gibberish"Assert-ThrowsLike { $createdLink | Set-AzPrivateDnsVirtualNetworkLink } "*(etag mismatch)*"Remove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-UpdateLinkWithEtagMismatchOverwrite{$createdLink = Create-VirtualNetworkLink $falseAssert-AreEqual $createdLink.RegistrationEnabled $false$createdLink.RegistrationEnabled = $true$createdLink.Etag = "gibberish"$updatedLink = $createdLink | Set-AzPrivateDnsVirtualNetworkLink -OverwriteAssert-AreEqual $updatedLink.RegistrationEnabled $trueAssert-AreEqual $updatedLink.ProvisioningState "Succeeded"Remove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-UpdateLinkZoneNotExistsThrow{$createdLink = Create-VirtualNetworkLink $false$message = "*The resource * under resource group * was not found*"Assert-ThrowsLike { Set-AzPrivateDnsVirtualNetworkLink -ZoneName "nonexistingzone.com" -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name -Tag @{tag1="value1";tag2="value2"} } $messageRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-UpdateLinkLinkNotExistsThrow{$createdLink = Create-VirtualNetworkLink $false$message = "*The resource * under resource group * was not found*"Assert-ThrowsLike { Set-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name "nonexistinglink" -Tag @{tag1="value1";tag2="value2"} } $messageRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-UpdateLinkWithNoChangesShouldNotThrow{$createdLink = Create-VirtualNetworkLink $false$updatedLink = $createdLink | Set-AzPrivateDnsVirtualNetworkLinkAssert-AreEqual $updatedLink.ProvisioningState "Succeeded"Remove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-GetLinkZoneNotExistsThrow{$createdLink = Create-VirtualNetworkLink $false$message = "*The resource * under resource group * was not found*"Assert-ThrowsLike { Get-AzPrivateDnsVirtualNetworkLink -ZoneName "nonexistingzone.com" -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name } $messageRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-GetLinkLinkNotExistsThrow{$createdLink = Create-VirtualNetworkLink $false$message = "*The resource * under resource group * was not found*"Assert-ThrowsLike { Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name "nonexistinglink" } $messageRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-RemoveLinkZoneNotExistsShouldNotThrow{$createdLink = Create-VirtualNetworkLink $falseRemove-AzPrivateDnsVirtualNetworkLink -ZoneName "nonexistingzone.com" -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.Name$getLink = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.NameAssert-NotNull $getLinkAssert-AreEqual $getLink.RegistrationEnabled $falseRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-RemoveLinkLinkNotExistsShouldNotThrow{$createdLink = Create-VirtualNetworkLink $falseRemove-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name "nonexistinglink"$getLink = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $createdLink.ZoneName -ResourceGroupName $createdLink.ResourceGroupName -Name $createdLink.NameAssert-NotNull $getLinkAssert-AreEqual $getLink.RegistrationEnabled $falseRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}function Test-ListLinks{$linkName1 = Get-RandomLinkName$linkName2 = Get-RandomLinkName$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$createdZone = New-AzPrivateDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tag @{tag1="value1"}$createdVirtualNetwork1 = TestSetup-CreateVirtualNetwork $resourceGroup$createdVirtualNetwork2 = TestSetup-CreateVirtualNetwork $resourceGroup$createdLink1 = New-AzPrivateDnsVirtualNetworkLink -ZoneName $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Name $linkName1 -Tag @{tag1="value1"} -VirtualNetworkId $createdVirtualNetwork1.Id$createdLink2 = New-AzPrivateDnsVirtualNetworkLink -ZoneName $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Name $linkName2 -Tag @{tag1="value1"} -VirtualNetworkId $createdVirtualNetwork2.Id$getLink = Get-AzPrivateDnsVirtualNetworkLink -ZoneName $zoneName -ResourceGroupName $createdLink1.ResourceGroupNameAssert-NotNull $getLinkAssert-AreEqual 2 $getLink.CountRemove-AzResourceGroup -Name $createdLink.ResourceGroupName -Force}