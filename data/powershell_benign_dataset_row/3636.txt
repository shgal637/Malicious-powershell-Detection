function Test-ListServerAdvisors{$rg = Create-ResourceGroupForTest$server = SetupServer $rgtry{$response = Get-AzSqlServerAdvisor `-ResourceGroupName $server.ResourceGroupName `-ServerName $server.ServerNameAssert-NotNull $responseValidateAdvisorCount $responseforeach($advisor in $response){ValidateServer $advisor $serverValidateAdvisorProperties $advisor}}finally{Remove-ResourceGroupForTest $rg}}function Test-ListServerAdvisorsExpanded{$rg = Create-ResourceGroupForTest$server = SetupServer $rgtry{$response = Get-AzSqlServerAdvisor `-ResourceGroupName $server.ResourceGroupName `-ServerName $server.ServerName -ExpandRecommendedActions `-AdvisorName *Assert-NotNull $responseValidateAdvisorCount $responseforeach($advisor in $response){ValidateServer $advisor $serverValidateAdvisorProperties $advisor}}finally{Remove-ResourceGroupForTest $rg}}function Test-GetServerAdvisor{$rg = Create-ResourceGroupForTest$server = SetupServer $rgtry{$response = Get-AzSqlServerAdvisor `-ResourceGroupName $server.ResourceGroupName `-ServerName $server.ServerName -AdvisorName CreateIndexAssert-NotNull $responseValidateServer $response $serverValidateAdvisorProperties $response}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateServerAdvisor{$rg = Create-ResourceGroupForTest$server = SetupServer $rgtry{$response = Set-AzSqlServerAdvisorAutoExecuteStatus `-ResourceGroupName $server.ResourceGroupName `-ServerName $server.ServerName `-AdvisorName CreateIndex `-AutoExecuteStatus DisabledAssert-NotNull $responseValidateServer $response $serverValidateAdvisorProperties $response}finally{Remove-ResourceGroupForTest $rg}}function Test-ListDatabaseAdvisors{$rg = Create-ResourceGroupForTest$db = SetupDatabase $rgtry{$response = Get-AzSqlDatabaseAdvisor `-ResourceGroupName $db.ResourceGroupName `-ServerName $db.ServerName `-DatabaseName $db.DatabaseName `-AdvisorName *Assert-NotNull $responseValidateAdvisorCount $responseforeach($advisor in $response){ValidateDatabase $advisor $dbValidateAdvisorProperties $advisor}}finally{Remove-ResourceGroupForTest $rg}}function Test-ListDatabaseAdvisorsExpanded{$rg = Create-ResourceGroupForTest$db = SetupDatabase $rgtry{$response = Get-AzSqlDatabaseAdvisor `-ResourceGroupName $db.ResourceGroupName `-ServerName $db.ServerName `-DatabaseName $db.DatabaseName `-ExpandRecommendedActionsAssert-NotNull $responseValidateAdvisorCount $responseforeach($advisor in $response){ValidateDatabase $advisor $dbValidateAdvisorProperties $advisor}}finally{Remove-ResourceGroupForTest $rg}}function Test-GetDatabaseAdvisor{$rg = Create-ResourceGroupForTest$db = SetupDatabase $rgtry{$response = Get-AzSqlDatabaseAdvisor `-ResourceGroupName $db.ResourceGroupName `-ServerName $db.ServerName `-DatabaseName $db.DatabaseName `-AdvisorName CreateIndexAssert-NotNull $responseValidateDatabase $response $dbValidateAdvisorProperties $response}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateDatabaseAdvisor{$rg = Create-ResourceGroupForTest$db = SetupDatabase $rgtry{$response = Set-AzSqlDatabaseAdvisorAutoExecuteStatus `-ResourceGroupName $db.ResourceGroupName `-ServerName $db.ServerName `-DatabaseName $db.DatabaseName `-AdvisorName CreateIndex `-AutoExecuteStatus DisabledAssert-NotNull $responseValidateDatabase $response $dbValidateAdvisorProperties $response}finally{Remove-ResourceGroupForTest $rg}}function Test-ListElasticPoolAdvisors{$rg = Create-ResourceGroupForTest$ep = SetupElasticPool $rgtry{$response = Get-AzSqlElasticPoolAdvisor `-ResourceGroupName $ep.ResourceGroupName`-ServerName $ep.ServerName`-ElasticPoolName $ep.ElasticPoolName `-AdvisorName *Assert-NotNull $responseValidateAdvisorCount $responseforeach($advisor in $response){ValidateElasticPool $advisor $epValidateAdvisorProperties $advisor}}finally{Remove-ResourceGroupForTest $rg}}function Test-ListElasticPoolAdvisorsExpanded{$rg = Create-ResourceGroupForTest$ep = SetupElasticPool $rgtry{$response = Get-AzSqlElasticPoolAdvisor `-ResourceGroupName $ep.ResourceGroupName `-ServerName $ep.ServerName `-ElasticPoolName $ep.ElasticPoolName `-ExpandRecommendedActionsAssert-NotNull $responseValidateAdvisorCount $responseforeach($advisor in $response){ValidateElasticPool $advisor $epValidateAdvisorProperties $advisor}}finally{Remove-ResourceGroupForTest $rg}}function Test-GetElasticPoolAdvisor{$rg = Create-ResourceGroupForTest$ep = SetupElasticPool $rgtry{$response = Get-AzSqlElasticPoolAdvisor `-ResourceGroupName $ep.ResourceGroupName `-ServerName $ep.ServerName `-ElasticPoolName $ep.ElasticPoolName `-AdvisorName CreateIndexAssert-NotNull $responseValidateElasticPool $response $epValidateAdvisorProperties $response}finally{Remove-ResourceGroupForTest $rg}}function SetupServer($resourceGroup){$location = "Southeast Asia"$server = Create-ServerForTest $resourceGroup $locationreturn $server}function SetupDatabase($resourceGroup){$server = SetupServer $resourceGroup$databaseName = Get-DatabaseName$db = New-AzSqlDatabase `-ResourceGroupName $server.ResourceGroupName `-ServerName $server.ServerName `-DatabaseName $databaseName `-Edition Basicreturn $db}function SetupElasticPool($resourceGroup){$server = SetupServer $resourceGroup$poolName = Get-ElasticPoolName$ep = New-AzSqlElasticPool `-ServerName $server.ServerName `-ResourceGroupName $server.ResourceGroupName `-ElasticPoolName $poolName -Edition Basicreturn $ep}function ValidateServer($responseAdvisor, $expectedServer){Assert-AreEqual $responseAdvisor.ResourceGroupName $expectedServer.ResourceGroupNameAssert-AreEqual $responseAdvisor.ServerName $expectedServer.ServerName}function ValidateDatabase($responseAdvisor, $expectedDatabase){Assert-AreEqual $responseAdvisor.ResourceGroupName $expectedDatabase.ResourceGroupNameAssert-AreEqual $responseAdvisor.ServerName $expectedDatabase.ServerNameAssert-AreEqual $responseAdvisor.DatabaseName $expectedDatabase.DatabaseName}function ValidateElasticPool($responseAdvisor, $expectedElasticPool){Assert-AreEqual $responseAdvisor.ResourceGroupName $expectedElasticPool.ResourceGroupNameAssert-AreEqual $responseAdvisor.ServerName $expectedElasticPool.ServerNameAssert-AreEqual $responseAdvisor.ElasticPoolName $expectedElasticPool.ElasticPoolName}function ValidateAdvisorProperties($advisor, $expanded = $false){Assert-True {($advisor.AdvisorStatus -eq "GA") `-or ($advisor.AdvisorStatus -eq "PublicPreview") `-or ($advisor.AdvisorStatus -eq "PrivatePreview")}Assert-AreEqual "Disabled" $advisor.AutoExecuteStatusAssert-True {($advisor.AutoExecuteStatusInheritedFrom -eq "Default") -or `($advisor.AutoExecuteStatusInheritedFrom -eq "Server") -or `($advisor.AutoExecuteStatusInheritedFrom -eq "ElasticPool") -or `($advisor.AutoExecuteStatusInheritedFrom -eq "Database")}}function ValidateAdvisorCount($response){$expectedMinAdvisorCount = 4Assert-True { $response.Count -ge $expectedMinAdvisorCount } "Advisor count was $($response.Count), expected at least $expectedMinAdvisorCount. Response: $response"}