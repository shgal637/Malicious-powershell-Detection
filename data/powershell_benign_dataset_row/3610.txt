function Get-StorageAccountCredentialName{return getAssetName}function Get-ShareName{return getAssetName}function Test-GetShareNonExistent{	$rgname = Get-DeviceResourceGroupName$dfname = Get-DeviceName$sharename = Get-ShareNameAssert-ThrowsContains { Get-AzDataBoxEdgeShare $rgname $dfname $sharename  } "not find"	}function Test-CreateShare{	$rgname = Get-DeviceResourceGroupName$dfname = Get-DeviceName$sharename = Get-ShareName$dataFormat = 'BlockBlob'$staname = Get-StorageAccountCredentialName$encryptionKeyString = Get-EncryptionKey $encryptionKey = ConvertTo-SecureString $encryptionKeyString -AsPlainText -Force$storageAccountType = 'GeneralPurposeStorage'$storageAccountSkuName = 'Standard_LRS'$storageAccountLocation = 'WestUS'$storageAccount = New-AzStorageAccount $rgname $staname $storageAccountSkuName -Location $storageAccountLocation$storageAccountKeys = Get-AzStorageAccountKey $rgname $staname$storageAccountKey = ConvertTo-SecureString $storageAccountKeys[0] -AsPlainText -Force$storageAccountCredential = New-AzDataBoxEdgeStorageAccountCredential $rgname $dfname $staname -StorageAccountType $storageAccountType -StorageAccountAccessKey $storageAccountKey -EncryptionKey $encryptionKeytry{$expected = New-AzDataBoxEdgeShare $rgname $dfname $sharename $storageAccountCredential.Name -Smb -DataFormat $dataFormatAssert-AreEqual $expected.Name $sharename}finally{Remove-AzDataBoxEdgeShare $rgname $dfname $sharenameRemove-AzDataBoxEdgeStorageAccountCredential $rgname $dfname $stanameRemove-AzStorageAccount $rgname $staname}  }function Test-RemoveShare{	$rgname = Get-DeviceResourceGroupName$dfname = Get-DeviceName$sharename = Get-ShareName$dataFormat = 'BlockBlob'$staname = Get-StorageAccountCredentialName$encryptionKeyString = Get-EncryptionKey $encryptionKey = ConvertTo-SecureString $encryptionKeyString -AsPlainText -Force$storageAccountType = 'GeneralPurposeStorage'$storageAccountSkuName = 'Standard_LRS'$storageAccountLocation = 'WestUS'$storageAccount = New-AzStorageAccount $rgname $staname $storageAccountSkuName -Location $storageAccountLocation$storageAccountKeys = Get-AzStorageAccountKey $rgname $staname$storageAccountKey = ConvertTo-SecureString $storageAccountKeys[0] -AsPlainText -Force$storageAccountCredential = New-AzDataBoxEdgeStorageAccountCredential $rgname $dfname $staname -StorageAccountType $storageAccountType -StorageAccountAccessKey $storageAccountKey -EncryptionKey $encryptionKeytry{$expected = New-AzDataBoxEdgeShare $rgname $dfname $sharename $storageAccountCredential.Name -Smb -DataFormat $dataFormatRemove-AzDataBoxEdgeShare $rgname $dfname $sharenameAssert-ThrowsContains { Get-AzDataBoxEdgeShare $rgname $dfname $sharename  } "not find"	}finally{Remove-AzDataBoxEdgeStorageAccountCredential $rgname $dfname $stanameRemove-AzStorageAccount $rgname $staname}  }