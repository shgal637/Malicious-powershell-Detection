$Port = 9878$SiteName = 'TestApplication'$AppName = 'App'$WebConfig = Join-Path $TestDir web.config$AppPoolName = 'TestApplication'function Start-TestFixture{& (Join-Path -Path $PSScriptRoot '..\Initialize-CarbonTest.ps1' -Resolve)}function Start-Test{Uninstall-IisWebsite -Name $SiteNameInstall-IisAppPool -Name $AppPoolNameInstall-IisWebsite -Name $SiteName -Path $TestDir -Bindings "http://*:$Port"if( TEst-Path $WebConfig ){Remove-Item $WebConfig}}function Stop-Test{Uninstall-IisWebsite -Name $SiteName}function Invoke-InstallApplication($Path = $TestDir){$result = Install-IISApplication -SiteName $SiteName -Name $AppName -Path $Path -AppPoolName $AppPoolName -PassThruAssert-NoErrorAssert-NotNull $resultAssert-Is $result ([Microsoft.Web.Administration.Application])Assert-FileDoesNotExist $WebConfig}function Test-ShouldNotReturnAnything($Path = $TestDir){$result = Install-IISApplication -SiteName $SiteName -Name $AppName -Path $Path Assert-NoErrorAssert-Null $result$result = Install-IISApplication -SiteName $SiteName -Name $AppName -Path $env:TEMPAssert-NoErrorAssert-Null $result}function Test-ShouldCreateApplication{Invoke-InstallApplicationAssert-ApplicationRunning$app = Get-IisApplication -SiteName $SiteName -VirtualPath $AppNameAssert-NotNull $appAssert-Equal $AppPoolName $app.ApplicationPoolName}function Test-ShouldResolveApplicationPhysicalPath{Invoke-InstallApplication -Path "$TestDir\..\..\Test\IIS"$physicalPath = Get-IisApplication -SiteName $SiteName -Name $AppName | Select-Object -ExpandProperty PhysicalPathAssert-Like $TestDir $physicalPath}function Test-ShouldChangePathOfExistingApplication{Invoke-InstallApplication -Path "$TestDir\..\.."$app = Get-IisApplication -SiteName $SiteName -Name $AppNameAssert-NotNull $appAssert-Equal ([IO.Path]::GetFullPath( "$TestDir\..\.." )) $app.PhysicalPathInvoke-InstallApplication -Path $TestDir$app = Get-IisApplication -SiteName $SiteName -Name $AppNameAssert-NotNull $appAssert-Equal $TestDir $app.PhysicalPath}function Test-ShouldUpdatePath{Invoke-InstallApplication -Path $env:SystemRootInvoke-InstallApplicationAssert-ApplicationRunning$result = Install-IisApplication -SiteName $SiteName -VirtualPath $AppName -PhysicalPath $TestDir -AppPoolName $AppPoolNameAssert-Null $result}function Test-ShouldUpdateApplicationPool{$result = Install-IISApplication -SiteName $SiteName -Name $AppName -Path $TestDir -PassThruAssert-NoErrorAssert-NotNull $resultAssert-Equal 'DefaultAppPool' $result.ApplicationPoolNameAssert-ApplicationRunning$result = Install-IisApplication -SiteName $SiteName -Name $AppName -PhysicalPath $TestDir -AppPoolName $AppPoolName -PassThruAssert-NoErrorAssert-NotNull $resultAssert-Equal $AppPoolName $result.ApplicationPoolName$result = Install-IisApplication -SiteName $SiteName -Name $AppName -PhysicalPath $TestDir -AppPoolName $AppPoolName -PassThruAssert-NoErrorAssert-NotNull $result$result = Install-IisApplication -SiteName $SiteName -Name $AppName -PhysicalPath $TestDir -PassThruAssert-NoErrorAssert-NotNull $resultAssert-Equal $AppPoolName $result.ApplicationPoolName}function Test-ShouldCreateApplicationDirectory{$appDir = Join-Path $TestDir ApplicationDirectoryif( Test-Path $appDir -PathType Container ){Remove-Item $appDir -Force}try{$result = Invoke-InstallApplication -Path $appDirAssert-Null $resultAssert-DirectoryExists $appDir}finally{if( Test-Path $appDir -PathType Container ){Remove-Item $appDir -Force}}}function Assert-ApplicationRunning($appName){$html = Read-Url "http://localhost:$Port/$appName/NewWebsite.html"Assert-Like $html 'NewWebsite Test Page' 'Unable to download from new application.'   }function Read-Url($Url){$browser = New-Object Net.WebClient$numTries = 0$maxTries = 5do{try{return $browser.downloadString( $Url )}catch{Write-Verbose "Error downloading '$Url': $_"$numTries++Start-Sleep -Milliseconds 100}}while( $numTries -lt $maxTries )}