function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Get-AADUser(){[cmdletbinding()]param($userPrincipalName,$Property)$graphApiVersion = "v1.0"$User_resource = "users"try {if($userPrincipalName -eq "" -or $userPrincipalName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if($Property -eq "" -or $Property -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName"Write-Verbose $uriInvoke-RestMethod -Uri $uri -Headers $authToken -Method Get}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName/$Property"Write-Verbose $uri(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}$minutes = 1440$minutesago = "{0:s}" -f (get-date).addminutes(0-$minutes) + "Z"$CurrentTime = [System.DateTimeOffset]::Nowwrite-host "Checking if any Intune Managed Device Enrolled Date is within or equal to $minutes minutes..." -f YellowWrite-Hostwrite-host "Minutes Ago:" $minutesago -f MagentaWrite-Hosttry {$uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=enrolledDateTime ge $minutesago"$Devices = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | sort deviceName$Devices = $Devices | ? { $_.managementAgent -ne "eas" }if($Devices){$DeviceCount = @($Devices).countWrite-Host "There are" $DeviceCount "devices enrolled in the past $minutes minutes..." -ForegroundColor green$Devices | foreach { $_.deviceName + " - " + ($_.managementAgent).toupper() + " - " + $_.userPrincipalName + " - " + $_.enrolledDateTime }Write-Hostforeach($Device in $Devices){write-host "------------------------------------------------------------------"Write-Host$DeviceID = $Device.id$LSD = $Device.lastSyncDateTime$EDT = $Device.enrolledDateTimewrite-host "Device Name:"$Device.deviceName -f Greenwrite-host "Management State:"$Device.managementStatewrite-host "Operating System:"$Device.operatingSystemwrite-host "Device Type:"$Device.deviceTypewrite-host "Last Sync Date Time:"$Device.lastSyncDateTimewrite-host "Enrolled Date Time:"$Device.enrolledDateTimewrite-host "Jail Broken:"$Device.jailBrokenwrite-host "Compliance State:"$Device.complianceStatewrite-host "Enrollment Type:"$Device.enrollmentTypewrite-host "AAD Registered:"$Device.aadRegisteredwrite-host "Management Agent:"$Device.managementAgent$EnrolledTime = [datetimeoffset]::Parse($EDT)$TimeDifference = $CurrentTime - $EnrolledTime$TotalMinutes = ($TimeDifference.TotalMinutes).tostring().split(".")[0]write-hostwrite-host "Date Time difference is"$TotalMinutes "minutes from current date time..." -ForegroundColor YellowWrite-Host}}else {write-host "No Devices not checked in the last $minutes minutes found..." -f greenWrite-Host}}catch {Write-Host$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}