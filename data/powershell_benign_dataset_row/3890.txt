function Test-AzureRmSignalR {$resourceGroupName = Get-RandomResourceGroupName$signalrName = Get-RandomSignalRName$freeSignalRName = Get-RandomSignalRName "signalr-free-test-"$location = Get-ProviderLocation "Microsoft.SignalRService/SignalR"try {New-AzResourceGroup -Name $resourceGroupName -Location $location$signalr = New-AzSignalR -ResourceGroupName $resourceGroupName -Name $signalrName -Sku "Standard_S1"Verify-SignalR $signalr $signalrName $location "Standard_S1" 1$signalrs = Get-AzSignalR -ResourceGroupName $resourceGroupNameAssert-NotNull $signalrsAssert-AreEqual "PSSignalRResource" $signalrs.GetType().NameVerify-SignalR $signalrs $signalrName $location "Standard_S1" 1$retrievedSignalR = Get-AzSignalR -ResourceGroupName $resourceGroupName -Name $signalrNameVerify-SignalR $retrievedSignalR $signalrName $location "Standard_S1" 1$freeSignalR = New-AzSignalR -ResourceGroupName $resourceGroupName -Name $freeSignalRName -Sku "Free_F1"Verify-SignalR $freeSignalR $freeSignalRName $location "Free_F1" 1$signalrs = Get-AzSignalR -ResourceGroupName $resourceGroupNameAssert-NotNull $signalrsAssert-AreEqual "Object[]" $signalrs.GetType().NameAssert-AreEqual 2 $signalrs.Length$freeSignalR = $signalrs | Where-Object -FilterScript {$_.Sku.Name -eq "Free_F1"}$standardSignalR = $signalrs | Where-Object -FilterScript {$_.Sku.Name -eq "Standard_S1"}Assert-NotNull $freeSignalRAssert-NotNull $standardSignalRVerify-SignalR $freeSignalR $freeSignalRName $location "Free_F1" 1$keys = Get-AzSignalRKey -ResourceGroupName $resourceGroupName -Name $signalrNameAssert-NotNull $keysAssert-NotNull $keys.PrimaryKeyAssert-NotNull $keys.PrimaryConnectionStringAssert-NotNull $keys.SecondaryKeyAssert-NotNull $keys.SecondaryConnectionString$ret = New-AzSignalRKey -ResourceGroupName $resourceGroupName -Name $signalrName -KeyType Primary -PassThruAssert-True { $ret }$newKeys1 = Get-AzSignalRKey -ResourceGroupName $resourceGroupName -Name $signalrNameAssert-NotNull $newKeys1Assert-AreNotEqual $keys.PrimaryKey $newKeys1.PrimaryKeyAssert-AreNotEqual $keys.PrimaryConnectionString $newKeys1.PrimaryConnectionStringAssert-AreEqual $keys.SecondaryKey $newKeys1.SecondaryKeyAssert-AreEqual $keys.SecondaryConnectionString $newKeys1.SecondaryConnectionString$ret = New-AzSignalRKey -ResourceGroupName $resourceGroupName -Name $signalrName -KeyType SecondaryAssert-Null $ret$newKeys2 = Get-AzSignalRKey -ResourceGroupName $resourceGroupName -Name $signalrNameAssert-NotNull $newKeys2Assert-AreEqual $newKeys1.PrimaryKey $newKeys2.PrimaryKeyAssert-AreEqual $newKeys1.PrimaryConnectionString $newKeys2.PrimaryConnectionStringAssert-AreNotEqual $newKeys1.SecondaryKey $newKeys2.SecondaryKeyAssert-AreNotEqual $newKeys1.SecondaryConnectionString $newKeys2.SecondaryConnectionStringRemove-AzSignalR -ResourceGroupName $resourceGroupName -Name $signalrNameGet-AzSignalR -ResourceGroupName $resourceGroupName | Remove-AzSignalR}finally {Remove-AzResourceGroup -Name $resourceGroupName -Force}}function Test-AzureRmSignalRWithDefaultArgs {$resourceGroupName = Get-RandomResourceGroupName$signalrName = Get-RandomSignalRName$freeSignalRName = Get-RandomSignalRName "signalr-free-test-"$location = Get-ProviderLocation "Microsoft.SignalRService/SignalR"try {New-AzResourceGroup -Name $resourceGroupName -Location $location$signalr = New-AzSignalR -Name $resourceGroupNameVerify-SignalR $signalr $resourceGroupName $location "Standard_S1" 1$signalrs = Get-AzSignalR -ResourceGroupName $resourceGroupNameAssert-NotNull $signalrsAssert-AreEqual "PSSignalRResource" $signalrs.GetType().NameVerify-SignalR $signalrs $resourceGroupName $location "Standard_S1" 1Set-AzDefault -ResourceGroupName $resourceGroupName$signalr = New-AzSignalR -Name $signalrName -Sku "Free_F1"$signalrs = Get-AzSignalR -ResourceGroupName $resourceGroupNameAssert-NotNull $signalrsAssert-AreEqual "Object[]" $signalrs.GetType().NameAssert-AreEqual 2 $signalrs.Length$freeSignalR = $signalrs | Where-Object -FilterScript {$_.Sku.Name -eq "Free_F1"}$standardSignalR = $signalrs | Where-Object -FilterScript {$_.Sku.Name -eq "Standard_S1"}Assert-NotNull $freeSignalRAssert-NotNull $standardSignalRVerify-SignalR $freeSignalR $signalrName $location "Free_F1" 1$keys = Get-AzSignalRKey -Name $signalrNameAssert-NotNull $keysAssert-NotNull $keys.PrimaryKeyAssert-NotNull $keys.PrimaryConnectionStringAssert-NotNull $keys.SecondaryKeyAssert-NotNull $keys.SecondaryConnectionString$ret = New-AzSignalRKey -Name $signalrName -KeyType Primary -PassThruAssert-True { $ret }$newKeys1 = Get-AzSignalRKey -Name $signalrNameAssert-NotNull $newKeys1Assert-AreNotEqual $keys.PrimaryKey $newKeys1.PrimaryKeyAssert-AreNotEqual $keys.PrimaryConnectionString $newKeys1.PrimaryConnectionStringAssert-AreEqual $keys.SecondaryKey $newKeys1.SecondaryKeyAssert-AreEqual $keys.SecondaryConnectionString $newKeys1.SecondaryConnectionStringRemove-AzSignalR -Name $signalrNameGet-AzSignalR -Name $resourceGroupName | Remove-AzSignalR}finally {Remove-AzResourceGroup -Name $resourceGroupName -Force}}function Verify-SignalR {param([Microsoft.Azure.Commands.SignalR.Models.PSSignalRResource] $signalr,[string] $signalrName,[string] $location,[string] $sku,[int] $unitCount)Assert-NotNull $signalrAssert-NotNull $signalr.IdAssert-NotNull $signalr.TypeAssert-AreEqual $signalrName $signalr.NameAssert-LocationEqual $location $signalr.LocationAssert-NotNull $signalr.SkuAssert-AreEqual ([Microsoft.Azure.Commands.SignalR.Models.PSResourceSku]) $signalr.Sku.GetType()Assert-AreEqual $sku $signalr.Sku.NameAssert-AreEqual $unitCount $signalr.Sku.CapacityAssert-AreEqual "Succeeded" $signalr.ProvisioningStateAssert-AreEqual "$signalrName.service.signalr.net" $signalr.HostNameAssert-NotNull $signalr.ExternalIPAssert-NotNull $signalr.PublicPortAssert-NotNull $signalr.ServerPortAssert-NotNull $signalr.Version}