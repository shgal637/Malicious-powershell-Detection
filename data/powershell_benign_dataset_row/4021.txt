function Test-GetManagementGroup{New-AzManagementGroup -GroupName TestPSGetGroup1New-AzManagementGroup -GroupName TestPSGetGroup2 -ParentId "/providers/Microsoft.Management/managementGroups/TestPSGetGroup1"$response = Get-AzManagementGroup -GroupName TestPSGetGroup2Remove-AzManagementGroup -GroupName TestPSGetGroup2Remove-AzManagementGroup -GroupName TestPSGetGroup1$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup2"$expectedName = "TestPSGetGroup2"$expectedDisplayName = "TestPSGetGroup2"$expectedParentId = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup1"$expectedParentDisplayName = "TestPSGetGroup1"$expectedParentName = "TestPSGetGroup1"Assert-NotNull $responseAssert-Null $response.ChildrenAssert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-AreEqual $response.ParentId $expectedParentIdAssert-AreEqual $response.ParentDisplayName $expectedParentDisplayNameAssert-AreEqual $response.ParentName $expectedParentName}function Test-GetManagementGroupWithExpand{New-AzManagementGroup -GroupName TestPSGetGroup1New-AzManagementGroup -GroupName TestPSGetGroup2 -ParentId "/providers/Microsoft.Management/managementGroups/TestPSGetGroup1"New-AzManagementGroup -GroupName TestPSGetGroup3 -ParentId "/providers/Microsoft.Management/managementGroups/TestPSGetGroup2"$response = Get-AzManagementGroup -GroupName TestPSGetGroup2 -ExpandRemove-AzManagementGroup -GroupName TestPSGetGroup3Remove-AzManagementGroup -GroupName TestPSGetGroup2Remove-AzManagementGroup -GroupName TestPSGetGroup1$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup2"$expectedName = "TestPSGetGroup2"$expectedDisplayName = "TestPSGetGroup2"$expectedParentId = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup1"$expectedParentDisplayName = "TestPSGetGroup1"$expectedParentName = "TestPSGetGroup1"$expectedChild0Id = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup3"$expectedChild0DisplayName = "TestPSGetGroup3"$expectedChild0Name = "TestPSGetGroup3"Assert-NotNull $responseAssert-NotNull $response.ChildrenAssert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-AreEqual $response.ParentId $expectedParentIdAssert-AreEqual $response.ParentDisplayName $expectedParentDisplayNameAssert-AreEqual $response.ParentName $expectedParentNameAssert-AreEqual $response.Children[0].Type $expectedTypeAssert-AreEqual $response.Children[0].Id $expectedChild0IdAssert-AreEqual $response.Children[0].DisplayName $expectedChild0DisplayNameAssert-AreEqual $response.Children[0].Name $expectedChild0Name}function Test-GetManagementGroupWithExpandAndRecurse{New-AzManagementGroup -GroupName TestPSGetGroup1New-AzManagementGroup -GroupName TestPSGetGroup2 -ParentId "/providers/Microsoft.Management/managementGroups/TestPSGetGroup1"New-AzManagementGroup -GroupName TestPSGetGroup3 -ParentId "/providers/Microsoft.Management/managementGroups/TestPSGetGroup2"New-AzManagementGroup -GroupName TestPSGetGroup4 -ParentId "/providers/Microsoft.Management/managementGroups/TestPSGetGroup3"$response = Get-AzManagementGroup -GroupName TestPSGetGroup2 -Expand -RecurseRemove-AzManagementGroup -GroupName TestPSGetGroup4Remove-AzManagementGroup -GroupName TestPSGetGroup3Remove-AzManagementGroup -GroupName TestPSGetGroup2Remove-AzManagementGroup -GroupName TestPSGetGroup1$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup2"$expectedName = "TestPSGetGroup2"$expectedDisplayName = "TestPSGetGroup2"$expectedParentId = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup1"$expectedParentDisplayName = "TestPSGetGroup1"$expectedParentName = "TestPSGetGroup1"$expectedChild0Id = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup3"$expectedChild0DisplayName = "TestPSGetGroup3"$expectedChild0Name = "TestPSGetGroup3"$expectedChild0Child0Id = "/providers/Microsoft.Management/managementGroups/TestPSGetGroup4"$expectedChild0Child0DisplayName = "TestPSGetGroup4"$expectedChild0Child0Name = "TestPSGetGroup4"Assert-NotNull $responseAssert-NotNull $response.ChildrenAssert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-AreEqual $response.ParentId $expectedParentIdAssert-AreEqual $response.ParentDisplayName $expectedParentDisplayNameAssert-AreEqual $response.ParentName $expectedParentNameAssert-AreEqual $response.Children[0].Type $expectedTypeAssert-AreEqual $response.Children[0].Id $expectedChild0IdAssert-AreEqual $response.Children[0].DisplayName $expectedChild0DisplayNameAssert-AreEqual $response.Children[0].Name $expectedChild0NameAssert-AreEqual $response.Children[0].Children[0].Type $expectedTypeAssert-AreEqual $response.Children[0].Children[0].Id $expectedChild0Child0IdAssert-AreEqual $response.Children[0].Children[0].DisplayName $expectedChild0Child0DisplayNameAssert-AreEqual $response.Children[0].Children[0].Name $expectedChild0Child0Name}function Test-NewManagementGroup{$response = New-AzManagementGroup -GroupName TestPSNewGroupRemove-AzManagementGroup -GroupName TestPSNewGroup$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSNewGroup"$expectedName = "TestPSNewGroup"$expectedDisplayName = "TestPSNewGroup"Assert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-NotNull $response.ParentId Assert-NotNull $response.ParentDisplayName }function Test-NewManagementGroupWithDisplayName{$response = New-AzManagementGroup -GroupName TestPSNewGroup2 -DisplayName TestDisplayNameRemove-AzManagementGroup -GroupName TestPSNewGroup2$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSNewGroup2"$expectedName = "TestPSNewGroup2"$expectedDisplayName = "TestDisplayName"Assert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-NotNull $response.ParentId Assert-NotNull $response.ParentDisplayName }function Test-NewManagementGroupWithParentId{New-AzManagementGroup -GroupName TestParent5$response = New-AzManagementGroup -GroupName TestPSNewGroup5 -ParentId /providers/Microsoft.Management/managementGroups/TestParent5Remove-AzManagementGroup -GroupName TestPSNewGroup5Remove-AzManagementGroup -GroupName TestParent5$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSNewGroup5"$expectedName = "TestPSNewGroup5"$expectedDisplayName = "TestPSNewGroup5"$expectedParentId = "/providers/Microsoft.Management/managementGroups/TestParent5"$expectedParentDisplayName = "TestParent5"Assert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-AreEqual $response.ParentId $expectedParentIdAssert-AreEqual $response.ParentDisplayName $expectedParentDisplayName}function Test-NewManagementGroupWithDisplayNameAndParentId{New-AzManagementGroup -GroupName TestParent4$response = New-AzManagementGroup -GroupName TestPSGroup4 -DisplayName TestDisplayName -ParentId /providers/Microsoft.Management/managementGroups/TestParent4Remove-AzManagementGroup -GroupName TestPSGroup4Remove-AzManagementGroup -GroupName TestParent4$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSGroup4"$expectedName = "TestPSGroup4"$expectedDisplayName = "TestDisplayName"$expectedParentId = "/providers/Microsoft.Management/managementGroups/TestParent4"$expectedParentDisplayName = "TestParent4"Assert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-AreEqual $response.ParentId $expectedParentIdAssert-AreEqual $response.ParentDisplayName $expectedParentDisplayName}function Test-UpdateManagementGroupWithDisplayName{New-AzManagementGroup -GroupName TestPSUpdateGroup1$response = Update-AzManagementGroup -GroupName TestPSUpdateGroup1 -DisplayName TestDisplayNameRemove-AzManagementGroup -GroupName TestPSUpdateGroup1$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSUpdateGroup1"$expectedName = "TestPSUpdateGroup1"$expectedDisplayName = "TestDisplayName"Assert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayName}function Test-UpdateManagementGroupWithParentId{New-AzManagementGroup -GroupName TestPSUpdateGroupParent2New-AzManagementGroup -GroupName TestPSUpdateGroup2$response = Update-AzManagementGroup -GroupName TestPSUpdateGroup2 -ParentId /providers/Microsoft.Management/managementGroups/TestPSUpdateGroupParent2Remove-AzManagementGroup -GroupName TestPSUpdateGroup2Remove-AzManagementGroup -GroupName TestPSUpdateGroupParent2$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSUpdateGroup2"$expectedName = "TestPSUpdateGroup2"$expectedDisplayName = "TestPSUpdateGroup2"$expectedParentId = "/providers/Microsoft.Management/managementGroups/TestPSUpdateGroupParent2"$expectedParentDisplayName = "TestPSUpdateGroupParent2"Assert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-AreEqual $response.ParentId $expectedParentIdAssert-AreEqual $response.ParentDisplayName $expectedParentDisplayName}function Test-UpdateManagementGroupWithDisplayNameAndParentId{New-AzManagementGroup -GroupName TestPSUpdateGroupParent3New-AzManagementGroup -GroupName TestPSUpdateGroup3$response = Update-AzManagementGroup -GroupName TestPSUpdateGroup3 -DisplayName TestDisplayName -ParentId /providers/Microsoft.Management/managementGroups/TestPSUpdateGroupParent3Remove-AzManagementGroup -GroupName TestPSUpdateGroup3Remove-AzManagementGroup -GroupName TestPSUpdateGroupParent3$expectedType =  "/providers/Microsoft.Management/managementGroups"$expectedId = "/providers/Microsoft.Management/managementGroups/TestPSUpdateGroup3"$expectedName = "TestPSUpdateGroup3"$expectedDisplayName = "TestDisplayName"$expectedParentId = "/providers/Microsoft.Management/managementGroups/TestPSUpdateGroupParent3"$expectedParentDisplayName = "TestPSUpdateGroupParent3"Assert-AreEqual $response.Type $expectedTypeAssert-AreEqual $response.Id $expectedIdAssert-AreEqual $response.Name $expectedNameAssert-AreEqual $response.DisplayName $expectedDisplayNameAssert-AreEqual $response.ParentId $expectedParentIdAssert-AreEqual $response.ParentDisplayName $expectedParentDisplayName}function Test-RemoveManagementGroup{New-AzManagementGroup -GroupName TestPSRemoveGroup$getresponse = Get-AzManagementGroup -GroupName TestPSRemoveGroup$response = Remove-AzManagementGroup -GroupName TestPSRemoveGroup$getresponse2 = Get-AzManagementGroup -GroupName TestPSRemoveGroupAssert-NotNull $getresponseAssert-Null $getresponse2Assert-Null $response}function Test-NewRemoveManagementGroupSubscription{New-AzManagementGroup -GroupName TestSubGroup$response1 = New-AzManagementGroupSubscription -GroupName TestSubGroup -SubscriptionId 394ae65d-9e71-4462-930f-3332dedf845c$getresponse = Get-AzManagementGroup -GroupName TestSubGroup -Expand$response2 = Remove-AzManagementGroupSubscription -GroupName TestSubGroup -SubscriptionId 394ae65d-9e71-4462-930f-3332dedf845c$getresponse2 = Get-AzManagementGroup -GroupName TestSubGroup -ExpandRemove-AzManagementGroup -GroupName TestSubGroup$expectedType =  "/subscriptions"$expectedId = "/subscriptions/394ae65d-9e71-4462-930f-3332dedf845c"$expectedName = "394ae65d-9e71-4462-930f-3332dedf845c"$expectedDisplayName = "Pay-As-You-Go"Assert-AreEqual $getresponse.Children[0].Type $expectedTypeAssert-AreEqual $getresponse.Children[0].Id $expectedIdAssert-AreEqual $getresponse.Children[0].DisplayName $expectedDisplayNameAssert-AreEqual $getresponse.Children[0].Name $expectedNameAssert-Null $response1Assert-Null $response2Assert-Null $getresponse2.Children}