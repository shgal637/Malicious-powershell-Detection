function Test-AccountActiveDirectory{$resourceGroup = Get-ResourceGroupName$accName1 = Get-ResourceName$accName2 = Get-ResourceName$accName3 = Get-ResourceName$resourceLocation = Get-ProviderLocation "Microsoft.NetApp"$activeDirectory1 = @{Username = "sdkuser"Password = "sdkpass"Domain = "sdkdomain"Dns = "127.0.0.1"SmbServerName = "PSSMBSName"}$activeDirectory2 = @{Username = "sdkuser1"Password = "sdkpass1"Domain = "sdkdomain"Dns = "127.0.0.1"SmbServerName = "PSSMBSName"}try{New-AzResourceGroup -Name $resourceGroup -Location $resourceLocationtry{$activedirectories = @( $activeDirectory1, $activeDirectory2 )$newTagName = "tag1"$newTagValue = "tagValue1"$retrievedAcc = New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -Name $accName1 -Tag @{$newTagName = $newTagValue} -ActiveDirector $activeDirectoriesAssert-True { $false }}catch{$ErrorMessage = $_.Exception.MessageAssert-True { ($ErrorMessage -contains 'Only one active directory allowed') }}$activedirectories = @( $activeDirectory1 )$newTagName = "tag1"$newTagValue = "tagValue1"$retrievedAcc = New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -Name $accName1 -Tag @{$newTagName = $newTagValue} -ActiveDirectory $activeDirectoriesAssert-AreEqual $accName1 $retrievedAcc.NameAssert-AreEqual $activeDirectory1.SmbServerName $retrievedAcc.ActiveDirectories[0].SmbServerNameAssert-AreEqual $activeDirectory1.Username $retrievedAcc.ActiveDirectories[0].Username$newTagName = "tag1"$newTagValue = "tagValue2"$retrievedAcc = Update-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName1 -Tag @{$newTagName = $newTagValue}Assert-AreEqual $accName1 $retrievedAcc.NameAssert-AreEqual $activeDirectory1.SmbServerName $retrievedAcc.ActiveDirectories[0].SmbServerNameAssert-AreEqual $activeDirectory1.Username $retrievedAcc.ActiveDirectories[0].UsernameAssert-AreEqual 1 $retrievedAcc.ActiveDirectories.LengthAssert-AreEqual "tagValue2" $retrievedAcc.Tags[$newTagName].ToString()$retrievedAcc = Set-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -AccountName $accName1 -Location $resourceLocationAssert-AreEqual $accName1 $retrievedAcc.NameAssert-Null $retrievedAcc.TagsAssert-Null $retrievedAcc.ActiveDirectories$activedirectories = @( $activeDirectory2 )$retrievedAcc = Update-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName1 -ActiveDirectory $activedirectoriesAssert-AreEqual $accName1 $retrievedAcc.NameAssert-AreEqual $activeDirectory2.Username $retrievedAcc.ActiveDirectories[0].UsernameAssert-AreEqual 1 $retrievedAcc.ActiveDirectories.Length}finally{Clean-ResourceGroup $resourceGroup}}function Test-AccountCrud{$resourceGroup = Get-ResourceGroupName$accName1 = Get-ResourceName$accName2 = Get-ResourceName$accName3 = Get-ResourceName$resourceLocation = Get-ProviderLocation "Microsoft.NetApp"try{New-AzResourceGroup -Name $resourceGroup -Location $resourceLocation$newTagName = "tag1"$newTagValue = "tagValue1"$retrievedAcc = New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -Name $accName1 -Tag @{$newTagName = $newTagValue}Assert-AreEqual $accName1 $retrievedAcc.NameAssert-AreEqual True $retrievedAcc.Tags.ContainsKey($newTagName)Assert-AreEqual "tagValue1" $retrievedAcc.Tags[$newTagName].ToString()$retrievedAcc = New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName2 -Confirm:$falseAssert-AreEqual $accName2 $retrievedAcc.Name$retrievedAcc = New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -AccountName $accName3 -WhatIf$retrievedAcc = Get-AzNetAppFilesAccount -ResourceGroupName $resourceGroupAssert-True {"$accName1" -eq $retrievedAcc[0].Name -or "$accName2" -eq $retrievedAcc[0].Name}Assert-True {"$accName1" -eq $retrievedAcc[1].Name -or "$accName2" -eq $retrievedAcc[1].Name}Assert-AreEqual 2 $retrievedAcc.Length$retrievedAcc = Get-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Name $accName1Assert-AreEqual $accName1 $retrievedAcc.Name$retrievedAccById = Get-AzNetAppFilesAccount -ResourceId $retrievedAcc.IdAssert-AreEqual $accName1 $retrievedAccById.NameRemove-AzNetAppFilesAccount -ResourceId $retrievedAccById.IdRemove-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -AccountName $accName2 -WhatIf$retrievedAcc = Get-AzNetAppFilesAccount -ResourceGroupName $resourceGroupAssert-AreEqual 1 $retrievedAcc.LengthRemove-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -AccountName $accName2$retrievedAcc = Get-AzNetAppFilesAccount -ResourceGroupName $resourceGroupAssert-AreEqual 0 $retrievedAcc.Length}finally{Clean-ResourceGroup $resourceGroup}}function Test-AccountPipelines{$resourceGroup = Get-ResourceGroupName$accName1 = Get-ResourceName$accName2 = Get-ResourceName$resourceLocation = Get-ProviderLocation "Microsoft.NetApp"try{New-AzResourceGroup -Name $resourceGroup -Location $resourceLocationNew-AnfAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -Name $accName1 | Remove-AnfAccountNew-AnfAccount -ResourceGroupName $resourceGroup -Location $resourceLocation -Name $accName2Get-AnfAccount -ResourceGroupName $resourceGroup -Name $accName2 | Remove-AnfAccount}finally{Clean-ResourceGroup $resourceGroup}}