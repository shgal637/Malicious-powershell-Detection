function Test-WorkspaceCreateUpdateDelete{$wsname = Get-ResourceName$rgname = Get-ResourceGroupName$wslocation = Get-ProviderLocationNew-AzResourceGroup -Name $rgname -Location $wslocation -Force$workspace = New-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wsname -Location $wslocation -Sku "STANDARD" -Tag @{"tag1" = "val1"} -ForceAssert-AreEqual $rgname $workspace.ResourceGroupNameAssert-AreEqual $wsname $workspace.NameAssert-AreEqual $wslocation $workspace.LocationAssert-AreEqual "STANDARD" $workspace.SkuAssert-AreEqual 30 $workspace.RetentionInDaysAssert-NotNull $workspace.ResourceIdAssert-AreEqual 1 $workspace.Tags.CountAssert-NotNull $workspace.CustomerIdAssert-NotNull $workspace.PortalUrl$workspace = Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wsnameAssert-AreEqual $rgname $workspace.ResourceGroupNameAssert-AreEqual $wsname $workspace.NameAssert-AreEqual $wslocation $workspace.LocationAssert-AreEqual "STANDARD" $workspace.SkuAssert-AreEqual 30 $workspace.RetentionInDaysAssert-NotNull $workspace.ResourceIdAssert-AreEqual 1 $workspace.Tags.CountAssert-NotNull $workspace.CustomerIdAssert-NotNull $workspace.PortalUrl$wstwoname = Get-ResourceName$workspacetwo = New-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wstwoname -Location $wslocation -Sku "PerNode" -RetentionInDays 60 -Force$workspacetwo = Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wstwonameAssert-AreEqual 60 $workspacetwo.RetentionInDays$workspaces = Get-AzOperationalInsightsWorkspaceAssert-AreEqual 1 ($workspaces | Where {$_.Name -eq $wsname}).CountAssert-AreEqual 1 ($workspaces | Where {$_.Name -eq $wstwoname}).Count$workspaces = Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgnameAssert-AreEqual 1 ($workspaces | Where {$_.Name -eq $wsname}).CountAssert-AreEqual 1 ($workspaces | Where {$_.Name -eq $wstwoname}).CountRemove-AzOperationalInsightsWorkspace -ResourceGroupName $rgName -Name $wstwoname -ForceAssert-ThrowsContains { Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wstwoname } "NotFound"$workspaces = Get-AzOperationalInsightsWorkspaceAssert-AreEqual 1 ($workspaces | Where {$_.Name -eq $wsname}).CountAssert-AreEqual 0 ($workspaces | Where {$_.Name -eq $wstwoname}).Count$workspace = Set-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wsname -Tag @{"foo" = "bar"; "foo2" = "bar2"}Assert-AreEqual 2 $workspace.Tags.Count$workspace = $workspace | New-AzOperationalInsightsWorkspace -Tag @{"foo" = "bar"} -ForceAssert-AreEqual 1 $workspace.Tags.Count$workspace | Set-AzOperationalInsightsWorkspace -Tag @{} -Sku standalone -RetentionInDays 123$workspace = Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wsnameAssert-AreEqual 0 $workspace.Tags.CountAssert-AreEqual standalone $workspace.SkuAssert-AreEqual 123 $workspace.RetentionInDays$workspace | Remove-AzOperationalInsightsWorkspace -Force$workspaces = Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgnameAssert-AreEqual 0 $workspaces.CountAssert-ThrowsContains { Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name wsname } "NotFound"}function Test-WorkspaceActions{$wsname = Get-ResourceName$rgname = Get-ResourceGroupName$wslocation = Get-ProviderLocationNew-AzResourceGroup -Name $rgname -Location $wslocation -Force$accounts = Get-AzOperationalInsightsLinkTargetsAssert-AreEqual 0 $accounts.CountAssert-ThrowsContains { New-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wsname -Location $wslocation -Sku "STANDARD" -CustomerId ([guid]::NewGuid()) } "BadRequest"$workspace = New-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wsname -Location $wslocation -Sku "STANDARD" -Tag @{"tag1" = "val1"} -Force$keys = Get-AzOperationalInsightsWorkspaceSharedKeys -ResourceGroupName $rgname -Name $wsnameAssert-NotNull $keys.PrimarySharedKeyAssert-NotNull $keys.SecondarySharedKey$keys = $workspace | Get-AzOperationalInsightsWorkspaceSharedKeysAssert-NotNull $keys.PrimarySharedKeyAssert-NotNull $keys.SecondarySharedKey$mgs = Get-AzOperationalInsightsWorkspaceManagementGroups -ResourceGroupName $rgname -Name $wsnameAssert-AreEqual 0 $mgs.Count$mgs = $workspace | Get-AzOperationalInsightsWorkspaceManagementGroupsAssert-AreEqual 0 $mgs.Count$usages = Get-AzOperationalInsightsWorkspaceUsage -ResourceGroupName $rgname -Name $wsnameAssert-AreEqual 1 $usages.CountAssert-AreEqual "DataAnalyzed" $usages[0].IdAssert-NotNull $usages[0].NameAssert-NotNull $usages[0].NextResetTimeAssert-AreEqual "Bytes" $usages[0].UnitAssert-AreEqual ([Timespan]::FromDays(1)) $usages[0].QuotaPeriod$usages = $workspace | Get-AzOperationalInsightsWorkspaceUsageAssert-AreEqual 1 $usages.CountAssert-AreEqual "DataAnalyzed" $usages[0].IdAssert-NotNull $usages[0].NameAssert-NotNull $usages[0].NextResetTimeAssert-AreEqual "Bytes" $usages[0].UnitAssert-AreEqual ([Timespan]::FromDays(1)) $usages[0].QuotaPeriod}function Test-WorkspaceEnableDisableListIntelligencePacks{$wsname = Get-ResourceName$rgname = Get-ResourceGroupName$wslocation = Get-ProviderLocationNew-AzResourceGroup -Name $rgname -Location $wslocation -Force$workspace = New-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name $wsname -Location $wslocation -Sku "STANDARD" -Tag @{"tag1" = "val1"} -ForceAssert-AreEqual $rgname $workspace.ResourceGroupNameAssert-AreEqual $wsname $workspace.NameAssert-AreEqual $wslocation $workspace.LocationAssert-AreEqual "STANDARD" $workspace.SkuAssert-NotNull $workspace.ResourceIdAssert-AreEqual 1 $workspace.Tags.CountAssert-NotNull $workspace.CustomerIdAssert-NotNull $workspace.PortalUrlSet-AzOperationalInsightsIntelligencePack -ResourceGroupName $rgname -WorkspaceName $wsname -IntelligencePackName "ChangeTracking" -Enabled $trueSet-AzOperationalInsightsIntelligencePack -ResourceGroupName $rgname -WorkspaceName $wsname -IntelligencePackName "SiteRecovery" -Enabled $true$ipList = Get-AzOperationalInsightsIntelligencePacks -ResourceGroupName $rgname -WorkspaceName $wsnameForeach ($ip in $ipList){if (($ip.Name -eq "ChangeTracking") -or ($ip.Name -eq "SiteRecovery") -or ($ip.Name -eq "LogManagement")){Assert-AreEqual $ip.Enabled $true}else{Assert-AreEqual $ip.Enabled $false}}Set-AzOperationalInsightsIntelligencePack -ResourceGroupName $rgname -WorkspaceName $wsname -IntelligencePackName "ChangeTracking" -Enabled $falseSet-AzOperationalInsightsIntelligencePack -ResourceGroupName $rgname -WorkspaceName $wsname -IntelligencePackName "SiteRecovery" -Enabled $false$ipList = Get-AzOperationalInsightsIntelligencePacks -ResourceGroupName $rgname -WorkspaceName $wsnameForeach ($ip in $ipList){if ($ip.Name -eq "LogManagement"){Assert-AreEqual $ip.Enabled $true}else{Assert-AreEqual $ip.Enabled $false}}$workspace | Remove-AzOperationalInsightsWorkspace -Force$workspaces = Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgnameAssert-AreEqual 0 $workspaces.CountAssert-ThrowsContains { Get-AzOperationalInsightsWorkspace -ResourceGroupName $rgname -Name wsname } "NotFound"}