function Test-GetAllADGroups{$groups = Get-AzureRmADGroupAssert-NotNull($groups)foreach($group in $groups) {Assert-NotNull($group.DisplayName)Assert-NotNull($group.Id)}}function Test-GetADGroupWithSearchString {param([string]$displayName)$groups = Get-AzureRmADGroup -SearchString $displayNameAssert-AreEqual $groups.Count 1Assert-NotNull $groups[0].IdAssert-AreEqual $groups[0].DisplayName $displayName}function Test-GetADGroupWithBadSearchString{$groups = Get-AzureRmADGroup -SearchString "BadSearchString"Assert-Null($groups)}function Test-GetADGroupWithObjectId{param([string]$objectId)$groups = Get-AzureRmADGroup -ObjectId $objectIdAssert-AreEqual $groups.Count 1Assert-AreEqual $groups[0].Id $objectIdAssert-NotNull($groups[0].DisplayName)}function Test-GetADGroupSecurityEnabled{param([string]$objectId, [string]$securityEnabled)$groups = Get-AzureRmADGroup -ObjectId $objectIdAssert-AreEqual $groups.Count 1Assert-AreEqual $groups[0].Id $objectIdAssert-AreEqual $groups[0].SecurityEnabled $securityEnabledAssert-NotNull($groups[0].DisplayName)}function Test-GetADGroupWithBadObjectId{$groups = Get-AzureRmADGroup -ObjectId "baadc0de-baad-c0de-baad-c0debaadc0de"Assert-Null $groups}function Test-GetADGroupWithUserObjectId{param([string]$objectId)$groups = Get-AzureRmADGroup -ObjectId $objectIdAssert-Null $groups}function Test-GetADGroupMemberWithGroupObjectId{param([string]$groupObjectId, [string]$userObjectId, [string]$userName)$members = Get-AzureRmADGroupMember -GroupObjectId $groupObjectIdAssert-AreEqual $members.Count 1Assert-AreEqual $members[0].Id $userObjectIdAssert-AreEqual $members[0].DisplayName $userName}function Test-GetADGroupMemberWithBadGroupObjectId{Assert-Throws { Get-AzureRmADGroupMember -GroupObjectId "baadc0de-baad-c0de-baad-c0debaadc0de" }    }function Test-GetADGroupMemberWithUserObjectId{param([string]$objectId)Assert-Throws { Get-AzureRmADGroupMember -GroupObjectId $objectId }    }function Test-GetADGroupMemberFromEmptyGroup{param([string]$objectId)$members = Get-AzureRmADGroupMember -GroupObjectId $objectIdAssert-Null($members)}function Test-GetADServicePrincipalWithObjectId{param([string]$objectId)$servicePrincipals = Get-AzureRmADServicePrincipal -ObjectId $objectIdAssert-AreEqual $servicePrincipals.Count 1Assert-AreEqual $servicePrincipals[0].Id $objectId}function Test-GetADServicePrincipalWithBadObjectId{$servicePrincipals = Get-AzureRmADServicePrincipal -ObjectId "baadc0de-baad-c0de-baad-c0debaadc0de"Assert-Null($servicePrincipals)}function Test-GetADServicePrincipalWithUserObjectId{param([string]$objectId)$servicePrincipals = Get-AzureRmADServicePrincipal -ObjectId $objectIdAssert-Null($servicePrincipals)}function Test-GetADServicePrincipalWithSPN{param([string]$SPN)$servicePrincipals = Get-AzureRmADServicePrincipal -ServicePrincipalName $SPNAssert-AreEqual $servicePrincipals.Count 1Assert-NotNull $servicePrincipals[0].IdAssert-True { $servicePrincipals[0].ServicePrincipalNames.Contains($SPN) }}function Test-GetADServicePrincipalWithBadSPN{$servicePrincipals = Get-AzureRmADServicePrincipal -ServicePrincipalName "badspn"Assert-Null($servicePrincipals)}function Test-GetADServicePrincipalWithSearchString{param([string]$displayName)$servicePrincipals = Get-AzureRmADServicePrincipal -SearchString $displayNameAssert-AreEqual $servicePrincipals.Count 1Assert-AreEqual $servicePrincipals[0].DisplayName $displayNameAssert-NotNull($servicePrincipals[0].Id)Assert-NotNull($servicePrincipals[0].ServicePrincipalNames)Assert-AreEqual $servicePrincipals[0].ServicePrincipalNames.Count 2}function Test-GetADServicePrincipalWithBadSearchString{$servicePrincipals = Get-AzureRmADServicePrincipal -SearchString "badsearchstring"Assert-Null($servicePrincipals)}function Test-GetAllADUser{$users = Get-AzureRmADUserAssert-NotNull($users)foreach($user in $users) {Assert-NotNull($user.DisplayName)Assert-NotNull($user.Id)}}function Test-GetADUserWithObjectId{param([string]$objectId)$users = Get-AzureRmADUser -ObjectId $objectIdAssert-AreEqual $users.Count 1Assert-AreEqual $users[0].Id $objectIdAssert-NotNull($users[0].DisplayName)Assert-NotNull($users[0].UserPrincipalName)}function Test-GetADUserWithMail{param([string]$mail)$users = Get-AzureRmADUser -Mail $mailAssert-AreEqual $users.Count 1Assert-NotNull($users[0].DisplayName)Assert-NotNull($users[0].UserPrincipalName)}function Test-GetADUserWithBadObjectId{$users = Get-AzureRmADUser -ObjectId "baadc0de-baad-c0de-baad-c0debaadc0de"Assert-Null($users)}function Test-GetADUserWithGroupObjectId{param([string]$objectId)$users = Get-AzureRmADUser -ObjectId $objectIdAssert-Null($users)}function Test-GetADUserWithUPN{param([string]$UPN)$users = Get-AzureRmADUser -UserPrincipalName $UPNAssert-AreEqual $users.Count 1Assert-AreEqual $users[0].UserPrincipalName $UPNAssert-NotNull($users[0].DisplayName)Assert-NotNull($users[0].Id)}function Test-GetADUserWithFPOUPN{$users = Get-AzureRmADUser -UserPrincipalName "azsdkposhteam_outlook.comAssert-AreEqual $users.Count 1Assert-AreEqual $users[0].UserPrincipalName "azsdkposhteam_outlook.comAssert-NotNull($users[0].DisplayName)Assert-NotNull($users[0].Id)}function Test-GetADUserWithBadUPN{$users = Get-AzureRmADUser -UserPrincipalName "baduser@rbactest.onmicrosoft.com"Assert-Null($users)}function Test-GetADUserWithSearchString{param([string]$displayName)$users = Get-AzureRmADUser -SearchString $displayNameAssert-NotNull($users)Assert-AreEqual $users[0].DisplayName $displayNameAssert-NotNull($users[0].Id)Assert-NotNull($users[0].UserPrincipalName)}function Test-GetADUserWithBadSearchString{$users = Get-AzureRmADUser -SearchString "badsearchstring"Assert-Null($users)}function Test-NewADApplication{$displayName = getAssetName$homePage = "http://" + $displayName + ".com"$identifierUri = "http://" + $displayName$application = New-AzureRmADApplication -DisplayName $displayName -HomePage $homePage -IdentifierUris $identifierUriAssert-NotNull $application$app1 =  Get-AzureRmADApplication -ObjectId $application.ObjectIdAssert-NotNull $app1Assert-AreEqual $app1.Count 1$app1 =  Get-AzureRmADApplication -ApplicationId $application.ApplicationIdAssert-NotNull $app1Assert-AreEqual $app1.Count 1$app1 = Get-AzureRmADApplication -IdentifierUri $application.IdentifierUris[0]Assert-NotNull $app1Assert-AreEqual $app1.Count 1$app1 = Get-AzureRmADApplication -DisplayNameStartWith $application.DisplayNameAssert-NotNull $app1Assert-True { $app1.Count -ge 1}$newDisplayName = getAssetName$newHomePage = "http://" + $newDisplayName + ".com"$newIdentifierUri = "http://" + $newDisplayNameSet-AzureRmADApplication -ObjectId $application.ObjectId -DisplayName $newDisplayName -HomePage $newHomePageSet-AzureRmADApplication -ApplicationId $application.ApplicationId -IdentifierUris $newIdentifierUri$app1 =  Get-AzureRmADApplication -ObjectId $application.ObjectIdAssert-NotNull $app1Assert-AreEqual $app1.Count 1Assert-AreEqual $app1.DisplayName $newDisplayNameAssert-AreEqual $app1.HomePage $newHomePageAssert-AreEqual $app1.IdentifierUris[0] $newIdentifierUriRemove-AzureRmADApplication -ObjectId $application.ObjectId -Force}function Test-NewADServicePrincipal{param([string]$applicationId)$servicePrincipal = New-AzureRmADServicePrincipal -ApplicationId $applicationIdAssert-NotNull $servicePrincipal$sp1 = Get-AzureRmADServicePrincipal -ObjectId $servicePrincipal.IdAssert-NotNull $sp1Assert-AreEqual $sp1.Count 1Assert-AreEqual $sp1.Id $servicePrincipal.Id$sp1 = Get-AzureRmADServicePrincipal -ServicePrincipalName $servicePrincipal.ServicePrincipalNames[0]Assert-NotNull $sp1Assert-AreEqual $sp1.Count 1Assert-True { $sp1.ServicePrincipalNames.Contains($servicePrincipal.ServicePrincipalNames[0]) }Remove-AzureRmADServicePrincipal -ObjectId $servicePrincipal.Id -Force}function Test-NewADServicePrincipalWithoutApp{	$displayName = getAssetName$servicePrincipal = New-AzureRmADServicePrincipal -DisplayName $displayNameAssert-NotNull $servicePrincipalAssert-AreEqual $servicePrincipal.DisplayName $displayName$sp1 = Get-AzureRmADServicePrincipal -ObjectId $servicePrincipal.IdAssert-NotNull $sp1Assert-AreEqual $sp1.Count 1Assert-AreEqual $sp1.Id $servicePrincipal.Id$sp1 = Get-AzureRmADServicePrincipal -ServicePrincipalName $servicePrincipal.ServicePrincipalNames[0]Assert-NotNull $sp1Assert-AreEqual $sp1.Count 1Assert-True { $sp1.ServicePrincipalNames.Contains($servicePrincipal.ServicePrincipalNames[0]) }$app1 =  Get-AzureRmADApplication -ApplicationId $servicePrincipal.ApplicationIdAssert-NotNull $app1Assert-AreEqual $app1.Count 1$newDisplayName = getAssetNameSet-AzureRmADServicePrincipal -ObjectId $servicePrincipal.Id -DisplayName $newDisplayName$sp1 = Get-AzureRmADServicePrincipal -ObjectId $servicePrincipal.IdAssert-NotNull $sp1Assert-AreEqual $sp1.Count 1Assert-AreEqual $sp1.DisplayName $newDisplayNameRemove-AzureRmADApplication -ObjectId $app1.ObjectId -ForceAssert-Throws { Remove-AzureRmADServicePrincipal -ObjectId $servicePrincipal.Id -Force}}function Test-CreateDeleteAppPasswordCredentials{	$displayName = getAssetName$identifierUri = "http://" + $displayName$password = getAssetName$application = New-AzureRmADApplication -DisplayName $displayName -IdentifierUris $identifierUri -Password $passwordAssert-NotNull $application$app1 =  Get-AzureRmADApplication -ObjectId $application.ObjectIdAssert-NotNull $app1$cred1 = Get-AzureRmADAppCredential -ObjectId $application.ObjectIdAssert-NotNull $cred1Assert-AreEqual $cred1.Count 1$start = (Get-Date).ToUniversalTime()$end = $start.AddYears(1)$cred = New-AzureRmADAppCredential -ObjectId $application.ObjectId -Password $password -StartDate $start -EndDate $endAssert-NotNull $cred$cred2 = Get-AzureRmADAppCredential -ObjectId $application.ObjectIdAssert-NotNull $cred2Assert-AreEqual $cred2.Count 2$credCount = $cred2 | where {$_.KeyId -in $cred1.KeyId, $cred.KeyId}Assert-AreEqual $credCount.Count 2Remove-AzureRmADAppCredential -ApplicationId $application.ApplicationId -KeyId $cred.KeyId -Force$cred3 = Get-AzureRmADAppCredential -ApplicationId $application.ApplicationId Assert-NotNull $cred3Assert-AreEqual $cred3.Count 1Assert-AreEqual $cred3[0].KeyId $cred1.KeyIdRemove-AzureRmADAppCredential -ObjectId $application.ObjectId -All -Force$cred3 = Get-AzureRmADAppCredential -ObjectId $application.ObjectIdAssert-Null $cred3Remove-AzureRmADApplication -ObjectId $application.ObjectId -Force}function Test-CreateDeleteSpPasswordCredentials{	$displayName = getAssetName$password = getAssetName$servicePrincipal = New-AzureRmADServicePrincipal -DisplayName $displayName  -Password $passwordAssert-NotNull $servicePrincipalTry{$sp1 =  Get-AzureRmADServicePrincipal -ObjectId $servicePrincipal.IdAssert-NotNull $sp1.Id$cred1 = Get-AzureRmADSpCredential -ObjectId $servicePrincipal.IdAssert-NotNull $cred1Assert-AreEqual $cred1.Count 1$start = (Get-Date).ToUniversalTime()$end = $start.AddYears(1)$cred = New-AzureRmADSpCredential -ObjectId $servicePrincipal.Id -Password $password -StartDate $start -EndDate $endAssert-NotNull $cred$cred2 = Get-AzureRmADSpCredential -ObjectId $servicePrincipal.IdAssert-NotNull $cred2Assert-AreEqual $cred2.Count 2$credCount = $cred2 | where {$_.KeyId -in $cred1.KeyId, $cred.KeyId}Assert-AreEqual $credCount.Count 2Remove-AzureRmADSpCredential -ServicePrincipalName $servicePrincipal.ServicePrincipalNames[0] -KeyId $cred.KeyId -Force$cred3 = Get-AzureRmADSpCredential -ServicePrincipalName $servicePrincipal.ServicePrincipalNames[0] Assert-NotNull $cred3Assert-AreEqual $cred3.Count 1Assert-AreEqual $cred3[0].KeyId $cred1.KeyIdRemove-AzureRmADSpCredential -ObjectId $servicePrincipal.Id -All -Force$cred3 = Get-AzureRmADSpCredential -ObjectId $servicePrincipal.IdAssert-Null $cred3}Finally{$app =  Get-AzureRmADApplication -ApplicationId $servicePrincipal.ApplicationIdRemove-AzureRmADApplication -ObjectId $app.ObjectId -Force}}