function Test-CreateElasticPool{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $locationtry{$poolName = Get-ElasticPoolName$job = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Standard -Dtu 200 -DatabaseDtuMin 10 -DatabaseDtuMax 100 -StorageMB 204800 -AsJob$job | Wait-Job$ep1 = $job.OutputAssert-NotNull $ep1Assert-AreEqual	Standard $ep1.EditionAssert-AreEqual StandardPool $ep1.SkuNameAssert-AreEqual 200 $ep1.CapacityAssert-AreEqual 10 $ep1.DatabaseCapacityMinAssert-AreEqual 100 $ep1.DatabaseCapacityMax$poolName = Get-ElasticPoolName$ep2 = $server | New-AzSqlElasticPool -ElasticPoolName $poolNameAssert-NotNull $ep2}finally{Remove-ResourceGroupForTest $rg}}function Test-CreateVcoreElasticPool{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $locationtry{$poolName = Get-ElasticPoolName$job = New-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -VCore 2 -Edition GeneralPurpose -ComputeGeneration Gen4  -DatabaseVCoreMin 0.1 -DatabaseVCoreMax 2 -AsJob$job | Wait-Job$ep1 = $job.OutputAssert-NotNull $ep1Assert-AreEqual GP_Gen4 $ep1.SkuNameAssert-AreEqual GeneralPurpose $ep1.EditionAssert-AreEqual 2 $ep1.CapacityAssert-AreEqual 0.1 $ep1.DatabaseCapacityMinAssert-AreEqual 2.0 $ep1.DatabaseCapacityMax$poolName = Get-ElasticPoolNameAssert-ThrowsContains -script { New-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -VCore 1 -Edition BusinessCritial -ComputeGeneration BC_Gen4 -StorageMB 204800 } -message "Mismatch between SKU name 'BC_Gen4_1' and tier 'BusinessCritical'"}finally{Remove-ResourceGroupForTest $rg}}function Test-CreateVcoreElasticPoolWithLicenseType{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $locationtry{$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -VCore 2 -Edition GeneralPurpose -ComputeGeneration Gen4  -DatabaseVCoreMin 0.1 -DatabaseVCoreMax 2Assert-NotNull $ep1Assert-AreEqual LicenseIncluded $ep1.LicenseType $poolName = Get-ElasticPoolName$ep2 = New-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -VCore 2 -Edition GeneralPurpose -ComputeGeneration Gen4  -DatabaseVCoreMin 0.1 -DatabaseVCoreMax 2 -LicenseType BasePriceAssert-NotNull $ep2Assert-AreEqual BasePrice $ep2.LicenseType$poolName = Get-ElasticPoolName$ep3 = New-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -VCore 2 -Edition GeneralPurpose -ComputeGeneration Gen4  -DatabaseVCoreMin 0.1 -DatabaseVCoreMax 2 -LicenseType LicenseIncludedAssert-NotNull $ep3Assert-AreEqual LicenseIncluded $ep3.LicenseType}finally{Remove-ResourceGroupForTest $rg}}function Test-CreateElasticPoolWithZoneRedundancy{$location = Get-Location "Microsoft.Sql" "operations" "West Europe"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $locationtry{$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Premium -ZoneRedundantAssert-NotNull $ep1Assert-AreEqual Premium $ep1.EditionAssert-NotNull $ep1.ZoneRedundantAssert-AreEqual "true" $ep1.ZoneRedundant$poolName = Get-ElasticPoolName$ep2 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Premium -Dtu 125Assert-NotNull $ep2Assert-AreEqual 125 $ep2.CapacityAssert-AreEqual Premium $ep2.EditionAssert-NotNull $ep2.ZoneRedundantAssert-AreEqual "false" $ep2.ZoneRedundant}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateElasticPool{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Standard -Dtu 200 -DatabaseDtuMin 10 -DatabaseDtuMax 100Assert-NotNull $ep1$poolName = Get-ElasticPoolName$ep2 = $server | New-AzSqlElasticPool -ElasticPoolName $poolName -Edition Standard -Dtu 400 -DatabaseDtuMin 10 `-DatabaseDtuMax 100Assert-NotNull $ep2try{$job = Set-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $ep1.ElasticPoolName -Dtu 400 -DatabaseDtuMin 0 -DatabaseDtuMax 50 -Edition Standard -StorageMB 409600 -AsJob$job | Wait-Job$sep1 = $job.OutputAssert-NotNull $sep1Assert-AreEqual 400 $sep1.CapacityAssert-AreEqual 429496729600 $sep1.MaxSizeBytesAssert-AreEqual Standard $sep1.EditionAssert-AreEqual StandardPool $sep1.SkuNameAssert-AreEqual 0 $sep1.DatabaseCapacityMinAssert-AreEqual 50 $sep1.DatabaseCapacityMax$sep2 = $server | Set-AzSqlElasticPool -ElasticPoolName $ep2.ElasticPoolName -Dtu 200 `-DatabaseDtuMin 10 -DatabaseDtuMax 50  -Edition Standard -StorageMB 204800Assert-NotNull $sep2Assert-AreEqual 200 $sep2.CapacityAssert-AreEqual 214748364800 $sep2.MaxSizeBytesAssert-AreEqual Standard $sep2.EditionAssert-AreEqual StandardPool $sep2.SkuNameAssert-AreEqual 10 $sep2.DatabaseCapacityMinAssert-AreEqual 50 $sep2.DatabaseCapacityMax}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateVcoreElasticPool{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -VCore 2 -Edition GeneralPurpose -ComputeGeneration Gen4Assert-NotNull $ep1$poolName = Get-ElasticPoolName$ep2 = $server | New-AzSqlElasticPool -ElasticPoolName $poolName -Edition Standard -Dtu 400 -DatabaseDtuMin 10 `-DatabaseDtuMax 100Assert-NotNull $ep2try{$job = Set-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $ep1.ElasticPoolName -Dtu 400 -DatabaseDtuMin 0 -DatabaseDtuMax 50 -Edition Standard -StorageMB 409600 -AsJob$job | Wait-Job$sep1 = $job.OutputAssert-NotNull $sep1Assert-AreEqual 400 $sep1.CapacityAssert-AreEqual 429496729600 $sep1.MaxSizeBytesAssert-AreEqual Standard $sep1.EditionAssert-AreEqual StandardPool $sep1.SkuNameAssert-AreEqual 0 $sep1.DatabaseCapacityMinAssert-AreEqual 50 $sep1.DatabaseCapacityMax$sep2 = $server | Set-AzSqlElasticPool -ElasticPoolName $ep2.ElasticPoolName -VCore 2 `-Edition GeneralPurpose -ComputeGeneration Gen4 -StorageMB 204800Assert-NotNull $sep2Assert-AreEqual 2 $sep2.CapacityAssert-AreEqual 214748364800 $sep2.MaxSizeBytesAssert-AreEqual GeneralPurpose $sep2.EditionAssert-AreEqual GP_Gen4 $sep2.SkuNameAssert-AreEqual 0 $sep2.DatabaseCapacityMinAssert-AreEqual 2 $sep2.DatabaseCapacityMax$sep3 = $server | Set-AzSqlElasticPool -ElasticPoolName $ep2.ElasticPoolName -DatabaseVCoreMin 0.1Assert-NotNull $sep3Assert-AreEqual 0.1 $sep3.DatabaseCapacityMin$sep4 = $server | Set-AzSqlElasticPool -ElasticPoolName $ep2.ElasticPoolName -VCore 1Assert-NotNull $sep4Assert-AreEqual 1 $sep4.CapacityAssert-AreEqual 0.1 $sep4.DatabaseCapacityMin}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateVcoreElasticPoolWithLicenseType{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName -ElasticPoolName $poolName -VCore 2 -Edition GeneralPurpose -ComputeGeneration Gen4Assert-NotNull $ep1try{$resp = Set-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName -ElasticPoolName $ep1.ElasticPoolName -LicenseType BasePriceAssert-AreEqual $resp.LicenseType BasePrice$resp = Set-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName -ElasticPoolName $ep1.ElasticPoolName -LicenseType LicenseIncludedAssert-AreEqual $resp.LicenseType LicenseIncluded}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateElasticPoolWithZoneRedundancy{$location = Get-Location "Microsoft.Sql" "operations" "West Europe"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $locationtry{$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Premium -Dtu 125Assert-NotNull $ep1$sep1 = Set-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $ep1.ElasticPoolName -ZoneRedundantAssert-NotNull $sep1Assert-NotNull $sep1.ZoneRedundantAssert-AreEqual "true" $sep1.ZoneRedundant}finally{Remove-ResourceGroupForTest $rg}}function Test-GetElasticPool{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Standard -Dtu 200 -DatabaseDtuMin 10 -DatabaseDtuMax 100Assert-NotNull $ep1$poolName = Get-ElasticPoolName$ep2 = $server | New-AzSqlElasticPool -ElasticPoolName $poolName -Edition Standard -Dtu 400 -DatabaseDtuMin 0 `-DatabaseDtuMax 100Assert-NotNull $ep2try{$gep1 = Get-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $ep1.ElasticPoolNameAssert-NotNull $ep1Assert-AreEqual 200 $ep1.CapacityAssert-AreEqual 204800 $ep1.StorageMBAssert-AreEqual Standard $ep1.EditionAssert-AreEqual 10 $ep1.DatabaseCapacityMinAssert-AreEqual 100 $ep1.DatabaseCapacityMax$gep2 = $ep2 | Get-AzSqlElasticPoolAssert-NotNull $ep2Assert-AreEqual 400 $ep2.CapacityAssert-AreEqual 409600 $ep2.StorageMBAssert-AreEqual Standard $ep2.EditionAssert-AreEqual 0 $ep2.DatabaseCapacityMinAssert-AreEqual 100 $ep2.DatabaseCapacityMax$all = $server | Get-AzSqlElasticPool -ElasticPoolName *Assert-AreEqual $all.Count 2}finally{Remove-ResourceGroupForTest $rg}}function Test-GetElasticPoolWithZoneRedundancy{$location = Get-Location "Microsoft.Sql" "operations" "West Europe"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $locationtry{$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Premium -ZoneRedundant$gep1 = Get-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $ep1.ElasticPoolNameAssert-NotNull $gep1.ZoneRedundantAssert-AreEqual "true" $gep1.ZoneRedundant$poolName = Get-ElasticPoolName$ep2 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Premium -Dtu 125$gep2 = Get-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $ep2.ElasticPoolNameAssert-NotNull $gep2.ZoneRedundantAssert-AreEqual "false" $gep2.ZoneRedundant}finally{Remove-ResourceGroupForTest $rg}}function Test-RemoveElasticPool{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool  -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Standard -Dtu 200 -DatabaseDtuMin 10 -DatabaseDtuMax 100Assert-NotNull $ep1$poolName = Get-ElasticPoolName$ep2 = $server | New-AzSqlElasticPool -ElasticPoolName $poolName -Edition Standard -Dtu 400 -DatabaseDtuMin 0 `-DatabaseDtuMax 100Assert-NotNull $ep2try{Remove-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName -ElasticPoolName $ep1.ElasticPoolName –Confirm:$false$ep2 | Remove-AzSqlElasticPool -Force$all = $server | Get-AzSqlElasticPoolAssert-AreEqual $all.Count 0}finally{Remove-ResourceGroupForTest $rg}}function Test-ListAndCancelElasticPoolOperation{$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$poolName = Get-ElasticPoolName$ep1 = New-AzSqlElasticPool -ServerName $server.ServerName -ResourceGroupName $rg.ResourceGroupName `-ElasticPoolName $poolName -Edition Premium -Dtu 125 -DatabaseDtuMin 0 -DatabaseDtuMax 50Assert-NotNull $ep1$poolName = Get-ElasticPoolName$ep2 = $server | New-AzSqlElasticPool -ElasticPoolName $poolName -Edition Premium -Dtu 250 -DatabaseDtuMin 0 `-DatabaseDtuMax 50Assert-NotNull $ep2try{$ep1update = Set-AzSqlElasticPool -ResourceGroupName $ep1.ResourceGroupName -ServerName $ep1.ServerName -ElasticPoolName $ep1.ElasticPoolName `-Edition Premium -Dtu 250 -DatabaseDtuMin 25 -DatabaseDtuMax 125Assert-AreEqual $ep1.ElasticPoolName $ep1update.ElasticPoolNameAssert-AreEqual Premium $ep1update.EditionAssert-AreEqual 250 $ep1update.Capacity$epactivity = Get-AzSqlElasticPoolActivity -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -ElasticPoolName $ep1update.ElasticPoolName$epactivityIdFor($i=0; $i -lt $epactivity.Length; $i++) {if($epactivity[$i].Operation -eq "UPDATE"){$epactivityId = $epactivity[$i].OperationId}}try{$activityCancel = Stop-AzSqlElasticPoolActivity -ResourceGroupName $ep1.ResourceGroupName -ServerName $ep1.ServerName -ElasticPoolName $ep1.ElasticPoolName -OperationId $epactivityId}Catch{$ErrorMessage = $_.Exception.MessageAssert-AreEqual True $ErrorMessage.Contains("Cannot cancel management operation '" + $epactivityId + "' in the current state") $ErrorMessage}$ep2update = Set-AzSqlElasticPool -ResourceGroupName $ep2.ResourceGroupName -ServerName $ep2.ServerName -ElasticPoolName $ep2.ElasticPoolName `-Edition Premium -Dtu 500 -DatabaseDtuMin 25 -DatabaseDtuMax 250Assert-AreEqual $ep2.ElasticPoolName $ep2update.ElasticPoolNameAssert-AreEqual Premium $ep2update.EditionAssert-AreEqual 500 $ep2update.Capacity$epactivity = $ep2update | Get-AzSqlElasticPoolActivityFor($i=0; $i -lt $epactivity.Length; $i++) {if($epactivity[$i].Operation -eq "UPDATE"){$epactivityId = $epactivity[$i].OperationId}}$epactivity = $ep2update | Get-AzSqlElasticPoolActivity -OperationId $epactivityIdtry{$activityCancel = $epactivity | Stop-AzSqlElasticPoolActivity}Catch{$ErrorMessage = $_.Exception.MessageAssert-AreEqual True $ErrorMessage.Contains("Cannot cancel management operation '" + $epactivityId + "' in the current state") $ErrorMessage}}finally{Remove-ResourceGroupForTest $rg}}