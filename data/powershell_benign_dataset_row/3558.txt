$JobQueryWaitTimeInSeconds = 0$ResourceGroupName = "E2ERg"$VaultName = "E2ETest"$FabricNameToBeCreated = "ReleaseFabric"$PrimaryFabricName = "IDCLAB-A137.ntdev.corp.microsoft.com"$RecoveryFabricName = "IDCLAB-A147.ntdev.corp.microsoft.com"$PolicyName = "E2EPolicy1"$PrimaryProtectionContainerName = "primary"$RecoveryProtectionContainerName = "recovery"$ProtectionContainerMappingName = "E2AClP26mapping"$PrimaryNetworkFriendlyName = "corp"$RecoveryNetworkFriendlyName = "corp"$NetworkMappingName = "corp96map"$VMName = "Vm1"$RecoveryPlanName = "RPSwag96"$VmList = "Vm1,Vm3"function WaitForJobCompletion{ param([string] $JobId,[int] $JobQueryWaitTimeInSeconds = $JobQueryWaitTimeInSeconds)$isJobLeftForProcessing = $true;do{$Job = Get-AzRecoveryServicesAsrJob -Name $JobId$Jobif($Job.State -eq "InProgress" -or $Job.State -eq "NotStarted"){$isJobLeftForProcessing = $true}else{$isJobLeftForProcessing = $false}if($isJobLeftForProcessing){[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait($JobQueryWaitTimeInSeconds * 1000)}}While($isJobLeftForProcessing)}Function WaitForIRCompletion{ param([PSObject] $VM,[int] $JobQueryWaitTimeInSeconds = $JobQueryWaitTimeInSeconds)$isProcessingLeft = $true$IRjobs = $nulldo{$IRjobs = Get-AzRecoveryServicesAsrJob -TargetObjectId $VM.Name | Sort-Object StartTime -Descending | select -First 4 | Where-Object{$_.JobType -eq "PrimaryIrCompletion" -or $_.JobType -eq "SecondaryIrCompletion"}if($IRjobs -eq $null -or $IRjobs.Count -lt 2){$isProcessingLeft = $true}else{$isProcessingLeft = $false}if($isProcessingLeft){[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait($JobQueryWaitTimeInSeconds * 1000)}}While($isProcessingLeft)$IRjobsWaitForJobCompletion -JobId $IRjobs[0].Name -JobQueryWaitTimeInSeconds $JobQueryWaitTimeInSecondsWaitForJobCompletion -JobId $IRjobs[1].Name -JobQueryWaitTimeInSeconds $JobQueryWaitTimeInSeconds}function Test-SiteRecoveryEnumerationTests{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$vaults = Get-AzRecoveryServicesVaultAssert-True { $vaults.Count -gt 0 }Assert-NotNull($vaults)foreach($vault in $vaults){Assert-NotNull($vault.Name)Assert-NotNull($vault.ID)}$rsps = Get-AzRecoveryServicesAsrFabric | Get-AzRecoveryServicesAsrServicesProviderAssert-True { $rsps.Count -gt 0 }Assert-NotNull($rsps)foreach($rsp in $rsps){Assert-NotNull($rsp.Name)Assert-NotNull($rsp.ID)}$protectionContainers = Get-AzRecoveryServicesAsrFabric | Get-AzRecoveryServicesAsrProtectionContainerAssert-True { $protectionContainers.Count -gt 0 }Assert-NotNull($protectionContainers)foreach($protectionContainer in $protectionContainers){Assert-NotNull($protectionContainer.Name)Assert-NotNull($protectionContainer.ID)}}function Test-SiteRecoveryCreatePolicy{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$Job = New-AzRecoveryServicesAsrPolicy -Name $PolicyName -ReplicationProvider HyperVReplica2012R2 -ReplicationMethod Online -ReplicationFrequencyInSeconds 30 -RecoveryPoints 1 -ApplicationConsistentSnapshotFrequencyInHours 0 -ReplicationPort 8083 -Authentication Kerberos -ReplicaDeletion Required $Policy = Get-AzRecoveryServicesAsrPolicy -Name $PolicyNameAssert-True { $Policy.Count -gt 0 }Assert-NotNull($Policy)}function Test-SiteRecoveryRemovePolicy{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$Policy = Get-AzRecoveryServicesAsrPolicy -Name $PolicyNameAssert-True { $Policy.Count -gt 0 }Assert-NotNull($Policy)$Job = Remove-AzRecoveryServicesAsrPolicy -Policy $Policy}function Test-RemoveFabric{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$fabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName $job = Remove-ASRFabric -InputObject $fabricWaitForJobCompletion -JobId $job.NameGet-AzRecoveryServicesAsrFabric|Remove-ASRFabric}function Test-CreatePCMap{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$Policy = Get-AzRecoveryServicesAsrPolicy -Name $PolicyName;$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName| Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$RecoveryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $recoveryFabricName| Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $RecoveryProtectionContainerName }$Job = New-AzRecoveryServicesAsrProtectionContainerMapping -Name $ProtectionContainerMappingName -Policy $Policy -PrimaryProtectionContainer $PrimaryProtectionContainer -RecoveryProtectionContainer $RecoveryProtectionContainerWaitForJobCompletion -JobId $Job.Name$ProtectionContainerMapping = Get-AzRecoveryServicesAsrProtectionContainerMapping -Name $ProtectionContainerMappingName -ProtectionContainer $PrimaryProtectionContainerAssert-NotNull($ProtectionContainerMapping)}function Test-SiteRecoveryEnableDR{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$ProtectionContainerMapping = Get-AzRecoveryServicesAsrProtectionContainerMapping -Name $ProtectionContainerMappingName -ProtectionContainer $PrimaryProtectionContainerforeach($EnableVMName in $VmList.Split(',')){$VM = Get-AzRecoveryServicesAsrProtectableItem -FriendlyName $EnableVMName -ProtectionContainer $PrimaryProtectionContainer  $Job = New-AzRecoveryServicesAsrReplicationProtectedItem -ProtectableItem $VM -Name $VM.Name -ProtectionContainerMapping $ProtectionContainerMappingWaitForJobCompletion -JobId $Job.NameWaitForIRCompletion -VM $VM }}function Test-MapNetwork{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName$RecoveryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $RecoveryFabricName$PrimaryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $PrimaryFabric | where { $_.FriendlyName -eq $PrimaryNetworkFriendlyName}$RecoveryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $RecoveryFabric | where { $_.FriendlyName -eq $RecoveryNetworkFriendlyName}$Job = New-AzRecoveryServicesAsrNetworkMapping -Name $NetworkMappingName -PrimaryNetwork $PrimaryNetwork -RecoveryNetwork $RecoveryNetworkWaitForJobCompletion -JobId $Job.Name$NetworkMapping = Get-AzRecoveryServicesAsrNetworkMapping -Name $NetworkMappingName -Network $PrimaryNetwork}function Test-RemoveNetworkPairing{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName$RecoveryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $RecoveryFabricName$PrimaryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $PrimaryFabric | where { $_.FriendlyName -eq $PrimaryNetworkFriendlyName}$RecoveryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $RecoveryFabric | where { $_.FriendlyName -eq $RecoveryNetworkFriendlyName}$job = Get-AzRecoveryServicesAsrNetworkMapping -Name $NetworkMappingName -Network $PrimaryNetwork |Remove-ASRNetworkMappingWaitForJobCompletion -JobId $Job.Name}function Test-TFO{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$RecoveryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $RecoveryFabricName$RecoveryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $RecoveryFabric | where { $_.FriendlyName -eq $RecoveryNetworkFriendlyName}$VM = Get-AzRecoveryServicesAsrProtectableItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer  $rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -Name $rpi.Name -ProtectionContainer $PrimaryProtectionContainer $rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -ProtectableItem $VM  $job = Start-ASRTestFailoverJob -ReplicationProtectedItem $rpi -Direction PrimaryToRecoveryWaitForJobCompletion -JobId $Job.Name$job = Start-ASRTestFailoverCleanupJob -ReplicationProtectedItem $rpiWaitForJobCompletion -JobId $Job.Name$job = Start-ASRTestFailoverJob -ReplicationProtectedItem $rpi -Direction PrimaryToRecovery -VMNetwork $RecoveryNetworkWaitForJobCompletion -JobId $Job.Name$job = Start-ASRTestFailoverCleanupJob -ReplicationProtectedItem $rpiWaitForJobCompletion -JobId $Job.Name}function Test-PlannedFailover{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $job =  Start-AzRecoveryServicesAsrPlannedFailoverJob -ReplicationProtectedItem $rpi -Direction PrimaryToRecoveryWaitForJobCompletion -JobId $Job.Name}function Test-Reprotect{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $currentJob = Update-ASRProtectionDirection -ReplicationProtectedItem $rpi -Direction RecoveryToPrimaryWaitForJobCompletion -JobId $currentJob.Name }function Test-FailbackReprotect{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $job =  Start-AzRecoveryServicesAsrPlannedFailoverJob -ReplicationProtectedItem $rpi -Direction RecoveryToPrimaryWaitForJobCompletion -JobId $Job.Name$rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $job = Start-ASRCommitFailoverJob -ReplicationProtectedItem $rpi WaitForJobCompletion -JobId $Job.Name$rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $currentJob = Update-ASRProtectionDirection -ReplicationProtectedItem $rpi -Direction PrimaryToRecoveryWaitForJobCompletion -JobId $currentJob.Name }function Test-UFOandFailback{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$rpi = Get-ASRReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $job =  Start-AsrUnPlannedFailoverJob -ReplicationProtectedItem $rpi -Direction PrimaryToRecoveryWaitForJobCompletion -JobId $Job.Name$rpi = Get-AsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $currentJob = Update-ASRProtectionDirection -ReplicationProtectedItem $rpi -Direction RecoveryToPrimaryWaitForJobCompletion -JobId $currentJob.Name WaitForIRCompletion -VM $rpi $rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $job =  Start-AzRecoveryServicesAsrUnPlannedFailoverJob -ReplicationProtectedItem $rpi -Direction RecoveryToPrimaryWaitForJobCompletion -JobId $Job.Name$rpi = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer $currentJob = Update-ASRProtectionDirection -ReplicationProtectedItem $rpi -Direction PrimaryToRecoveryWaitForJobCompletion -JobId $currentJob.Name  }function Test-RemovePCMap{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName| Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$ProtectionContainerMapping = Get-AzRecoveryServicesAsrProtectionContainerMapping -Name $ProtectionContainerMappingName -ProtectionContainer $PrimaryProtectionContainer$Job = Remove-AzRecoveryServicesAsrProtectionContainerMapping -ProtectionContainerMapping $ProtectionContainerMapping}function Test-SiteRecoveryDisableDR{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }$VM = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer  $Job = Remove-AzRecoveryServicesAsrReplicationProtectedItem -ReplicationProtectedItem $VMWaitForJobCompletion -JobId $Job.NameGet-ASRReplicationProtectedItem -ProtectionContainer $PrimaryProtectionContainer  | Remove-AzRecoveryServicesAsrReplicationProtectedItem}function Test-SiteRecoveryCreateRecoveryPlan{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$PrimaryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName$RecoveryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $RecoveryFabricName$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrProtectionContainer -FriendlyName $PrimaryProtectionContainerName -Fabric $PrimaryFabric$VM = Get-AzRecoveryServicesAsrReplicationProtectedItem -FriendlyName $VMName -ProtectionContainer $PrimaryProtectionContainer$Job = New-AzRecoveryServicesAsrRecoveryPlan -Name $RecoveryPlanName -PrimaryFabric $PrimaryFabric -RecoveryFabric $RecoveryFabric -ReplicationProtectedItem $VM}function Test-SiteRecoveryEnumerateRecoveryPlan{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$RP = Get-AzRecoveryServicesAsrRecoveryPlan -Name $RecoveryPlanNameAssert-NotNull($RP)Assert-True { $RP.Count -gt 0 }}function Test-EditRecoveryPlan{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$RP = Get-AsrRecoveryPlan -Name $RecoveryPlanName$RP = Edit-ASRRecoveryPlan -RecoveryPlan $RP -AppendGroup$VMNameList = $VMList.split(',')$PrimaryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $PrimaryFabricName$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrProtectionContainer -FriendlyName $PrimaryProtectionContainerName -Fabric $PrimaryFabric$VMList = Get-ASRReplicationProtectedItem -ProtectionContainer $PrimaryProtectionContainer$VM = $VMList | where { $_.FriendlyName -eq $VMNameList[1] }$RP = Edit-ASRRecoveryPlan -RecoveryPlan $RP -Group $RP.Groups[3] -AddProtectedItems $VM$RP.GroupsWrite-Host $("Triggered Update RP") -ForegroundColor Green$currentJob = Update-ASRRecoveryPlan -RecoveryPlan $RPWaitForJobCompletion -JobId $currentJob.Name}function Test-RecoveryPlanJob{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$RP = Get-AsrRecoveryPlan -Name $RecoveryPlanName$RecoveryFabric = Get-AzRecoveryServicesAsrFabric -FriendlyName $RecoveryFabricName$RecoveryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $RecoveryFabric | where { $_.FriendlyName -eq $RecoveryNetworkFriendlyName}$currentJob = Start-ASRTestFailoverJob -RecoveryPlan $RP -Direction PrimaryToRecovery -VMNetwork $RecoveryNetworkWaitForJobCompletion -JobId $currentJob.Name$currentJob = Start-ASRTestFailoverCleanupJob -RecoveryPlan $RPWaitForJobCompletion -JobId $currentJob.Name$currentJob = Start-ASRTestFailoverJob -RecoveryPlan $RP -Direction PrimaryToRecoveryWaitForJobCompletion -JobId $currentJob.Name$currentJob = Start-ASRTestFailoverCleanupJob -RecoveryPlan $RPWaitForJobCompletion -JobId $currentJob.Name$currentJob = Start-ASRPlannedFailoverJob -RecoveryPlan $RP -Direction PrimaryToRecoveryWaitForJobCompletion -JobId $currentJob.Name $currentJob = Start-AsrCommitFailoverJob -RecoveryPlan $RP$currentJobWaitForJobCompletion -JobId $currentJob.Name$currentJob = Update-AsrProtectionDirection -RecoveryPlan $RP -Direction RecoveryToPrimary $currentJobWaitForJobCompletion -JobId $currentJob.Name$currentJob = Start-AsrUnPlannedFailoverJob -RecoveryPlan $RP -Direction RecoveryToPrimary$currentJobWaitForJobCompletion -JobId $currentJob.Name$currentJob = Start-AsrCommitFailoverJob -RecoveryPlan $RP$currentJobWaitForJobCompletion -JobId $currentJob.Name }function Test-SiteRecoveryRemoveRecoveryPlan{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$RP = Get-AzRecoveryServicesAsrRecoveryPlan -Name $RecoveryPlanName$Job = Remove-AzRecoveryServicesAsrRecoveryPlan -RecoveryPlan $RP}function Test-SiteRecoveryFabricTest{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$Job = New-AzRecoveryServicesAsrFabric -Name $FabricNameToBeCreated -Type HyperVSiteAssert-NotNull($Job)WaitForJobCompletion -JobId $job.name$fabrics =  Get-AzRecoveryServicesAsrFabric Assert-True { $fabrics.Count -gt 0 }Assert-NotNull($fabrics)foreach($fabric in $fabrics){Assert-NotNull($fabrics.Name)Assert-NotNull($fabrics.ID)}$fabric =  Get-AzRecoveryServicesAsrFabric -Name $FabricNameToBeCreatedAssert-NotNull($fabric)Assert-NotNull($fabrics.Name)Assert-NotNull($fabrics.ID)$Job = Remove-AzRecoveryServicesAsrFabric -Fabric $fabricAssert-NotNull($Job)$fabric =  Get-AzRecoveryServicesAsrFabric | Where-Object {$_.Name -eq $FabricNameToBeCreated }Assert-Null($fabric)}function Test-SiteRecoveryNewModelE2ETest{param([string] $vaultSettingsFilePath)Import-AzRecoveryServicesAsrVaultSettingsFile -Path $vaultSettingsFilePath$Fabrics =  Get-AzRecoveryServicesAsrFabric Assert-True { $fabrics.Count -gt 0 }Assert-NotNull($fabrics)foreach($fabric in $fabrics){Assert-NotNull($fabrics.Name)Assert-NotNull($fabrics.ID)}$PrimaryFabric = $Fabrics | Where-Object { $_.FriendlyName -eq $PrimaryFabricName}$RecoveryFabric = $Fabrics | Where-Object { $_.FriendlyName -eq $RecoveryFabricName}$rsps = Get-AzRecoveryServicesAsrFabric | Get-AzRecoveryServicesAsrServicesProviderAssert-True { $rsps.Count -gt 0 }Assert-NotNull($rsps)foreach($rsp in $rsps){Assert-NotNull($rsp.Name)}$Job = New-AzRecoveryServicesAsrPolicy -Name $PolicyName -ReplicationProvider HyperVReplica2012R2 -ReplicationMethod Online -ReplicationFrequencyInSeconds 30 -RecoveryPoints 1 -ApplicationConsistentSnapshotFrequencyInHours 0 -ReplicationPort 8083 -Authentication Kerberos -ReplicaDeletion Required$Policy = Get-AzRecoveryServicesAsrPolicy -Name $PolicyNameAssert-NotNull($Policy)Assert-NotNull($Policy.Name)$PrimaryProtectionContainer = Get-AzRecoveryServicesAsrFabric | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $PrimaryProtectionContainerName }Assert-NotNull($PrimaryProtectionContainer)Assert-NotNull($PrimaryProtectionContainer.Name)$RecoveryProtectionContainer = Get-AzRecoveryServicesAsrFabric | Get-AzRecoveryServicesAsrProtectionContainer | where { $_.FriendlyName -eq $RecoveryProtectionContainerName }Assert-NotNull($RecoveryProtectionContainer)Assert-NotNull($RecoveryProtectionContainer.Name)$Job = New-AzRecoveryServicesAsrProtectionContainerMapping -Name $ProtectionContainerMappingName -Policy $Policy -PrimaryProtectionContainer $PrimaryProtectionContainer -RecoveryProtectionContainer $RecoveryProtectionContainer$ProtectionContainerMapping = Get-AzRecoveryServicesAsrProtectionContainerMapping -Name $ProtectionContainerMappingName -ProtectionContainer $PrimaryProtectionContainerAssert-NotNull($ProtectionContainerMapping)Assert-NotNull($ProtectionContainerMapping.Name)$PrimaryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $PrimaryFabric | where { $_.FriendlyName -eq $PrimaryNetworkFriendlyName}$RecoveryNetwork = Get-AzRecoveryServicesAsrNetwork -Fabric $RecoveryFabric | where { $_.FriendlyName -eq $RecoveryNetworkFriendlyName}$Job = New-AzRecoveryServicesAsrNetworkMapping -Name $NetworkMappingName -PrimaryNetwork $PrimaryNetwork -RecoveryNetwork $RecoveryNetwork$NetworkMapping = Get-AzRecoveryServicesAsrNetworkMapping -Name $NetworkMappingName -Network $PrimaryNetwork$protectable = Get-AzRecoveryServicesAsrProtectableItem -ProtectionContainer $PrimaryProtectionContainer -FriendlyName $VMNameAssert-NotNull($protectable)Assert-NotNull($protectable.Name)$Job = New-AzRecoveryServicesAsrReplicationProtectedItem -ProtectableItem $protectable -Name $protectable.Name -ProtectionContainerMapping $ProtectionContainerMappingAssert-NotNull($Job)$protected = Get-AzRecoveryServicesAsrReplicationProtectedItem -ProtectionContainer $PrimaryProtectionContainer -Name $protectable.NameAssert-NotNull($protected)Assert-NotNull($protected.Name)$Job = Remove-AzRecoveryServicesAsrReplicationProtectedItem -ReplicationProtectedItem $protected$protected = Get-AzRecoveryServicesAsrReplicationProtectedItem -ProtectionContainer $PrimaryProtectionContainer | Where-Object {$_.Name -eq $protectable.Name} Assert-Null($protected)$Job = Remove-AzRecoveryServicesAsrNetworkMapping -NetworkMapping $NetworkMapping$Job = Remove-AzRecoveryServicesAsrProtectionContainerMapping -ProtectionContainerMapping $ProtectionContainerMapping$ProtectionContainerMapping = Get-AzRecoveryServicesAsrProtectionContainerMapping -ProtectionContainer $PrimaryProtectionContainer | Where-Object {$_.Name -eq $ProtectionContainerMappingName}Assert-Null($ProtectionContainerMapping)$Job = Remove-AzRecoveryServicesAsrPolicy -Policy $Policy$Policy = Get-AzRecoveryServicesAsrPolicy | Where-Object {$_.Name -eq $PolicyName}Assert-Null($Policy)}