function Test-setup{$global:ruleName = Get-ResourceName$global:ruleName2 = Get-ResourceName$global:ruleName3 = Get-ResourceName$global:resourceGroupName = Get-ResourceGroupName$global:location = Get-ProviderLocation("microsoft.insights")$global:description = "SQR log alert rule"$global:severity = "2"$global:throttlingInMin = "5"$global:enabled = 1$global:emailSubject = "SQR Log alert trigger notification"$global:customWebhookPayload = "{}"$global:thresholdOperator = "GreaterThan"$global:threshold = 5$global:metricTriggerType = "Total"$global:metricTriggerColumn = "timestamp"$global:frequencyInMin = 5$global:timeWindowInMin = 5$global:query = "traces | summarize AggregatedValue = count() by bin(timestamp, 5m)"New-AzResourceGroup -Name $resourceGroupName -Location $location -Force$appInsightsResourceName = Get-ResourceName$appInsightsResource = New-AzureRmApplicationInsights `-Name $appInsightsResourceName `-ResourceGroupName $resourceGroupName `-Location $location$actionGroupName = Get-ResourceName$email = New-AzActionGroupReceiver -Name 'user1' -EmailReceiver -EmailAddress 'user1@example.com'$newActionGroup =  Set-AzureRmActionGroup -Name $actionGroupName -ResourceGroup $resourceGroupName -ShortName ASTG -Receiver $email$actionGroupResource = New-AzActionGroup -ActionGroupId $newActionGroup.Id$global:actionGroup = @($newActionGroup.Id)$global:subscription = (Get-AzureRmContext).Subscription$global:authorizedResources = "/subscriptions/" + $subscription + "/resourceGroups/" + $resourceGroupName + "/providers/microsoft.insights/components/" + $appInsightsResourceName$global:dataSourceId = $authorizedResources$global:queryType = "ResultCount"$global:metricTriggerThreshold = 10$global:metricTriggerThresholdOperator = "GreaterThan"$global:tags = @{}}function Verify-ScheduledQueryRule($scheduledQueryRule){Assert-NotNull $scheduledQueryRuleAssert-NotNull $scheduledQueryRule.SourceAssert-NotNull $scheduledQueryRule.ScheduleAssert-NotNull $scheduledQueryRule.ActionAssert-NotNull $scheduledQueryRule.Action.TriggerAssert-NotNull $scheduledQueryRule.Action.Trigger.MetricTriggerAssert-NotNull $scheduledQueryRule.Action.AznsActionAssert-AreEqual $scheduledQueryRule.Name $ruleNameAssert-AreEqual $scheduledQueryRule.Description $descriptionAssert-AreEqual $scheduledQueryRule.Action.Severity $severityAssert-AreEqual $scheduledQueryRule.Action.ThrottlingInMin $throttlingInMinAssert-AreEqual $scheduledQueryRule.Action.Trigger.Threshold $thresholdAssert-AreEqual $scheduledQueryRule.Action.Trigger.ThresholdOperator $thresholdOperatorAssert-AreEqual $scheduledQueryRule.Action.Trigger.MetricTrigger.Threshold $metricTriggerThresholdAssert-AreEqual $scheduledQueryRule.Action.Trigger.MetricTrigger.ThresholdOperator $metricTriggerThresholdOperatorAssert-AreEqual $scheduledQueryRule.Action.Trigger.MetricTrigger.MetricTriggerType $metricTriggerTypeAssert-AreEqual $scheduledQueryRule.Action.Trigger.MetricTrigger.MetricColumn $metricTriggerColumnAssert-AreEqual $scheduledQueryRule.Action.AznsAction.ActionGroup $actionGroupAssert-AreEqual $scheduledQueryRule.Action.AznsAction.EmailSubject $emailSubjectAssert-AreEqual $scheduledQueryRule.Action.AznsAction.CustomWebhookPayload $customWebhookPayloadAssert-AreEqual $scheduledQueryRule.Schedule.FrequencyInMinutes $frequencyInMinAssert-AreEqual $scheduledQueryRule.Schedule.TimeWindowInMinutes $timeWindowInMinAssert-AreEqual $scheduledQueryRule.Source.Query $queryAssert-AreEqual $scheduledQueryRule.Source.DataSourceId $dataSourceIdAssert-AreEqual $scheduledQueryRule.Source.AuthorizedResources $authorizedResourcesAssert-AreEqual $scheduledQueryRule.Source.QueryType $queryType}function Test-NewGetUpdateSetRemoveScheduledQueryRule{Write-Debug "Starting Test-NewGetUpdateSetRemoveScheduledQueryRule"Test-setuptry{$aznsActionGroup = New-AzScheduledQueryRuleAznsActionGroup -ActionGroup $actionGroup -EmailSubject $emailSubject -CustomWebhookPayload $customWebhookPayload$metricTrigger = New-AzScheduledQueryRuleLogMetricTrigger -ThresholdOperator $metricTriggerthresholdOperator -Threshold $metricTriggerThreshold -MetricTriggerType $metricTriggerType -MetricColumn $metricTriggerColumn$triggerCondition = New-AzScheduledQueryRuleTriggerCondition -ThresholdOperator $thresholdOperator -Threshold $threshold -MetricTrigger $metricTrigger$alertingAction = New-AzScheduledQueryRuleAlertingAction -AznsAction $aznsActionGroup -Severity $severity -ThrottlingInMinutes $throttlingInMin -Trigger $triggerCondition$schedule = New-AzScheduledQueryRuleSchedule -FrequencyInMinutes $frequencyInMin -TimeWindowInMinutes $timeWindowInMin$source = New-AzScheduledQueryRuleSource -Query $query -DataSourceId $dataSourceId -AuthorizedResource $authorizedResources -QueryType $queryType$scheduledQueryRule = New-AzScheduledQueryRule -Location $location -Name $ruleName -ResourceGroupName $resourceGroupName -Action $alertingAction -Source $source -Enabled $enabled -Description $description -Schedule $schedule -Tag $tagsVerify-ScheduledQueryRule $scheduledQueryRuleWrite-Debug " ****** Getting the Scheduled Query Rule by name"$retrieved = Get-AzScheduledQueryRule -ResourceGroup $resourceGroupName -Name $ruleNameAssert-NotNull $retrievedAssert-AreEqual 1 $retrieved.LengthVerify-ScheduledQueryRule $retrieved[0]Write-Debug " ****** Getting the Scheduled Query Rule by subscriptionId"$retrieved = Get-AzScheduledQueryRuleAssert-NotNull $retrievedWrite-Debug " ****** Getting the Scheduled Query Rule by resource group"$retrieved = Get-AzScheduledQueryRule -ResourceGroupName $resourceGroupNameAssert-NotNull $retrievedAssert-AreEqual 1 $retrieved.LengthVerify-ScheduledQueryRule $retrieved[0]Write-Debug " ****** Updating Scheduled Query Rule by name (PUT semantics)"$updated = Set-AzScheduledQueryRule -Location $location -Name $ruleName -ResourceGroupName $resourceGroupName -Action $alertingAction -Source $source -Enabled 1 -Description $description -Schedule $schedule -Tag $tagsVerify-ScheduledQueryRule $scheduledQueryRuleWrite-Debug " ****** Updating Scheduled Query Rule by resource Id (PUT semantics)"$updated = Set-AzScheduledQueryRule -ResourceId $scheduledQueryRule.Id -Location $location -Action $alertingAction -Source $source -Enabled 1 -Description $description -Schedule $schedule -Tag $tagsVerify-ScheduledQueryRule $scheduledQueryRuleWrite-Debug " ****** Updating Scheduled Query Rule by InputObject (PUT semantics)"$updated = Set-AzScheduledQueryRule -InputObject $scheduledQueryRule -Location $location -Action $alertingAction -Source $source -Enabled 1 -Description $description -Schedule $schedule -Tag $tagsVerify-ScheduledQueryRule $scheduledQueryRuleWrite-Debug " ****** Updating Scheduled Query Rule by name (PATCH semantics)"$updated = Update-AzScheduledQueryRule -ResourceGroupName $resourceGroupName -Name $ruleName -Enabled 0Verify-ScheduledQueryRule $updatedAssert-AreEqual $updated.Enabled falseWrite-Debug " ****** Updating Scheduled Query Rule by resource Id (PATCH semantics)"$updated = Update-AzScheduledQueryRule -ResourceId $scheduledQueryRule.Id -Enabled 0Verify-ScheduledQueryRule $updatedAssert-AreEqual $updated.Enabled falseWrite-Debug " ****** Updating Scheduled Query Rule by InputObject (PATCH semantics)"$updated = Update-AzScheduledQueryRule -InputObject $scheduledQueryRule -Enabled 0Verify-ScheduledQueryRule $updatedAssert-AreEqual $updated.Enabled falseWrite-Debug " ****** Removing Scheduled Query Rule by name"Remove-AzScheduledQueryRule -ResourceGroup $resourceGroupName -Name $ruleNameWrite-Debug " ****** Removing Scheduled Query Rule by resource Id"Remove-AzScheduledQueryRule -ResourceId $scheduledQueryRule.IdWrite-Debug " ****** Removing Scheduled Query Rule by InputObject"Remove-AzScheduledQueryRule -InputObject $scheduledQueryRule}catch{throw $_}finally{Clean-ResourceGroup($resourceGroupName)}}function Test-PipingRemoveSetUpdateScheduledQueryRule{Write-Debug "Starting Test-PipingRemoveSetUpdateScheduledQueryRule"Test-setuptry{$aznsActionGroup = New-AzScheduledQueryRuleAznsActionGroup -ActionGroup $actionGroup -EmailSubject $emailSubject -CustomWebhookPayload $customWebhookPayload$metricTrigger = New-AzScheduledQueryRuleLogMetricTrigger -ThresholdOperator $metricTriggerthresholdOperator -Threshold $metricTriggerThreshold -MetricTriggerType $metricTriggerType -MetricColumn $metricTriggerColumn$triggerCondition = New-AzScheduledQueryRuleTriggerCondition -ThresholdOperator $thresholdOperator -Threshold $threshold -MetricTrigger $metricTrigger$alertingAction = New-AzScheduledQueryRuleAlertingAction -AznsAction $aznsActionGroup -Severity $severity -ThrottlingInMinutes $throttlingInMin -Trigger $triggerCondition$schedule = New-AzScheduledQueryRuleSchedule -FrequencyInMinutes $frequencyInMin -TimeWindowInMinutes $timeWindowInMin$source = New-AzScheduledQueryRuleSource -Query $query -DataSourceId $dataSourceId -AuthorizedResource $authorizedResources -QueryType $queryType$scheduledQueryRule = New-AzScheduledQueryRule -Location $location -Name $ruleName -ResourceGroupName $resourceGroupName -Action $alertingAction -Source $source -Enabled $enabled -Description $description -Schedule $schedule -Tag $tagsVerify-ScheduledQueryRule $scheduledQueryRule$resourceId = $scheduledQueryRule.IdWrite-Debug " ****** Updating Scheduled Query Rule by name"$retrieved = Get-AzScheduledQueryRule -ResourceGroup $resourceGroupName -Name $ruleName | Update-AzScheduledQueryRule -Enabled 0Verify-ScheduledQueryRule $retrievedAssert-AreEqual $retrieved.Enabled false$retrieved = Get-AzScheduledQueryRule -ResourceGroup $resourceGroupName -Name $ruleName | Set-AzScheduledQueryRuleVerify-ScheduledQueryRule $retrievedWrite-Debug " ****** Updating Scheduled Query Rule by Resource Id"$retrieved = Get-AzScheduledQueryRule -ResourceId $resourceId | Update-AzScheduledQueryRule -Enabled 1Assert-AreEqual $retrieved.Enabled trueVerify-ScheduledQueryRule $retrieved$retrieved = Get-AzScheduledQueryRule -ResourceId $resourceId | Set-AzScheduledQueryRuleVerify-ScheduledQueryRule $retrievedWrite-Debug " ****** Removing Scheduled Query Rule by name"$retrieved = Get-AzScheduledQueryRule -ResourceGroup $resourceGroupName -Name $ruleName | Remove-AzScheduledQueryRuleAssert-Null $retrieved$scheduledQueryRule = New-AzScheduledQueryRule -Location $location -Name $ruleName2 -ResourceGroupName $resourceGroupName -Action $alertingAction -Source $source -Enabled $enabled -Description $description -Schedule $schedule -Tag $tagsWrite-Debug " ****** Removing Scheduled Query Rule by Resource Id"$retrieved = Get-AzScheduledQueryRule -ResourceId $scheduledQueryRule.Id | Remove-AzScheduledQueryRuleAssert-Null $retrieved$scheduledQueryRule = New-AzScheduledQueryRule -Location $location -Name $ruleName3 -ResourceGroupName $resourceGroupName -Action $alertingAction -Source $source -Enabled $enabled -Description $description -Schedule $schedule -Tag $tagsWrite-Debug " ****** Removing Scheduled Query Rules in ResourceGroup"$retrieved = Get-AzScheduledQueryRule -ResourceGroupName $resourceGroupName | Remove-AzScheduledQueryRuleAssert-Null $retrieved}catch{throw $_}finally{Clean-ResourceGroup($resourceGroupName)}}