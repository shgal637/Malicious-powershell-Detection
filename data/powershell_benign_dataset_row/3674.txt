function Test-CreateDatabaseCopy(){$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$database = Create-DatabaseForTest $rg $server "Standard"$copyRg = Create-ResourceGroupForTest $location$copyServer = Create-ServerForTest $copyRg $location$copyDatabaseName = Get-DatabaseNametry{$job = New-AzSqlDatabaseCopy -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $database.DatabaseName `-CopyDatabaseName $copyDatabaseName -AsJob$job | Wait-Job$dbLocalCopy = $job.OutputAssert-AreEqual $dbLocalCopy.ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $dbLocalCopy.ServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.DatabaseName $database.DatabaseNameAssert-AreEqual $dbLocalCopy.CopyResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $dbLocalCopy.CopyServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.CopyDatabaseName $copyDatabaseName$dbCrossServerCopy = New-AzSqlDatabaseCopy -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $database.DatabaseName `-CopyResourceGroupName $copyRg.ResourceGroupName -CopyServerName $copyServer.ServerName -CopyDatabaseName $copyDatabaseNameAssert-AreEqual $dbCrossServerCopy.ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $dbCrossServerCopy.ServerName $server.ServerNameAssert-AreEqual $dbCrossServerCopy.DatabaseName $database.DatabaseNameAssert-AreEqual $dbCrossServerCopy.CopyResourceGroupName $copyRg.ResourceGroupNameAssert-AreEqual $dbCrossServerCopy.CopyServerName $copyServer.ServerNameAssert-AreEqual $dbCrossServerCopy.CopyDatabaseName $copyDatabaseName}finally{Remove-ResourceGroupForTest $rgRemove-ResourceGroupForTest $copyRg}}function Test-CreateVcoreDatabaseCopy(){$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$db = Create-VcoreDatabaseForTest $rg $server 1 BasePricetry{$copyDatabaseName = Get-DatabaseName$dbLocalCopy = New-AzSqlDatabaseCopy -ResourceGroupName $db.ResourceGroupName -ServerName $db.ServerName -DatabaseName $db.DatabaseName -CopyDatabaseName $copyDatabaseNameAssert-AreEqual $dbLocalCopy.ServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.DatabaseName $db.DatabaseNameAssert-AreEqual $dbLocalCopy.LicenseType BasePrice Assert-AreEqual $dbLocalCopy.CopyResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $dbLocalCopy.CopyServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.CopyDatabaseName $copyDatabaseName$copyDatabaseName = Get-DatabaseName$dbLocalCopy = New-AzSqlDatabaseCopy -ResourceGroupName $db.ResourceGroupName -ServerName $db.ServerName -DatabaseName $db.DatabaseName -CopyDatabaseName $copyDatabaseName -LicenseType BasePriceAssert-AreEqual $dbLocalCopy.ServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.DatabaseName $db.DatabaseNameAssert-AreEqual $dbLocalCopy.LicenseType BasePrice Assert-AreEqual $dbLocalCopy.CopyResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $dbLocalCopy.CopyServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.CopyDatabaseName $copyDatabaseName$copyDatabaseName = Get-DatabaseName$dbLocalCopy = New-AzSqlDatabaseCopy -ResourceGroupName $db.ResourceGroupName -ServerName $db.ServerName -DatabaseName $db.DatabaseName -CopyDatabaseName $copyDatabaseName -LicenseType LicenseIncludedAssert-AreEqual $dbLocalCopy.ServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.DatabaseName $db.DatabaseNameAssert-AreEqual $dbLocalCopy.LicenseType LicenseIncluded Assert-AreEqual $dbLocalCopy.CopyResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $dbLocalCopy.CopyServerName $server.ServerNameAssert-AreEqual $dbLocalCopy.CopyDatabaseName $copyDatabaseName}finally{Remove-ResourceGroupForTest $rg}}function Test-CreateSecondaryDatabase(){$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$database = Create-DatabaseForTest $rg $server$partRg = Create-ResourceGroupForTest $location$partServer = Create-ServerForTest $partRg $locationtry{$readSecondary = New-AzSqlDatabaseSecondary -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $database.DatabaseName `-PartnerResourceGroupName $partRg.ResourceGroupName -PartnerServerName $partServer.ServerName -AllowConnections AllAssert-NotNull $readSecondary.LinkIdAssert-AreEqual $readSecondary.ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $readSecondary.ServerName $server.ServerNameAssert-AreEqual $readSecondary.DatabaseName $database.DatabaseNameAssert-AreEqual $readSecondary.Role "Primary"Assert-AreEqual $readSecondary.Location $locationAssert-AreEqual $readSecondary.PartnerResourceGroupName $partRg.ResourceGroupNameAssert-AreEqual $readSecondary.PartnerServerName $partServer.ServerNameAssert-NotNull $readSecondary.PartnerRoleAssert-AreEqual $readSecondary.PartnerLocation $locationAssert-NotNull $readSecondary.AllowConnectionsAssert-NotNull $readSecondary.ReplicationStateAssert-NotNull $readSecondary.PercentComplete}finally{Remove-ResourceGroupForTest $rgRemove-ResourceGroupForTest $partRg}}function Test-GetReplicationLink(){$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$database = Create-DatabaseForTest $rg $server$partRg = Create-ResourceGroupForTest $location$partServer = Create-ServerForTest $partRg $locationtry{$job = New-AzSqlDatabaseSecondary -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $database.DatabaseName `-PartnerResourceGroupName $partRg.ResourceGroupName -PartnerServerName $partServer.ServerName -AllowConnections All -AsJob$job | Wait-Job$secondary = Get-AzSqlDatabaseReplicationLink -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName `-DatabaseName $database.DatabaseName -PartnerResourceGroupName $partRg.ResourceGroupName -PartnerServerName $partServer.ServerNameAssert-NotNull $secondary.LinkIdAssert-AreEqual $secondary.ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $secondary.ServerName $server.ServerNameAssert-AreEqual $secondary.DatabaseName $database.DatabaseNameAssert-AreEqual $secondary.Role PrimaryAssert-AreEqual $secondary.Location $locationAssert-AreEqual $secondary.PartnerResourceGroupName $partRg.ResourceGroupNameAssert-AreEqual $secondary.PartnerServerName $partServer.ServerNameAssert-NotNull $secondary.PartnerRoleAssert-AreEqual $secondary.PartnerLocation $locationAssert-NotNull $secondary.AllowConnectionsAssert-NotNull $secondary.ReplicationStateAssert-NotNull $secondary.PercentComplete}finally{Remove-ResourceGroupForTest $rgRemove-ResourceGroupForTest $partRg}}function Test-RemoveSecondaryDatabase(){$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$database = Create-DatabaseForTest $rg $server$partRg = Create-ResourceGroupForTest $location$partServer = Create-ServerForTest $partRg $locationtry{New-AzSqlDatabaseSecondary -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $database.DatabaseName `-PartnerResourceGroupName $partRg.ResourceGroupName -PartnerServerName $partServer.ServerName -AllowConnections AllRemove-AzSqlDatabaseSecondary -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $database.DatabaseName `-PartnerResourceGroupName $partRg.ResourceGroupName -PartnerServerName $partServer.ServerName}finally{Remove-ResourceGroupForTest $rgRemove-ResourceGroupForTest $partRg}}function Test-FailoverSecondaryDatabase(){$location = Get-Location "Microsoft.Sql" "operations" "Southeast Asia"$rg = Create-ResourceGroupForTest $location$server = Create-ServerForTest $rg $location$database = Create-DatabaseForTest $rg $server$partRg = Create-ResourceGroupForTest $location$partServer = Create-ServerForTest $partRg $locationtry{New-AzSqlDatabaseSecondary -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $database.DatabaseName `-PartnerResourceGroupName $partRg.ResourceGroupName -PartnerServerName $partServer.ServerName -AllowConnections All$secondary = Get-AzSqlDatabaseReplicationLink -ResourceGroupName $partRg.ResourceGroupName -ServerName $partServer.ServerName -DatabaseName $database.DatabaseName -PartnerResourceGroupName $rg.ResourceGroupName -PartnerServerName $server.ServerName$job = $secondary | Set-AzSqlDatabaseSecondary -PartnerResourceGroupName $rg.ResourceGroupName -Failover -AsJob$job | Wait-Job}finally{Remove-ResourceGroupForTest $rgRemove-ResourceGroupForTest $partRg}}function Create-DatabaseForTest  ($rg, $server, $edition = "Premium"){$databaseName = Get-DatabaseNameNew-AzSqlDatabase -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $databaseName -Edition $edition}function Create-VcoreDatabaseForTest  ($rg, $server, $numCores = 1, $licenseType = "LicenseIncluded"){$databaseName = Get-DatabaseNameNew-AzSqlDatabase -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -DatabaseName $databaseName -VCore $numCores -ComputeGeneration Gen4 -Edition GeneralPurpose -LicenseType $licenseType}