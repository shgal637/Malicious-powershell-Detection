function Api-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$apis = Get-AzApiManagementApi -Context $contextAssert-AreEqual 1 $apis.CountAssert-NotNull $apis[0].ApiIdAssert-AreEqual "Echo API" $apis[0].NameAssert-Null $apis[0].DescriptionAssert-AreEqual "http://echoapi.cloudapp.net/api" $apis[0].ServiceUrlAssert-AreEqual echo $apis[0].PathAssert-AreEqual 1 $apis[0].Protocols.LengthAssert-AreEqual https $apis[0].Protocols[0]Assert-Null $apis[0].AuthorizationServerIdAssert-Null $apis[0].AuthorizationScopeAssert-Null $apis[0].SubscriptionKeyHeaderNameAssert-Null $apis[0].SubscriptionKeyQueryParamName$apiId = $apis[0].ApiId$api = Get-AzApiManagementApi -Context $context -ApiId $apiIdAssert-AreEqual $apiId $api.ApiIdAssert-AreEqual "Echo API" $api.NameAssert-Null $api.DescriptionAssert-AreEqual "http://echoapi.cloudapp.net/api" $api.ServiceUrlAssert-AreEqual echo $api.PathAssert-AreEqual 1 $api.Protocols.LengthAssert-AreEqual https $api.Protocols[0]Assert-Null $api.AuthorizationServerIdAssert-Null $api.AuthorizationScopeAssert-NotNull $api.SubscriptionKeyHeaderName       Assert-NotNull $api.SubscriptionKeyQueryParamName   $apiName = $apis[0].Name$apis = Get-AzApiManagementApi -Context $context -Name $apiNameAssert-AreEqual 1 $apis.CountAssert-NotNull $apis[0].ApiIdAssert-AreEqual $apiName $apis[0].NameAssert-Null $apis[0].DescriptionAssert-AreEqual "http://echoapi.cloudapp.net/api" $apis[0].ServiceUrlAssert-AreEqual echo $apis[0].PathAssert-AreEqual 1 $apis[0].Protocols.LengthAssert-AreEqual https $apis[0].Protocols[0]Assert-Null $apis[0].AuthorizationServerIdAssert-Null $apis[0].AuthorizationScopeAssert-Null $apis[0].SubscriptionKeyHeaderNameAssert-Null $apis[0].SubscriptionKeyQueryParamName$newApiId = getAssetNametry {$newApiName = getAssetName$newApiDescription = getAssetName$newApiPath = getAssetName$newApiServiceUrl = "http://newechoapi.cloudapp.net/newapi"$subscriptionKeyParametersHeader = getAssetName$subscriptionKeyQueryStringParamName = getAssetName$newApi = New-AzApiManagementApi -Context $context -ApiId $newApiId -Name $newApiName -Description $newApiDescription `-Protocols @("http", "https") -Path $newApiPath -ServiceUrl $newApiServiceUrl `-SubscriptionKeyHeaderName $subscriptionKeyParametersHeader -SubscriptionKeyQueryParamName $subscriptionKeyQueryStringParamNameAssert-AreEqual $newApiId $newApi.ApiIdAssert-AreEqual $newApiName $newApi.NameAssert-AreEqual $newApiDescription.DescriptionAssert-AreEqual $newApiServiceUrl $newApi.ServiceUrlAssert-AreEqual $newApiPath $newApi.PathAssert-AreEqual 2 $newApi.Protocols.LengthAssert-AreEqual http $newApi.Protocols[0]Assert-AreEqual https $newApi.Protocols[1]Assert-Null $newApi.AuthorizationServerIdAssert-Null $newApi.AuthorizationScopeAssert-AreEqual $subscriptionKeyParametersHeader $newApi.SubscriptionKeyHeaderNameAssert-AreEqual $subscriptionKeyQueryStringParamName $newApi.SubscriptionKeyQueryParamName$newApiName = getAssetName$newApiDescription = getAssetName$newApiPath = getAssetName$newApiServiceUrl = "http://newechoapi.cloudapp.net/newapinew"$subscriptionKeyParametersHeader = getAssetName$subscriptionKeyQueryStringParamName = getAssetName$newApi = Set-AzApiManagementApi -Context $context -ApiId $newApiId -Name $newApiName -Description $newApiDescription `-Protocols @("https") -Path $newApiPath -ServiceUrl $newApiServiceUrl `-SubscriptionKeyHeaderName $subscriptionKeyParametersHeader -SubscriptionKeyQueryParamName $subscriptionKeyQueryStringParamName `-PassThruAssert-AreEqual $newApiId $newApi.ApiIdAssert-AreEqual $newApiName $newApi.NameAssert-AreEqual $newApiDescription.DescriptionAssert-AreEqual $newApiServiceUrl $newApi.ServiceUrlAssert-AreEqual $newApiPath $newApi.PathAssert-AreEqual 1 $newApi.Protocols.LengthAssert-AreEqual https $newApi.Protocols[0]Assert-Null $newApi.AuthorizationServerIdAssert-Null $newApi.AuthorizationScopeAssert-AreEqual $subscriptionKeyParametersHeader $newApi.SubscriptionKeyHeaderNameAssert-AreEqual $subscriptionKeyQueryStringParamName $newApi.SubscriptionKeyQueryParamName$product = Get-AzApiManagementProduct -Context $context | Select-Object -First 1Add-AzApiManagementApiToProduct -Context $context -ApiId $newApiId -ProductId $product.ProductId$found = 0$apis = Get-AzApiManagementApi -Context $context -ProductId $product.ProductIdfor ($i = 0; $i -lt $apis.Count; $i++) {if ($apis[$i].ApiId -eq $newApiId) {$found = 1}}Assert-AreEqual 1 $foundRemove-AzApiManagementApiFromProduct -Context $context -ApiId $newApiId -ProductId $product.ProductId$found = 0$apis = Get-AzApiManagementApi -Context $context -ProductId $product.ProductIdfor ($i = 0; $i -lt $apis.Count; $i++) {if ($apis[$i].ApiId -eq $newApiId) {$found = 1}}Assert-AreEqual 0 $found}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $newApiId -PassThruAssert-True { $removed }}}function ApiClone-Test {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$apis = Get-AzApiManagementApi -Context $contextAssert-AreEqual 1 $apis.CountAssert-NotNull $apis[0].ApiIdAssert-AreEqual "Echo API" $apis[0].NameAssert-Null $apis[0].DescriptionAssert-AreEqual "http://echoapi.cloudapp.net/api" $apis[0].ServiceUrlAssert-AreEqual echo $apis[0].PathAssert-AreEqual 1 $apis[0].Protocols.LengthAssert-AreEqual https $apis[0].Protocols[0]Assert-Null $apis[0].AuthorizationServerIdAssert-Null $apis[0].AuthorizationScopeAssert-Null $apis[0].SubscriptionKeyHeaderNameAssert-Null $apis[0].SubscriptionKeyQueryParamName$apiId = $apis[0].ApiId$api = Get-AzApiManagementApi -Context $context -ApiId $apiIdAssert-AreEqual $apiId $api.ApiIdAssert-AreEqual "Echo API" $api.NameAssert-Null $api.DescriptionAssert-AreEqual "http://echoapi.cloudapp.net/api" $api.ServiceUrlAssert-AreEqual echo $api.PathAssert-AreEqual 1 $api.Protocols.LengthAssert-AreEqual https $api.Protocols[0]Assert-Null $api.AuthorizationServerIdAssert-Null $api.AuthorizationScopeAssert-NotNull $api.SubscriptionKeyHeaderName       Assert-NotNull $api.SubscriptionKeyQueryParamName   $echoapiOperations = Get-AzApiManagementOperation -Context $context -ApiId $apiIdAssert-NotNull $echoapiOperations$newApiId = getAssetName$newApiVersionSetId = getAssetName$newApiInVersionId = getAssetNametry {$newVersionSetName = getAssetName$queryName = getAssetName$description = getAssetName$newApiVersionSet = New-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId -Name $newVersionSetName -Scheme Query `-QueryName $queryName -Description $descriptionAssert-AreEqual $newApiVersionSetId $newApiVersionSet.ApiVersionSetIdAssert-AreEqual $newVersionSetName $newApiVersionSet.DisplayNameAssert-AreEqual $description $newApiVersionSet.DescriptionAssert-AreEqual Query $newApiVersionSet.VersioningSchemeAssert-AreEqual $queryName $newApiVersionSet.VersionQueryNameAssert-Null $newApiVersionSet.VersionHeaderName$newApiName = getAssetName$newApiDescription = getAssetName$newApiPath = getAssetName$newApiServiceUrl = "http://newechoapi.cloudapp.net/newapi"$newApi = New-AzApiManagementApi -Context $context -ApiId $newApiId -Name $newApiName -Description $newApiDescription `-Protocols @("http", "https") -Path $newApiPath -ServiceUrl $newApiServiceUrl `-SourceApiId $apiIdAssert-AreEqual $newApiId $newApi.ApiIdAssert-AreEqual $newApiName $newApi.NameAssert-AreEqual $newApiDescription.DescriptionAssert-AreEqual $newApiServiceUrl $newApi.ServiceUrlAssert-AreEqual $newApiPath $newApi.PathAssert-AreEqual 2 $newApi.Protocols.LengthAssert-AreEqual http $newApi.Protocols[0]Assert-AreEqual https $newApi.Protocols[1]Assert-Null $newApi.AuthorizationServerIdAssert-Null $newApi.AuthorizationScope$newApiOperations = Get-AzApiManagementOperation -Context $context -ApiId $newApiIdAssert-AreEqual $echoapiOperations.Count $newApiOperations.Countfor ($i = 0; $i -lt $newApiOperations.Count; $i++) {Assert-AreEqual $newApiId $newApiOperations[$i].ApiId$operation = Get-AzApiManagementOperation -Context $context -ApiId $newApiId -OperationId $newApiOperations[$i].OperationIdAssert-AreEqual $newApiId $operation.ApiIdAssert-AreEqual $newApiOperations[$i].OperationId $operation.OperationIdAssert-AreEqual $newApiOperations[$i].Name $operation.NameAssert-AreEqual $newApiOperations[$i].Description $operation.DescriptionAssert-AreEqual $newApiOperations[$i].Method $operation.MethodAssert-AreEqual $newApiOperations[$i].UrlTemplate $operation.UrlTemplate}$newApiCloneName = getAssetName$newApiCloneDescription = getAssetName$newApiClonePath = getAssetName$newApiCloneServiceUrl = "http://newechoapi.cloudapp.net/newapiv2"$newApiVersion = New-AzApiManagementApi -Context $context -ApiId $newApiInVersionId -Name $newApiCloneName -Description $newApiCloneDescription `-Protocols @("http", "https") -Path $newApiClonePath -ServiceUrl $newApiCloneServiceUrl `-SourceApiId $apiId -ApiVersion "2" -ApiVersionSetId $newApiVersionSet.ApiVersionSetId -SubscriptionRequiredAssert-AreEqual $newApiInVersionId $newApiVersion.ApiIdAssert-AreEqual $newApiCloneName $newApiVersion.NameAssert-AreEqual $newApiCloneDescription $newApiVersion.DescriptionAssert-AreEqual $newApiCloneServiceUrl $newApiVersion.ServiceUrlAssert-AreEqual $newApiClonePath $newApiVersion.PathAssert-AreEqual 2 $newApiVersion.Protocols.LengthAssert-AreEqual http $newApiVersion.Protocols[0]Assert-AreEqual https $newApiVersion.Protocols[1]Assert-AreEqual "2" $newApiVersion.APIVersionAssert-AreEqual $newApiVersionSet.Id $newApiVersion.ApiVersionSetIdAssert-AreEqual $TRUE $newApiVersion.SubscriptionRequired}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $newApiId -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApi -Context $context -ApiId $newApiInVersionId -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId -PassThruAssert-True { $removed }}}function Api-ImportExportWadlTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$wadlPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "WADLYahoo.xml"$path = "wadlapi"$wadlApiId = getAssetNametry {$api = Import-AzApiManagementApi -Context $context -ApiId $wadlApiId -SpecificationPath $wadlPath -SpecificationFormat Wadl -Path $pathAssert-AreEqual $wadlApiId $api.ApiIdAssert-AreEqual $path $api.Path}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $wadlApiId -PassThruAssert-True { $removed }}}function Api-ImportExportSwaggerTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$swaggerPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "SwaggerPetStoreV2.json"$swaggerUrl = "http://petstore.swagger.io/v2/swagger.json"$path1 = "swaggerapifromFile"$path2 = "swaggerapifromUrl"$swaggerApiId1 = getAssetName$swaggerApiId2 = getAssetNametry {$api = Import-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -SpecificationPath $swaggerPath -SpecificationFormat Swagger -Path $path1Assert-AreEqual $swaggerApiId1 $api.ApiIdAssert-AreEqual $path1 $api.Path$api = Import-AzApiManagementApi -Context $context -ApiId $swaggerApiId2 -SpecificationUrl $swaggerUrl -SpecificationFormat Swagger -Path $path2Assert-AreEqual $swaggerApiId2 $api.ApiIdAssert-AreEqual $path2 $api.Path$newName = "apimPetstore"$newDescription = "Swagger api via Apim"$api = Set-AzApiManagementApi -InputObject $api -Name $newName -Description $newDescription -ServiceUrl $api.ServiceUrl -Protocols $api.Protocols -PassThruAssert-AreEqual $swaggerApiId2 $api.ApiIdAssert-AreEqual $path2 $api.PathAssert-AreEqual $newName $api.NameAssert-AreEqual $newDescription $api.DescriptionAssert-AreEqual 'Http' $api.ApiType}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApi -Context $context -ApiId $swaggerApiId2 -PassThruAssert-True { $removed }}}function Api-ImportExportWsdlTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$wsdlUrl = "http://fazioapisoap.azurewebsites.net/fazioService.svc?singleWSDL"   $wsdlPath1 = Join-Path (Join-Path "$TestOutputRoot" "Resources") "Weather.wsdl"$path1 = "soapapifromFile"$path2 = "soapapifromUrl"$wsdlApiId1 = getAssetName$wsdlApiId2 = getAssetName$wsdlServiceName1 = "Weather" $wsdlEndpointName1 = "WeatherSoap" $wsdlServiceName2 = "OrdersAPI" $wsdlEndpointName2 = "basic" try {$api = Import-AzApiManagementApi -Context $context -ApiId $wsdlApiId1 -SpecificationPath $wsdlPath1 -SpecificationFormat Wsdl -Path $path1 `-WsdlServiceName $wsdlServiceName1 -WsdlEndpointName $wsdlEndpointName1 -ApiType SoapAssert-AreEqual $wsdlApiId1 $api.ApiIdAssert-AreEqual $path1 $api.PathAssert-AreEqual 'Soap' $api.ApiType$api = Import-AzApiManagementApi -Context $context -ApiId $wsdlApiId2 -SpecificationUrl $wsdlUrl -SpecificationFormat Wsdl -Path $path2 `-WsdlServiceName $wsdlServiceName2 -WsdlEndpointName $wsdlEndpointName2 -ApiType SoapAssert-AreEqual $wsdlApiId2 $api.ApiIdAssert-AreEqual $path2 $api.Path$newName = "apimSoap"$newDescription = "Soap api via Apim"$api = Set-AzApiManagementApi -InputObject $api -Name $newName -Description $newDescription -ServiceUrl $api.ServiceUrl -Protocols $api.Protocols -PassThruAssert-AreEqual $wsdlApiId2 $api.ApiIdAssert-AreEqual $path2 $api.PathAssert-AreEqual $newName $api.NameAssert-AreEqual $newDescription $api.DescriptionAssert-AreEqual 'Soap' $api.ApiType}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $wsdlApiId1 -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApi -Context $context -ApiId $wsdlApiId2 -PassThruAssert-True { $removed }}}function Api-ImportExportOpenApiTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$openApiUrl = "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/OpenAPI.next/examples/v3.0/petstore.yaml"   $yamlPath1 = Join-Path (Join-Path "$TestOutputRoot" "Resources") "uspto.yml"$path1 = "openapifromFile"$path2 = "openapifromUrl"$openApiId1 = getAssetName$openApiId2 = getAssetNametry {$api = Import-AzApiManagementApi -Context $context -ApiId $openApiId1 -SpecificationPath $yamlPath1 -SpecificationFormat OpenApi -Path $path1Assert-AreEqual $openApiId1 $api.ApiIdAssert-AreEqual $path1 $api.Path$api = Import-AzApiManagementApi -Context $context -ApiId $openApiId2 -SpecificationUrl $openApiUrl -SpecificationFormat OpenApi -Path $path2Assert-AreEqual $openApiId2 $api.ApiIdAssert-AreEqual $path2 $api.Path$newName = "apimPetstore"$newDescription = "Open api via Apim"$api = Set-AzApiManagementApi -InputObject $api -Name $newName -Description $newDescription -ServiceUrl $api.ServiceUrl -Protocols $api.Protocols -PassThruAssert-AreEqual $openApiId2 $api.ApiIdAssert-AreEqual $path2 $api.PathAssert-AreEqual $newName $api.NameAssert-AreEqual $newDescription $api.DescriptionAssert-AreEqual 'Http' $api.ApiType}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $openApiId1 -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApi -Context $context -ApiId $openApiId2 -PassThruAssert-True { $removed }}}function ApiSchema-SwaggerCRUDTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$swaggerDefinitionsFilePath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "petstoreschema.json"$newApiId = getAssetName$newSchemaId = getAssetNametry {$newApiName = getAssetName$newApiDescription = getAssetName$newApiPath = getAssetName$newApiServiceUrl = "http://newechoapi.cloudapp.net/newapi"$subscriptionKeyParametersHeader = getAssetName$subscriptionKeyQueryStringParamName = getAssetName$newApi = New-AzApiManagementApi -Context $context -ApiId $newApiId -Name $newApiName -Description $newApiDescription `-Protocols @("http", "https") -Path $newApiPath -ServiceUrl $newApiServiceUrl `-SubscriptionKeyHeaderName $subscriptionKeyParametersHeader -SubscriptionKeyQueryParamName $subscriptionKeyQueryStringParamNameAssert-AreEqual $newApiId $newApi.ApiIdAssert-AreEqual $newApiName $newApi.NameAssert-AreEqual $newApiDescription.DescriptionAssert-AreEqual $newApiServiceUrl $newApi.ServiceUrlAssert-AreEqual $newApiPath $newApi.PathAssert-AreEqual 2 $newApi.Protocols.Length$apiSchemas = Get-AzApiManagementApiSchema -Context $context -ApiId $newApiIdAssert-AreEqual 0 $apiSchemas.Count$apiSchema = New-AzApiManagementApiSchema -Context $context -ApiId $newApiId -SchemaId $newSchemaId -SchemaDocumentContentType SwaggerDefinition `-SchemaDocumentFilePath $swaggerDefinitionsFilePathAssert-NotNull $apiSchemaAssert-AreEqual $newSchemaId $apiSchema.SchemaIdAssert-AreEqual $newApiId $apiSchema.ApiIdAssert-AreEqual SwaggerDefinition $apiSchema.SchemaDocumentContentTypeAssert-NotNull $apiSchema.SchemaDocument$getApiSchema = Get-AzApiManagementApiSchema -ResourceId $apiSchema.IdAssert-AreEqual $apiSchema.SchemaId $getApiSchema.SchemaIdAssert-AreEqual $apiSchema.ApiId $getApiSchema.ApiIdAssert-AreEqual SwaggerDefinition $getApiSchema.SchemaDocumentContentType        $apiSchemas = Get-AzApiManagementApiSchema -Context $context -ApiId $newApiIdAssert-AreEqual 1 $apiSchemas.CountAssert-AreEqual $getApiSchema.SchemaId $apiSchemas[0].SchemaIdAssert-AreEqual SwaggerDefinition $apiSchema.SchemaDocumentContentTypeAssert-AreEqual $getApiSchema.ApiId $apiSchemas[0].ApiId$apiSchema = Set-AzApiManagementApiSchema -InputObject $getApiSchema -SchemaDocumentContentType "application/json" -PassThruAssert-NotNull $apiSchemaAssert-AreEqual $getApiSchema.SchemaId $apiSchema.SchemaIdAssert-AreEqual $newApiId $apiSchema.ApiIdAssert-AreEqual "application/json" $apiSchema.SchemaDocumentContentTypeRemove-AzApiManagementApiSchema -ResourceId $apiSchema.Id}finally {$removed = Remove-AzApiManagementApiSchema -Context $context -ApiId $newApiId -SchemaId $newSchemaId -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApi -Context $context -ApiId $newApiId -PassThruAssert-True { $removed }}}function ApiSchema-WsdlCRUDTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$wsdlPath1 = Join-Path (Join-Path "$TestOutputRoot" "Resources") "Weather.wsdl"$wsdlFileSchema = Join-Path (Join-Path "$TestOutputRoot" "Resources") "weather.xsl"$path1 = "soapapifromFile"$wsdlServiceName1 = "Weather" $wsdlEndpointName1 = "WeatherSoap" $newApiId = getAssetName$newSchemaId = getAssetNametry {$api = Import-AzApiManagementApi -Context $context -ApiId $newApiId -SpecificationPath $wsdlPath1 -SpecificationFormat Wsdl -Path $path1 `-WsdlServiceName $wsdlServiceName1 -WsdlEndpointName $wsdlEndpointName1 -ApiType SoapAssert-AreEqual $newApiId $api.ApiIdAssert-AreEqual $path1 $api.PathAssert-AreEqual 'Soap' $api.ApiType$apiSchemas = Get-AzApiManagementApiSchema -Context $context -ApiId $newApiIdAssert-AreEqual 1 $apiSchemas.CountAssert-AreEqual XsdSchema $apiSchemas[0].SchemaDocumentContentTypeAssert-AreEqual $newApiId $apiSchemas[0].ApiId$newSchemaId = $apiSchemas[0].SchemaId$apiSchema = New-AzApiManagementApiSchema -Context $context -ApiId $newApiId -SchemaId $newSchemaId -SchemaDocumentContentType XsdSchema `-SchemaDocumentFilePath $wsdlFileSchemaAssert-NotNull $apiSchemaAssert-AreEqual $newSchemaId $apiSchema.SchemaIdAssert-AreEqual $newApiId $apiSchema.ApiIdAssert-AreEqual XsdSchema $apiSchema.SchemaDocumentContentTypeAssert-NotNull $apiSchema.SchemaDocument$getApiSchema = Get-AzApiManagementApiSchema -ResourceId $apiSchema.IdAssert-AreEqual $apiSchema.SchemaId $getApiSchema.SchemaIdAssert-AreEqual $apiSchema.ApiId $getApiSchema.ApiIdAssert-AreEqual XsdSchema $getApiSchema.SchemaDocumentContentTypeAssert-AreEqual $apiSchema.SchemaDocument $getApiSchema.SchemaDocument$apiSchemas = Get-AzApiManagementApiSchema -Context $context -ApiId $newApiIdAssert-AreEqual 1 $apiSchemas.CountAssert-AreEqual $getApiSchema.SchemaId $apiSchemas[0].SchemaIdAssert-AreEqual $getApiSchema.ApiId $apiSchemas[0].ApiIdAssert-AreEqual $getApiSchema.SchemaDocumentContentType $apiSchemas[0].SchemaDocumentContentType$apiSchema = Set-AzApiManagementApiSchema -InputObject $getApiSchema -SchemaDocumentContentType "application/json" -PassThruAssert-NotNull $apiSchemaAssert-AreEqual $getApiSchema.SchemaId $apiSchema.SchemaIdAssert-AreEqual $newApiId $apiSchema.ApiIdAssert-AreEqual "application/json" $apiSchema.SchemaDocumentContentTypeAssert-AreEqual $getApiSchema.SchemaDocument $apiSchema.SchemaDocument}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $newApiId -PassThruAssert-True { $removed }}}function Operations-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$api = Get-AzApiManagementApi -Context $context -Name 'Echo API' | Select-Object -First 1$operations = Get-AzApiManagementOperation -Context $context -ApiId $api.ApiIdAssert-AreEqual 6 $operations.Countfor ($i = 0; $i -lt $operations.Count; $i++) {Assert-AreEqual $api.ApiId $operations[$i].ApiId$operation = Get-AzApiManagementOperation -Context $context -ApiId $api.ApiId -OperationId $operations[$i].OperationIdAssert-AreEqual $api.ApiId $operation.ApiIdAssert-AreEqual $operations[$i].OperationId $operation.OperationIdAssert-AreEqual $operations[$i].Name $operation.NameAssert-AreEqual $operations[$i].Description $operation.DescriptionAssert-AreEqual $operations[$i].Method $operation.MethodAssert-AreEqual $operations[$i].UrlTemplate $operation.UrlTemplate}$newOperationId = getAssetNametry {$newOperationName = getAssetName$newOperationMethod = "PATCH"$newperationUrlTemplate = "/resource/{rid}?q={query}"$newOperationDescription = getAssetName$newOperationRequestDescription = getAssetName$newOperationRequestHeaderParamName = getAssetName$newOperationRequestHeaderParamDescr = getAssetName$newOperationRequestHeaderParamIsRequired = $TRUE$newOperationRequestHeaderParamDefaultValue = getAssetName$newOperationRequestHeaderParamType = "string"$newOperationRequestParmName = getAssetName$newOperationRequestParamDescr = getAssetName$newOperationRequestParamIsRequired = $TRUE$newOperationRequestParamDefaultValue = getAssetName$newOperationRequestParamType = "string"$newOperationRequestRepresentationContentType = "application/json"$newOperationRequestRepresentationSample = getAssetName$newOperationResponseDescription = getAssetName$newOperationResponseStatusCode = 1980785443;$newOperationResponseRepresentationContentType = getAssetName$newOperationResponseRepresentationSample = getAssetName$rid = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$rid.Name = "rid"$rid.Description = "Resource identifier"$rid.Type = "string"$query = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$query.Name = "query"$query.Description = "Query string"$query.Type = "string"$request = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementRequest$request.Description = "Create/update resource request"$dummyQp = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$dummyQp.Name = $newOperationRequestParmName$dummyQp.Description = $newOperationRequestParamDescr$dummyQp.Type = $newOperationRequestParamType$dummyQp.Required = $newOperationRequestParamIsRequired$dummyQp.DefaultValue = $newOperationRequestParamDefaultValue$dummyQp.Values = @($newOperationRequestParamDefaultValue)$request.QueryParameters = @($dummyQp)$header = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$header.Name = $newOperationRequestHeaderParamName$header.Description = $newOperationRequestHeaderParamDescr$header.DefaultValue = $newOperationRequestHeaderParamDefaultValue$header.Values = @($newOperationRequestHeaderParamDefaultValue)$header.Type = $newOperationRequestHeaderParamType$header.Required = $newOperationRequestHeaderParamIsRequired$request.Headers = @($header)$requestRepresentation = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementRepresentation$requestRepresentation.ContentType = $newOperationRequestRepresentationContentType$requestRepresentation.Sample = $newOperationRequestRepresentationSample$request.Representations = @($requestRepresentation)$response = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementResponse$response.StatusCode = $newOperationResponseStatusCode$response.Description = $newOperationResponseDescription$responseRepresentation = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementRepresentation$responseRepresentation.ContentType = $newOperationResponseRepresentationContentType$responseRepresentation.Sample = $newOperationResponseRepresentationSample$response.Representations = @($responseRepresentation)$newOperation = New-AzApiManagementOperation –Context $context –ApiId $api.ApiId –OperationId $newOperationId –Name $newOperationName `–Method $newOperationMethod –UrlTemplate $newperationUrlTemplate –Description $newOperationDescription –TemplateParameters @($rid, $query) –Request $request –Responses @($response)Assert-AreEqual $api.ApiId $newOperation.ApiIdAssert-AreEqual $newOperationId $newOperation.OperationIdAssert-AreEqual $newOperationName $newOperation.NameAssert-AreEqual $newOperationMethod $newOperation.MethodAssert-AreEqual $newperationUrlTemplate $newOperation.UrlTemplateAssert-AreEqual $newOperationDescription $newOperation.DescriptionAssert-NotNull $newOperation.TemplateParametersAssert-AreEqual 2 $newOperation.TemplateParameters.CountAssert-AreEqual $rid.Name $newOperation.TemplateParameters[0].NameAssert-AreEqual $rid.Description $newOperation.TemplateParameters[0].DescriptionAssert-AreEqual $rid.Type $newOperation.TemplateParameters[0].TypeAssert-AreEqual $query.Name $newOperation.TemplateParameters[1].NameAssert-AreEqual $query.Description $newOperation.TemplateParameters[1].DescriptionAssert-AreEqual $query.Type $newOperation.TemplateParameters[1].TypeAssert-NotNull $newOperation.RequestAssert-AreEqual $request.Description $newOperation.Request.DescriptionAssert-NotNull $newOperation.Request.QueryParametersAssert-AreEqual 1 $newOperation.Request.QueryParameters.CountAssert-AreEqual $dummyQp.Name $newOperation.Request.QueryParameters[0].NameAssert-AreEqual $dummyQp.Description $newOperation.Request.QueryParameters[0].DescriptionAssert-AreEqual $dummyQp.Type $newOperation.Request.QueryParameters[0].TypeAssert-AreEqual $dummyQp.Required $newOperation.Request.QueryParameters[0].RequiredAssert-AreEqual $dummyQp.DefaultValue $newOperation.Request.QueryParameters[0].DefaultValueAssert-AreEqual 1 $newOperation.Request.Headers.CountAssert-AreEqual $header.Name $newOperation.Request.Headers[0].NameAssert-AreEqual $header.Description $newOperation.Request.Headers[0].DescriptionAssert-AreEqual $header.Type $newOperation.Request.Headers[0].TypeAssert-AreEqual $header.Required $newOperation.Request.Headers[0].RequiredAssert-AreEqual $header.DefaultValue $newOperation.Request.Headers[0].DefaultValueAssert-NotNull $newOperation.ResponsesAssert-AreEqual 1 $newOperation.Responses.CountAssert-AreEqual $newOperationResponseStatusCode $newOperation.Responses[0].StatusCodeAssert-AreEqual $newOperationResponseDescription $newOperation.Responses[0].DescriptionAssert-NotNull $newOperation.Responses[0].RepresentationsAssert-AreEqual 1 $newOperation.Responses[0].Representations.CountAssert-AreEqual $newOperationResponseRepresentationContentType $newOperation.Responses[0].Representations[0].ContentTypeAssert-AreEqual $newOperationResponseRepresentationSample $newOperation.Responses[0].Representations[0].Sample$newOperationName = getAssetName$newOperationMethod = "PUT"$newperationUrlTemplate = "/resource/{xrid}?q={xquery}"$newOperationDescription = getAssetName$newOperationRequestDescription = getAssetName$newOperationRequestHeaderParamName = getAssetName$newOperationRequestHeaderParamDescr = getAssetName$newOperationRequestHeaderParamIsRequired = $TRUE$newOperationRequestHeaderParamDefaultValue = getAssetName$newOperationRequestHeaderParamType = "string"$newOperationRequestParmName = getAssetName$newOperationRequestParamDescr = getAssetName$newOperationRequestParamIsRequired = $TRUE$newOperationRequestParamDefaultValue = getAssetName$newOperationRequestParamType = "string"$newOperationRequestRepresentationContentType = "application/json"$newOperationRequestRepresentationSample = getAssetName$newOperationResponseDescription = getAssetName$newOperationResponseStatusCode = 1980785443;$newOperationResponseRepresentationContentType = getAssetName$newOperationResponseRepresentationSample = getAssetName$rid = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$rid.Name = "xrid"$rid.Description = "Resource identifier modified"$rid.Type = "string"$query = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$query.Name = "xquery"$query.Description = "Query string modified"$query.Type = "string"$request = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementRequest$request.Description = "Create/update resource request modified"$dummyQp = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$dummyQp.Name = $newOperationRequestParmName$dummyQp.Description = $newOperationRequestParamDescr$dummyQp.Type = $newOperationRequestParamType$dummyQp.Required = $newOperationRequestParamIsRequired$dummyQp.DefaultValue = $newOperationRequestParamDefaultValue$dummyQp.Values = @($newOperationRequestParamDefaultValue)$request.QueryParameters = @($dummyQp)$header = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementParameter$header.Name = $newOperationRequestHeaderParamName$header.Description = $newOperationRequestHeaderParamDescr$header.DefaultValue = $newOperationRequestHeaderParamDefaultValue$header.Values = @($newOperationRequestHeaderParamDefaultValue)$header.Type = $newOperationRequestHeaderParamType$header.Required = $newOperationRequestHeaderParamIsRequired$request.Headers = @($header)$requestRepresentation = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementRepresentation$requestRepresentation.ContentType = $newOperationRequestRepresentationContentType$requestRepresentation.Sample = $newOperationRequestRepresentationSample$request.Representations = @($requestRepresentation)$response = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementResponse$response.StatusCode = $newOperationResponseStatusCode$response.Description = $newOperationResponseDescription$responseRepresentation = New-Object –TypeName Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Models.PsApiManagementRepresentation$responseRepresentation.ContentType = $newOperationResponseRepresentationContentType$responseRepresentation.Sample = $newOperationResponseRepresentationSample$response.Representations = @($responseRepresentation)$newOperation = Set-AzApiManagementOperation –Context $context –ApiId $api.ApiId –OperationId $newOperationId –Name $newOperationName `–Method $newOperationMethod –UrlTemplate $newperationUrlTemplate –Description $newOperationDescription –TemplateParameters @($rid, $query) –Request $request –Responses @($response) -PassThruAssert-AreEqual $api.ApiId $newOperation.ApiIdAssert-AreEqual $newOperationId $newOperation.OperationIdAssert-AreEqual $newOperationName $newOperation.NameAssert-AreEqual $newOperationMethod $newOperation.MethodAssert-AreEqual $newperationUrlTemplate $newOperation.UrlTemplateAssert-AreEqual $newOperationDescription $newOperation.DescriptionAssert-NotNull $newOperation.TemplateParametersAssert-AreEqual 2 $newOperation.TemplateParameters.CountAssert-AreEqual $rid.Name $newOperation.TemplateParameters[0].NameAssert-AreEqual $rid.Description $newOperation.TemplateParameters[0].DescriptionAssert-AreEqual $rid.Type $newOperation.TemplateParameters[0].TypeAssert-AreEqual $query.Name $newOperation.TemplateParameters[1].NameAssert-AreEqual $query.Description $newOperation.TemplateParameters[1].DescriptionAssert-AreEqual $query.Type $newOperation.TemplateParameters[1].TypeAssert-NotNull $newOperation.RequestAssert-AreEqual $request.Description $newOperation.Request.DescriptionAssert-NotNull $newOperation.Request.QueryParametersAssert-AreEqual 1 $newOperation.Request.QueryParameters.CountAssert-AreEqual $dummyQp.Name $newOperation.Request.QueryParameters[0].NameAssert-AreEqual $dummyQp.Description $newOperation.Request.QueryParameters[0].DescriptionAssert-AreEqual $dummyQp.Type $newOperation.Request.QueryParameters[0].TypeAssert-AreEqual $dummyQp.Required $newOperation.Request.QueryParameters[0].RequiredAssert-AreEqual $dummyQp.DefaultValue $newOperation.Request.QueryParameters[0].DefaultValueAssert-AreEqual 1 $newOperation.Request.Headers.CountAssert-AreEqual $header.Name $newOperation.Request.Headers[0].NameAssert-AreEqual $header.Description $newOperation.Request.Headers[0].DescriptionAssert-AreEqual $header.Type $newOperation.Request.Headers[0].TypeAssert-AreEqual $header.Required $newOperation.Request.Headers[0].RequiredAssert-AreEqual $header.DefaultValue $newOperation.Request.Headers[0].DefaultValueAssert-NotNull $newOperation.ResponsesAssert-AreEqual 1 $newOperation.Responses.CountAssert-AreEqual $newOperationResponseStatusCode $newOperation.Responses[0].StatusCodeAssert-AreEqual $newOperationResponseDescription $newOperation.Responses[0].DescriptionAssert-NotNull $newOperation.Responses[0].RepresentationsAssert-AreEqual 1 $newOperation.Responses[0].Representations.CountAssert-AreEqual $newOperationResponseRepresentationContentType $newOperation.Responses[0].Representations[0].ContentTypeAssert-AreEqual $newOperationResponseRepresentationSample $newOperation.Responses[0].Representations[0].Sample}finally {$removed = Remove-AzApiManagementOperation -Context $context -ApiId $api.ApiId -OperationId $newOperationId  -PassThruAssert-True { $removed }$operation = $nulltry {$operation = Get-AzApiManagementOperation -Context $context -ApiId $api.ApiId -OperationId $newOperationId}catch {}Assert-Null $operation}}function Product-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$products = Get-AzApiManagementProduct -Context $contextAssert-AreEqual 2 $products.Count$found = 0for ($i = 0; $i -lt $products.Count; $i++) {Assert-NotNull $products[$i].ProductIdAssert-NotNull $products[$i].DescriptionAssert-AreEqual Published $products[$i].Stateif ($products[$i].Title -eq 'Starter') {$found += 1;}if ($products[$i].Title -eq 'Unlimited') {$found += 1;}}Assert-AreEqual 2 $found$productId = getAssetNametry {$productName = getAssetName$productApprovalRequired = $TRUE$productDescription = getAssetName$productState = "Published"$productSubscriptionRequired = $TRUE$productSubscriptionsLimit = 10$productTerms = getAssetName$newProduct = New-AzApiManagementProduct -Context $context –ProductId $productId –Title $productName –Description $productDescription `–LegalTerms $productTerms –SubscriptionRequired $productSubscriptionRequired `–ApprovalRequired $productApprovalRequired –State $productState -SubscriptionsLimit $productSubscriptionsLimitAssert-AreEqual $productId $newProduct.ProductIdAssert-AreEqual $productName $newProduct.TitleAssert-AreEqual $productApprovalRequired $newProduct.ApprovalRequiredAssert-AreEqual $productDescription $newProduct.DescriptionAssert-AreEqual $productState $newProduct.StateAssert-AreEqual $productSubscriptionRequired $newProduct.SubscriptionRequiredAssert-AreEqual $productSubscriptionsLimit $newProduct.SubscriptionsLimitAssert-AreEqual $productTerms $newProduct.LegalTerms$apis = Get-AzApiManagementApi -Context $context -ProductId $productIdAssert-AreEqual 0 $apis.CountGet-AzApiManagementApi -Context $context | Add-AzApiManagementApiToProduct -Context $context -ProductId $productId$apis = Get-AzApiManagementApi -Context $context -ProductId $productIdAssert-AreEqual 1 $apis.Count$productName = getAssetName$productApprovalRequired = $FALSE$productDescription = getAssetName$productState = "Published"$productSubscriptionRequired = $TRUE$productSubscriptionsLimit = 20$productTerms = getAssetName$newProduct = Set-AzApiManagementProduct -Context $context –ProductId $productId –Title $productName –Description $productDescription `–LegalTerms $productTerms -ApprovalRequired $productApprovalRequired `–SubscriptionRequired $TRUE –State $productState -SubscriptionsLimit $productSubscriptionsLimit -PassThruAssert-AreEqual $productId $newProduct.ProductIdAssert-AreEqual $productName $newProduct.TitleAssert-AreEqual $productApprovalRequired $newProduct.ApprovalRequiredAssert-AreEqual $productDescription $newProduct.DescriptionAssert-AreEqual $productState $newProduct.StateAssert-AreEqual $productSubscriptionRequired $newProduct.SubscriptionRequiredAssert-AreEqual $productSubscriptionsLimit $newProduct.SubscriptionsLimitAssert-AreEqual $productTerms $newProduct.LegalTerms$newProduct = Get-AzApiManagementProduct -Context $context -Title $productNameAssert-NotNull $newProductAssert-AreEqual $productName $newProduct.Title$products = Get-AzApiManagementProduct -Context $context -ApiId $apis[0].ApiIdAssert-NotNull $productsAssert-AreEqual 3 $products.Count$found = 0for ($i = 0; $i -lt $products.Count; $i++) {Assert-NotNull $products[$i].ProductIdAssert-NotNull $products[$i].DescriptionAssert-AreEqual Published $products[$i].Stateif ($products[$i].Title -eq 'Starter') {$found += 1;}if ($products[$i].Title -eq 'Unlimited') {$found += 1;}if ($products[$i].Title -eq $productName) {$found += 1;}}Assert-AreEqual 3 $foundGet-AzApiManagementApi -Context $context | Remove-AzApiManagementApiFromProduct -Context $context -ProductId $productId$apis = Get-AzApiManagementApi -Context $context -ProductId $productIdAssert-AreEqual 0 $apis.Count}finally {$removed = Remove-AzApiManagementProduct -Context $context -ProductId $productId -DeleteSubscriptions -PassThruAssert-True { $removed }}}function SubscriptionOldModel-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$subs = Get-AzApiManagementSubscription -Context $contextAssert-AreEqual 3 $subs.Countfor ($i = 0; $i -lt $subs.Count; $i++) {Assert-NotNull $subs[$i]Assert-NotNull $subs[$i].SubscriptionIdAssert-NotNull $subs[$i].ScopeAssert-NotNull $subs[$i].StateAssert-NotNull $subs[$i].CreatedDateAssert-NotNull $subs[$i].PrimaryKeyAssert-NotNull $subs[$i].SecondaryKey$sub = Get-AzApiManagementSubscription -Context $context -SubscriptionId $subs[$i].SubscriptionIdAssert-AreEqual $subs[$i].SubscriptionId $sub.SubscriptionIdAssert-NotNull $subs[$i].ScopeAssert-AreEqual $subs[$i].State $sub.StateAssert-AreEqual $subs[$i].CreatedDate $sub.CreatedDateAssert-AreEqual $subs[$i].PrimaryKey $sub.PrimaryKeyAssert-AreEqual $subs[$i].SecondaryKey $sub.SecondaryKey}Set-AzApiManagementProduct -Context $context -ProductId $subs[0].ProductId -SubscriptionsLimit 100$newSubscriptionId = getAssetNametry {$newSubscriptionName = getAssetName$newSubscriptionPk = getAssetName$newSubscriptionSk = getAssetName$newSubscriptionState = "Active"$sub = New-AzApiManagementSubscription -Context $context -SubscriptionId $newSubscriptionId -UserId $subs[0].UserId `-ProductId $subs[0].ProductId -Name $newSubscriptionName -PrimaryKey $newSubscriptionPk -SecondaryKey $newSubscriptionSk `-State $newSubscriptionStateAssert-AreEqual $newSubscriptionId $sub.SubscriptionIdAssert-AreEqual $newSubscriptionName $sub.NameAssert-AreEqual $newSubscriptionPk $sub.PrimaryKeyAssert-AreEqual $newSubscriptionSk $sub.SecondaryKeyAssert-AreEqual $newSubscriptionState $sub.State$patchedName = getAssetName$patchedPk = getAssetName$patchedSk = getAssetName$patchedExpirationDate = [DateTime]::Parse('2025-7-20')$sub = Set-AzApiManagementSubscription -Context $context -SubscriptionId $newSubscriptionId -Name $patchedName `-PrimaryKey $patchedPk -SecondaryKey $patchedSk -ExpiresOn $patchedExpirationDate -PassThruAssert-AreEqual $newSubscriptionId $sub.SubscriptionIdAssert-AreEqual $patchedName $sub.NameAssert-AreEqual $patchedPk $sub.PrimaryKeyAssert-AreEqual $patchedSk $sub.SecondaryKeyAssert-AreEqual $newSubscriptionState $sub.StateAssert-AreEqual $patchedExpirationDate $sub.ExpirationDate$productSubs = Get-AzApiManagementSubscription -Context $context -ProductId $subs[0].ProductIdAssert-AreEqual 2 $productSubs.Countfor ($i = 0; $i -lt $productSubs.Count; $i++) {Assert-NotNull $productSubs[$i]Assert-NotNull $productSubs[$i].SubscriptionIdAssert-NotNull $productSubs[$i].ScopeAssert-NotNull $productSubs[$i].StateAssert-NotNull $productSubs[$i].CreatedDateAssert-NotNull $productSubs[$i].PrimaryKeyAssert-NotNull $productSubs[$i].SecondaryKeyAssert-AreEqual $subs[0].ProductId $productSubs[$i].ProductId}$userSubs = Get-AzApiManagementSubscription -Context $context -UserId $subs[0].UserIdAssert-AreEqual 3 $userSubs.Countfor ($i = 0; $i -lt $userSubs.Count; $i++) {Assert-NotNull $userSubs[$i]Assert-NotNull $userSubs[$i].SubscriptionIdAssert-NotNull $userSubs[$i].ScopeAssert-NotNull $userSubs[$i].StateAssert-NotNull $userSubs[$i].CreatedDateAssert-NotNull $userSubs[$i].PrimaryKeyAssert-NotNull $userSubs[$i].SecondaryKeyAssert-AreEqual $subs[0].UserId $userSubs[$i].UserId}$productUserSubs = Get-AzApiManagementSubscription -Context $context -UserId $subs[0].UserId -ProductId $subs[0].ProductIdAssert-AreEqual 2 $productUserSubs.Countfor ($i = 0; $i -lt $productUserSubs.Count; $i++) {Assert-NotNull $productUserSubs[$i]Assert-NotNull $productUserSubs[$i].SubscriptionIdAssert-NotNull $productUserSubs[$i].ScopeAssert-NotNull $productUserSubs[$i].StateAssert-NotNull $productUserSubs[$i].CreatedDateAssert-NotNull $productUserSubs[$i].PrimaryKeyAssert-NotNull $productUserSubs[$i].SecondaryKeyAssert-AreEqual $subs[0].UserId $productUserSubs[$i].UserIdAssert-AreEqual $subs[0].ProductId $productUserSubs[$i].ProductId}}finally {$removed = Remove-AzApiManagementSubscription -Context $context -SubscriptionId $newSubscriptionId  -PassThruAssert-True { $removed }$sub = $nulltry {$sub = Get-AzApiManagementSubscripiton -Context $context -SubscriptionId $newSubscriptionId}catch {}Assert-Null $sub}}function SubscriptionNewModel-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$subs = Get-AzApiManagementSubscription -Context $contextAssert-AreEqual 3 $subs.Countfor ($i = 0; $i -lt $subs.Count; $i++) {Assert-NotNull $subs[$i]Assert-NotNull $subs[$i].SubscriptionIdAssert-NotNull $subs[$i].ScopeAssert-NotNull $subs[$i].StateAssert-NotNull $subs[$i].CreatedDateAssert-NotNull $subs[$i].PrimaryKeyAssert-NotNull $subs[$i].SecondaryKey$sub = Get-AzApiManagementSubscription -Context $context -SubscriptionId $subs[$i].SubscriptionIdAssert-AreEqual $subs[$i].SubscriptionId $sub.SubscriptionIdAssert-NotNull $subs[$i].ScopeAssert-AreEqual $subs[$i].State $sub.StateAssert-AreEqual $subs[$i].CreatedDate $sub.CreatedDateAssert-AreEqual $subs[$i].PrimaryKey $sub.PrimaryKeyAssert-AreEqual $subs[$i].SecondaryKey $sub.SecondaryKey}$newSubscriptionId = getAssetNametry {$newSubscriptionName = getAssetName$newSubscriptionPk = getAssetName$newSubscriptionSk = getAssetName$newSubscriptionState = "Active"$allApisScope = "/apis"$sub = New-AzApiManagementSubscription -Context $context -SubscriptionId $newSubscriptionId `-Scope $allApisScope -Name $newSubscriptionName -PrimaryKey $newSubscriptionPk -SecondaryKey $newSubscriptionSk `-State $newSubscriptionStateAssert-AreEqual $newSubscriptionId $sub.SubscriptionIdAssert-AreEqual $newSubscriptionName $sub.NameAssert-AreEqual $newSubscriptionPk $sub.PrimaryKeyAssert-AreEqual $newSubscriptionSk $sub.SecondaryKeyAssert-AreEqual $newSubscriptionState $sub.StateAssert-Null $sub.UserIdAssert-Null $sub.OwnerId$patchedName = getAssetName$patchedPk = getAssetName$patchedSk = getAssetName$patchedExpirationDate = [DateTime]::Parse('2025-7-20')$sub = Set-AzApiManagementSubscription -Context $context -SubscriptionId $newSubscriptionId -Name $patchedName `-UserId $subs[0].UserId -PrimaryKey $patchedPk -SecondaryKey $patchedSk -ExpiresOn $patchedExpirationDate -PassThruAssert-AreEqual $newSubscriptionId $sub.SubscriptionIdAssert-AreEqual $patchedName $sub.NameAssert-AreEqual $patchedPk $sub.PrimaryKeyAssert-AreEqual $patchedSk $sub.SecondaryKeyAssert-AreEqual $newSubscriptionState $sub.StateAssert-AreEqual $patchedExpirationDate $sub.ExpirationDateAssert-NotNull $sub.UserIdAssert-AreEqual 1 $sub.UserIdAssert-NotNull $sub.OwnerId$sub = Get-AzApiManagementSubscription -Context $context -Scope $allApisScopeAssert-AreEqual $newSubscriptionId $sub.SubscriptionIdAssert-AreEqual $patchedName $sub.NameAssert-AreEqual $patchedPk $sub.PrimaryKeyAssert-AreEqual $patchedSk $sub.SecondaryKeyAssert-AreEqual $newSubscriptionState $sub.StateAssert-AreEqual $patchedExpirationDate $sub.ExpirationDateAssert-NotNull $sub.UserIdAssert-AreEqual 1 $sub.UserIdAssert-NotNull $sub.OwnerId}finally {$removed = Remove-AzApiManagementSubscription -Context $context -SubscriptionId $newSubscriptionId  -PassThruAssert-True { $removed }$sub = $nulltry {$sub = Get-AzApiManagementSubscripiton -Context $context -SubscriptionId $newSubscriptionId}catch {}Assert-Null $sub}}function User-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$users = Get-AzApiManagementUser -Context $contextAssert-AreEqual 1 $users.CountAssert-NotNull $users[0].UserIdAssert-NotNull $users[0].FirstNameAssert-NotNull $users[0].LastNameAssert-NotNull $users[0].EmailAssert-NotNull $users[0].StateAssert-NotNull $users[0].RegistrationDate$user = Get-AzApiManagementUser -Context $context -UserId $users[0].UserIdAssert-AreEqual $users[0].UserId $user.UserIdAssert-AreEqual $users[0].FirstName $user.FirstNameAssert-AreEqual $users[0].LastName $user.LastNameAssert-AreEqual $users[0].Email $user.EmailAssert-AreEqual $users[0].State $user.StateAssert-AreEqual $users[0].RegistrationDate $user.RegistrationDate$userId = getAssetNametry {$userEmail = "contoso@microsoft.com"$userFirstName = getAssetName$userLastName = getAssetName$userPassword = getAssetName$userNote = getAssetName$userState = "Active"$secureUserPassword = ConvertTo-SecureString -String $userPassword -AsPlainText -Force$user = New-AzApiManagementUser -Context $context -UserId $userId -FirstName $userFirstName -LastName $userLastName `-Password $secureUserPassword -State $userState -Note $userNote -Email $userEmailAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userFirstName $user.FirstNameAssert-AreEqual $userLastName $user.LastNameAssert-AreEqual $userNote $user.NoteAssert-AreEqual $userState $user.State$userEmail = "changed.contoso@microsoft.com"$userFirstName = getAssetName$userLastName = getAssetName$userPassword = getAssetName$userNote = getAssetName$userState = "Active"$secureUserPassword = ConvertTo-SecureString -String $userPassword -AsPlainText -Force$user = Set-AzApiManagementUser -Context $context -UserId $userId -FirstName $userFirstName -LastName $userLastName `-Password $secureUserPassword -State $userState -Note $userNote -PassThru -Email $userEmailAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userFirstName $user.FirstNameAssert-AreEqual $userLastName $user.LastNameAssert-AreEqual $userNote $user.NoteAssert-AreEqual $userState $user.State$user = Get-AzApiManagementUser -Context $context -Email $userEmailAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userFirstName $user.FirstName$user = Get-AzApiManagementUser -Context $context -FirstName $userFirstNameAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userFirstName $user.FirstName$user = Get-AzApiManagementUser -Context $context -LastName $userLastNameAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userLastName $user.LastName$user = Get-AzApiManagementUser -Context $context -LastName $userLastName -FirstName $userFirstNameAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userLastName $user.LastNameAssert-AreEqual $userFirstName $user.FirstName$userState = "Blocked"$user = Set-AzApiManagementUser -Context $context -UserId $userId -State $userState -PassThruAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userFirstName $user.FirstNameAssert-AreEqual $userLastName $user.LastNameAssert-AreEqual $userNote $user.NoteAssert-AreEqual $userState $user.State$user = Get-AzApiManagementUser -Context $context -State $userStateAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userLastName $user.LastNameAssert-AreEqual $userState $user.State$userState = "Active"$user = Set-AzApiManagementUser -Context $context -UserId $userId -State $userState -PassThruAssert-AreEqual $userId $user.UserIdAssert-AreEqual $userEmail $user.EmailAssert-AreEqual $userFirstName $user.FirstNameAssert-AreEqual $userLastName $user.LastNameAssert-AreEqual $userNote $user.NoteAssert-AreEqual $userState $user.State$ssoUrl = Get-AzApiManagementUserSsoUrl -Context $context -UserId $userIdAssert-NotNull $ssoUrlAssert-AreEqual $true [System.Uri]::IsWellFormedUriString($ssoUrl, 'Absolute')$token = New-AzApiManagementUserToken -Context $context -UserId $userIdAssert-NotNull $token}finally {$removed = Remove-AzApiManagementUser -Context $context -UserId $userId -DeleteSubscriptions  -PassThruAssert-True { $removed }$user = $nulltry {$user = Get-AzApiManagementUser -Context $context -UserId $userId}catch {}Assert-Null $user}}function Group-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$groups = Get-AzApiManagementGroup -Context $contextAssert-AreEqual 3 $groups.Countfor ($i = 0; $i -lt 3; $i++) {Assert-NotNull $groups[$i].GroupIdAssert-NotNull $groups[$i].NameAssert-NotNull $groups[$i].DescriptionAssert-NotNull $groups[$i].SystemAssert-NotNull $groups[$i].Type$group = Get-AzApiManagementGroup -Context $context -GroupId $groups[$i].GroupIdAssert-AreEqual $group.GroupId $groups[$i].GroupIdAssert-AreEqual $group.Name $groups[$i].NameAssert-AreEqual $group.Description $groups[$i].DescriptionAssert-AreEqual $group.System $groups[$i].SystemAssert-AreEqual $group.Type $groups[$i].Type}$groupId = getAssetName$externalgroupId = getAssetNametry {$newGroupName = getAssetName$newGroupDescription = getAssetName$group = New-AzApiManagementGroup -GroupId $groupId -Context $context -Name $newGroupName -Description $newGroupDescriptionAssert-AreEqual $groupId $group.GroupIdAssert-AreEqual $newGroupName $group.NameAssert-AreEqual $newGroupDescription $group.DescriptionAssert-AreEqual $false $group.SystemAssert-AreEqual 'Custom' $group.Type$newGroupName = getAssetName$newGroupDescription = getAssetName$group = Set-AzApiManagementGroup -Context $context -GroupId $groupId -Name $newGroupName -Description $newGroupDescription -PassThruAssert-AreEqual $groupId $group.GroupIdAssert-AreEqual $newGroupName $group.NameAssert-AreEqual $newGroupDescription $group.DescriptionAssert-AreEqual $false $group.SystemAssert-AreEqual 'Custom' $group.Type$product = Get-AzApiManagementProduct -Context $context | Select -First 1Add-AzApiManagementProductToGroup -Context $context -GroupId $groupId -ProductId $product.ProductId$groups = Get-AzApiManagementGroup -Context $context -ProductId $product.ProductIdAssert-AreEqual 4 $groups.CountRemove-AzApiManagementProductFromGroup -Context $context -GroupId $groupId -ProductId $product.ProductId$groups = Get-AzApiManagementGroup -Context $context -ProductId $product.ProductIdAssert-AreEqual 3 $groups.Count$user = Get-AzApiManagementUser -Context $context | Select -First 1Add-AzApiManagementUserToGroup -Context $context -GroupId $groupId -UserId $user.UserId$groups = Get-AzApiManagementGroup -Context $context -UserId $user.UserIdAssert-AreEqual 3 $groups.CountRemove-AzApiManagementUserFromGroup -Context $context -GroupId $groupId -UserId $user.UserId$groups = Get-AzApiManagementGroup -Context $context -UserId $user.UserIdAssert-AreEqual 2 $groups.Count$externalgroupname = getAssetName$externalgroupdescription = getAssetName$externalgroup = New-AzApiManagementGroup -GroupId $externalgroupId -Context $context -Name $externalgroupname -Type 'External' -Description $externalgroupdescriptionAssert-AreEqual $externalgroupId $externalgroup.GroupIdAssert-AreEqual $externalgroupname $externalgroup.NameAssert-AreEqual $externalgroupdescription $externalgroup.DescriptionAssert-AreEqual $false $externalgroup.SystemAssert-AreEqual 'External' $externalgroup.Type}finally {$removed = Remove-AzApiManagementGroup -Context $context -GroupId $groupId -PassThruAssert-True { $removed }$group = $nulltry {$group = Get-AzApiManagementGroup -Context $context -GroupId $groupId}catch {}Assert-Null $group$removed = Remove-AzApiManagementGroup -Context $context -GroupId $externalgroupId -PassThruAssert-True { $removed }$group = $nulltry {$group = Get-AzApiManagementGroup -Context $context -GroupId $externalgroupId}catch {}Assert-Null $group}}function Policy-CrudTest {Param($resourceGroupName, $serviceName)$tenantValidPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "TenantValidPolicy.xml"$productValidPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "ProductValidPolicy.xml"$apiValidPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "ApiValidPolicy.xml"$operationValidPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "OperationValidPolicy.xml"$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceNametry {$set = Set-AzApiManagementPolicy -Context $context  -PolicyFilePath $tenantValidPath -PassThruAssert-AreEqual $true $set$policy = Get-AzApiManagementPolicy -Context $contextAssert-NotNull $policyAssert-True { $policy -like '*<find-and-replace from="aaa" to="BBB" />*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $contextAssert-Null $policy}$product = Get-AzApiManagementProduct -Context $context -Title 'Unlimited' | Select-Object -First 1try {$set = Set-AzApiManagementPolicy -Context $context  -PolicyFilePath $productValidPath -ProductId $product.ProductId -PassThruAssert-AreEqual $true $set$policy = Get-AzApiManagementPolicy -Context $context  -ProductId $product.ProductIdAssert-NotNull $policyAssert-True { $policy -like '*<rate-limit calls="5" renewal-period="60" />*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -ProductId $product.ProductId -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $context  -ProductId $product.ProductIdAssert-Null $policy}$api = Get-AzApiManagementApi -Context $context | Select-Object -First 1try {$set = Set-AzApiManagementPolicy -Context $context  -PolicyFilePath $apiValidPath -ApiId $api.ApiId -PassThruAssert-AreEqual $true $set$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiIdAssert-NotNull $policyAssert-True { $policy -like '*<cache-lookup vary-by-developer="false" vary-by-developer-groups="false" downstream-caching-type="none">*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -ApiId $api.ApiId -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiIdAssert-Null $policy}$api = Get-AzApiManagementApi -Context $context | Select-Object -First 1$operation = Get-AzApiManagementOperation -Context $context -ApiId $api.ApiId | Select-Object -First 1try {$set = Set-AzApiManagementPolicy -Context $context  -PolicyFilePath $operationValidPath -ApiId $api.ApiId `-OperationId $operation.OperationId -PassThruAssert-AreEqual $true $set$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiId -OperationId $operation.OperationIdAssert-NotNull $policyAssert-True { $policy -like '*<rewrite-uri template="/resource" />*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -ApiId $api.ApiId -OperationId $operation.OperationId -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiId -OperationId $operation.OperationIdAssert-Null $policy}$tenantValid = '<policies><inbound><find-and-replace from="aaa" to="BBB" /><set-header name="ETag" exists-action="skip"><value>bbyby</value><!-- for multiple headers with the same name add additional value elements --></set-header><set-query-parameter name="additional" exists-action="append"><value>xxbbcczc</value><!-- for multiple parameters with the same name add additional value elements --></set-query-parameter><cross-domain /></inbound><outbound /></policies>'try {$set = Set-AzApiManagementPolicy -Context $context  -Policy $tenantValid -PassThruAssert-AreEqual $true $setGet-AzApiManagementPolicy -Context $context  -SaveAs "$TestOutputRoot/TenantPolicy.xml" -Force$exists = [System.IO.File]::Exists((Join-Path "$TestOutputRoot" "TenantPolicy.xml"))$policy = gc (Join-Path "$TestOutputRoot" "TenantPolicy.xml")Assert-True { $policy -like '*<find-and-replace from="aaa" to="BBB" />*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $contextAssert-Null $policy}$productValid = '<policies><inbound><rate-limit calls="5" renewal-period="60" /><quota calls="100" renewal-period="604800" /><base /></inbound><outbound><base /></outbound></policies>'$product = Get-AzApiManagementProduct -Context $context -Title 'Unlimited' | Select-Object -First 1try {$set = Set-AzApiManagementPolicy -Context $context  -Policy $productValid -ProductId $product.ProductId -PassThruAssert-AreEqual $true $setGet-AzApiManagementPolicy -Context $context  -ProductId $product.ProductId -SaveAs "$TestOutputRoot/ProductPolicy.xml" -Format 'RawXml' -Force$exists = [System.IO.File]::Exists((Join-Path "$TestOutputRoot" "ProductPolicy.xml"))$policy = gc (Join-Path "$TestOutputRoot" "ProductPolicy.xml")Assert-True { $policy -like '*<rate-limit calls="5" renewal-period="60" />*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -ProductId $product.ProductId -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $context  -ProductId $product.ProductIdAssert-Null $policytry {rm (Join-Path "$TestOutputRoot" "ProductPolicy.xml")}catch { }}$apiValid = '<policies><inbound><base /><cache-lookup vary-by-developer="false" vary-by-developer-groups="false" downstream-caching-type="none"><vary-by-query-parameter>version</vary-by-query-parameter><vary-by-header>Accept</vary-by-header><vary-by-header>Accept-Charset</vary-by-header></cache-lookup></inbound><outbound><cache-store duration="10" /><base /></outbound></policies>'$api = Get-AzApiManagementApi -Context $context | Select-Object -First 1try {$set = Set-AzApiManagementPolicy -Context $context  -Policy $apiValid -ApiId $api.ApiId -PassThruAssert-AreEqual $true $set$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiId -SaveAs (Join-Path "$TestOutputRoot" "ApiPolicy.xml") -Format 'RawXml' -Force$exists = [System.IO.File]::Exists((Join-Path "$TestOutputRoot" "ApiPolicy.xml"))$policy = gc (Join-Path "$TestOutputRoot" "ApiPolicy.xml")Assert-True { $policy -like '*<cache-lookup vary-by-developer="false" vary-by-developer-groups="false" downstream-caching-type="none">*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -ApiId $api.ApiId -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiIdAssert-Null $policytry {rm (Join-Path "$TestOutputRoot" "ApiPolicy.xml")}catch { }}$operationValid = '<policies><inbound><base /><rewrite-uri template="/resource" /></inbound><outbound><base /></outbound></policies>'$api = Get-AzApiManagementApi -Context $context | Select -First 1$operation = Get-AzApiManagementOperation -Context $context -ApiId $api.ApiId | Select-Object -First 1try {$set = Set-AzApiManagementPolicy -Context $context  -Policy $operationValid -ApiId $api.ApiId `-OperationId $operation.OperationId -PassThruAssert-AreEqual $true $set$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiId -OperationId $operation.OperationId `-SaveAs (Join-Path "$TestOutputRoot" "OperationPolicy.xml") -Format 'RawXml' -Force$exists = [System.IO.File]::Exists((Join-Path "$TestOutputRoot" "OperationPolicy.xml"))$policy = gc (Join-Path "$TestOutputRoot" "OperationPolicy.xml")Assert-True { $policy -like '*<rewrite-uri template="/resource" />*' }}finally {$removed = Remove-AzApiManagementPolicy -Context $context -ApiId $api.ApiId -OperationId $operation.OperationId -PassThruAssert-AreEqual $true $removed$policy = Get-AzApiManagementPolicy -Context $context  -ApiId $api.ApiId -OperationId $operation.OperationIdAssert-Null $policytry {rm (Join-Path "$TestOutputRoot" "OperationPolicy.xml")}catch { }}}function Certificate-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$certificates = Get-AzApiManagementCertificate -Context $contextAssert-AreEqual 0 $certificates.Count$certPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "powershelltest.pfx"$certPassword = 'Password'$certSubject = "CN=*.msitesting.net"$certThumbprint = '8E989652CABCF585ACBFCB9C2C91F1D174FDB3A2'$certId = getAssetNametry {$cert = New-AzApiManagementCertificate -Context $context -CertificateId $certId -PfxFilePath $certPath -PfxPassword $certPasswordAssert-AreEqual $certId $cert.CertificateIdAssert-AreEqual $certThumbprint $cert.ThumbprintAssert-AreEqual $certSubject $cert.Subject$cert = Get-AzApiManagementCertificate -Context $context -CertificateId $certIdAssert-AreEqual $certId $cert.CertificateIdAssert-AreEqual $certThumbprint $cert.ThumbprintAssert-AreEqual $certSubject $cert.Subject$cert = Get-AzApiManagementCertificate -ResourceId $cert.IdAssert-AreEqual $certId $cert.CertificateIdAssert-AreEqual $certThumbprint $cert.ThumbprintAssert-AreEqual $certSubject $cert.Subject$cert = Set-AzApiManagementCertificate -Context $context -CertificateId $certId -PfxFilePath $certPath -PfxPassword $certPassword -PassThruAssert-AreEqual $certId $cert.CertificateIdAssert-AreEqual $certThumbprint $cert.ThumbprintAssert-AreEqual $certSubject $cert.Subject$certificates = Get-AzApiManagementCertificate -Context $contextAssert-AreEqual 1 $certificates.CountAssert-AreEqual $certId $certificates[0].CertificateIdAssert-AreEqual $certThumbprint $certificates[0].ThumbprintAssert-AreEqual $certSubject $certificates[0].Subject}finally {$removed = Remove-AzApiManagementCertificate -Context $context -CertificateId $certId  -PassThruAssert-True { $removed }$cert = $nulltry {$cert = Get-AzApiManagementCertificate -Context $context -CertificateId $certId}catch {}Assert-Null $cert}}function Cache-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$caches = Get-AzApiManagementCache -Context $contextAssert-AreEqual 0 $caches.Count$cacheDescription = getAssetName$cacheConnectionString = 'teamdemo.redis.cache.windows.net:6380,password=xxxxxx+xxxxx=,ssl=True,abortConnect=False'$cacheId = "default"try {$cache = New-AzApiManagementCache -Context $context -CacheId $cacheId -ConnectionString $cacheConnectionString -Description $cacheDescriptionAssert-AreEqual $cacheId $cache.CacheIdAssert-NotNull $cache.ConnectionStringAssert-AreEqual $cacheDescription $cache.Description$cache = Get-AzApiManagementCache -Context $context -CacheId $cacheIdAssert-AreEqual $cacheId $cache.CacheIdAssert-NotNull $cache.ConnectionStringAssert-AreEqual $cacheDescription $cache.Description$cache = Get-AzApiManagementCache -ResourceId $cache.IdAssert-AreEqual $cacheId $cache.CacheIdAssert-NotNull $cache.ConnectionStringAssert-AreEqual $cacheDescription $cache.Description$newDescription = getAssetName$cache.Description = $newDescription$cache = Update-AzApiManagementCache -InputObject $cache -PassThruAssert-AreEqual $cacheId $cache.CacheIdAssert-NotNull $cache.ConnectionStringAssert-AreEqual $newDescription $cache.Description$caches = Get-AzApiManagementCache -Context $contextAssert-AreEqual 1 $caches.CountAssert-AreEqual $cacheId $caches[0].CacheIdAssert-NotNull $caches[0].ConnectionStringAssert-AreEqual $newDescription $caches[0].Description}finally {$removed = Remove-AzApiManagementCache -Context $context -CacheId $cacheId  -PassThruAssert-True { $removed }$cache = $nulltry {$cache = Get-AzApiManagementCache -Context $context -CacheId $cacheId}catch {}Assert-Null $cache$properties = Get-AzApiManagementProperty -Context $contextfor ($i = 0; $i -lt $properties.Count; $i++) {Remove-AzApiManagementProperty -Context $context -PropertyId $properties[$i].PropertyId}}}function AuthorizationServer-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$servers = Get-AzApiManagementAuthorizationServer -Context $contextAssert-AreEqual 0 $servers.Count$serverId = getAssetNametry {$name = getAssetName$defaultScope = getAssetName$authorizationEndpoint = 'https://contoso.com/auth'$tokenEndpoint = 'https://contoso.com/token'$clientRegistrationEndpoint = 'https://contoso.com/clients/reg'$grantTypes = @('AuthorizationCode', 'Implicit', 'ResourceOwnerPassword')$authorizationMethods = @('Post', 'Get')$bearerTokenSendingMethods = @('AuthorizationHeader', 'Query')$clientId = getAssetName$description = getAssetName$clientAuthenticationMethods = @('Basic')$clientSecret = getAssetName$resourceOwnerPassword = getAssetName$resourceOwnerUsername = getAssetName$supportState = $true$tokenBodyParameters = @{'tokenname' = 'tokenvalue' }$server = New-AzApiManagementAuthorizationServer -Context $context -ServerId $serverId -Name $name -Description $description `-ClientRegistrationPageUrl $clientRegistrationEndpoint -AuthorizationEndpointUrl $authorizationEndpoint `-TokenEndpointUrl $tokenEndpoint -ClientId $clientId -ClientSecret $clientSecret -AuthorizationRequestMethods $authorizationMethods `-GrantTypes $grantTypes -ClientAuthenticationMethods $clientAuthenticationMethods -TokenBodyParameters $tokenBodyParameters `-SupportState $supportState -DefaultScope $defaultScope -AccessTokenSendingMethods $bearerTokenSendingMethods `-ResourceOwnerUsername $resourceOwnerUsername -ResourceOwnerPassword $resourceOwnerPasswordAssert-AreEqual $serverId $server.ServerIdAssert-AreEqual $name $server.NameAssert-AreEqual $defaultScope $server.DefaultScopeAssert-AreEqual $authorizationEndpoint $server.AuthorizationEndpointUrlAssert-AreEqual $tokenEndpoint $server.TokenEndpointUrlAssert-AreEqual $clientRegistrationEndpoint $server.ClientRegistrationPageUrlAssert-AreEqual $grantTypes.Count $server.GrantTypes.CountAssert-AreEqual $grantTypes[0] $server.GrantTypes[0]Assert-AreEqual $grantTypes[1] $server.GrantTypes[1]Assert-AreEqual $grantTypes[2] $server.GrantTypes[2]Assert-AreEqual $authorizationMethods.Count $server.AuthorizationRequestMethods.CountAssert-AreEqual $authorizationMethods[0] $server.AuthorizationRequestMethods[0]Assert-AreEqual $authorizationMethods[1] $server.AuthorizationRequestMethods[1]Assert-AreEqual $bearerTokenSendingMethods.Count $server.AccessTokenSendingMethods.CountAssert-AreEqual $bearerTokenSendingMethods[0] $server.AccessTokenSendingMethods[0]Assert-AreEqual $bearerTokenSendingMethods[1] $server.AccessTokenSendingMethods[1]Assert-AreEqual $clientId $server.ClientIdAssert-AreEqual $description $server.DescriptionAssert-AreEqual $clientAuthenticationMethods.Count $server.ClientAuthenticationMethods.CountAssert-AreEqual $clientAuthenticationMethods[0] $server.ClientAuthenticationMethods[0]Assert-AreEqual $clientSecret $server.ClientSecretAssert-AreEqual $resourceOwnerPassword $server.ResourceOwnerPasswordAssert-AreEqual $resourceOwnerUsername $server.ResourceOwnerUsernameAssert-AreEqual $supportState $server.SupportStateAssert-AreEqual $tokenBodyParameters.Count $server.TokenBodyParameters.Count$server = Get-AzApiManagementAuthorizationServer -Context $context -ServerId $serverIdAssert-AreEqual $serverId $server.ServerIdAssert-AreEqual $name $server.NameAssert-AreEqual $defaultScope $server.DefaultScopeAssert-AreEqual $authorizationEndpoint $server.AuthorizationEndpointUrlAssert-AreEqual $tokenEndpoint $server.TokenEndpointUrlAssert-AreEqual $clientRegistrationEndpoint $server.ClientRegistrationPageUrlAssert-AreEqual $grantTypes.Count $server.GrantTypes.CountAssert-AreEqual $grantTypes[0] $server.GrantTypes[0]Assert-AreEqual $grantTypes[1] $server.GrantTypes[1]Assert-AreEqual $grantTypes[2] $server.GrantTypes[2]Assert-AreEqual $authorizationMethods.Count $server.AuthorizationRequestMethods.CountAssert-AreEqual $authorizationMethods[0] $server.AuthorizationRequestMethods[0]Assert-AreEqual $authorizationMethods[1] $server.AuthorizationRequestMethods[1]Assert-AreEqual $bearerTokenSendingMethods.Count $server.AccessTokenSendingMethods.CountAssert-AreEqual $bearerTokenSendingMethods[0] $server.AccessTokenSendingMethods[0]Assert-AreEqual $bearerTokenSendingMethods[1] $server.AccessTokenSendingMethods[1]Assert-AreEqual $clientId $server.ClientIdAssert-AreEqual $description $server.DescriptionAssert-AreEqual $clientAuthenticationMethods.Count $server.ClientAuthenticationMethods.CountAssert-AreEqual $clientAuthenticationMethods[0] $server.ClientAuthenticationMethods[0]Assert-AreEqual $clientSecret $server.ClientSecretAssert-AreEqual $resourceOwnerPassword $server.ResourceOwnerPasswordAssert-AreEqual $resourceOwnerUsername $server.ResourceOwnerUsernameAssert-AreEqual $supportState $server.SupportStateAssert-AreEqual $tokenBodyParameters.Count $server.TokenBodyParameters.Count$name = getAssetName$defaultScope = getAssetName$authorizationEndpoint = 'https://contoso.com/authv2'$tokenEndpoint = 'https://contoso.com/tokenv2'$clientRegistrationEndpoint = 'https://contoso.com/clients/regv2'$grantTypes = @('AuthorizationCode', 'Implicit', 'ClientCredentials')$authorizationMethods = @('Get')$bearerTokenSendingMethods = @('AuthorizationHeader')$clientId = getAssetName$description = getAssetName$clientAuthenticationMethods = @('Basic')$clientSecret = getAssetName$supportState = $false$tokenBodyParameters = @{'tokenname1' = 'tokenvalue1' }$server = Set-AzApiManagementAuthorizationServer -Context $context -ServerId $serverId -Name $name -Description $description `-ClientRegistrationPageUrl $clientRegistrationEndpoint -AuthorizationEndpointUrl $authorizationEndpoint `-TokenEndpointUrl $tokenEndpoint -ClientId $clientId -ClientSecret $clientSecret -AuthorizationRequestMethods $authorizationMethods `-GrantTypes $grantTypes -ClientAuthenticationMethods $clientAuthenticationMethods -TokenBodyParameters $tokenBodyParameters `-SupportState $supportState -DefaultScope $defaultScope -AccessTokenSendingMethods $bearerTokenSendingMethods -PassThruAssert-AreEqual $serverId $server.ServerIdAssert-AreEqual $name $server.NameAssert-AreEqual $defaultScope $server.DefaultScopeAssert-AreEqual $authorizationEndpoint $server.AuthorizationEndpointUrlAssert-AreEqual $tokenEndpoint $server.TokenEndpointUrlAssert-AreEqual $clientRegistrationEndpoint $server.ClientRegistrationPageUrlAssert-AreEqual $grantTypes.Count $server.GrantTypes.CountAssert-AreEqual $grantTypes[0] $server.GrantTypes[0]Assert-AreEqual $grantTypes[1] $server.GrantTypes[1]Assert-AreEqual $grantTypes[2] $server.GrantTypes[2]Assert-AreEqual $authorizationMethods.Count $server.AuthorizationRequestMethods.CountAssert-AreEqual $authorizationMethods[0] $server.AuthorizationRequestMethods[0]Assert-AreEqual $bearerTokenSendingMethods.Count $server.AccessTokenSendingMethods.CountAssert-AreEqual $bearerTokenSendingMethods[0] $server.AccessTokenSendingMethods[0]Assert-AreEqual $clientId $server.ClientIdAssert-AreEqual $description $server.DescriptionAssert-AreEqual $clientAuthenticationMethods.Count $server.ClientAuthenticationMethods.CountAssert-AreEqual $clientAuthenticationMethods[0] $server.ClientAuthenticationMethods[0]Assert-AreEqual $clientSecret $server.ClientSecretAssert-AreEqual $supportState $server.SupportStateAssert-AreEqual $tokenBodyParameters.Count $server.TokenBodyParameters.Count$server = Get-AzApiManagementAuthorizationServer -Context $context -ServerId $serverIdAssert-AreEqual $serverId $server.ServerIdAssert-AreEqual $name $server.NameAssert-AreEqual $defaultScope $server.DefaultScopeAssert-AreEqual $authorizationEndpoint $server.AuthorizationEndpointUrlAssert-AreEqual $tokenEndpoint $server.TokenEndpointUrlAssert-AreEqual $clientRegistrationEndpoint $server.ClientRegistrationPageUrlAssert-AreEqual $grantTypes.Count $server.GrantTypes.CountAssert-AreEqual $grantTypes[0] $server.GrantTypes[0]Assert-AreEqual $grantTypes[1] $server.GrantTypes[1]Assert-AreEqual $grantTypes[2] $server.GrantTypes[2]Assert-AreEqual $authorizationMethods.Count $server.AuthorizationRequestMethods.CountAssert-AreEqual $authorizationMethods[0] $server.AuthorizationRequestMethods[0]Assert-AreEqual $authorizationMethods[1] $server.AuthorizationRequestMethods[1]Assert-AreEqual $bearerTokenSendingMethods.Count $server.AccessTokenSendingMethods.CountAssert-AreEqual $bearerTokenSendingMethods[0] $server.AccessTokenSendingMethods[0]Assert-AreEqual $bearerTokenSendingMethods[1] $server.AccessTokenSendingMethods[1]Assert-AreEqual $clientId $server.ClientIdAssert-AreEqual $description $server.DescriptionAssert-AreEqual $clientAuthenticationMethods.Count $server.ClientAuthenticationMethods.CountAssert-AreEqual $clientAuthenticationMethods[0] $server.ClientAuthenticationMethods[0]Assert-AreEqual $clientSecret $server.ClientSecretAssert-AreEqual $supportState $server.SupportStateAssert-AreEqual $tokenBodyParameters.Count $server.TokenBodyParameters.Count}finally {$removed = Remove-AzApiManagementAuthorizationServer -Context $context -ServerId $serverId  -PassThruAssert-True { $removed }$server = $nulltry {$server = Get-AzApiManagementAuthorizationServer -Context $context -ServerId $serverId}catch {}Assert-Null $server}}function Logger-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$loggerId = getAssetName$appInsightsLoggerId = getAssetName$instrumentationKey = [guid]::newguid()try {        $newLoggerDescription = getAssetName$eventHubName = "powershell"$eventHubConnectionString = "Test-ConnectionString"$logger = New-AzApiManagementLogger -Context $context -LoggerId $loggerId -Name $eventHubName -ConnectionString $eventHubConnectionString -Description $newLoggerDescriptionAssert-AreEqual $loggerId $logger.LoggerIdAssert-AreEqual $newLoggerDescription $logger.DescriptionAssert-AreEqual 'AzureEventHub' $logger.TypeAssert-AreEqual $true $logger.IsBuffered$newLoggerDescription = getAssetName$logger = $null$logger = Set-AzApiManagementLogger -Context $context -LoggerId $loggerId -Description $newLoggerDescription -PassThruAssert-AreEqual $loggerId $logger.LoggerIdAssert-AreEqual $newLoggerDescription $logger.DescriptionAssert-AreEqual 'AzureEventHub' $logger.TypeAssert-AreEqual $false $logger.IsBuffered$loggers = Get-AzApiManagementLogger -Context $contextAssert-NotNull $loggersAssert-AreEqual 1 $loggers.Count$logger = $null$logger = Get-AzApiManagementLogger -Context $context -LoggerId $loggerIdAssert-AreEqual $loggerId $logger.LoggerIdAssert-AreEqual $newLoggerDescription $logger.DescriptionAssert-AreEqual 'AzureEventHub' $logger.TypeAssert-AreEqual $false $logger.IsBuffered$appInsightsLoggerDescription = getAssetName$applogger = New-AzApiManagementLogger -Context $context -LoggerId $appInsightsLoggerId -InstrumentationKey $instrumentationKey.Guid -Description $appInsightsLoggerDescriptionAssert-NotNull $apploggerAssert-AreEqual 'ApplicationInsights' $applogger.TypeAssert-AreEqual $appInsightsLoggerId $applogger.LoggerIdAssert-AreEqual $appInsightsLoggerDescription $applogger.Description}finally {$removed = Remove-AzApiManagementLogger -Context $context -LoggerId $loggerId  -PassThruAssert-True { $removed }$logger = $nulltry {$logger = Get-AzApiManagementLogger -Context $context -LoggerId $loggerId}catch {}Assert-Null $logger$removed = Remove-AzApiManagementLogger -Context $context -LoggerId $appInsightsLoggerId  -PassThruAssert-True { $removed }$logger = $nulltry {$logger = Get-AzApiManagementLogger -Context $context -LoggerId $appInsightsLoggerId}catch {}Assert-Null $logger$properties = Get-AzApiManagementProperty -Context $contextfor ($i = 0; $i -lt $properties.Count; $i++) {Remove-AzApiManagementProperty -Context $context -PropertyId $properties[$i].PropertyId}}}function OpenIdConnectProvider-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$openIdConnectProviderId = getAssetName$yamlPath1 = Join-Path (Join-Path "$TestOutputRoot" "Resources") "uspto.yml"$path1 = "openapifromFile"$openApiId1 = getAssetNametry {$openIdConnectProviderName = getAssetName$metadataEndpoint = "https://login.microsoftonline.com/contoso.onmicrosoft.com/v2.0/.well-known/openid-configuration"$clientId = getAssetName$openIdDescription = getAssetName$openIdConectProvider = New-AzApiManagementOpenIdConnectProvider -Context $context -OpenIdConnectProviderId $openIdConnectProviderId -Name $openIdConnectProviderName -MetadataEndpointUri $metadataEndpoint -ClientId $clientId -Description $openIdDescriptionAssert-AreEqual $openIdConnectProviderId $openIdConectProvider.OpenIdConnectProviderIdAssert-AreEqual $openIdConnectProviderName $openIdConectProvider.NameAssert-AreEqual $metadataEndpoint $openIdConectProvider.MetadataEndpointAssert-AreEqual $clientId $openIdConectProvider.ClientIdAssert-AreEqual $openIdDescription $openIdConectProvider.DescriptionAssert-Null $openIdConectProvider.ClientSecret$openIdConectProvider = $null$openIdConectProvider = Get-AzApiManagementOpenIdConnectProvider -Context $context -Name $openIdConnectProviderNameAssert-NotNull $openIdConectProviderAssert-AreEqual $openIdConnectProviderId $openIdConectProvider.OpenIdConnectProviderId$openIdConectProvider = Get-AzApiManagementOpenIdConnectProvider -Context $context -OpenIdConnectProviderId $openIdConnectProviderIdAssert-NotNull $openIdConectProviderAssert-AreEqual $openIdConnectProviderId $openIdConectProvider.OpenIdConnectProviderId$openIdConectProviders = Get-AzApiManagementOpenIdConnectProvider -Context $contextAssert-AreEqual 1 $openIdConectProviders.CountAssert-NotNull $openIdConectProvidersAssert-AreEqual $openIdConnectProviderId $openIdConectProvider.OpenIdConnectProviderId$api = Import-AzApiManagementApi -Context $context -ApiId $openApiId1 -SpecificationPath $yamlPath1 -SpecificationFormat OpenApi -Path $path1Assert-AreEqual $openApiId1 $api.ApiIdAssert-AreEqual $path1 $api.PathAssert-NotNull $api.ServiceUrl$api = Set-AzApiManagementApi -InputObject $api -Name $api.Name -ServiceUrl $api.ServiceUrl -Protocols $api.Protocols -OpenIdProviderId $openIdConnectProviderId -BearerTokenSendingMethod 'query' -PassThruAssert-AreEqual $openApiId1 $api.ApiIdAssert-AreEqual $path1 $api.PathAssert-AreEqual $openIdConnectProviderId $api.OpenIdProviderIdAssert-AreEqual 'query' $api.BearerTokenSendingMethod[0]$clientSecret = getAssetName$openIdConectProvider = Set-AzApiManagementOpenIdConnectProvider -Context $context -OpenIdConnectProviderId $openIdConnectProviderId -ClientSecret $clientSecret -PassThruAssert-AreEqual $openIdConnectProviderId $openIdConectProvider.OpenIdConnectProviderIdAssert-AreEqual $clientSecret $openIdConectProvider.ClientSecretAssert-AreEqual $clientId $openIdConectProvider.ClientIdAssert-AreEqual $metadataEndpoint $openIdConectProvider.MetadataEndpointAssert-AreEqual $openIdConnectProviderName $openIdConectProvider.Name$removed = Remove-AzApiManagementApi -Context $context -ApiId $openApiId1 -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementOpenIdConnectProvider -Context $context -OpenIdConnectProviderId $openIdConnectProviderId -PassThruAssert-True { $removed }$openIdConectProvider = $nulltry {$openIdConectProvider = Get-AzApiManagementOpenIdConnectProvider -Context $context -OpenIdConnectProviderId $openIdConnectProviderId}catch {}Assert-Null $openIdConectProvider}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $openApiId1 -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementOpenIdConnectProvider -Context $context -OpenIdConnectProviderId $openIdConnectProviderId -PassThruAssert-True { $removed }$openIdConectProvider = $nulltry {$openIdConectProvider = Get-AzApiManagementOpenIdConnectProvider -Context $context -OpenIdConnectProviderId $openIdConnectProviderId}catch {}Assert-Null $openIdConectProvider}}function Properties-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$propertyId = getAssetName$secretPropertyId = $nulltry {$propertyName = getAssetName$propertyValue = getAssetName$tags = 'sdk', 'powershell'$property = New-AzApiManagementProperty -Context $context -PropertyId $propertyId -Name $propertyName -Value $propertyValue -Tag $tagsAssert-NotNull $propertyAssert-AreEqual $propertyId $property.PropertyIdAssert-AreEqual $propertyName $property.NameAssert-AreEqual $propertyValue $property.ValueAssert-AreEqual $false  $property.SecretAssert-AreEqual 2 $property.Tags.Count$secretPropertyId = getAssetName$secretPropertyName = getAssetName$secretPropertyValue = getAssetName$secretProperty = New-AzApiManagementProperty -Context $context -PropertyId $secretPropertyId -Name $secretPropertyName -Value $secretPropertyValue -SecretAssert-NotNull $secretPropertyAssert-AreEqual $secretPropertyId $secretProperty.PropertyIdAssert-AreEqual $secretPropertyName $secretProperty.NameAssert-AreEqual $secretPropertyValue $secretProperty.ValueAssert-AreEqual $true  $secretProperty.SecretAssert-NotNull $secretProperty.TagsAssert-AreEqual 0 $secretProperty.Tags.Count$properties = Get-AzApiManagementProperty -Context $contextAssert-NotNull $propertiesAssert-AreEqual 2 $properties.Count$properties = $null$properties = Get-AzApiManagementProperty -Context $context -Name 'ps'Assert-NotNull $propertiesAssert-AreEqual 2 $properties.Count$properties = $null$properties = Get-AzApiManagementProperty -Context $context -Tag 'sdk'Assert-NotNull $propertyAssert-AreEqual 1 $properties.Count$secretProperty = $null$secretProperty = Get-AzApiManagementProperty -Context $context -PropertyId $secretPropertyIdAssert-NotNull $secretPropertyAssert-AreEqual $secretPropertyId $secretProperty.PropertyIdAssert-AreEqual $secretPropertyName $secretProperty.NameAssert-AreEqual $secretPropertyValue $secretProperty.ValueAssert-AreEqual $true  $secretProperty.SecretAssert-NotNull $secretProperty.TagsAssert-AreEqual 0 $secretProperty.Tags.Count$secretProperty = $null$secretProperty = Set-AzApiManagementProperty -Context $context -PropertyId $secretPropertyId -Tag $tags -PassThruAssert-NotNull $secretPropertyAssert-AreEqual $secretPropertyId $secretProperty.PropertyIdAssert-AreEqual $secretPropertyName $secretProperty.NameAssert-AreEqual $secretPropertyValue $secretProperty.ValueAssert-AreEqual $true  $secretProperty.SecretAssert-NotNull $secretProperty.TagsAssert-AreEqual 2 $secretProperty.Tags.Count$property = $null$property = Set-AzApiManagementProperty -Context $context -PropertyId $propertyId -Secret $true -PassThruAssert-NotNull $propertyAssert-AreEqual $propertyId $property.PropertyIdAssert-AreEqual $propertyName $property.NameAssert-AreEqual $propertyValue $property.ValueAssert-AreEqual $true  $property.SecretAssert-NotNull $property.TagsAssert-AreEqual 2 $property.Tags.Count$removed = Remove-AzApiManagementProperty -Context $context -PropertyId $secretPropertyId -PassThruAssert-True { $removed }$secretProperty = $nulltry {$secretProperty = Get-AzApiManagementProperty -Context $context -PropertyId $secretPropertyId}catch {}Assert-Null $secretProperty}finally {$removed = Remove-AzApiManagementProperty -Context $context -PropertyId $propertyId -PassThruAssert-True { $removed }$property = $nulltry {$property = Get-AzApiManagementProperty -Context $context -PropertyId $propertyId}catch {}Assert-Null $propertytry {Remove-AzApiManagementProperty -Context $context -PropertyId $secretPropertyId -PassThru}catch {}}}function TenantGitConfiguration-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceNametry {$tenantGitAccess = Get-AzApiManagementTenantGitAccess -Context $contextAssert-NotNull $tenantGitAccessAssert-AreEqual $true $tenantGitAccess.Enabled$tenantSyncState = Get-AzApiManagementTenantSyncState -Context $contextAssert-NotNull $tenantSyncStateAssert-AreEqual $true $tenantSyncState.IsGitEnabled$saveResponse = Save-AzApiManagementTenantGitConfiguration -Context $context -Branch 'master' -PassThruAssert-NotNull $saveResponseAssert-AreEqual "Succeeded" $saveResponse.StateAssert-Null $saveResponse.Error$tenantSyncState = $null$tenantSyncState = Get-AzApiManagementTenantSyncState -Context $contextAssert-NotNull $tenantSyncStateAssert-AreEqual $true $tenantSyncState.IsGitEnabledAssert-AreEqual "master" $tenantSyncState.Branch$validateResponse = Publish-AzApiManagementTenantGitConfiguration -Context $context -Branch 'master' -ValidateOnly -PassThruAssert-NotNull $validateResponseAssert-AreEqual "Succeeded" $validateResponse.StateAssert-Null $validateResponse.Error$deployResponse = Publish-AzApiManagementTenantGitConfiguration -Context $context -Branch 'master' -PassThruAssert-NotNull $deployResponseAssert-AreEqual "Succeeded" $deployResponse.StateAssert-Null $deployResponse.Error$tenantSyncState = $null$tenantSyncState = Get-AzApiManagementTenantSyncState -Context $contextAssert-NotNull $tenantSyncStateAssert-AreEqual $true $tenantSyncState.IsGitEnabledAssert-AreEqual "master" $tenantSyncState.BranchAssert-AreEqual $true $tenantSyncState.IsSynced}finally {}}function TenantAccessConfiguration-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceNametry {$tenantAccess = Get-AzApiManagementTenantAccess -Context $contextAssert-NotNull $tenantAccessAssert-AreEqual $false $tenantAccess.Enabled$tenantAccess = $null$tenantAccess = Set-AzApiManagementTenantAccess -Context $context -Enabled $true -PassThruAssert-NotNull $tenantAccessAssert-AreEqual $true $tenantAccess.Enabled}finally {Set-AzApiManagementTenantAccess -Context $context -Enabled $false -PassThru}}function IdentityProvider-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$identityProviderName = 'Facebook'try {$clientId = getAssetName$clientSecret = getAssetName$identityProvider = New-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -ClientId $clientId -ClientSecret $clientSecretAssert-NotNull $identityProviderAssert-AreEqual $identityProviderName $identityProvider.TypeAssert-AreEqual $clientId $identityProvider.ClientIdAssert-AreEqual $clientSecret $identityProvider.ClientSecret$identityProvider = $null$identityProvider = Get-AzApiManagementIdentityProvider -Context $context -Type $identityProviderNameAssert-NotNull $identityProviderAssert-AreEqual $identityProviderName $identityProvider.Type$identityProviders = Get-AzApiManagementIdentityProvider -Context $contextAssert-NotNull $identityProvidersAssert-AreEqual 1 $identityProviders.Count$clientSecret = getAssetName$identityProvider = Set-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -ClientSecret $clientSecret -PassThruAssert-AreEqual $identityProviderName $identityProvider.TypeAssert-AreEqual $clientSecret $identityProvider.ClientSecretAssert-AreEqual $clientId $identityProvider.ClientId$removed = Remove-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -PassThruAssert-True { $removed }$identityProvider = $nulltry {$identityProvider = Get-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName}catch {}Assert-Null $identityProvider}finally {$removed = Remove-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -PassThruAssert-True { $removed }$identityProvider = $nulltry {$identityProvider = Get-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName}catch {}Assert-Null $identityProvider}}function IdentityProvider-AadB2C-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$identityProviderName = 'AadB2C'try {$clientId = getAssetName$clientSecret = getAssetName$allowedTenants = 'samirtestbc.onmicrosoft.com'$signupPolicyName = 'B2C_1_signup-policy'$signinPolicyName = 'B2C_1_Sign-policy'$identityProvider = New-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -ClientId $clientId -ClientSecret $clientSecret `-AllowedTenants $allowedTenants -SignupPolicyName $signupPolicyName -SigninPolicyName $signinPolicyNameAssert-NotNull $identityProviderAssert-AreEqual $identityProviderName $identityProvider.TypeAssert-AreEqual $clientId $identityProvider.ClientIdAssert-AreEqual $clientSecret $identityProvider.ClientSecretAssert-AreEqual $signinPolicyName $identityProvider.SigninPolicyNameAssert-AreEqual $signupPolicyName $identityProvider.SignupPolicyNameAssert-AreEqual 'login.microsoftonline.com' $identityProvider.AuthorityAssert-AreEqual $allowedTenants $identityProvider.AllowedTenants[0]$identityProvider = $null$identityProvider = Get-AzApiManagementIdentityProvider -Context $context -Type $identityProviderNameAssert-NotNull $identityProviderAssert-AreEqual $identityProviderName $identityProvider.Type$identityProviders = Get-AzApiManagementIdentityProvider -Context $contextAssert-NotNull $identityProvidersAssert-AreEqual 1 $identityProviders.Count$profileEditingPolicy = 'B2C_1_UpdateEmail'$identityProvider = Set-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -ProfileEditingPolicyName $profileEditingPolicy -PassThruAssert-AreEqual $identityProviderName $identityProvider.TypeAssert-AreEqual $clientSecret $identityProvider.ClientSecretAssert-AreEqual $clientId $identityProvider.ClientIdAssert-AreEqual $clientSecret $identityProvider.ClientSecretAssert-AreEqual $signinPolicyName $identityProvider.SigninPolicyNameAssert-AreEqual $signupPolicyName $identityProvider.SignupPolicyNameAssert-AreEqual 'login.microsoftonline.com' $identityProvider.AuthorityAssert-AreEqual $allowedTenants $identityProvider.AllowedTenants[0]Assert-AreEqual $profileEditingPolicy $identityProvider.ProfileEditingPolicyName$removed = Remove-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -PassThruAssert-True { $removed }$identityProvider = $nulltry {$identityProvider = Get-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName}catch {}Assert-Null $identityProvider}finally {$removed = Remove-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName -PassThruAssert-True { $removed }$identityProvider = $nulltry {$identityProvider = Get-AzApiManagementIdentityProvider -Context $context -Type $identityProviderName}catch {}Assert-Null $identityProvider}}function Backend-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$backendId = getAssetNametry {$title = getAssetName$urlEndpoint = 'https://contoso.com/awesomeapi'$description = getAssetName$skipCertificateChainValidation = $true$credential = New-AzApiManagementBackendCredential -AuthorizationHeaderScheme basic -AuthorizationHeaderParameter opensesame -Query @{"sv" = @('xx', 'bb'); "sr" = @('cc') } -Header @{"x-my-1" = @('val1', 'val2') }$backend = New-AzApiManagementBackend -Context $context -BackendId $backendId -Url $urlEndpoint -Protocol http -Title $title -SkipCertificateChainValidation $skipCertificateChainValidation -Credential $credential -Description $descriptionAssert-AreEqual $backendId $backend.BackendIdAssert-AreEqual $description $backend.DescriptionAssert-AreEqual $urlEndpoint $backend.UrlAssert-AreEqual "http" $backend.ProtocolAssert-NotNull $backend.CredentialsAssert-NotNull $backend.Credentials.AuthorizationAssert-NotNull $backend.Credentials.QueryAssert-NotNull $backend.Credentials.HeaderAssert-AreEqual 2 $backend.Credentials.Query.CountAssert-AreEqual 1 $backend.Credentials.Header.CountAssert-NotNull $backend.PropertiesAssert-AreEqual 1 $backend.Properties.Count$newBackendDescription = getAssetName$backend = $null$backend = Set-AzApiManagementBackend -Context $context -BackendId $backendId -Description $newBackendDescription -PassThruAssert-AreEqual $backendId $backend.BackendIdAssert-AreEqual $newBackendDescription $backend.Description$backends = Get-AzApiManagementBackend -Context $contextAssert-NotNull $backendsAssert-AreEqual 1 $backends.Count$backend = $null$backend = Get-AzApiManagementBackend -Context $context -BackendId $backendIdAssert-AreEqual $backendId $backend.BackendIdAssert-AreEqual $newBackendDescription $backend.DescriptionAssert-AreEqual $urlEndpoint $backend.UrlAssert-AreEqual http $backend.ProtocolAssert-NotNull $backend.CredentialsAssert-NotNull $backend.Credentials.AuthorizationAssert-NotNull $backend.Credentials.QueryAssert-NotNull $backend.Credentials.HeaderAssert-AreEqual 2 $backend.Credentials.Query.CountAssert-AreEqual 1 $backend.Credentials.Header.CountAssert-NotNull $backend.PropertiesAssert-AreEqual 1 $backend.Properties.Count$secpassword = ConvertTo-SecureString "PlainTextPassword" -AsPlainText -Force; $proxyCreds = New-Object System.Management.Automation.PSCredential ("foo", $secpassword)$credential = New-AzApiManagementBackendProxy -Url "http://12.168.1.1:8080" -ProxyCredential $proxyCreds$backend = Set-AzApiManagementBackend -Context $context -BackendId $backendId -Proxy $credential -PassThruAssert-AreEqual $backendId $backend.BackendIdAssert-AreEqual $newBackendDescription $backend.DescriptionAssert-AreEqual $urlEndpoint $backend.UrlAssert-AreEqual http $backend.ProtocolAssert-NotNull $backend.CredentialsAssert-NotNull $backend.Credentials.AuthorizationAssert-NotNull $backend.Credentials.QueryAssert-NotNull $backend.Credentials.HeaderAssert-AreEqual 2 $backend.Credentials.Query.CountAssert-AreEqual 1 $backend.Credentials.Header.CountAssert-NotNull $backend.PropertiesAssert-AreEqual 1 $backend.Properties.CountAssert-NotNull $backend.ProxyAssert-AreEqual $backend.Proxy.Url "http://12.168.1.1:8080"Assert-NotNull $backend.Proxy.ProxyCredentials}finally {$removed = Remove-AzApiManagementBackend -Context $context -BackendId $backendId -PassThruAssert-True { $removed }$backend = $nulltry {$backend = Get-AzApiManagementBackend -Context $context -BackendId $backendId}catch {}Assert-Null $backend}}function BackendServiceFabric-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$backends = Get-AzApiManagementBackend -Context $contextAssert-AreEqual 0 $backends.Count$certId = getAssetName    $certPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "powershelltest.pfx"$certPassword = 'Password'$certSubject = "CN=*.msitesting.net"$certThumbprint = '8E989652CABCF585ACBFCB9C2C91F1D174FDB3A2'$backendId = getAssetNametry {$cert = New-AzApiManagementCertificate -Context $context -CertificateId $certId -PfxFilePath $certPath -PfxPassword $certPasswordAssert-AreEqual $certId $cert.CertificateIdAssert-AreEqual $certThumbprint $cert.ThumbprintAssert-AreEqual $certSubject $cert.Subject$title = getAssetName$urlEndpoint = 'https://contoso.com/awesomeapi'$description = getAssetName$ManagementEndpoints = 'https://sfbackend-01.net:443', 'https://sfbackend-02.net:443'$ServerCertificateThumbprints = $cert.Thumbprint$serviceFabric = New-AzApiManagementBackendServiceFabric -ManagementEndpoint  $ManagementEndpoints -ClientCertificateThumbprint $cert.Thumbprint `-ServerX509Name @{"CN=foobar.net" = $cert.Thumbprint }$backend = New-AzApiManagementBackend -Context $context -BackendId $backendId -Url $urlEndpoint -Protocol http -Title $title -ServiceFabricCluster $serviceFabric  `-Description $descriptionAssert-AreEqual $backendId $backend.BackendIdAssert-AreEqual $description $backend.DescriptionAssert-AreEqual $urlEndpoint $backend.UrlAssert-AreEqual "http" $backend.ProtocolAssert-Null $backend.CredentialsAssert-NotNull $backend.ServiceFabricClusterAssert-AreEqual 2 $backend.ServiceFabricCluster.ManagementEndpoints.CountAssert-AreEqual $cert.Thumbprint $backend.ServiceFabricCluster.ClientCertificateThumbprintAssert-Null $backend.ServiceFabricCluster.ServerCertificateThumbprintAssert-NotNull $backend.ServiceFabricCluster.ServerX509NamesAssert-AreEqual 1 $backend.ServiceFabricCluster.ServerX509Names.CountAssert-AreEqual 3 $backend.ServiceFabricCluster.MaxPartitionResolutionRetriesAssert-Null $backend.Properties$newBackendDescription = getAssetName$backend = $null$backend = Set-AzApiManagementBackend -Context $context -BackendId $backendId -Description $newBackendDescription -PassThruAssert-AreEqual $backendId $backend.BackendIdAssert-AreEqual $newBackendDescription $backend.Description$backends = Get-AzApiManagementBackend -Context $contextAssert-NotNull $backendsAssert-AreEqual 1 $backends.Count$backend = $null$backend = Get-AzApiManagementBackend -Context $context -BackendId $backendIdAssert-AreEqual $backendId $backend.BackendIdAssert-AreEqual $newBackendDescription $backend.DescriptionAssert-AreEqual $urlEndpoint $backend.UrlAssert-AreEqual http $backend.ProtocolAssert-Null $backend.CredentialsAssert-NotNull $backend.ServiceFabricClusterAssert-AreEqual 2 $backend.ServiceFabricCluster.ManagementEndpoints.CountAssert-AreEqual $cert.Thumbprint $backend.ServiceFabricCluster.ClientCertificateThumbprintAssert-NotNull $backend.ServiceFabricCluster.ServerCertificateThumbprintAssert-NotNull $backend.ServiceFabricCluster.ServerX509NamesAssert-AreEqual 1 $backend.ServiceFabricCluster.ServerX509Names.CountAssert-AreEqual 3 $backend.ServiceFabricCluster.MaxPartitionResolutionRetries Assert-Null $backend.Properties       }finally {$removed = Remove-AzApiManagementBackend -Context $context -BackendId $backendId -PassThruAssert-True { $removed }$backend = $nulltry {$backend = Get-AzApiManagementBackend -Context $context -BackendId $backendId}catch {}Assert-Null $backend$removed = Remove-AzApiManagementCertificate -Context $context -CertificateId $certId -PassThruAssert-True { $removed }$certificate = $nulltry {$certificate = Get-AzApiManagementCertificate -Context $context -CertificateId $certId}catch {}Assert-Null $certificate}}function ApiVersionSet-SetCrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$apiversionsets = Get-AzApiManagementApiVersionSet -Context $contextAssert-AreEqual 0 $apiversionsets.Count$swaggerPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "SwaggerPetStoreV2.json"$path1 = "swaggerapifromFile"$swaggerApiId1 = getAssetName        $newApiVersionSetId = getAssetNametry {$newVersionSetName = getAssetName$queryName = getAssetName$description = getAssetName$newApiVersionSet = New-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId -Name $newVersionSetName -Scheme Query `-QueryName $queryName -Description $descriptionAssert-AreEqual $newApiVersionSetId $newApiVersionSet.ApiVersionSetIdAssert-AreEqual $newVersionSetName $newApiVersionSet.DisplayNameAssert-AreEqual $description $newApiVersionSet.DescriptionAssert-AreEqual Query $newApiVersionSet.VersioningSchemeAssert-AreEqual $queryName $newApiVersionSet.VersionQueryNameAssert-Null $newApiVersionSet.VersionHeaderName$versionHeaderName = getAssetName$newApiVersionSet = Set-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId  `-Scheme Header -HeaderName $versionHeaderName -PassThruAssert-AreEqual $newApiVersionSetId $newApiVersionSet.ApiVersionSetIdAssert-AreEqual $newVersionSetName $newApiVersionSet.DisplayNameAssert-AreEqual $description $newApiVersionSet.DescriptionAssert-AreEqual Header $newApiVersionSet.VersioningSchemeAssert-AreEqual $versionHeaderName $newApiVersionSet.VersionHeaderName$newApiVersionSet = Get-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetIdAssert-AreEqual $newApiVersionSetId $newApiVersionSet.ApiVersionSetIdAssert-AreEqual $newVersionSetName $newApiVersionSet.DisplayNameAssert-AreEqual $description $newApiVersionSet.DescriptionAssert-AreEqual Header $newApiVersionSet.VersioningSchemeAssert-AreEqual $versionHeaderName $newApiVersionSet.VersionHeaderName$api = Import-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -SpecificationPath $swaggerPath -SpecificationFormat Swagger -Path $path1Assert-AreEqual $swaggerApiId1 $api.ApiIdAssert-AreEqual $path1 $api.Path$api.ApiVersionSetId = $newApiVersionSet.Id$api.APIVersion = "v1"$api.ApiVersionSetDescription = $newApiVersionSet.Description$updatedApi = Set-AzApiManagementApi -InputObject $api -PassThruAssert-NotNull $updatedApiAssert-AreEqual $newApiVersionSet.Id $updatedApi.ApiVersionSetIdAssert-AreEqual $newApiVersionSet.Description $updatedApi.ApiVersionSetDescriptionAssert-AreEqual "v1" $updatedApi.ApiVersion}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId -PassThruAssert-True { $removed }}}function ApiVersionSet-ImportCrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$apiversionsets = Get-AzApiManagementApiVersionSet -Context $contextAssert-AreEqual 0 $apiversionsets.Count$swaggerApiId1 = getAssetName$newApiVersionSetId = getAssetNametry {$newVersionSetName = getAssetName$queryName = getAssetName$description = getAssetName$newApiVersionSet = New-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId -Name $newVersionSetName -Scheme Query `-QueryName $queryName -Description $descriptionAssert-AreEqual $newApiVersionSetId $newApiVersionSet.ApiVersionSetIdAssert-AreEqual $newVersionSetName $newApiVersionSet.DisplayNameAssert-AreEqual $description $newApiVersionSet.DescriptionAssert-AreEqual Query $newApiVersionSet.VersioningSchemeAssert-AreEqual $queryName $newApiVersionSet.VersionQueryNameAssert-Null $newApiVersionSet.VersionHeaderName$versionHeaderName = getAssetName$newApiVersionSet = Set-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId  `-Scheme Header -HeaderName $versionHeaderName -PassThruAssert-AreEqual $newApiVersionSetId $newApiVersionSet.ApiVersionSetIdAssert-AreEqual $newVersionSetName $newApiVersionSet.DisplayNameAssert-AreEqual $description $newApiVersionSet.DescriptionAssert-AreEqual Header $newApiVersionSet.VersioningSchemeAssert-AreEqual $versionHeaderName $newApiVersionSet.VersionHeaderName$newApiVersionSet = Get-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetIdAssert-AreEqual $newApiVersionSetId $newApiVersionSet.ApiVersionSetIdAssert-AreEqual $newVersionSetName $newApiVersionSet.DisplayNameAssert-AreEqual $description $newApiVersionSet.DescriptionAssert-AreEqual Header $newApiVersionSet.VersioningSchemeAssert-AreEqual $versionHeaderName $newApiVersionSet.VersionHeaderName$swaggerPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "SwaggerPetStoreV2.json"$path1 = "swaggerapifromFile"        $apiVersion = "2"$api = Import-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -SpecificationPath $swaggerPath -SpecificationFormat Swagger -Path $path1 -ApiVersion $apiVersion -ApiVersionSetId $newApiVersionSetIdAssert-NotNull $apiAssert-AreEqual $apiVersion $api.ApiVersionAssert-AreEqual $swaggerApiId1 $api.ApiIdAssert-AreEqual $path1 $api.PathAssert-AreEqual $newApiVersionSet.Id $api.ApiVersionSetId}finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementApiVersionSet -Context $context -ApiVersionSetId $newApiVersionSetId -PassThruAssert-True { $removed }}}function ApiRevision-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$swaggerPath = Join-Path (Join-Path "$TestOutputRoot" "Resources") "SwaggerPetStoreV2.json"$path1 = "swaggerapifromFile"$swaggerApiId1 = getAssetName$apiRevisionId = "2"$apiReleaseId = getAssetName$apiRevisionDescription = getAssetNametry {$api = Import-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -SpecificationPath $swaggerPath -SpecificationFormat Swagger -Path $path1Assert-AreEqual $swaggerApiId1 $api.ApiIdAssert-AreEqual $path1 $api.Path$product = Get-AzApiManagementProduct -Context $context | Select-Object -First 1Add-AzApiManagementApiToProduct -Context $context -ApiId $swaggerApiId1 -ProductId $product.ProductId$found = 0$apis = Get-AzApiManagementApi -Context $context -ProductId $product.ProductIdfor ($i = 0; $i -lt $apis.Count; $i++) {if ($apis[$i].ApiId -eq $swaggerApiId1) {$found = 1}}Assert-AreEqual 1 $found$originalOps = Get-AzApiManagementOperation -Context $context -ApiId $swaggerApiId1Assert-NotNull $originalOps$expectedApiId = [string]::Format("{0};rev={1}", $swaggerApiId1, $apiRevisionId) $apiRevision = New-AzApiManagementApiRevision -Context $context -ApiId $swaggerApiId1 -ApiRevision $apiRevisionId -SourceApiRevision "1" -ApiRevisionDescription $apiRevisionDescriptionAssert-AreEqual $expectedApiId $apiRevision.ApiIdAssert-AreEqual $apiRevisionId $apiRevision.ApiRevisionAssert-NotNull $apiRevision.ApiRevisionDescriptionAssert-AreEqual $apiRevisionDescription $apiRevision.ApiRevisionDescriptionAssert-AreEqual $path1 $apiRevision.Path        Assert-False { $apiRevision.IsCurrent }$revisionOperations = Get-AzApiManagementOperation -Context $context -ApiId $swaggerApiId1 -ApiRevision $apiRevisionIdAssert-NotNull $revisionOperationsAssert-AreEqual $originalOps.Count $revisionOperations.Count $apiRevisionDetails = Get-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -ApiRevision $apiRevisionIdAssert-AreEqual $expectedApiId $apiRevisionDetails.ApiIdAssert-AreEqual $path1 $apiRevisionDetails.PathAssert-AreEqual $apiRevisionId $apiRevisionDetails.ApiRevisionAssert-False { $apiRevisionDetails.IsCurrent }$apiRevisions = Get-AzApiManagementApiRevision -Context $context -ApiId $swaggerApiId1Assert-AreEqual 2 $apiRevisions.Count$apiReleaseNote = getAssetName$apiRelease = New-AzApiManagementApiRelease -Context $context -ApiId $swaggerApiId1 -ApiRevision $apiRevisionId `-ReleaseId $apiReleaseId -Note $apiReleaseNoteAssert-AreEqual $apiReleaseId $apiRelease.ReleaseIdAssert-AreEqual $swaggerApiId1 $apiRelease.ApiId$updateReleaseNote = getAssetName        $updateApiRelease = Update-AzApiManagementApiRelease -InputObject $apiRelease -Note $updateReleaseNote -PassThruAssert-NotNull $updateApiReleaseAssert-AreEqual $apiReleaseId $updateApiRelease.ReleaseIdAssert-AreEqual $swaggerApiId1 $updateApiRelease.ApiIdAssert-AreEqual $updateReleaseNote $updateApiRelease.Notes$apiReleases = Get-AzApiManagementApiRelease -Context $context -ApiId $swaggerApiId1Assert-AreEqual 1 $apiReleases.Count$result = Remove-AzApiManagementApiRevision -Context $context -ApiId $swaggerApiId1 -ApiRevision "1" -PassThruAssert-True { $result }        }finally {$removed = Remove-AzApiManagementApi -Context $context -ApiId $swaggerApiId1 -PassThruAssert-True { $removed }}}function Diagnostic-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$diagnostics = Get-AzApiManagementDiagnostic -Context $contextAssert-AreEqual 0 $diagnostics.Count$appInsightsLoggerId = getAssetName$newDiagnosticId = 'ApplicationInsights'try {$instrumentationKey = [guid]::newguid()$appInsightsLoggerDescription = getAssetName$applogger = New-AzApiManagementLogger -Context $context -LoggerId $appInsightsLoggerId -InstrumentationKey $instrumentationKey.Guid -Description $appInsightsLoggerDescriptionAssert-NotNull $apploggerAssert-AreEqual 'ApplicationInsights' $applogger.TypeAssert-AreEqual $appInsightsLoggerId $applogger.LoggerIdAssert-AreEqual $appInsightsLoggerDescription $applogger.Description$samplingSetting = New-AzApiManagementSamplingSetting -SamplingType Fixed -SamplingPercentage 100Assert-NotNull $samplingSetting$httpMessageDiagnostic = New-AzApiManagementHttpMessageDiagnostic -HeadersToLog 'Content-Type', 'UserAgent' -BodyBytesToLog 100Assert-NotNull $httpMessageDiagnostic$pipelineDiagnostic = New-AzApiManagementPipelineDiagnosticSetting -Request $httpMessageDiagnostic -Response $httpMessageDiagnosticAssert-NotNull $pipelineDiagnostic$diagnostic = New-AzApiManagementDiagnostic -LoggerId $applogger.LoggerId -Context $context -AlwaysLog AllErrors -SamplingSetting $samplingSetting `-FrontEndSetting $pipelineDiagnostic -BackendSetting $pipelineDiagnostic -DiagnosticId $newDiagnosticIdAssert-NotNull $diagnosticAssert-NotNull $diagnosticAssert-AreEqual $newDiagnosticId $diagnostic.DiagnosticIdAssert-AreEqual $applogger.LoggerId $diagnostic.LoggerIdAssert-AreEqual allErrors $diagnostic.AlwaysLogAssert-NotNull $diagnostic.SamplingSettingAssert-AreEqual fixed $diagnostic.SamplingSetting.SamplingTypeAssert-AreEqual 100 $diagnostic.SamplingSetting.SamplingPercentageAssert-NotNull $diagnostic.FrontendSettingAssert-AreEqual 'Content-Type' $diagnostic.FrontendSetting.Request.HeadersToLog[0]Assert-AreEqual 'UserAgent' $diagnostic.FrontendSetting.Request.HeadersToLog[1]Assert-AreEqual 'Content-Type' $diagnostic.FrontendSetting.Response.HeadersToLog[0]Assert-AreEqual 'UserAgent' $diagnostic.FrontendSetting.Response.HeadersToLog[1]Assert-NotNull $diagnostic.BackendSettingAssert-AreEqual 'Content-Type' $diagnostic.BackendSetting.Request.HeadersToLog[0]Assert-AreEqual 'UserAgent' $diagnostic.BackendSetting.Request.HeadersToLog[1]Assert-AreEqual 'Content-Type' $diagnostic.BackendSetting.Response.HeadersToLog[0]Assert-AreEqual 'UserAgent' $diagnostic.BackendSetting.Response.HeadersToLog[1]$diagnostic.BackendSetting = $null$diagnostic.SamplingSetting.SamplingPercentage = 50$updateDiagnostic = Set-AzApiManagementDiagnostic -InputObject $diagnostic -PassThruAssert-NotNull $updateDiagnostic        Assert-AreEqual $newDiagnosticId $updateDiagnostic.DiagnosticIdAssert-Null $updateDiagnostic.BackendSettingAssert-AreEqual $applogger.LoggerId $updateDiagnostic.LoggerIdAssert-AreEqual fixed $updateDiagnostic.SamplingSetting.SamplingTypeAssert-AreEqual 50 $updateDiagnostic.SamplingSetting.SamplingPercentage        Assert-NotNull $updateDiagnostic.FrontEndSettingAssert-AreEqual 'Content-Type' $updateDiagnostic.FrontendSetting.Request.HeadersToLog[0]Assert-AreEqual 'UserAgent' $updateDiagnostic.FrontendSetting.Request.HeadersToLog[1]Assert-AreEqual 'Content-Type' $updateDiagnostic.FrontendSetting.Response.HeadersToLog[0]Assert-AreEqual 'UserAgent' $updateDiagnostic.FrontendSetting.Response.HeadersToLog[1]$diagnostic = Get-AzApiManagementDiagnostic -Context $context -DiagnosticId $newDiagnosticIdAssert-NotNull $diagnosticAssert-AreEqual $newDiagnosticId $diagnostic.DiagnosticIdAssert-AreEqual $applogger.LoggerId $diagnostic.LoggerIdAssert-AreEqual allErrors $diagnostic.AlwaysLogAssert-NotNull $diagnostic.SamplingSettingAssert-AreEqual fixed $diagnostic.SamplingSetting.SamplingTypeAssert-AreEqual 50 $diagnostic.SamplingSetting.SamplingPercentageAssert-NotNull $diagnostic.FrontendSettingAssert-Null $diagnostic.BackendSetting$diagnostic = Get-AzApiManagementDiagnostic -ResourceId $diagnostic.IdAssert-NotNull $diagnosticAssert-AreEqual $newDiagnosticId $diagnostic.DiagnosticIdAssert-AreEqual $applogger.LoggerId $diagnostic.LoggerIdAssert-AreEqual allErrors $diagnostic.AlwaysLogAssert-NotNull $diagnostic.SamplingSettingAssert-AreEqual fixed $diagnostic.SamplingSetting.SamplingTypeAssert-AreEqual 50 $diagnostic.SamplingSetting.SamplingPercentageAssert-NotNull $diagnostic.FrontendSettingAssert-Null $diagnostic.BackendSettingRemove-AzApiManagementDiagnostic -Context $context -DiagnosticId $newDiagnosticId$diagnostics = Get-AzApiManagementDiagnostic -Context $contextAssert-AreEqual 0 $diagnostics.Count}finally {$removed = Remove-AzApiManagementDiagnostic -Context $context -DiagnosticId $newDiagnosticId -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementLogger -Context $context -LoggerId $appInsightsLoggerId -PassThruAssert-True { $removed }$properties = Get-AzApiManagementProperty -Context $contextfor ($i = 0; $i -lt $properties.Count; $i++) {Remove-AzApiManagementProperty -Context $context -PropertyId $properties[$i].PropertyId}}}function ApiDiagnostic-CrudTest {Param($resourceGroupName, $serviceName)$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName$apis = Get-AzApiManagementApi -Context $contextAssert-AreEqual 1 $apis.CountAssert-NotNull $apis[0].ApiIdAssert-AreEqual "Echo API" $apis[0].NameAssert-Null $apis[0].Description$diagnostics = Get-AzApiManagementDiagnostic -Context $context -ApiId $apis[0].ApiIdAssert-AreEqual 0 $diagnostics.Count$appInsightsLoggerId = getAssetName$newDiagnosticId = 'ApplicationInsights'try {$instrumentationKey = [guid]::newguid()$appInsightsLoggerDescription = getAssetName$applogger = New-AzApiManagementLogger -Context $context -LoggerId $appInsightsLoggerId -InstrumentationKey $instrumentationKey.Guid `-Description $appInsightsLoggerDescriptionAssert-NotNull $apploggerAssert-AreEqual 'ApplicationInsights' $applogger.TypeAssert-AreEqual $appInsightsLoggerId $applogger.LoggerIdAssert-AreEqual $appInsightsLoggerDescription $applogger.Description$samplingSetting = New-AzApiManagementSamplingSetting -SamplingType Fixed -SamplingPercentage 100Assert-NotNull $samplingSetting$httpMessageDiagnostic = New-AzApiManagementHttpMessageDiagnostic -HeadersToLog 'Content-Type', 'UserAgent' -BodyBytesToLog 100Assert-NotNull $httpMessageDiagnostic$pipelineDiagnostic = New-AzApiManagementPipelineDiagnosticSetting -Request $httpMessageDiagnostic -Response $httpMessageDiagnosticAssert-NotNull $pipelineDiagnostic$apiDiagnostic = New-AzApiManagementDiagnostic -Context $context -ApiId $apis[0].ApiId -LoggerId $applogger.LoggerId -AlwaysLog AllErrors -SamplingSetting $samplingSetting `-FrontEndSetting $pipelineDiagnostic -BackendSetting $pipelineDiagnostic -DiagnosticId $newDiagnosticIdAssert-NotNull $apiDiagnosticAssert-NotNull $apiDiagnosticAssert-AreEqual $apis[0].ApiId $apiDiagnostic.ApiIdAssert-AreEqual $applogger.LoggerId $apiDiagnostic.LoggerIdAssert-AreEqual $newDiagnosticId $apiDiagnostic.DiagnosticIdAssert-AreEqual allErrors $apiDiagnostic.AlwaysLogAssert-NotNull $apiDiagnostic.SamplingSettingAssert-AreEqual fixed $apiDiagnostic.SamplingSetting.SamplingTypeAssert-NotNull $apiDiagnostic.FrontendSettingAssert-AreEqual 'Content-Type' $apiDiagnostic.FrontendSetting.Request.HeadersToLog[0]Assert-AreEqual 'UserAgent' $apiDiagnostic.FrontendSetting.Request.HeadersToLog[1]Assert-AreEqual 'Content-Type' $apiDiagnostic.FrontendSetting.Response.HeadersToLog[0]Assert-AreEqual 'UserAgent' $apiDiagnostic.FrontendSetting.Response.HeadersToLog[1]Assert-NotNull $apiDiagnostic.BackendSettingAssert-AreEqual 'Content-Type' $apiDiagnostic.BackendSetting.Request.HeadersToLog[0]Assert-AreEqual 'UserAgent' $apiDiagnostic.BackendSetting.Request.HeadersToLog[1]Assert-AreEqual 'Content-Type' $apiDiagnostic.BackendSetting.Response.HeadersToLog[0]Assert-AreEqual 'UserAgent' $apiDiagnostic.BackendSetting.Response.HeadersToLog[1]$apiDiagnostic.BackendSetting = $null$apiDiagnostic.SamplingSetting.SamplingPercentage = 50$updateDiagnostic = Set-AzApiManagementDiagnostic -InputObject $apiDiagnostic -PassThruAssert-NotNull $updateDiagnostic  Assert-AreEqual $apis[0].ApiId $updateDiagnostic.ApiId      Assert-AreEqual $newDiagnosticId $updateDiagnostic.DiagnosticIdAssert-AreEqual $applogger.LoggerId $updateDiagnostic.LoggerIdAssert-Null $updateDiagnostic.BackendSettingAssert-AreEqual fixed $updateDiagnostic.SamplingSetting.SamplingTypeAssert-AreEqual 50 $updateDiagnostic.SamplingSetting.SamplingPercentage        Assert-NotNull $updateDiagnostic.FrontendSettingAssert-AreEqual 'Content-Type' $updateDiagnostic.FrontendSetting.Request.HeadersToLog[0]Assert-AreEqual 'UserAgent' $updateDiagnostic.FrontendSetting.Request.HeadersToLog[1]Assert-AreEqual 'Content-Type' $updateDiagnostic.FrontendSetting.Response.HeadersToLog[0]Assert-AreEqual 'UserAgent' $updateDiagnostic.FrontendSetting.Response.HeadersToLog[1]$diagnostic = Get-AzApiManagementDiagnostic -Context $context -DiagnosticId $newDiagnosticId -ApiId $apis[0].ApiIdAssert-NotNull $diagnosticAssert-AreEqual $apis[0].ApiId $diagnostic.ApiIdAssert-AreEqual $applogger.LoggerId $diagnostic.LoggerIdAssert-AreEqual $newDiagnosticId $diagnostic.DiagnosticIdAssert-AreEqual allErrors $diagnostic.AlwaysLogAssert-NotNull $diagnostic.SamplingSettingAssert-AreEqual fixed $diagnostic.SamplingSetting.SamplingTypeAssert-AreEqual 50 $diagnostic.SamplingSetting.SamplingPercentageAssert-NotNull $diagnostic.FrontendSettingAssert-Null $diagnostic.BackendSetting$diagnostic = Get-AzApiManagementDiagnostic -ResourceId $diagnostic.IdAssert-NotNull $diagnosticAssert-AreEqual $newDiagnosticId $diagnostic.DiagnosticIdAssert-AreEqual allErrors $diagnostic.AlwaysLogAssert-NotNull $diagnostic.SamplingSettingAssert-AreEqual fixed $diagnostic.SamplingSetting.SamplingTypeAssert-AreEqual 50 $diagnostic.SamplingSetting.SamplingPercentageAssert-NotNull $diagnostic.FrontendSettingAssert-Null $diagnostic.BackendSettingRemove-AzApiManagementDiagnostic -Context $context -DiagnosticId $newDiagnosticId -ApiId $apis[0].ApiId$diagnostics = Get-AzApiManagementDiagnostic -Context $context -ApiId $apis[0].ApiIdAssert-AreEqual 0 $diagnostics.Count}finally {$removed = Remove-AzApiManagementDiagnostic -Context $context -DiagnosticId $newDiagnosticId -ApiId $apis[0].ApiId -PassThruAssert-True { $removed }$removed = Remove-AzApiManagementLogger -Context $context -LoggerId $appInsightsLoggerId -PassThruAssert-True { $removed }$properties = Get-AzApiManagementProperty -Context $contextfor ($i = 0; $i -lt $properties.Count; $i++) {Remove-AzApiManagementProperty -Context $context -PropertyId $properties[$i].PropertyId}}}