$username = 'CarbonInstallUser'$password = 'IM33tRequ!rem$'function Start-TestFixture{& (Join-Path -Path $PSScriptRoot -ChildPath '..\Initialize-CarbonTest.ps1' -Resolve)}function Start-Test{Remove-TestUser}function Stop-Test{Remove-TestUser}function Remove-TestUser{Uninstall-User -Username $username}function Test-ShouldCreateNewUser{$warnings = @()$fullName = 'Carbon Install User'$description = "Test user for testing the Carbon Install-User function."$user = Install-User -UserName $username -Password $password -Description $description -FullName $fullName -PassThru -WarningVariable 'warnings'Assert-NotNull $usertry{Assert-Is $user ([DirectoryServices.AccountManagement.UserPrincipal])Assert-True (Test-User -Username $username)}finally{$user.Dispose()}[DirectoryServices.AccountManagement.UserPrincipal]$user = Get-User -Username $usernameAssert-NotNull $usertry{Assert-Equal $description $user.DescriptionAssert-True $user.PasswordNeverExpires Assert-True $user.EnabledAssert-Equal $username $user.SamAccountNameAssert-False $user.UserCannotChangePasswordAssert-Equal $fullName $user.DisplayNameAssert-Credential -Password $passwordAssert-Equal 1 $warnings.CountAssert-Like $warnings[0] '*obsolete*'}finally{$user.Dispose()}}function Test-ShouldCreateNewUserWithCredential{$fullName = 'Carbon Install User'$description = "Test user for testing the Carbon Install-User function."$c = New-Credential -UserName $username -Password $password$user = Install-User -Credential $c -Description $description -FullName $fullName -PassThruAssert-NotNull $usertry{Assert-Is $user ([DirectoryServices.AccountManagement.UserPrincipal])Assert-True (Test-User -Username $username)}finally{$user.Dispose()}[DirectoryServices.AccountManagement.UserPrincipal]$user = Get-User -Username $usernameAssert-NotNull $usertry{Assert-Equal $description $user.DescriptionAssert-True $user.PasswordNeverExpires Assert-True $user.EnabledAssert-Equal $username $user.SamAccountNameAssert-False $user.UserCannotChangePasswordAssert-Equal $fullName $user.DisplayNameAssert-Credential -Password $password}finally{$user.Dispose()}}function Test-ShouldUpdateExistingUsersProperties{$fullName = 'Carbon Install User'$result = Install-User -Username $username -Password $password -Description "Original description" -FullName $fullNameAssert-Null $result$originalUser = Get-User -Username $usernameAssert-NotNull $originalUsertry{$newFullName = 'New {0}' -f $fullName$newDescription = "New description"$newPassword = 'IM33tRequ!re$2'$result = Install-User -Username $username `-Password $newPassword `-Description $newDescription `-FullName $newFullName `-UserCannotChangePassword `-PasswordExpires try{Assert-Null $result}finally{if( $result ){$result.Dispose()}}[DirectoryServices.AccountManagement.UserPrincipal]$newUser = Get-User -Username $usernameAssert-NotNull $newUsertry{Assert-Equal $originalUser.SID $newUser.SIDAssert-Equal $newDescription $newUser.DescriptionAssert-Equal $newFullName $newUser.DisplayNameAssert-False $newUser.PasswordNeverExpiresAssert-True $newUser.UserCannotChangePasswordAssert-Credential -Password $newPassword}finally{$newUser.Dispose()}}finally{$originalUser.Dispose()}}function Test-ShouldUpdateExistingUsersPropertiesWithCredential{$fullName = 'Carbon Install User'$credential = New-Credential -Username $username -Password $password$result = Install-User -Credential $credential -Description "Original description" -FullName $fullNametry{Assert-Null $result}finally{if( $result ){$result.Dispose()}}$originalUser = Get-User -Username $usernameAssert-NotNull $originalUsertry{$newFullName = 'New {0}' -f $fullName$newDescription = "New description"$newPassword = [Guid]::NewGuid().ToString().Substring(0,14)$credential = New-Credential -UserName $username -Password $newPassword$result = Install-User -Credential $credential `-Description $newDescription `-FullName $newFullName `-UserCannotChangePassword `-PasswordExpires try{Assert-Null $result}finally{if( $result ){$result.Dispose()}}[DirectoryServices.AccountManagement.UserPrincipal]$newUser = Get-User -Username $usernameAssert-NotNull $newUsertry{Assert-Equal $originalUser.SID $newUser.SIDAssert-Equal $newDescription $newUser.DescriptionAssert-Equal $newFullName $newUser.DisplayNameAssert-False $newUser.PasswordNeverExpiresAssert-True $newUser.UserCannotChangePasswordAssert-Credential -Password $newPassword}finally{$newUser.Dispose()}}finally{$originalUser.Dispose()}}function Test-ShouldAllowOptionalFullName{$fullName = 'Carbon Install User'$description = "Test user for testing the Carbon Install-User function."$result = Install-User -Username $username -Password $password -Description $descriptiontry{Assert-Null $result}finally{if( $result ){$result.Dispose()}}$user = Get-User -Username $Usernametry{Assert-Null $user.DisplayName}finally{$user.Dispose()}}function Test-ShouldSupportWhatIf{$user = Install-User -Username $username -Password $password -WhatIf -PassThrutry{Assert-NotNull $user}finally{$user.Dispose()}$user = Get-User -Username $username -ErrorAction SilentlyContinuetry{Assert-Null $user}finally{if( $user ){$user.Dispose()}}}function Assert-Credential{param($Password)try{$ctx = [DirectoryServices.AccountManagement.ContextType]::Machine$px = New-Object 'DirectoryServices.AccountManagement.PrincipalContext' $ctx,$env:COMPUTERNAMEAssert-True ($px.ValidateCredentials( $username, $password ))}finally{$px.Dispose()}}