$Mod = New-InMemoryModule -ModuleName Win32$ImageDosSignature = psenum $Mod PE.IMAGE_DOS_SIGNATURE UInt16 @{DOS_SIGNATURE =    0x5A4DOS2_SIGNATURE =    0x454EOS2_SIGNATURE_LE = 0x454CVXD_SIGNATURE =    0x454C}$ImageFileMachine = psenum $Mod PE.IMAGE_FILE_MACHINE UInt16 @{UNKNOWN =   0x0000I386 =      0x014C R3000 =     0x0162 R4000 =     0x0166 R10000 =    0x0168 WCEMIPSV2 = 0x0169 ALPHA =     0x0184 SH3 =       0x01A2 SH3DSP =    0x01A3SH3E =      0x01A4 SH4 =       0x01A6 SH5 =       0x01A8 ARM =       0x01C0 THUMB =     0x01C2ARMNT =     0x01C4 AM33 =      0x01D3POWERPC =   0x01F0 POWERPCFP = 0x01F1IA64 =      0x0200 MIPS16 =    0x0266 ALPHA64 =   0x0284 MIPSFPU =   0x0366 MIPSFPU16 = 0x0466 TRICORE =   0x0520 CEF =       0x0CEFEBC =       0x0EBC AMD64 =     0x8664 M32R =      0x9041 CEE =       0xC0EE}$ImageFileCharacteristics = psenum $Mod PE.IMAGE_FILE_CHARACTERISTICS UInt16 @{IMAGE_RELOCS_STRIPPED =         0x0001 IMAGE_EXECUTABLE_IMAGE =        0x0002 IMAGE_LINE_NUMS_STRIPPED =      0x0004 IMAGE_LOCAL_SYMS_STRIPPED =     0x0008 IMAGE_AGGRESIVE_WS_TRIM =       0x0010 IMAGE_LARGE_ADDRESS_AWARE =     0x0020 IMAGE_REVERSED_LO =             0x0080 IMAGE_32BIT_MACHINE =           0x0100 IMAGE_DEBUG_STRIPPED =          0x0200 IMAGE_REMOVABLE_RUN_FROM_SWAP = 0x0400 IMAGE_NET_RUN_FROM_SWAP =       0x0800 IMAGE_SYSTEM =                  0x1000 IMAGE_DLL =                     0x2000 IMAGE_UP_SYSTEM_ONLY =          0x4000 IMAGE_REVERSED_HI =             0x8000 } -Bitfield$ImageHdrMagic = psenum $Mod PE.IMAGE_NT_OPTIONAL_HDR_MAGIC UInt16 @{PE32 = 0x010BPE64 = 0x020B}$ImageNTSig = psenum $Mod PE.IMAGE_NT_SIGNATURE UInt32 @{VALID_PE_SIGNATURE = 0x00004550}$ImageSubsystem = psenum $Mod PE.IMAGE_SUBSYSTEM UInt16 @{UNKNOWN =                  0NATIVE =                   1 WINDOWS_GUI =              2 WINDOWS_CUI =              3 OS2_CUI =                  5 POSIX_CUI =                7 NATIVE_WINDOWS =           8 WINDOWS_CE_GUI =           9 EFI_APPLICATION =          10EFI_BOOT_SERVICE_DRIVER =  11EFI_RUNTIME_DRIVER =       12EFI_ROM =                  13XBOX =                     14WINDOWS_BOOT_APPLICATION = 16}$ImageDllCharacteristics = psenum $Mod PE.IMAGE_DLLCHARACTERISTICS UInt16 @{HIGH_ENTROPY_VA =       0x0020 DYNAMIC_BASE =          0x0040 FORCE_INTEGRITY =       0x0080 NX_COMPAT =             0x0100 NO_ISOLATION =          0x0200 NO_SEH =                0x0400 NO_BIND =               0x0800 WDM_DRIVER =            0x2000 TERMINAL_SERVER_AWARE = 0x8000} -Bitfield$ImageScn = psenum $Mod PE.IMAGE_SCN Int32 @{TYPE_NO_PAD =               0x00000008 CNT_CODE =                  0x00000020 CNT_INITIALIZED_DATA =      0x00000040 CNT_UNINITIALIZED_DATA =    0x00000080 LNK_INFO =                  0x00000200 LNK_REMOVE =                0x00000800 LNK_COMDAT =                0x00001000 NO_DEFER_SPEC_EXC =         0x00004000 GPREL =                     0x00008000 MEM_FARDATA =               0x00008000MEM_PURGEABLE =             0x00020000MEM_16BIT =                 0x00020000MEM_LOCKED =                0x00040000MEM_PRELOAD =               0x00080000ALIGN_1BYTES =              0x00100000ALIGN_2BYTES =              0x00200000ALIGN_4BYTES =              0x00300000ALIGN_8BYTES =              0x00400000ALIGN_16BYTES =             0x00500000 ALIGN_32BYTES =             0x00600000ALIGN_64BYTES =             0x00700000ALIGN_128BYTES =            0x00800000ALIGN_256BYTES =            0x00900000ALIGN_512BYTES =            0x00A00000ALIGN_1024BYTES =           0x00B00000ALIGN_2048BYTES =           0x00C00000ALIGN_4096BYTES =           0x00D00000ALIGN_8192BYTES =           0x00E00000ALIGN_MASK =                0x00F00000LNK_NRELOC_OVFL =           0x01000000 MEM_DISCARDABLE =           0x02000000 MEM_NOT_CACHED =            0x04000000 MEM_NOT_PAGED =             0x08000000 MEM_SHARED =                0x10000000 MEM_EXECUTE =               0x20000000 MEM_READ =                  0x40000000 MEM_WRITE =                 0x80000000 } -Bitfield$ImageDosHeader = struct $Mod PE.IMAGE_DOS_HEADER @{e_magic =    field 0 $ImageDosSignaturee_cblp =     field 1 UInt16e_cp =       field 2 UInt16e_crlc =     field 3 UInt16e_cparhdr =  field 4 UInt16e_minalloc = field 5 UInt16e_maxalloc = field 6 UInt16e_ss =       field 7 UInt16e_sp =       field 8 UInt16e_csum =     field 9 UInt16e_ip =       field 10 UInt16e_cs =       field 11 UInt16e_lfarlc =   field 12 UInt16e_ovno =     field 13 UInt16e_res =      field 14 UInt16[] -MarshalAs @('ByValArray', 4)e_oemid =    field 15 UInt16e_oeminfo =  field 16 UInt16e_res2 =     field 17 UInt16[] -MarshalAs @('ByValArray', 10)e_lfanew =   field 18 Int32}$ImageFileHeader = struct $Mod PE.IMAGE_FILE_HEADER @{Machine = field 0 $ImageFileMachineNumberOfSections = field 1 UInt16TimeDateStamp = field 2 UInt32PointerToSymbolTable = field 3 UInt32NumberOfSymbols = field 4 UInt32SizeOfOptionalHeader = field 5 UInt16Characteristics  = field 6 $ImageFileCharacteristics}$PeImageDataDir = struct $Mod PE.IMAGE_DATA_DIRECTORY @{VirtualAddress = field 0 UInt32Size = field 1 UInt32}$ImageOptionalHdr = struct $Mod PE.IMAGE_OPTIONAL_HEADER @{Magic = field 0 $ImageHdrMagicMajorLinkerVersion = field 1 ByteMinorLinkerVersion = field 2 ByteSizeOfCode = field 3 UInt32SizeOfInitializedData = field 4 UInt32SizeOfUninitializedData = field 5 UInt32AddressOfEntryPoint = field 6 UInt32BaseOfCode = field 7 UInt32BaseOfData = field 8 UInt32ImageBase = field 9 UInt32SectionAlignment = field 10 UInt32FileAlignment = field 11 UInt32MajorOperatingSystemVersion = field 12 UInt16MinorOperatingSystemVersion = field 13 UInt16MajorImageVersion = field 14 UInt16MinorImageVersion = field 15 UInt16MajorSubsystemVersion = field 16 UInt16MinorSubsystemVersion = field 17 UInt16Win32VersionValue = field 18 UInt32SizeOfImage = field 19 UInt32SizeOfHeaders = field 20 UInt32CheckSum = field 21 UInt32Subsystem = field 22 $ImageSubsystemDllCharacteristics = field 23 $ImageDllCharacteristicsSizeOfStackReserve = field 24 UInt32SizeOfStackCommit = field 25 UInt32SizeOfHeapReserve = field 26 UInt32SizeOfHeapCommit = field 27 UInt32LoaderFlags = field 28 UInt32NumberOfRvaAndSizes = field 29 UInt32DataDirectory = field 30 $PeImageDataDir.MakeArrayType() -MarshalAs @('ByValArray', 16)}$ImageOptionalHdr64 = struct $Mod PE.IMAGE_OPTIONAL_HEADER64 @{Magic = field 0 $ImageHdrMagicMajorLinkerVersion = field 1 ByteMinorLinkerVersion = field 2 ByteSizeOfCode = field 3 UInt32SizeOfInitializedData = field 4 UInt32SizeOfUninitializedData = field 5 UInt32AddressOfEntryPoint = field 6 UInt32BaseOfCode = field 7 UInt32ImageBase = field 8 UInt64SectionAlignment = field 9 UInt32FileAlignment = field 10 UInt32MajorOperatingSystemVersion = field 11 UInt16MinorOperatingSystemVersion = field 12 UInt16MajorImageVersion = field 13 UInt16MinorImageVersion = field 14 UInt16MajorSubsystemVersion = field 15 UInt16MinorSubsystemVersion = field 16 UInt16Win32VersionValue = field 17 UInt32SizeOfImage = field 18 UInt32SizeOfHeaders = field 19 UInt32CheckSum = field 20 UInt32Subsystem = field 21 $ImageSubsystemDllCharacteristics = field 22 $ImageDllCharacteristicsSizeOfStackReserve = field 23 UInt64SizeOfStackCommit = field 24 UInt64SizeOfHeapReserve = field 25 UInt64SizeOfHeapCommit = field 26 UInt64LoaderFlags = field 27 UInt32NumberOfRvaAndSizes = field 28 UInt32DataDirectory = field 29 $PeImageDataDir.MakeArrayType() -MarshalAs @('ByValArray', 16)}$ImageNTHdrs = struct $mod PE.IMAGE_NT_HEADERS @{Signature = field 0 $ImageNTSigFileHeader = field 1 $ImageFileHeaderOptionalHeader = field 2 $ImageOptionalHdr}$ImageNTHdrs64 = struct $mod PE.IMAGE_NT_HEADERS64 @{Signature = field 0 $ImageNTSigFileHeader = field 1 $ImageFileHeaderOptionalHeader = field 2 $ImageOptionalHdr64}$FunctionDefinitions = @((func kernel32 GetProcAddress ([IntPtr]) @([IntPtr], [String])),(func kernel32 GetModuleHandle ([Intptr]) @([String])),(func ntdll RtlGetCurrentPeb ([IntPtr]) @()))$Types = $FunctionDefinitions | Add-Win32Type -Module $Mod -Namespace 'Win32'$Kernel32 = $Types['kernel32']$Ntdll = $Types['ntdll']$ntdllbase = $Kernel32::GetModuleHandle('ntdll')$DosHeader = $ntdllbase -as $ImageDosHeader$NtHeaderOffset = [IntPtr] ($ntdllbase.ToInt64() + $DosHeader.e_lfanew)$NTHeader = $NtHeaderOffset -as $ImageNTHdrsif ($NtHeader.OptionalHeader.Magic -eq 'PE64'){$NTHeader = $NtHeaderOffset -as $ImageNTHdrs64}$NtHeader.FileHeader$NtHeader.OptionalHeader$NtHeader.OptionalHeader.DataDirectory$Bytes = [IO.File]::ReadAllBytes('C:\Windows\System32\kernel32.dll')$Handle = [Runtime.InteropServices.GCHandle]::Alloc($Bytes, 'Pinned')$PEBaseAddr = $Handle.AddrOfPinnedObject()$DosHeader = $PEBaseAddr -as $ImageDosHeader$NtHeaderOffset = [IntPtr] ($PEBaseAddr.ToInt64() + $DosHeader.e_lfanew)$NTHeader = $NtHeaderOffset -as $ImageNTHdrsif ($NtHeader.OptionalHeader.Magic -eq 'PE64'){$NTHeader = $NtHeaderOffset -as $ImageNTHdrs64}$NtHeader.FileHeader$NtHeader.OptionalHeader$NtHeader.OptionalHeader.DataDirectory