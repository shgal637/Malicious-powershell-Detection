function Test-ExportDatabase{$testSuffix = 90063$createServer = $true$createDatabase = $true$createFirewallRule = $true$operationName = "Export"$succeeded = $true     Verify-ImportExport $testSuffix $createServer $createDatabase $createFirewallRule $operationName $succeeded}function Test-ImportDatabase{$testSuffix = 90062$createServer = $true$createDatabase = $false$createFirewallRule = $true$operationName = "Import"$succeeded = $trueVerify-ImportExport $testSuffix $createServer $createDatabase $createFirewallRule $operationName $succeeded}function Verify-ImportExport($testSuffix, $createServer, $createDatabase, $createFirewallRule, $operationName, $succeeded){$params = Get-SqlDatabaseImportExportTestEnvironmentParameters  $testSuffix$rg = New-AzResourceGroup -Name $params.rgname -Location $params.location$export = "Export"$import = "Import"try{       Assert-NotNull $params.storageKeyAssert-NotNull $params.importBacpacUriAssert-NotNull $params.exportBacpacUri$password = $params.password$secureString = ($password | ConvertTo-SecureString -asPlainText -Force) $credentials = new-object System.Management.Automation.PSCredential($params.userName, $secureString) 	if($createServer -eq $true){$server = New-AzSqlServer -ResourceGroupName  $params.rgname -ServerName $params.serverName -ServerVersion $params.version -Location $params.location -SqlAdministratorCredentials $credentials       }if($createDatabase -eq $true){$standarddb = New-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName}if($createFirewallRule -eq $true){New-AzSqlServerFirewallRule -ResourceGroupName  $params.rgname -ServerName $params.serverName -AllowAllAzureIPs}$operationStatusLink = ""if($operationName -eq $export){$exportResponse = New-AzSqlDatabaseExport -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageKeyType $params.storageKeyType -StorageKey $params.storageKey -StorageUri $params.exportBacpacUri -AdministratorLogin $params.userName -AdministratorLoginPassword $secureString -AuthenticationType $params.authTypeAssert-NotNull $exportResponse$operationStatusLink = $exportResponse.OperationStatusLink        Assert-AreEqual $exportResponse.ResourceGroupName $params.rgnameAssert-AreEqual $exportResponse.ServerName $params.serverNameAssert-AreEqual $exportResponse.DatabaseName $params.databaseNameAssert-AreEqual $exportResponse.StorageKeyType $params.storageKeyTypeAssert-Null $exportResponse.StorageKeyAssert-AreEqual $exportResponse.StorageUri $params.exportBacpacUriAssert-AreEqual $exportResponse.AdministratorLogin $params.userNameAssert-Null $exportResponse.AdministratorLoginPasswordAssert-AreEqual $exportResponse.AuthenticationType $params.authType}if($operationName -eq $import){$importResponse = New-AzSqlDatabaseImport -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -StorageKeyType $params.storageKeyType -StorageKey $params.storageKey -StorageUri $params.importBacpacUri -AdministratorLogin $params.userName -AdministratorLoginPassword $secureString -Edition $params.databaseEdition -ServiceObjectiveName $params.serviceObjectiveName -DatabaseMaxSizeBytes $params.databaseMaxSizeBytes -AuthenticationType $params.authTypeAssert-NotNull $importResponse$operationStatusLink = $importResponse.OperationStatusLinkAssert-AreEqual $importResponse.ResourceGroupName $params.rgnameAssert-AreEqual $importResponse.ServerName $params.serverNameAssert-AreEqual $importResponse.DatabaseName $params.databaseNameAssert-AreEqual $importResponse.StorageKeyType $params.storageKeyTypeAssert-Null $importResponse.StorageKeyAssert-AreEqual $importResponse.StorageUri $params.importBacpacUriAssert-AreEqual $importResponse.AdministratorLogin $params.userNameAssert-Null $importResponse.AdministratorLoginPasswordAssert-AreEqual $importResponse.AuthenticationType $params.authTypeAssert-AreEqual $importResponse.Edition $params.databaseEditionAssert-AreEqual $importResponse.ServiceObjectiveName $params.serviceObjectiveNameAssert-AreEqual $importResponse.DatabaseMaxSizeBytes $params.databaseMaxSizeBytes}Assert-NotNull $operationStatusLink		$statusInProgress = "InProgress"$statusSucceeded = "Succeeded"$status = "InProgress"if($succeeded -eq $true){Write-Output "Getting Status" while($status -eq $statusInProgress){$statusResponse = Get-AzSqlDatabaseImportExportStatus -OperationStatusLink $operationStatusLinkWrite-Output "Import Export Status Message:" + $statusResponse.StatusMessage  Assert-AreEqual $statusResponse.OperationStatusLink $operationStatusLink$status = $statusResponse.Statusif($status -eq $statusInProgress){Assert-NotNull $statusResponse.LastModifiedTimeAssert-NotNull $statusResponse.QueuedTimeAssert-NotNull $statusResponse.StatusMessage}}Assert-AreEqual $status $statusSucceededWrite-Output "ImportExportStatus:" + $status }      }finally{Remove-ResourceGroupForTest $rg}}