function C2-Viewer{[CmdletBinding(DefaultParameterSetName = "FolderPath")]Param([Parameter(ParameterSetName = "FolderPath", Mandatory = $false)][string]$FolderPath,[string]$PoshPath)if (!$FolderPath) {$FolderPath = Read-Host -Prompt `n'Enter the root folder path of the Database/Project'}if (!$PoshPath) {$PoshPath = Read-Host -Prompt `n'Enter the PoshC2 path'}$slash = $FolderPath -match '.+[^\\]\\$'if ($slash) {$FolderPath = $FolderPath.TrimEnd('\')}$defaultrows = 10$prompt = Read-Host -Prompt "How many previous rows do you want to show, Number or ALL? [$($defaultrows)]"$defaultrows = ($defaultrows,$prompt)[[bool]$prompt]if ($defaultrows -eq "ALL"){[INT]$defaultrowstotal=99999} else {[INT]$defaultrowstotal=[INT]$defaultrows}Clear-HostWrite-Host -Object ""Write-Host -Object "__________            .__.     _________  ________  "  -ForegroundColor GreenWrite-Host -Object "\_______  \____  _____|  |__   \_   ___ \ \_____  \ "  -ForegroundColor GreenWrite-Host -Object " |     ___/  _ \/  ___/  |  \  /    \  \/  /  ____/ "  -ForegroundColor GreenWrite-Host -Object " |    |  (  <_> )___ \|   Y  \ \     \____/       \ "  -ForegroundColor GreenWrite-Host -Object " |____|   \____/____  >___|  /  \______  /\_______ \"  -ForegroundColor GreenWrite-Host -Object "                    \/     \/          \/         \/"  -ForegroundColor GreenWrite-Host "=============== v2.2 www.PoshC2.co.uk ==============" -ForegroundColor GreenWrite-Host "====================================================" `n -ForegroundColor Green$Database = "$FolderPath\PowershellC2.SQLite"$p = $env:PsModulePath$p += ";$PoshPath"[Environment]::SetEnvironmentVariable("PSModulePath",$p)Import-Module -Name PSSQLiteStart-Process powershell.exe -ArgumentList "-exec bypass -c import-module $poshpath\implant-handler.ps1; Implant-Handler -FolderPath '$folderpath' -PoshPath '$poshpath'"$count = Invoke-SqliteQuery -DataSource $Database -Query "SELECT COUNT() FROM CompletedTasks" -as SingleValue$resultsdb = Invoke-SqliteQuery -DataSource $Database -Query "SELECT * FROM CompletedTasks ORDER BY CompletedTaskID DESC LIMIT $defaultrowstotal" -as PSObjectforeach ($test in $resultsdb){$ranuri = $test.RandomURI$im_result = Invoke-SqliteQuery -DataSource $Database -Query "SELECT * FROM Implants WHERE RandomURI='$ranuri'" -as PSObject$implanthost = $im_result.User$im = Invoke-SqliteQuery -DataSource $Database -Query "SELECT User FROM Implants WHERE RandomURI='$ranuri'" -as SingleValue$taskcompledtime = $test.TaskIDWrite-Host $test.Command -ForegroundColor YellowWrite-Host "Command returned against host:" $im_result.Hostname $im_result.Domain "($taskcompledtime)" -ForegroundColor GreenWrite-Host -Object $test.Output -ForegroundColor Green$taskiddb ++}$count ++while ($true) {$resultsdb = Invoke-SqliteQuery -DataSource $Database -Query "SELECT * FROM CompletedTasks WHERE CompletedTaskID=$count" -as PSObjectif ($resultsdb){$ranuri = $resultsdb.RandomURI$im_result = Invoke-SqliteQuery -DataSource $Database -Query "SELECT * FROM Implants WHERE RandomURI='$ranuri'" -as PSObject$implanthost = $im_result.User$im = Invoke-SqliteQuery -DataSource $Database -Query "SELECT User FROM Implants WHERE RandomURI='$ranuri'" -as SingleValue$taskcompledtime = $resultsdb.TaskIDWrite-Host $resultsdb.Command -ForegroundColor YellowWrite-Host "Command returned against host:" $im_result.Hostname $im_result.Domain "($taskcompledtime)" -ForegroundColor GreenWrite-Host -Object $resultsdb.Output -ForegroundColor Green$taskiddb ++$count ++}}}