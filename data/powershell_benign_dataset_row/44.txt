[CmdletBinding(DefaultParameterSetName="NormalRun")]Param([parameter(Mandatory=$true,ParameterSetName="NormalRun")][alias("sa")][ValidateScript({if ($_ -match ".\\."){$True}else {Throw "Please use the format Domain\Username for the NDES Service Account variable."}$EnteredDomain = $_.split("\")$ads = New-Object -ComObject ADSystemInfo$Domain = $ads.GetType().InvokeMember('DomainShortName','GetProperty', $Null, $ads, $Null)if ($EnteredDomain -like "$Domain") {$True}else {Throw "Incorrect Domain. Ensure domain is '$($Domain)\<USERNAME>'"}})][string]$NDESServiceAccount,[parameter(Mandatory=$true,ParameterSetName="NormalRun")][alias("ca")][ValidateScript({$Domain = (Get-WmiObject Win32_ComputerSystem).domainif ($_ -match $Domain) {$True}else {Throw "The Network Device Enrollment Server and the Certificate Authority are not members of the same Active Directory domain. This is an unsupported configuration."}})][string]$IssuingCAServerFQDN,[parameter(Mandatory=$true,ParameterSetName="NormalRun")][alias("t")][string]$SCEPUserCertTemplate,[parameter(ParameterSetName="Help")][alias("h","?","/?")][switch]$help,[parameter(ParameterSetName="Help")][alias("u")][switch]$usage  )Function Log-ScriptEvent {[CmdletBinding()]Param([parameter(Mandatory=$True)][String]$LogFilePath,[parameter(Mandatory=$True)][String]$Value,[parameter(Mandatory=$True)][String]$Component,[parameter(Mandatory=$True)][ValidateRange(1,3)][Single]$Severity)$DateTime = New-Object -ComObject WbemScripting.SWbemDateTime $DateTime.SetVarDate($(Get-Date))$UtcValue = $DateTime.Value$UtcOffset = $UtcValue.Substring(21, $UtcValue.Length - 21)$LogLine =  "<![LOG[$Value]LOG]!>" +`"<time=`"$(Get-Date -Format HH:mm:ss.fff)$($UtcOffset)`" " +`"date=`"$(Get-Date -Format M-d-yyyy)`" " +`"component=`"$Component`" " +`"context=`"$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)`" " +`"type=`"$Severity`" " +`"thread=`"$([Threading.Thread]::CurrentThread.ManagedThreadId)`" " +`"file=`"`">"Add-Content -Path $LogFilePath -Value $LogLine}function Show-Usage {Write-HostWrite-Host "-help                       -h         Displays the help."Write-Host "-usage                      -u         Displays this usage information."Write-Host "-NDESExternalHostname       -ed        External DNS name for the NDES server (SSL certificate subject will be checked for this. It should be in the SAN of the certificate if" write-host "                                       clients communicate directly with the NDES server)"Write-Host "-NDESServiceAccount         -sa        Username of the NDES service account. Format is Domain\sAMAccountName, such as Contoso\NDES_SVC."Write-Host "-IssuingCAServerFQDN        -ca        Name of the issuing CA to which you'll be connecting the NDES server.  Format is FQDN, such as 'MyIssuingCAServer.contoso.com'."Write-Host "-SCEPUserCertTemplate       -t         Name of the SCEP Certificate template. Please note this is _not_ the display name of the template. Value should not contain spaces." Write-Host}function Get-NDESHelp {Write-HostWrite-Host "Verifies if the NDES server meets all the required configuration. "Write-HostWrite-Host "The NDES server role is required as back-end infrastructure for Intune Standalone for delivering VPN and Wi-Fi certificates via the SCEP protocol to mobile devices and desktop clients."Write-Host "See https://docs.microsoft.com/en-us/intune/certificates-scep-configure."Write-Host}if ($help){Get-NDESHelpbreak}if ($usage){Show-Usagebreak}$parent = [System.IO.Path]::GetTempPath()[string] $name = [System.Guid]::NewGuid()New-Item -ItemType Directory -Path (Join-Path $parent $name) | Out-Null$TempDirPath = "$parent$name"$LogFilePath = "$($TempDirPath)\Validate-NDESConfig.log"Write-HostWrite-host "......................................................."Write-HostWrite-Host "NDES Service Account = "-NoNewline Write-Host "$($NDESServiceAccount)" -ForegroundColor CyanWrite-hostWrite-Host "Issuing CA Server = " -NoNewlineWrite-Host "$($IssuingCAServerFQDN)" -ForegroundColor CyanWrite-hostWrite-Host "SCEP Certificate Template = " -NoNewlineWrite-Host "$($SCEPUserCertTemplate)" -ForegroundColor CyanWrite-HostWrite-host "......................................................."Write-HostWrite-Host "Proceed with variables? [Y]es, [N]o"$confirmation = Read-Hostif ($confirmation -eq 'y'){Write-HostWrite-host "......................................................."Log-ScriptEvent $LogFilePath "Initializing log file $($TempDirPath)\Validate-NDESConfig.log"  NDES_Validation 1Log-ScriptEvent $LogFilePath "Proceeding with variables=YES"  NDES_Validation 1Log-ScriptEvent $LogFilePath "NDESServiceAccount=$($NDESServiceAccount)" NDES_Validation 1Log-ScriptEvent $LogFilePath "IssuingCAServer=$($IssuingCAServerFQDN)" NDES_Validation 1Log-ScriptEvent $LogFilePath "SCEPCertificateTemplate=$($SCEPUserCertTemplate)" NDES_Validation 1if (-not (Get-WindowsFeature ADCS-Device-Enrollment).Installed){Write-Host "Error: NDES Not installed" -BackgroundColor Redwrite-host "Exiting....................."Log-ScriptEvent $LogFilePath "NDES Not installed" NDES_Validation 3break}Install-WindowsFeature RSAT-AD-PowerShell | Out-NullImport-Module ActiveDirectory | Out-Nullif (-not (Get-WindowsFeature Web-WebServer).Installed){$IISNotInstalled = $TRUEWrite-Warning "IIS is not installed. Some tests will not run as we're unable to import the WebAdministration module"Write-HostLog-ScriptEvent $LogFilePath "IIS is not installed. Some tests will not run as we're unable to import the WebAdministration module"  NDES_Validation 2}else {Import-Module WebAdministration | Out-Null}Write-HostWrite-host "Checking Windows OS version..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking OS Version" NDES_Validation 1$OSVersion = (Get-CimInstance -class Win32_OperatingSystem).Version$MinOSVersion = "6.3"if ([version]$OSVersion -lt [version]$MinOSVersion){Write-host "Error: Unsupported OS Version. NDES Requires 2012 R2 and above." -BackgroundColor RedLog-ScriptEvent $LogFilePath "Unsupported OS Version. NDES Requires 2012 R2 and above." NDES_Validation 3} else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "OS Version " -NoNewlinewrite-host "$($OSVersion)" -NoNewline -ForegroundColor Cyanwrite-host " supported."Log-ScriptEvent $LogFilePath "Server is version $($OSVersion)" NDES_Validation 1}Write-hostWrite-host "......................................................."Write-HostWrite-host "Checking NDES Service Account properties in Active Directory..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking NDES Service Account properties in Active Directory" NDES_Validation 1$ADUser = $NDESServiceAccount.split("\")[1]$ADUserProps = (Get-ADUser $ADUser -Properties SamAccountName,enabled,AccountExpirationDate,accountExpires,accountlockouttime,PasswordExpired,PasswordLastSet,PasswordNeverExpires,LockedOut)if ($ADUserProps.enabled -ne $TRUE -OR $ADUserProps.PasswordExpired -ne $false -OR $ADUserProps.LockedOut -eq $TRUE){Write-Host "Error: Problem with the AD account. Please see output below to determine the issue" -BackgroundColor RedWrite-HostLog-ScriptEvent $LogFilePath "Problem with the AD account. Please see output below to determine the issue"  NDES_Validation 3}else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "NDES Service Account seems to be in working order:"Log-ScriptEvent $LogFilePath "NDES Service Account seems to be in working order"  NDES_Validation 1}Get-ADUser $ADUser -Properties SamAccountName,enabled,AccountExpirationDate,accountExpires,accountlockouttime,PasswordExpired,PasswordLastSet,PasswordNeverExpires,LockedOut | fl SamAccountName,enabled,AccountExpirationDate,accountExpires,accountlockouttime,PasswordExpired,PasswordLastSet,PasswordNeverExpires,LockedOutWrite-host "`n.......................................................`n"Write-host "Checking if NDES server is the CA...`n" -ForegroundColor YellowLog-ScriptEvent $LogFilePath "Checking if NDES server is the CA" NDES_Validation 1 $hostname = ([System.Net.Dns]::GetHostByName(($env:computerName))).hostname$CARoleInstalled = (Get-WindowsFeature ADCS-Cert-Authority).InstallState -eq "Installed"if ($hostname -match $IssuingCAServerFQDN){Write-host "Error: NDES is running on the CA. This is an unsupported configuration!" -BackgroundColor RedLog-ScriptEvent $LogFilePath "NDES is running on the CA"  NDES_Validation 3}elseif($CARoleInstalled){Write-host "Error: NDES server has Certification Authority Role installed. This is an unsupported configuration!" -BackgroundColor RedLog-ScriptEvent $LogFilePath "NDES server has Certification Authority Role installed"  NDES_Validation 3}else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "NDES server is not running on the CA"Log-ScriptEvent $LogFilePath "NDES server is not running on the CA"  NDES_Validation 1 }Write-hostWrite-host "......................................................."Write-hostWrite-host "Checking NDES Service Account local permissions..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking NDES Service Account local permissions" NDES_Validation 1 if ((net localgroup) -match "Administrators"){$LocalAdminsMember = ((net localgroup Administrators))if ($LocalAdminsMember -like "*$NDESServiceAccount*"){Write-Warning "NDES Service Account is a member of the local Administrators group. This will provide the requisite rights but is _not_ a secure configuration. Use IIS_IUSERS instead."Log-ScriptEvent $LogFilePath "NDES Service Account is a member of the local Administrators group. This will provide the requisite rights but is _not_ a secure configuration. Use IIS_IUSERS instead."  NDES_Validation 2}else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "NDES Service account is not a member of the Local Administrators group"Log-ScriptEvent $LogFilePath "NDES Service account is not a member of the Local Administrators group"  NDES_Validation 1}Write-hostWrite-Host "Checking NDES Service account is a member of the IIS_IUSR group..." -ForegroundColor YellowWrite-hostif ((net localgroup) -match "IIS_IUSRS"){$IIS_IUSRMembers = ((net localgroup IIS_IUSRS))if ($IIS_IUSRMembers -like "*$NDESServiceAccount*"){Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "NDES Service Account is a member of the local IIS_IUSR group" -NoNewlineLog-ScriptEvent $LogFilePath "NDES Service Account is a member of the local IIS_IUSR group" NDES_Validation 1}else {Write-Host "Error: NDES Service Account is not a member of the local IIS_IUSR group" -BackgroundColor redLog-ScriptEvent $LogFilePath "NDES Service Account is not a member of the local IIS_IUSR group"  NDES_Validation 3 Write-hostWrite-host "Checking Local Security Policy for explicit rights via gpedit..." -ForegroundColor YellowWrite-Host$TempFile = [System.IO.Path]::GetTempFileName()& "secedit" "/export" "/cfg" "$TempFile" | Out-Null$LocalSecPol = Get-Content $TempFile$ADUserProps = Get-ADUser $ADUser$NDESSVCAccountSID = $ADUserProps.SID.Value $LocalSecPolResults = $LocalSecPol | Select-String $NDESSVCAccountSIDif ($LocalSecPolResults -match "SeInteractiveLogonRight" -AND $LocalSecPolResults -match "SeBatchLogonRight" -AND $LocalSecPolResults -match "SeServiceLogonRight"){Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "NDES Service Account has been assigned the Logon Locally, Logon as a Service and Logon as a batch job rights explicitly."Log-ScriptEvent $LogFilePath "NDES Service Account has been assigned the Logon Locally, Logon as a Service and Logon as a batch job rights explicitly." NDES_Validation 1Write-HostWrite-Host "Note:" -BackgroundColor Red -NoNewlineWrite-Host " The Logon Locally is not required in normal runtime."Write-HostWrite-Host "Note:" -BackgroundColor Red -NoNewlineWrite-Host 'Consider using the IIS_IUSERS group instead of explicit rights as documented under "Step 1 - Create an NDES service account".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configure}else {Write-Host "Error: NDES Service Account has _NOT_ been assigned the Logon Locally, Logon as a Service or Logon as a batch job rights _explicitly_." -BackgroundColor red Write-Host 'Please review "Step 1 - Create an NDES service account".' write-host "https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "NDES Service Account has _NOT_ been assigned the Logon Locally, Logon as a Service or Logon as a batch job rights _explicitly_." NDES_Validation 3}}}else {Write-Host "Error: No IIS_IUSRS group exists. Ensure IIS is installed." -BackgroundColor red write-host 'Please review "Step 3.1 - Configure prerequisites on the NDES server".' write-host "https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "No IIS_IUSRS group exists. Ensure IIS is installed." NDES_Validation 3}}else {Write-Warning "No local Administrators group exists, likely due to this being a Domain Controller. It is not recommended to run NDES on a Domain Controller."Log-ScriptEvent $LogFilePath "No local Administrators group exists, likely due to this being a Domain Controller. It is not recommended to run NDES on a Domain Controller." NDES_Validation 2}Write-hostWrite-HostWrite-host "......................................................."Write-hostWrite-host "Checking Windows Features are installed..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking Windows Features are installed..." NDES_Validation 1$WindowsFeatures = @("Web-Filtering","Web-Net-Ext45","NET-Framework-45-Core","NET-WCF-HTTP-Activation45","Web-Metabase","Web-WMI")foreach($WindowsFeature in $WindowsFeatures){$Feature =  Get-WindowsFeature $WindowsFeature$FeatureDisplayName = $Feature.displayNameif($Feature.installed){Write-host "Success:" -ForegroundColor Green -NoNewlinewrite-host "$FeatureDisplayName Feature Installed"Log-ScriptEvent $LogFilePath "$($FeatureDisplayName) Feature Installed"  NDES_Validation 1}else {Write-Host "Error: $FeatureDisplayName Feature not installed!" -BackgroundColor red Write-Host 'Please review "Step 3.1b - Configure prerequisites on the NDES server".' write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "$($FeatureDisplayName) Feature not installed"  NDES_Validation 3}}$ErrorActionPreference = "SilentlyContinue"Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking NDES Install Paramaters..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking NDES Install Paramaters" NDES_Validation 1$InstallParams = @(Get-WinEvent -LogName "Microsoft-Windows-CertificateServices-Deployment/Operational" | Where-Object {$_.id -eq "105"}|Where-Object {$_.message -match "Install-AdcsNetworkDeviceEnrollmentService"}| Sort-Object -Property TimeCreated -Descending | Select-Object -First 1)if ($InstallParams.Message -match '-SigningProviderName "Microsoft Strong Cryptographic Provider"' -AND ($InstallParams.Message -match '-EncryptionProviderName "Microsoft Strong Cryptographic Provider"')) {Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "Correct CSP used in install parameters"Write-hostWrite-Host $InstallParams.MessageLog-ScriptEvent $LogFilePath "Correct CSP used in install parameters:"  NDES_Validation 1Log-ScriptEvent $LogFilePath "$($InstallParams.Message)"  NDES_Eventvwr 1}else {Write-Host "Error: Incorrect CSP selected during install. NDES only supports the CryptoAPI CSP." -BackgroundColor redWrite-HostWrite-Host $InstallParams.MessageLog-ScriptEvent $LogFilePath "Error: Incorrect CSP selected during install. NDES only supports the CryptoAPI CSP"  NDES_Validation 3 Log-ScriptEvent $LogFilePath "$($InstallParams.Message)"  NDES_Eventvwr 3}$ErrorActionPreference = "Continue"Write-hostWrite-host "......................................................."Write-hostWrite-host "Checking IIS Application Pool health..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking IIS Application Pool health" NDES_Validation 1if (-not ($IISNotInstalled -eq $TRUE)){if (Test-Path 'IIS:\AppPools\SCEP'){$IISSCEPAppPoolAccount = Get-Item 'IIS:\AppPools\SCEP' | select -expandproperty processmodel | select -Expand usernameif ((Get-WebAppPoolState "SCEP").value -match "Started"){$SCEPAppPoolRunning = $TRUE}}else {Write-Host "Error: SCEP Application Pool missing!" -BackgroundColor red Write-Host 'Please review "Step 3.1 - Configure prerequisites on the NDES server"'. write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "SCEP Application Pool missing"  NDES_Validation 3}if ($IISSCEPAppPoolAccount -contains "$NDESServiceAccount"){Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "Application Pool is configured to use " -NoNewlineWrite-Host "$($IISSCEPAppPoolAccount)"Log-ScriptEvent $LogFilePath "Application Pool is configured to use $($IISSCEPAppPoolAccount)"  NDES_Validation 1}else {Write-Host "Error: Application Pool is not configured to use the NDES Service Account" -BackgroundColor red Write-Host 'Please review "Step 4.1 - Configure NDES for use with Intune".' write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "Application Pool is not configured to use the NDES Service Account"  NDES_Validation 3}if ($SCEPAppPoolRunning){Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "SCEP Application Pool is Started " -NoNewlineLog-ScriptEvent $LogFilePath "SCEP Application Pool is Started"  NDES_Validation 1}else {Write-Host "Error: SCEP Application Pool is stopped!" -BackgroundColor red Write-Host "Please start the SCEP Application Pool via IIS Management Console. You should also review the Application Event log output for Errors"Log-ScriptEvent $LogFilePath "SCEP Application Pool is stopped"  NDES_Validation 3}}else {Write-Host "IIS is not installed." -BackgroundColor redLog-ScriptEvent $LogFilePath "SCEP Application Pool is stopped"  NDES_Validation 3 }Write-HostWrite-hostWrite-host "......................................................."Write-hostWrite-Host "Checking Request Filtering (Default Web Site -> Request Filtering -> Edit Feature Setting) has been configured in IIS..." -ForegroundColor YellowWrite-HostLog-ScriptEvent $LogFilePath "Checking Request Filtering" NDES_Validation 1if (-not ($IISNotInstalled -eq $TRUE)){[xml]$RequestFiltering = (c:\windows\system32\inetsrv\appcmd.exe list config "default web site" /section:requestfiltering)if ($RequestFiltering.'system.webserver'.security.requestFiltering.requestLimits.maxQueryString -eq "65534"){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "MaxQueryString Set Correctly"Log-ScriptEvent $LogFilePath "MaxQueryString Set Correctly"  NDES_Validation 1    }else {Write-Host "MaxQueryString not set correctly!" -BackgroundColor red Write-Host 'Please review "Step 4.4 - Configure NDES for use with Intune".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "MaxQueryString not set correctly"  NDES_Validation 3}if ($RequestFiltering.'system.webserver'.security.requestFiltering.requestLimits.maxUrl -eq "65534"){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "MaxUrl Set Correctly"Log-ScriptEvent $LogFilePath "MaxUrl Set Correctly"  NDES_Validation 1}else {Write-Host "maxUrl not set correctly!" -BackgroundColor red Write-Host 'Please review "Step 4.4 - Configure NDES for use with Intune".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "maxUrl not set correctly"  NDES_Validation 3 }}else {Write-Host "IIS is not installed." -BackgroundColor redLog-ScriptEvent $LogFilePath "IIS is not installed"  NDES_Validation 3 }Write-hostWrite-host "......................................................."Write-hostWrite-Host 'Checking registry "HKLM:SYSTEM\CurrentControlSet\Services\HTTP\Parameters" has been set to allow long URLs...' -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking registry (HKLM:SYSTEM\CurrentControlSet\Services\HTTP\Parameters) has been set to allow long URLs" NDES_Validation 1if (-not ($IISNotInstalled -eq $TRUE)){If ((Get-ItemProperty -Path HKLM:SYSTEM\CurrentControlSet\Services\HTTP\Parameters -Name MaxFieldLength).MaxfieldLength -notmatch "65534"){Write-Host "Error: MaxFieldLength not set to 65534 in the registry!" -BackgroundColor redWrite-Host Write-Host 'Please review "Step 4.3 - Configure NDES for use with Intune".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "MaxFieldLength not set to 65534 in the registry" NDES_Validation 3} else {Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "MaxFieldLength set correctly"Log-ScriptEvent $LogFilePath "MaxFieldLength set correctly"  NDES_Validation 1}if ((Get-ItemProperty -Path HKLM:SYSTEM\CurrentControlSet\Services\HTTP\Parameters -Name MaxRequestBytes).MaxRequestBytes -notmatch "65534"){Write-Host "MaxRequestBytes not set to 65534 in the registry!" -BackgroundColor redWrite-Host Write-Host 'Please review "Step 4.3 - Configure NDES for use with Intune".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "MaxRequestBytes not set to 65534 in the registry" NDES_Validation 3 }else {Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "MaxRequestBytes set correctly"Log-ScriptEvent $LogFilePath "MaxRequestBytes set correctly"  NDES_Validation 1}}else {Write-Host "IIS is not installed." -BackgroundColor redLog-ScriptEvent $LogFilePath "IIS is not installed." NDES_Validation 3}Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking SPN has been set..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking SPN has been set" NDES_Validation 1$hostname = ([System.Net.Dns]::GetHostByName(($env:computerName))).hostname$spn = setspn.exe -L $ADUserif ($spn -match $hostname){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "Correct SPN set for the NDES service account:"Write-hostWrite-Host $spn -ForegroundColor CyanLog-ScriptEvent $LogFilePath "Correct SPN set for the NDES service account: $($spn)"  NDES_Validation 1}else {Write-Host "Error: Missing or Incorrect SPN set for the NDES Service Account!" -BackgroundColor red Write-Host 'Please review "Step 3.1c - Configure prerequisites on the NDES server".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "Missing or Incorrect SPN set for the NDES Service Account"  NDES_Validation 3 }Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking there are no intermediate certs are in the Trusted Root store..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking there are no intermediate certs are in the Trusted Root store" NDES_Validation 1$IntermediateCertCheck = Get-Childitem cert:\LocalMachine\root -Recurse | Where-Object {$_.Issuer -ne $_.Subject}if ($IntermediateCertCheck){Write-Host "Error: Intermediate certificate found in the Trusted Root store. This can cause undesired effects and should be removed." -BackgroundColor red Write-Host "Certificates:"Write-Host Write-Host $IntermediateCertCheckLog-ScriptEvent $LogFilePath "Intermediate certificate found in the Trusted Root store: $($IntermediateCertCheck)"  NDES_Validation 3}else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "Trusted Root store does not contain any Intermediate certificates."Log-ScriptEvent $LogFilePath "Trusted Root store does not contain any Intermediate certificates."  NDES_Validation 1}$ErrorActionPreference = "Silentlycontinue"Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking the EnrollmentAgentOffline and CEPEncryption are present..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking the EnrollmentAgentOffline and CEPEncryption are present" NDES_Validation 1$certs = Get-ChildItem cert:\LocalMachine\My\Foreach ($item in $certs){$Output = ($item.Extensions| where-object {$_.oid.FriendlyName -like "**"}).format(0).split(",")if ($Output -match "EnrollmentAgentOffline"){$EnrollmentAgentOffline = $TRUE}if ($Output -match "CEPEncryption"){$CEPEncryption = $TRUE}} if ($EnrollmentAgentOffline){Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "EnrollmentAgentOffline certificate is present"Log-ScriptEvent $LogFilePath "EnrollmentAgentOffline certificate is present"  NDES_Validation 1}else {Write-Host "Error: EnrollmentAgentOffline certificate is not present!" -BackgroundColor red Write-Host "This can take place when an account without Enterprise Admin permissions installs NDES. You may need to remove the NDES role and reinstall with the correct permissions." write-host 'Please review "Step 3.1 - Configure prerequisites on the NDES server".' write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "EnrollmentAgentOffline certificate is not present"  NDES_Validation 3 }if ($CEPEncryption){Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "CEPEncryption certificate is present"Log-ScriptEvent $LogFilePath "CEPEncryption certificate is present"  NDES_Validation 1}else {Write-Host "Error: CEPEncryption certificate is not present!" -BackgroundColor red Write-Host "This can take place when an account without Enterprise Admin permissions installs NDES. You may need to remove the NDES role and reinstall with the correct permissions." write-host 'Please review "Step 3.1 - Configure prerequisites on the NDES server".' write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "CEPEncryption certificate is not present"  NDES_Validation 3}$ErrorActionPreference = "Continue"Write-hostWrite-host "......................................................."Write-hostWrite-Host 'Checking registry "HKLM:SOFTWARE\Microsoft\Cryptography\MSCEP" has been set with the SCEP certificate template name...' -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking registry (HKLM:SOFTWARE\Microsoft\Cryptography\MSCEP) has been set with the SCEP certificate template name" NDES_Validation 1if (-not (Test-Path HKLM:SOFTWARE\Microsoft\Cryptography\MSCEP)){Write-host "Error: Registry key does not exist. This can occur if the NDES role has been installed but not configured." -BackgroundColor RedWrite-host 'Please review "Step 3 - Configure prerequisites on the NDES server".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "MSCEP Registry key does not exist."  NDES_Validation 3 }else {$SignatureTemplate = (Get-ItemProperty -Path HKLM:SOFTWARE\Microsoft\Cryptography\MSCEP\ -Name SignatureTemplate).SignatureTemplate$EncryptionTemplate = (Get-ItemProperty -Path HKLM:SOFTWARE\Microsoft\Cryptography\MSCEP\ -Name EncryptionTemplate).EncryptionTemplate$GeneralPurposeTemplate = (Get-ItemProperty -Path HKLM:SOFTWARE\Microsoft\Cryptography\MSCEP\ -Name GeneralPurposeTemplate).GeneralPurposeTemplate $DefaultUsageTemplate = "IPSECIntermediateOffline"if ($SignatureTemplate -match $DefaultUsageTemplate -AND $EncryptionTemplate -match $DefaultUsageTemplate -AND $GeneralPurposeTemplate -match $DefaultUsageTemplate){Write-Host "Error: Registry has not been configured with the SCEP Certificate template name. Default values have _not_ been changed." -BackgroundColor redwrite-host 'Please review "Step 3.1 - Configure prerequisites on the NDES server".' write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureWrite-HostLog-ScriptEvent $LogFilePath "Registry has not been configured with the SCEP Certificate template name. Default values have _not_ been changed."  NDES_Validation 3$FurtherReading = $FALSE}else {Write-Host "One or more default values have been changed."Write-Host write-host "Checking SignatureTemplate key..."Write-hostif ($SignatureTemplate -match $SCEPUserCertTemplate){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "SCEP certificate template '$($SCEPUserCertTemplate)' has been written to the registry under the _SignatureTemplate_ key. Ensure this aligns with the usage specificed on the SCEP template."Write-hostLog-ScriptEvent $LogFilePath "SCEP certificate template $($SCEPUserCertTemplate)' has been written to the registry under the _SignatureTemplate_ key"  NDES_Validation 1}else {Write-Warning '"SignatureTemplate key does not match the SCEP certificate template name. Unless your template is explicitly set for the "Signature" purpose, this can safely be ignored."'Write-Hostwrite-host "Registry value: " -NoNewlineWrite-host "$($SignatureTemplate)" -ForegroundColor CyanWrite-Hostwrite-host "SCEP certificate template value: " -NoNewlineWrite-host "$($SCEPUserCertTemplate)" -ForegroundColor CyanWrite-HostLog-ScriptEvent $LogFilePath "SignatureTemplate key does not match the SCEP certificate template name.Registry value=$($SignatureTemplate)|SCEP certificate template value=$($SCEPUserCertTemplate)"  NDES_Validation 2}Write-host "......................."Write-HostWrite-Host "Checking EncryptionTemplate key..."Write-hostif ($EncryptionTemplate -match $SCEPUserCertTemplate){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "SCEP certificate template '$($SCEPUserCertTemplate)' has been written to the registry under the _EncryptionTemplate_ key. Ensure this aligns with the usage specificed on the SCEP template."Write-hostLog-ScriptEvent $LogFilePath "SCEP certificate template $($SCEPUserCertTemplate) has been written to the registry under the _EncryptionTemplate_ key"  NDES_Validation 1}else {Write-Warning '"EncryptionTemplate key does not match the SCEP certificate template name. Unless your template is explicitly set for the "Encryption" purpose, this can safely be ignored."'Write-Hostwrite-host "Registry value: " -NoNewlineWrite-host "$($EncryptionTemplate)" -ForegroundColor CyanWrite-Hostwrite-host "SCEP certificate template value: " -NoNewlineWrite-host "$($SCEPUserCertTemplate)" -ForegroundColor CyanWrite-HostLog-ScriptEvent $LogFilePath "EncryptionTemplate key does not match the SCEP certificate template name.Registry value=$($EncryptionTemplate)|SCEP certificate template value=$($SCEPUserCertTemplate)"  NDES_Validation 2}Write-host "......................."Write-HostWrite-Host "Checking GeneralPurposeTemplate key..."Write-hostif ($GeneralPurposeTemplate -match $SCEPUserCertTemplate){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "SCEP certificate template '$($SCEPUserCertTemplate)' has been written to the registry under the _GeneralPurposeTemplate_ key. Ensure this aligns with the usage specificed on the SCEP template"Log-ScriptEvent $LogFilePath "SCEP certificate template $($SCEPUserCertTemplate) has been written to the registry under the _GeneralPurposeTemplate_ key"  NDES_Validation 1}else {Write-Warning '"GeneralPurposeTemplate key does not match the SCEP certificate template name. Unless your template is set for the "Signature and Encryption" (General) purpose, this can safely be ignored."'Write-Hostwrite-host "Registry value: " -NoNewlineWrite-host "$($GeneralPurposeTemplate)" -ForegroundColor CyanWrite-Hostwrite-host "SCEP certificate template value: " -NoNewlineWrite-host "$($SCEPUserCertTemplate)" -ForegroundColor CyanWrite-HostLog-ScriptEvent $LogFilePath "GeneralPurposeTemplate key does not match the SCEP certificate template name.Registry value=$($GeneralPurposeTemplate)|SCEP certificate template value=$($SCEPUserCertTemplate)"  NDES_Validation 2}}if ($furtherreading-EQ $true){Write-host "......................."Write-HostWrite-host 'For further reading, please review "Step 4.2 - Configure NDES for use with Intune".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configure}}$ErrorActionPreference = "Continue"Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking IIS SSL certificate is valid for use..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking IIS SSL certificate is valid for use" NDES_Validation 1$hostname = ([System.Net.Dns]::GetHostByName(($env:computerName))).hostname$serverAuthEKU = "1.3.6.1.5.5.7.3.1" $allSSLCerts = Get-ChildItem Cert:\LocalMachine\My$BoundServerCert = netsh http show sslcertforeach ($Cert in $allSSLCerts) {       $ServerCertThumb = $cert.Thumbprintif ($BoundServerCert -match $ServerCertThumb){$BoundServerCertThumb = $ServerCertThumb}}$ServerCertObject = Get-ChildItem Cert:\LocalMachine\My\$BoundServerCertThumbif ($ServerCertObject.Issuer -match $ServerCertObject.Subject){$SelfSigned = $true}else {$SelfSigned = $false}if ($ServerCertObject.EnhancedKeyUsageList -match $serverAuthEKU -AND (($ServerCertObject.Subject -match $hostname) -or ($ServerCertObject.DnsNameList -match $hostname)) -AND $ServerCertObject.Issuer -notmatch $ServerCertObject.Subject){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "Certificate bound in IIS is valid:"Write-HostWrite-Host "Subject: " -NoNewlineWrite-host "$($ServerCertObject.Subject)" -ForegroundColor CyanWrite-HostWrite-Host "Thumbprint: " -NoNewlineWrite-Host "$($ServerCertObject.Thumbprint)" -ForegroundColor CyanWrite-HostWrite-Host "Valid Until: " -NoNewlineWrite-Host "$($ServerCertObject.NotAfter)" -ForegroundColor CyanWrite-HostWrite-Host "If this NDES server is in your perimeter network, please ensure the external hostname is shown below:" -ForegroundColor Blue -BackgroundColor White$DNSNameList = $ServerCertObject.DNSNameList.unicodeWrite-Hostwrite-host "Internal and External hostnames: " -NoNewlineWrite-host "$($DNSNameList)" -ForegroundColor CyanLog-ScriptEvent $LogFilePath "Certificate bound in IIS is valid. Subject:$($ServerCertObject.Subject)|Thumbprint:$($ServerCertObject.Thumbprint)|ValidUntil:$($ServerCertObject.NotAfter)|Internal&ExternalHostnames:$($DNSNameList)" NDES_Validation 1}else {Write-Host "Error: The certificate bound in IIS is not valid for use. Reason:" -BackgroundColor red write-hostif ($ServerCertObject.EnhancedKeyUsageList -match $serverAuthEKU) {$EKUValid = $true}else {$EKUValid = $falsewrite-host "Correct EKU: " -NoNewlineWrite-Host "$($EKUValid)" -ForegroundColor CyanWrite-Host}if ($ServerCertObject.Subject -match $hostname) {$SubjectValid = $true}else {$SubjectValid = $falsewrite-host "Correct Subject: " -NoNewlinewrite-host "$($SubjectValid)" -ForegroundColor CyanWrite-Host}if ($SelfSigned -eq $false){Out-Null}else {write-host "Is Self-Signed: " -NoNewlinewrite-host "$($SelfSigned)" -ForegroundColor CyanWrite-Host}Write-Host 'Please review "Step 4 - Configure NDES for use with Intune>To Install and bind certificates on the NDES Server".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "The certificate bound in IIS is not valid for use. CorrectEKU=$($EKUValid)|CorrectSubject=$($SubjectValid)|IsSelfSigned=$($SelfSigned)"  NDES_Validation 3}Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking Client certificate (NDES Policy module) is valid for use..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking Client certificate (NDES Policy module) is valid for use" NDES_Validation 1$hostname = ([System.Net.Dns]::GetHostByName(($env:computerName))).hostname$clientAuthEku = "1.3.6.1.5.5.7.3.2" $NDESCertThumbprint = (Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Cryptography\MSCEP\Modules\NDESPolicy -Name NDESCertThumbprint).NDESCertThumbprint$ClientCertObject = Get-ChildItem Cert:\LocalMachine\My\$NDESCertThumbprintif ($ClientCertObject.Issuer -match $ClientCertObject.Subject){$ClientCertSelfSigned = $true}else {$ClientCertSelfSigned = $false}if ($ClientCertObject.EnhancedKeyUsageList -match $clientAuthEku -AND $ClientCertObject.Subject -match $hostname -AND $ClientCertObject.Issuer -notmatch $ClientCertObject.Subject){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "Client certificate bound to NDES Connector is valid:"Write-HostWrite-Host "Subject: " -NoNewlineWrite-host "$($ClientCertObject.Subject)" -ForegroundColor CyanWrite-HostWrite-Host "Thumbprint: " -NoNewlineWrite-Host "$($ClientCertObject.Thumbprint)" -ForegroundColor CyanWrite-HostWrite-Host "Valid Until: " -NoNewlineWrite-Host "$($ClientCertObject.NotAfter)" -ForegroundColor CyanLog-ScriptEvent $LogFilePath "Client certificate bound to NDES Connector is valid. Subject:$($ClientCertObject.Subject)|Thumbprint:$($ClientCertObject.Thumbprint)|ValidUntil:$($ClientCertObject.NotAfter)"  NDES_Validation 1}else {Write-Host "Error: The certificate bound to the NDES Connector is not valid for use. Reason:" -BackgroundColor red write-host  if ($ClientCertObject.EnhancedKeyUsageList -match $clientAuthEku) {$ClientCertEKUValid = $true}else {$ClientCertEKUValid = $falsewrite-host "Correct EKU: " -NoNewlineWrite-Host "$($ClientCertEKUValid)" -ForegroundColor CyanWrite-Host}if ($ClientCertObject.Subject -match $hostname) {$ClientCertSubjectValid = $true}else {$ClientCertSubjectValid = $falsewrite-host "Correct Subject: " -NoNewlinewrite-host "$($ClientCertSubjectValid)" -ForegroundColor CyanWrite-Host}if ($ClientCertSelfSigned -eq $false){Out-Null}else {write-host "Is Self-Signed: " -NoNewlinewrite-host "$($ClientCertSelfSigned)" -ForegroundColor CyanWrite-Host}Write-Host 'Please review "Step 4 - Configure NDES for use with Intune>To Install and bind certificates on the NDES Server".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureLog-ScriptEvent $LogFilePath "The certificate bound to the NDES Connector is not valid for use. CorrectEKU=$($ClientCertEKUValid)|CorrectSubject=$($ClientCertSubjectValid)|IsSelfSigned=$($ClientCertSelfSigned)"  NDES_Validation 3}Write-hostWrite-host "......................................................."$hostname = ([System.Net.Dns]::GetHostByName(($env:computerName))).hostnameWrite-hostWrite-Host "Checking behaviour of internal NDES URL: " -NoNewline -ForegroundColor YellowWrite-Host "https://$hostname/certsrv/mscep/mscep.dll" -ForegroundColor CyanWrite-hostLog-ScriptEvent $LogFilePath "Checking behaviour of internal NDES URL" NDES_Validation 1Log-ScriptEvent $LogFilePath "Https://$hostname/certsrv/mscep/mscep.dll" NDES_Validation 1$Statuscode = try {(Invoke-WebRequest -Uri https://$hostname/certsrv/mscep/mscep.dll).statuscode} catch {$_.Exception.Response.StatusCode.Value__}if ($statuscode -eq "200"){Write-host "Error: https://$hostname/certsrv/mscep/mscep.dll returns 200 OK. This usually signifies an error with the Intune Connector registering itself or not being installed." -BackgroundColor RedLog-ScriptEvent $LogFilePath "https://$hostname/certsrv/mscep/mscep.dll returns 200 OK. This usually signifies an error with the Intune Connector registering itself or not being installed"  NDES_Validation 3} elseif ($statuscode -eq "403"){Write-Host "Trying to retrieve CA Capabilitiess..." -ForegroundColor YellowWrite-Host$Newstatuscode = try {(Invoke-WebRequest -Uri "https://$hostname/certsrv/mscep/mscep.dll?operation=GetCACaps&message=test").statuscode} catch {$_.Exception.Response.StatusCode.Value__}if ($Newstatuscode -eq "200"){$CACaps = (Invoke-WebRequest -Uri "https://$hostname/certsrv/mscep?operation=GetCACaps&message=test").content}if ($CACaps){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "CA Capabilities retrieved:"Write-Hostwrite-host $CACapsLog-ScriptEvent $LogFilePath "CA Capabilities retrieved:$CACaps"  NDES_Validation 1}}else {Write-host "Error: Unexpected Error code! This usually signifies an error with the Intune Connector registering itself or not being installed" -BackgroundColor RedWrite-host "Expected value is a 403. We received a $($Statuscode). This could be down to a missing reboot post policy module install. Verify last boot time and module install time further down the validation."Log-ScriptEvent $LogFilePath "Unexpected Error code. Expected:403|Received:$Statuscode"  NDES_Validation 3}Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking Servers last boot time..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking Servers last boot time" NDES_Validation 1$LastBoot = (Get-WmiObject win32_operatingsystem | select csname, @{LABEL='LastBootUpTime';EXPRESSION={$_.ConverttoDateTime($_.lastbootuptime)}}).lastbootuptimewrite-host "Server last rebooted: "-NoNewlineWrite-Host "$($LastBoot). " -ForegroundColor Cyan -NoNewlineWrite-Host "Please ensure a reboot has taken place _after_ all registry changes and installing the NDES Connector. IISRESET is _not_ sufficient."Log-ScriptEvent $LogFilePath "LastBootTime:$LastBoot"  NDES_Validation 1Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking Intune Connector is installed..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking Intune Connector is installed" NDES_Validation 1 if ($IntuneConnector = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* |  Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | ? {$_.DisplayName -eq "Microsoft Intune Connector"}){Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "$($IntuneConnector.DisplayName) was installed on " -NoNewline Write-Host "$($IntuneConnector.InstallDate) " -ForegroundColor Cyan -NoNewline write-host "and is version " -NoNewlineWrite-Host "$($IntuneConnector.DisplayVersion)" -ForegroundColor Cyan -NoNewlineWrite-hostLog-ScriptEvent $LogFilePath "ConnectorVersion:$IntuneConnector"  NDES_Validation 1}else {Write-Host "Error: Intune Connector not installed" -BackgroundColor red Write-Host 'Please review "Step 5 - Enable, install, and configure the Intune certificate connector".'write-host "URL: https://docs.microsoft.com/en-us/intune/certificates-scep-configureWrite-HostLog-ScriptEvent $LogFilePath "ConnectorNotInstalled"  NDES_Validation 3 }Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking Intune Connector registry keys are intact" -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking Intune Connector registry keys are intact" NDES_Validation 1$ErrorActionPreference = "SilentlyContinue"$KeyRecoveryAgentCertificate = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MicrosoftIntune\NDESConnector\KeyRecoveryAgentCertificate"$PfxSigningCertificate = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MicrosoftIntune\NDESConnector\PfxSigningCertificate"$SigningCertificate = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MicrosoftIntune\NDESConnector\SigningCertificate"if (-not ($KeyRecoveryAgentCertificate)){Write-host "Error: KeyRecoveryAgentCertificate Registry key does not exist." -BackgroundColor RedWrite-HostLog-ScriptEvent $LogFilePath "KeyRecoveryAgentCertificate Registry key does not exist."  NDES_Validation 3 }else {$KeyRecoveryAgentCertificatePresent = (Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\MicrosoftIntune\NDESConnector\ -Name KeyRecoveryAgentCertificate).KeyRecoveryAgentCertificateif (-not ($KeyRecoveryAgentCertificatePresent)) {Write-Warning "KeyRecoveryAgentCertificate registry key exists but has no value"Log-ScriptEvent $LogFilePath "KeyRecoveryAgentCertificate missing Value"  NDES_Validation 2}else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "KeyRecoveryAgentCertificate registry key exists"Log-ScriptEvent $LogFilePath "KeyRecoveryAgentCertificate registry key exists"  NDES_Validation 1}}if (-not ($PfxSigningCertificate)){Write-host "Error: PfxSigningCertificate Registry key does not exist." -BackgroundColor RedWrite-HostLog-ScriptEvent $LogFilePath "PfxSigningCertificate Registry key does not exist."  NDES_Validation 3 }else {$PfxSigningCertificatePresent = (Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\MicrosoftIntune\NDESConnector\ -Name PfxSigningCertificate).PfxSigningCertificateif (-not ($PfxSigningCertificatePresent)) {Write-Warning "PfxSigningCertificate registry key exists but has no value"Log-ScriptEvent $LogFilePath "PfxSigningCertificate missing Value"  NDES_Validation 2}else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "PfxSigningCertificate registry keys exists"Log-ScriptEvent $LogFilePath "PfxSigningCertificate registry key exists"  NDES_Validation 1}}if (-not ($SigningCertificate)){Write-host "Error: SigningCertificate Registry key does not exist." -BackgroundColor RedWrite-HostLog-ScriptEvent $LogFilePath "SigningCertificate Registry key does not exist"  NDES_Validation 3  }else {$SigningCertificatePresent = (Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\MicrosoftIntune\NDESConnector\ -Name SigningCertificate).SigningCertificateif (-not ($SigningCertificatePresent)) {Write-Warning "SigningCertificate registry key exists but has no value"Log-ScriptEvent $LogFilePath "SigningCertificate registry key exists but has no value"  NDES_Validation 2}else {Write-Host "Success: " -ForegroundColor Green -NoNewlineWrite-Host "SigningCertificate registry key exists"Log-ScriptEvent $LogFilePath "SigningCertificate registry key exists"  NDES_Validation 1}}$ErrorActionPreference = "Continue"$ErrorActionPreference = "SilentlyContinue"$EventLogCollDays = ((Get-Date).AddDays(-5)) Write-hostWrite-host "......................................................."Write-hostWrite-Host "Checking Event logs for pertinent errors..." -ForegroundColor YellowWrite-hostLog-ScriptEvent $LogFilePath "Checking Event logs for pertinent errors" NDES_Validation 1if (-not (Get-EventLog -LogName "Microsoft Intune Connector" -EntryType Error -After $EventLogCollDays -ErrorAction silentlycontinue)) {Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "No errors found in the Microsoft Intune Connector"Write-hostLog-ScriptEvent $LogFilePath "No errors found in the Microsoft Intune Connector"  NDES_Validation 1}else {Write-Warning "Errors found in the Microsoft Intune Connector Event log. Please see below for the most recent 5, and investigate further in Event Viewer."Write-Host$EventsCol1 = (Get-EventLog -LogName "Microsoft Intune Connector" -EntryType Error -After $EventLogCollDays -Newest 5 | select TimeGenerated,Source,Message)$EventsCol1 | flLog-ScriptEvent $LogFilePath "Errors found in the Microsoft Intune Connector Event log"  NDES_Eventvwr 3$i = 0$count = @($EventsCol1).countforeach ($item in $EventsCol1) {Log-ScriptEvent $LogFilePath "$($EventsCol1[$i].TimeGenerated);$($EventsCol1[$i].Message);$($EventsCol1[$i].Source)"  NDES_Eventvwr 3$i++}}if (-not (Get-EventLog -LogName "Application" -EntryType Error -Source NDESConnector,Microsoft-Windows-NetworkDeviceEnrollmentService -After $EventLogCollDays -ErrorAction silentlycontinue)) {Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "No errors found in the Application log from source NetworkDeviceEnrollmentService or NDESConnector"Write-hostLog-ScriptEvent $LogFilePath "No errors found in the Application log from source NetworkDeviceEnrollmentService or NDESConnector"  NDES_Validation 1}else {Write-Warning "Errors found in the Application Event log for source NetworkDeviceEnrollmentService or NDESConnector. Please see below for the most recent 5, and investigate further in Event Viewer."Write-Host$EventsCol2 = (Get-EventLog -LogName "Application" -EntryType Error -Source NDESConnector,Microsoft-Windows-NetworkDeviceEnrollmentService -After $EventLogCollDays -Newest 5 | select TimeGenerated,Source,Message)$EventsCol2 |fl$i = 0$count = @($EventsCol2).countforeach ($item in $EventsCol2) {Log-ScriptEvent $LogFilePath "$($EventsCol2[$i].TimeGenerated);$($EventsCol2[$i].Message);$($EventsCol2[$i].Source)"  NDES_Eventvwr 3$i++}}$ErrorActionPreference = "Continue"Write-hostWrite-host "......................................................."Write-hostWrite-host "Log Files..." -ForegroundColor YellowWrite-host write-host "Do you want to gather troubleshooting files? This includes IIS, NDES Connector, NDES Plugin, CRP, and MSCEP log files, in addition to the SCEP template configuration.  [Y]es, [N]o:"$LogFileCollectionConfirmation = Read-Hostif ($LogFileCollectionConfirmation -eq "y"){$IISLogPath = (Get-WebConfigurationProperty "/system.applicationHost/sites/siteDefaults" -name logfile.directory).Value + "\W3SVC1" -replace "%SystemDrive%",$env:SystemDrive$IISLogs = Get-ChildItem $IISLogPath| Sort-Object -Descending -Property LastWriteTime | Select-Object -First 3$NDESConnectorLogs = Get-ChildItem "C:\Program Files\Microsoft Intune\NDESConnectorSvc\Logs\Logs\NDESConnector*" | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 3$NDESPluginLogs = Get-ChildItem "C:\Program Files\Microsoft Intune\NDESPolicyModule\Logs\NDESPlugin.log"$MSCEPLogs = Get-ChildItem "c:\users\*\mscep.log" | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 3$CRPLogs = Get-ChildItem "C:\Program Files\Microsoft Intune\NDESConnectorSvc\Logs\Logs\CertificateRegistrationPoint*" | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 3foreach ($IISLog in $IISLogs){Copy-Item -Path $IISLog.FullName -Destination $TempDirPath}foreach ($NDESConnectorLog in $NDESConnectorLogs){Copy-Item -Path $NDESConnectorLog.FullName -Destination $TempDirPath}foreach ($NDESPluginLog in $NDESPluginLogs){Copy-Item -Path $NDESPluginLog.FullName -Destination $TempDirPath}foreach ($MSCEPLog in $MSCEPLogs){Copy-Item -Path $MSCEPLog.FullName -Destination $TempDirPath}foreach ($CRPLog in $CRPLogs){Copy-Item -Path $CRPLogs.FullName -Destination $TempDirPath}$SCEPUserCertTemplateOutputFilePath = "$($TempDirPath)\SCEPUserCertTemplate.txt"certutil -v -template $SCEPUserCertTemplate > $SCEPUserCertTemplateOutputFilePathLog-ScriptEvent $LogFilePath "Collecting server logs"  NDES_Validation 1Add-Type -assembly "system.io.compression.filesystem"$Currentlocation =  $env:temp$date = Get-Date -Format ddMMyyhhmm[io.compression.zipfile]::CreateFromDirectory($TempDirPath, "$($Currentlocation)\$($date)-Logs-$($hostname).zip")Write-hostWrite-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "Log files copied to $($Currentlocation)\$($date)-Logs-$($hostname).zip"Write-host}else {Log-ScriptEvent $LogFilePath "Do not collect logs"  NDES_Validation 1$WriteLogOutputPath = $True}Write-hostWrite-host "......................................................."Write-hostWrite-host "End of NDES configuration validation" -ForegroundColor YellowWrite-Hostif ($WriteLogOutputPath -eq $True) {write-host "Log file copied to $($LogFilePath)"Write-Host}write-host "Ending script..." -ForegroundColor YellowWrite-host }else {Write-HostWrite-host "......................................................."Write-HostWrite-host "Incorrect variables. Please run the script again..." -ForegroundColor RedWrite-HostWrite-Host "Exiting................................................"Write-Hostexit}