function Test-NewDirectConnectionWithV4V6{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Los Angeles"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidthWrite-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv4 = newIpV4Address $true $true 0 0$sessionv6 = newIpV6Address $true $true 0 0Write-Debug "Created IPs $sessionv4 $SessionPrefixV6"$maxv4 = maxAdvertisedIpv4$maxv6 = maxAdvertisedIpv6Write-Debug "Created maxAdvertised $maxv4 $maxv6"$createdConnection = New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -SessionPrefixV4 $sessionv4 -SessionPrefixV6 $sessionv6 -MaxPrefixesAdvertisedIPv4 $maxv4 -MaxPrefixesAdvertisedIPv6 $maxv6 -BandwidthInMbps $bandwidth -MD5AuthenticationKey $md5Assert-AreEqual $md5 $createdConnection.BgpSession.Md5AuthenticationKeyAssert-AreEqual $bandwidth $createdConnection.BandwidthInMbps Assert-AreEqual $facilityId $createdConnection.PeeringDBFacilityId Assert-AreEqual $sessionv4 $createdConnection.BgpSession.SessionPrefixV4Assert-AreEqual $sessionv6 $createdConnection.BgpSession.SessionPrefixV6Assert-AreEqual $false $createdConnection.UseForPeeringServiceAssert-AreEqual "Peer" $createdConnection.SessionAddressProviderremovePeerAsn $asn}function Test-NewDirectConnectionWithV4{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Amsterdam"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidthWrite-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv4 = newIpV4Address $true $true 0 0Write-Debug "Created IPs $sessionv4"$maxv4 = maxAdvertisedIpv4Write-Debug "Created maxAdvertised $maxv4"$createdConnection = New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -SessionPrefixV4 $sessionv4 -MaxPrefixesAdvertisedIPv4 $maxv4 -BandwidthInMbps $bandwidth -MD5AuthenticationKey $md5Get-AzPeerAsnAssert-AreEqual $md5 $createdConnection.BgpSession.Md5AuthenticationKeyAssert-AreEqual $bandwidth $createdConnection.BandwidthInMbps Assert-AreEqual $facilityId $createdConnection.PeeringDBFacilityId Assert-AreEqual $sessionv4 $createdConnection.BgpSession.SessionPrefixV4Assert-Null $createdConnection.BgpSession.SessionPrefixV6Assert-AreEqual $false $createdConnection.UseForPeeringServiceAssert-AreEqual "Peer" $createdConnection.SessionAddressProviderremovePeerAsn $asn}function Test-NewDirectConnectionWithV6{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Los Angeles"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidthWrite-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv6 = newIpV6Address $true $true 0 0Write-Debug "Created IPs $SessionPrefixV6"$maxv6 = maxAdvertisedIpv6Write-Debug "Created maxAdvertised $maxv6"$createdConnection = New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -SessionPrefixV6 $sessionv6 -MaxPrefixesAdvertisedIPv6 $maxv6 -BandwidthInMbps $bandwidth -MD5AuthenticationKey $md5Assert-AreEqual $md5 $createdConnection.BgpSession.Md5AuthenticationKeyAssert-AreEqual $bandwidth $createdConnection.BandwidthInMbps Assert-AreEqual $facilityId $createdConnection.PeeringDBFacilityId Assert-Null $createdConnection.BgpSession.SessionPrefixV4Assert-AreEqual $sessionv6 $createdConnection.BgpSession.SessionPrefixV6Assert-AreEqual $false $createdConnection.UseForPeeringServiceAssert-AreEqual "Peer" $createdConnection.SessionAddressProviderremovePeerAsn $asn}function Test-NewDirectConnectionNoSession{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Ashburn"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidthWrite-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv4 = newIpV4Address $true $true 0 0$sessionv6 = newIpV6Address $true $true 0 0Write-Debug "Created IPs $sessionv4 $SessionPrefixV6"$maxv4 = maxAdvertisedIpv4$maxv6 = maxAdvertisedIpv6Write-Debug "Created maxAdvertised $maxv4 $maxv6"$createdConnection = New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -BandwidthInMbps $bandwidth -UseForPeeringServiceAssert-AreEqual $bandwidth $createdConnection.BandwidthInMbps Assert-AreEqual $facilityId $createdConnection.PeeringDBFacilityId Assert-Null $createdConnection.BgpSessionAssert-AreEqual $true $createdConnection.UseForPeeringServiceAssert-AreEqual "Peer" $createdConnection.SessionAddressProviderremovePeerAsn $asn}function Test-NewDirectConnectionHighBandwidth{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Los Angeles"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidth$bandwidth = [int]$bandwidth * 10Write-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv4 = newIpV4Address $true $true 0 0$sessionv6 = newIpV6Address $true $true 0 0Write-Debug "Created IPs $sessionv4 $SessionPrefixV6"$maxv4 = maxAdvertisedIpv4$maxv6 = maxAdvertisedIpv6Write-Debug "Created maxAdvertised $maxv4 $maxv6"Assert-ThrowsContains { New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -SessionPrefixV6 $sessionv6 -MaxPrefixesAdvertisedIPv6 $maxv6 -BandwidthInMbps $bandwidth -MD5AuthenticationKey $md5 } "The $bandwidth argument is greater than the maximum allowed range of 100000"removePeerAsn $asn}function Test-NewDirectConnectionLowBandwidth{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Ashburn"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$wrongBandwidth = 0Write-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv4 = newIpV4Address $true $true 0 0$sessionv6 = newIpV6Address $true $true 0 0Write-Debug "Created IPs $sessionv4 $SessionPrefixV6"$maxv4 = maxAdvertisedIpv4$maxv6 = maxAdvertisedIpv6Write-Debug "Created maxAdvertised $maxv4 $maxv6"Assert-ThrowsContains {New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -SessionPrefixV6 $sessionv6 -MaxPrefixesAdvertisedIPv6 $maxv6 -BandwidthInMbps $wrongBandwidth -MD5AuthenticationKey $md5} "The $wrongBandwidth argument is less than the minimum allowed range of 10000"removePeerAsn $asn}function Test-NewDirectConnectionWrongV6{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Ashburn"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidthWrite-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv6 = newIpV6Address $true $true 0 0$wrongv6 = changeIp $sessionv6 $true 1 $trueWrite-Debug "Created IPs wrong $wrongv6 correct $sessionv6"$maxv4 = maxAdvertisedIpv4$maxv6 = maxAdvertisedIpv6Write-Debug "Created maxAdvertised $maxv4 $maxv6"Assert-ThrowsContains {New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -SessionPrefixV6 $wrongv6 -MaxPrefixesAdvertisedIPv6 $maxv6 -BandwidthInMbps $bandwidth -MD5AuthenticationKey $md5} "Invalid Prefix: $wrongv6, must be"removePeerAsn $asn}function Test-NewDirectConnectionWrongV4{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Ashburn"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidthWrite-Debug "Creating Connection at $facilityId"$md5 = getHash$md5 = $md5.ToString()Write-Debug "Created Hash $md5"$sessionv4 = newIpV4Address $true $true 0 0$wrongv4 = changeIp $sessionv4 $false 1 $trueWrite-Debug "Created IPs wrong $wrongv4 correct $sessionv4"$maxv4 = maxAdvertisedIpv4$maxv6 = maxAdvertisedIpv6Write-Debug "Created maxAdvertised $maxv4 $maxv6"Assert-ThrowsContains {New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -SessionPrefixV4 $wrongv4 -MaxPrefixesAdvertisedIPv4 $maxv4 -BandwidthInMbps $bandwidth -MD5AuthenticationKey $md5.ToString} "Invalid Prefix: $wrongv4, must be "removePeerAsn $asn}function Test-NewDirectConnectionWithMicrosoftIpProvidedAddress{$asn = makePeerAsn 65000$kind = isDirect $true;$loc = "Los Angeles"$peeringLocation = getPeeringLocation $kind $loc;$facilityId = $peeringLocation[0].PeeringDBFacilityId$bandwidth = getBandwidthWrite-Debug "Creating Connection at $facilityId"$createdConnection = New-AzPeeringDirectConnectionObject -PeeringDbFacilityId $facilityId -MicrosoftProvidedIPAddress -BandwidthInMbps $bandwidth -UseForPeeringServiceAssert-AreEqual $bandwidth $createdConnection.BandwidthInMbps Assert-AreEqual $facilityId $createdConnection.PeeringDBFacilityId Assert-AreEqual $null $createdConnection.BgpSessionAssert-AreEqual $true $createdConnection.UseForPeeringServiceAssert-AreEqual "Microsoft" $createdConnection.SessionAddressProviderremovePeerAsn $asn}function Test-NewDirectConnectionWithNoPeeringFacility{$asn = makePeerAsn 65000Assert-ThrowsContains {New-AzPeeringDirectConnectionObject -PeeringDbFacilityId} "Missing an argument for parameter 'PeeringDBFacilityId'"removePeerAsn $asn}function Test-NewDirectConnectionWithNoBgpSession{$asn = makePeerAsn 65000$peeringLocation = Get-AzPeeringLocation -Kind Direct$index = Get-Random -Maximum ($peeringLocation.Count -1) -Minimum 1$facilityId = $peeringLocation[$index].PeeringDBFacilityId$bandwidth = getBandwidth$connection = New-AzPeeringDirectConnectionObject -PeeringDBFacilityId $facilityId -BandwidthInMbps $bandwidthAssert-AreEqual $facilityId $connection.PeeringDBFacilityIdAssert-AreEqual $bandwidth $connection.BandwidthInMbpsAssert-AreEqual "Peer" $connection.SessionAddressProviderremovePeerAsn $asn}function Test-NewDirectConnectionWithMicrosoftSession{$asn = makePeerAsn 65000$peeringLocation = Get-AzPeeringLocation -Kind Direct$index = Get-Random -Maximum ($peeringLocation.Count -1) -Minimum 1$facilityId = $peeringLocation[$index].PeeringDBFacilityId$bandwidth = getBandwidth$connection = New-AzPeeringDirectConnectionObject -PeeringDBFacilityId $facilityId -BandwidthInMbps $bandwidth -MicrosoftProvidedIPAddressAssert-AreEqual $facilityId $connection.PeeringDBFacilityIdAssert-AreEqual $bandwidth $connection.BandwidthInMbpsAssert-AreEqual "Microsoft" $connection.SessionAddressProviderAssert-False {$connection.UseForPeeringService}removePeerAsn $asn}function Test-NewDirectConnectionWithMicrosoftSessionWithPeeringService{$asn = makePeerAsn 65000$peeringLocation = Get-AzPeeringLocation -Kind Direct$index = Get-Random -Maximum ($peeringLocation.Count -1) -Minimum 1$facilityId = $peeringLocation[$index].PeeringDBFacilityId$bandwidth = getBandwidth$connection = New-AzPeeringDirectConnectionObject -PeeringDBFacilityId $facilityId -BandwidthInMbps $bandwidth -MicrosoftProvidedIPAddress -UseForPeeringServiceAssert-AreEqual $facilityId $connection.PeeringDBFacilityIdAssert-AreEqual $bandwidth $connection.BandwidthInMbpsAssert-AreEqual "Microsoft" $connection.SessionAddressProviderAssert-True {$connection.UseForPeeringService}removePeerAsn $asn}function Test-NewDirectConnectionWithMicrosoftSessionInvalidV4{$asn = makePeerAsn 65000$peeringLocation = Get-AzPeeringLocation -Kind Direct$index = Get-Random -Maximum ($peeringLocation.Count -1) -Minimum 1$facilityId = $peeringLocation[$index].PeeringDBFacilityId$bandwidth = getBandwidthAssert-ThrowsContains {New-AzPeeringDirectConnectionObject -PeeringDBFacilityId $facilityId -BandwidthInMbps $bandwidth -SessionPrefixV4 4.4.4.4 -MicrosoftProvidedIPAddress} "Parameter set cannot be resolved using the specified named parameters"removePeerAsn $asn}function Test-NewDirectConnectionWithMicrosoftSessionInvalidV6{$asn = makePeerAsn 65000$peeringLocation = Get-AzPeeringLocation -Kind Direct$index = Get-Random -Maximum ($peeringLocation.Count -1) -Minimum 1$facilityId = $peeringLocation[$index].PeeringDBFacilityId$bandwidth = getBandwidthAssert-ThrowsContains {New-AzPeeringDirectConnectionObject -PeeringDBFacilityId $facilityId -BandwidthInMbps $bandwidth -SessionPrefixV6 "fe01::40ef" -MicrosoftProvidedIPAddress} "Parameter set cannot be resolved using the specified named parameters"removePeerAsn $asn}