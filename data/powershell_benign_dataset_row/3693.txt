function Test-ProviderShareSubscriptionGrantAndRevoke{$resourceGroup = getAssetName$AccountName = getAssetName$ShareName = getAssetName$ShareSubId = getAssetName$resourceId = getAssetName$revoked = Revoke-AzDataShareSubscriptionAccess -ResourceGroupName $resourceGroup -AccountName $AccountName -ShareName $ShareName -ShareSubscriptionId $ShareSubIdAssert-NotNull $revoked$revoked = Revoke-AzDataShareSubscriptionAccess -ResourceId $resourceId -ShareSubscriptionId $ShareSubIdAssert-NotNull $revoked$reinstated = Grant-AzDataShareSubscriptionAccess -ResourceGroupName $resourceGroup -AccountName $AccountName -ShareName $ShareName -ShareSubscriptionId $ShareSubIdAssert-NotNull $reinstated$reinstated = Grant-AzDataShareSubscriptionAccess -ResourceId $resourceId -ShareSubscriptionId $ShareSubIdAssert-NotNull $reinstated}function Test-ProviderShareSubscriptionGet{$resourceGroup = getAssetName$AccountName = getAssetName$ShareName = getAssetName$ShareSubscriptionId = getAssetName$retrievedProviderShareSubscription = Get-AzDataShareProviderShareSubscription -AccountName $AccountName -ResourceGroupName $resourceGroup -ShareName $ShareName -ShareSubscriptionId $ShareSubscriptionId$shareSubscriptionName = "sdktestingprovidersharesubscription20"Assert-NotNull $retrievedProviderShareSubscriptionAssert-AreEqual $shareSubscriptionName $retrievedProviderShareSubscription.NameAssert-AreEqual $ShareSubscriptionId $retrievedProviderShareSubscription.ShareSubscriptionObjectIdAssert-AreEqual "Active" $retrievedProviderShareSubscription.ShareSubscriptionStatusAssert-AreEqual "Microsoft" $retrievedProviderShareSubscription.Company}