function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Get-ManagedAppAppConfigPolicy(){$graphApiVersion = "Beta"$Resource = "deviceAppManagement/targetedManagedAppConfigurations?`$expand=apps"try{$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value }catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-ManagedDeviceAppConfigPolicy(){$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileAppConfigurations"try{$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value }catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-AppBundleID(){param ($GUID)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileApps?`$filter=id eq '$GUID'"try{$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).value}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Export-JSONData(){param ($JSON,$ExportPath,$bundleID)try {if($JSON -eq "" -or $JSON -eq $null){write-host "No JSON specified, please specify valid JSON..." -f Red}elseif(!$ExportPath){write-host "No export path parameter set, please provide a path to export the file" -f Red}elseif(!(Test-Path $ExportPath)){write-host "$ExportPath doesn't exist, can't export JSON Data" -f Red}else {$JSON1 = ConvertTo-Json $JSON -Depth 5$JSON_Convert = $JSON1 | ConvertFrom-Json$displayName = $JSON_Convert.displayName$DisplayName = $DisplayName -replace '\<|\>|:|"|/|\\|\||\?|\*', "_"$Properties = ($JSON_Convert | Get-Member | ? { $_.MemberType -eq "NoteProperty" }).Name$FileName_JSON = "$DisplayName" + "_" + $(get-date -f dd-MM-yyyy-H-mm-ss) + "1.json"$Object = New-Object System.Objectforeach($Property in $Properties){$Object | Add-Member -MemberType NoteProperty -Name $Property -Value $JSON_Convert.$Property}If($bundleID){$Object | Add-Member -MemberType NoteProperty -name "bundleID" -Value $bundleID}write-host "Export Path:" "$ExportPath"$object | ConvertTo-Json -Depth 5 | Set-Content -LiteralPath "$ExportPath\$FileName_JSON"write-host "JSON created in $ExportPath\$FileName_JSON..." -f cyan}}catch {$_.Exception}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}$ExportPath = Read-Host -Prompt "Please specify a path to export the policy data to e.g. C:\IntuneOutput"$ExportPath = $ExportPath.replace('"','')if(!(Test-Path "$ExportPath")){Write-HostWrite-Host "Path '$ExportPath' doesn't exist, do you want to create this directory? Y or N?" -ForegroundColor Yellow$Confirm = read-hostif($Confirm -eq "y" -or $Confirm -eq "Y"){new-item -ItemType Directory -Path "$ExportPath" | Out-NullWrite-Host}else {Write-Host "Creation of directory path was cancelled..." -ForegroundColor RedWrite-Hostbreak}}Write-HostWrite-Host "----------------------------------------------------"Write-Host$managedAppAppConfigPolicies = Get-ManagedAppAppConfigPolicyforeach($policy in $managedAppAppConfigPolicies){write-host "(Managed App) App Configuration Policy:"$policy.displayName -f YellowExport-JSONData -JSON $policy -ExportPath "$ExportPath"Write-Host}$managedDeviceAppConfigPolicies = Get-ManagedDeviceAppConfigPolicyforeach($policy in $managedDeviceAppConfigPolicies){write-host "(Managed Device) App Configuration  Policy:"$policy.displayName -f YellowIf($policy.'@odata.type' -eq "$bundleID = Get-AppBundleID -GUID $policy.targetedMobileAppsExport-JSONData -JSON $policy -ExportPath "$ExportPath" -bundleID $bundleID.bundleIDWrite-Host}Else{Export-JSONData -JSON $policy -ExportPath "$ExportPath"Write-Host}}