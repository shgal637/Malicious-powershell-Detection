function Test-Trigger{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$triggername = "foo"$expected = Set-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -File .\Resources\scheduletrigger.json -Force$actual = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameVerify-Trigger $expected $actual $rgname $dfname $triggernameRemove-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force}finally{CleanUp $rgname $dfname}}function Test-StartTriggerThrowsWithoutPipeline{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$triggername = "foo"$expected = Set-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -File .\Resources\scheduletrigger.json -Force$actual = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameVerify-Trigger $expected $actual $rgname $dfname $triggernameAssert-ThrowsContains {Start-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force} "BadRequest"Remove-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force}finally{CleanUp $rgname $dfname}}function Test-TriggerRun{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$lsName = "foo1"Set-AzDataFactoryV2LinkedService -ResourceGroupName $rgname -DataFactoryName $dfname -File .\Resources\linkedService.json -Name $lsName -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "dsIn" -File .\Resources\dataset-dsIn.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds0_0" -File .\Resources\dataset-ds0_0.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds1_0" -File .\Resources\dataset-ds1_0.json -Force$pipelineName = "samplePipeline"   Set-AzDataFactoryV2Pipeline -ResourceGroupName $rgname -Name $pipelineName -DataFactoryName $dfname -File ".\Resources\pipeline.json" -Force$triggername = "foo"$expected = Set-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -File .\Resources\scheduleTriggerWithPipeline.json -Force$actual = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameVerify-Trigger $expected $actual $rgname $dfname $triggername$startDate = [DateTime]::Parse("09/10/2017")Start-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$started = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Started' $started.RuntimeState if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback) {Start-Sleep -s 150}$endDate = $startDate.AddYears(1)$triggerRuns = Get-AzDataFactoryV2TriggerRun -ResourceGroupName $rgname -DataFactoryName $dfname -TriggerName $triggername -TriggerRunStartedAfter $startDate -TriggerRunStartedBefore $endDateif($triggerRuns.Count -lt 1){throw "Expected atleast 1 trigger run"}Stop-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$stopped = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Stopped' $stopped.RuntimeState Remove-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force}finally{CleanUp $rgname $dfname}}function Test-BlobEventTriggerSubscriptions{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$lsName = "foo1"Set-AzDataFactoryV2LinkedService -ResourceGroupName $rgname -DataFactoryName $dfname -File .\Resources\linkedService.json -Name $lsName -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "dsIn" -File .\Resources\dataset-dsIn.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds0_0" -File .\Resources\dataset-ds0_0.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds1_0" -File .\Resources\dataset-ds1_0.json -Force$pipelineName = "samplePipeline"   Set-AzDataFactoryV2Pipeline -ResourceGroupName $rgname -Name $pipelineName -DataFactoryName $dfname -File ".\Resources\pipeline.json" -Force$triggername = "foo"$expected = Set-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -File .\Resources\blobeventtrigger.json -Force$actual = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameVerify-Trigger $expected $actual $rgname $dfname $triggername$startDate = [DateTime]::Parse("09/10/2017")Add-AzDataFactoryV2TriggerSubscription -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername$status = Get-AzDataFactoryV2TriggerSubscriptionStatus -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernamewhile ($status.Status -ne "Enabled"){if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback) {Start-Sleep -s 150}$status = Get-AzDataFactoryV2TriggerSubscriptionStatus -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername}Start-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$started = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Started' $started.RuntimeState Remove-AzDataFactoryV2TriggerSubscription -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -ForceStop-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$stopped = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Stopped' $stopped.RuntimeState Remove-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force}finally{CleanUp $rgname $dfname}}function Test-BlobEventTriggerSubscriptionsByInputObject{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$lsName = "foo1"Set-AzDataFactoryV2LinkedService -ResourceGroupName $rgname -DataFactoryName $dfname -File .\Resources\linkedService.json -Name $lsName -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "dsIn" -File .\Resources\dataset-dsIn.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds0_0" -File .\Resources\dataset-ds0_0.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds1_0" -File .\Resources\dataset-ds1_0.json -Force$pipelineName = "samplePipeline"   Set-AzDataFactoryV2Pipeline -ResourceGroupName $rgname -Name $pipelineName -DataFactoryName $dfname -File ".\Resources\pipeline.json" -Force$triggername = "foo"$expected = Set-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -File .\Resources\blobeventtrigger.json -Force$actual = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameVerify-Trigger $expected $actual $rgname $dfname $triggernameAdd-AzDataFactoryV2TriggerSubscription $actual$status = Get-AzDataFactoryV2TriggerSubscriptionStatus $actualwhile ($status.Status -ne "Enabled"){if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback) {Start-Sleep -s 150}$status = Get-AzDataFactoryV2TriggerSubscriptionStatus $actual}Start-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$started = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Started' $started.RuntimeState Remove-AzDataFactoryV2TriggerSubscription $started -ForceStop-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$stopped = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Stopped' $stopped.RuntimeState Remove-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force}finally{CleanUp $rgname $dfname}}function Test-BlobEventTriggerSubscriptionsByResourceId{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$lsName = "foo1"Set-AzDataFactoryV2LinkedService -ResourceGroupName $rgname -DataFactoryName $dfname -File .\Resources\linkedService.json -Name $lsName -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "dsIn" -File .\Resources\dataset-dsIn.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds0_0" -File .\Resources\dataset-ds0_0.json -ForceSet-AzDataFactoryV2Dataset -ResourceGroupName $rgname -DataFactoryName $dfname -Name "ds1_0" -File .\Resources\dataset-ds1_0.json -Force$pipelineName = "samplePipeline"   Set-AzDataFactoryV2Pipeline -ResourceGroupName $rgname -Name $pipelineName -DataFactoryName $dfname -File ".\Resources\pipeline.json" -Force$triggername = "foo"$expected = Set-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -File .\Resources\blobeventtrigger.json -Force$actual = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameVerify-Trigger $expected $actual $rgname $dfname $triggernameAdd-AzDataFactoryV2TriggerSubscription -ResourceId $expected.Id$status = Get-AzDataFactoryV2TriggerSubscriptionStatus -ResourceId $expected.Idwhile ($status.Status -ne "Enabled"){if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback) {Start-Sleep -s 150}$status = Get-AzDataFactoryV2TriggerSubscriptionStatus -ResourceId $expected.Id}Start-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$started = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Started' $started.RuntimeState Remove-AzDataFactoryV2TriggerSubscription -ResourceId $expected.Id -ForceStop-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force$stopped = Get-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggernameAssert-AreEqual 'Stopped' $stopped.RuntimeState Remove-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -Force}finally{CleanUp $rgname $dfname}}function Test-TriggerWithResourceId{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{$df = Set-AzDataFactoryV2 -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$triggername = "foo"$expected = Set-AzDataFactoryV2Trigger -ResourceGroupName $rgname -DataFactoryName $dfname -Name $triggername -File .\Resources\scheduletrigger.json -Force$actual = Get-AzDataFactoryV2Trigger -ResourceId $expected.IdVerify-Trigger $expected $actual $rgname $dfname $triggernameRemove-AzDataFactoryV2Trigger -ResourceId $expected.Id -Force}finally{CleanUp $rgname $dfname}}function Verify-Trigger ($expected, $actual, $rgname, $dfname, $name){Verify-AdfSubResource $expected $actual $rgname $dfname $triggernameAssert-AreEqual $expected.RuntimeState $actual.RuntimeState}