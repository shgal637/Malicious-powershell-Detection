function Test-NewExchangePeering(){$resourceName = getAssetName "NewExchangePeeringCVS"$resourceGroup = "testCarrier"$peeringLocation = "Berlin"$kind = IsDirect $falseWrite-Debug "Getting the Facility Information"try {Write-Debug "Getting the Asn Information"$randNum = getRandomNumberWrite-Debug "Random Number $randNum";$peerAsn = makePeerAsn $randNum$asn = $peerAsn.Id$facility = Get-AzPeeringLocation -PeeringLocation $peeringLocation -Kind $kind$microsoftIpAddressV4 = $facility[0].MicrosoftIPv4Address.Split(',') | Select-Object -First 1$microsoftIpAddressV6 = $facility[0].MicrosoftIPv6Address.Split(',') | Select-Object -First 1$facilityId = $facility[0].PeeringDBFacilityId$peeringLocation = $facility[0].PeeringLocationWrite-Debug "Creating Connections"$connection1 = NewExchangeConnectionV4V6 $facilityId $microsoftIpAddressV4 $microsoftIpAddressV6$connection2 = NewExchangeConnectionV4V6 $facilityId $microsoftIpAddressV4 $microsoftIpAddressV6Write-Debug "Created $connection1 $connection1"$tags = @{"tfs_$randNum" = "Active"; "tag2" = "value2"}Write-Debug "Tags: $tags";Write-Debug "Creating Resource $resourceName"$createdPeering = New-AzPeering -Name $resourceName -ResourceGroupName $resourceGroup -PeeringLocation $peeringLocation -PeerAsnResourceId $asn -ExchangeConnection $connection1,$connection2 -Tag $tagsAssert-NotNull $createdPeeringAssert-NotNull $createdPeering.Connections.ConnectionIdentifier}finally{$isRemoved = Remove-AzPeerAsn -Name $peerAsn.Name -Force -PassThru;Assert-True {$isRemoved}}}function Test-NewExchangePeeringPipe{$resourceName = getAssetName "NewExchangePeeringCVS"$resourceGroup = "testCarrier"$peeringLocation = "Amsterdam"$kind = IsDirect $falsetry{Write-Debug "Getting the Facility Information"$facility = Get-AzPeeringLocation -PeeringLocation $peeringLocation -Kind $kind$microsoftIpAddressV4 = $facility[0].MicrosoftIPv4Address$microsoftIpAddressV6 = $facility[0].MicrosoftIPv6Address$facilityId = $facility[0].PeeringDBFacilityId$peeringLocation = $facility[0].PeeringLocationWrite-Debug "Getting the Asn Information"$randNum = getRandomNumberWrite-Debug "Random Number $randNum";$peerAsn = makePeerAsn $randNum$asn = $peerAsn.IdWrite-Debug "Creating Connections"$connection1 = NewExchangeConnectionV4V6 $facilityId $microsoftIpAddressV4 $microsoftIpAddressV6$tags = @{"tfs_$randNum" = "Active"; "tag2" = "value2"}Write-Debug "Creating Resource $resourceName"$createdPeering = New-AzPeering -Name $resourceName -ResourceGroupName $resourceGroup -PeeringLocation $peeringLocation -PeerAsnResourceId $asn -Tag $tags -ExchangeConnection $connection1Assert-NotNull $createdPeeringAssert-NotNull $createdPeering.Connections.ConnectionIdentifier}catch{}finally{$isRemoved = Remove-AzPeerAsn -Name $peerAsn.Name -Force -PassThruAssert-True {$isRemoved}}}