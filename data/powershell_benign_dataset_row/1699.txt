[CmdletBinding()]Param([Parameter(Mandatory = $true)][ValidateNotNullorEmpty()][PSCredential]$Credential)If (-not $PSScriptRoot) {$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent}$Script:ThisCommand = $MyInvocation.MyCommand$ProjectRoot = Resolve-Path "$PSScriptRoot\.."$ModuleRoot = Split-Path (Resolve-Path "$ProjectRoot\*\*.psd1")$ModuleName = Split-Path $ModuleRoot -Leaf$ModulePsd = (Resolve-Path "$ProjectRoot\*\$ModuleName.psd1").Path$ModulePsm = (Resolve-Path "$ProjectRoot\*\$ModuleName.psm1").Path$DefaultsFile = Join-Path $ProjectRoot "Tests\$($ModuleName).Pester.Defaults.json"$ModuleLoaded = Get-Module $ModuleNameIf ($null -eq $ModuleLoaded) {Import-Module $ModulePSD -Force}ElseIf ($null -ne $ModuleLoaded -and $ModuleLoaded -ne $ModulePSM) {Remove-Module $ModuleName -Force -ErrorAction SilentlyContinueImport-Module $ModulePSD -Force}If (Test-Path $DefaultsFile) {$Script:Defaults = Get-Content $DefaultsFile -Raw | ConvertFrom-JsonIf ('testingurl.service-now.com' -eq $Defaults.ServiceNowUrl) {Throw 'Please populate the *.Pester.Defaults.json file with your values'}}Else {@{ServiceNowURL = 'testingurl.service-now.com'TestCategory  = 'Internal'TestUserGroup = '8a4dde73c6112278017a6a4baf547aa7'TestUser      = '6816f79cc0a8016401c5a33be04be441'} | ConvertTo-Json | Set-Content $DefaultsFileThrow "$DefaultsFile does not exist. Created example file. Please populate with your values"}Describe "$ThisCommand" -Tag Attachment {$null = Set-ServiceNowAuth -Url $Defaults.ServiceNowUrl -Credentials $CredentialIt "Create incident with New-ServiceNowIncident" {$ShortDescription = "Testing Ticket Creation with Pester:  $ThisCommand"$newServiceNowIncidentSplat = @{Caller               = $Defaults.TestUserShortDescription     = $ShortDescriptionDescription          = 'Long description'Comment              = 'Test Comment'ServiceNowCredential = $CredentialServiceNowURL        = $Defaults.ServiceNowURL}$Script:TestTicket = New-ServiceNowIncident @newServiceNowIncidentSplat$TestTicket.short_description | Should -Be $ShortDescription}It 'Attachment test file exist' {$FileValue = "{0}`t{1}" -f (Get-Date), $ThisCommand$FileName = "{0}.txt" -f ('GetServiceNowAttachment')$newItemSplat = @{Name     = $FileNameItemType = 'File'Value    = $FileValue}$Script:File = New-Item @newItemSplat$File.FullName | Should -Exist}It "File is attached to $($TestTicket.Number)" {$addServiceNowAttachmentSplat = @{Number        = $TestTicket.NumberTable         = 'incident'File          = $File.FullNameCredential    = $CredentialServiceNowURL = $Defaults.ServiceNowURLPassThru      = $true}$Script:Attachment = Add-ServiceNowAttachment @addServiceNowAttachmentSplat$Attachment.file_name | Should -Be $File.Name}It 'Attachment test file removed' {Remove-Item $File.FullName -Force$File.FullName | Should -Not -Exist}$Script:FileName = 'DownloadServiceNowAttachment.txt'$Script:ExpectedOutput = "{0}_{1}{2}" -f [io.path]::GetFileNameWithoutExtension($FileName),$Attachment.sys_id, [io.path]::GetExtension($FileName)It 'Attachment download successful (Global Credentials, Append Name)' {$getServiceNowAttachmentSplat = @{FileName            = $FileNameSysId               = $Attachment.sys_idAppendNameWithSysID = $true}{Get-ServiceNowAttachment @getServiceNowAttachmentSplat} | Should -Not -Throw$ExpectedOutput | Should -Exist}It 'Attachment download successful (Specify Credentials, Allow Overwrite)' {$getServiceNowAttachmentSplat = @{FileName            = $FileNameSysId               = $Attachment.sys_idAppendNameWithSysID = $trueAllowOverwrite      = $trueCredential          = $CredentialServiceNowURL       = $Defaults.ServiceNowURL}{Get-ServiceNowAttachment @getServiceNowAttachmentSplat} | Should -Not -Throw}It 'Attachment test file removed' {Try {Remove-Item $ExpectedOutput -Force -ErrorAction Stop}Catch {Write-Error $PSItem}$ExpectedOutput | Should -Not -Exist}$null = Remove-ServiceNowAuth}