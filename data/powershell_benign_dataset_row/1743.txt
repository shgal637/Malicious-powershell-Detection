param ([string] $location = "/powershell",[string] $destination = '/mnt',[ValidatePattern("^v\d+\.\d+\.\d+(-\w+(\.\d+)?)?$")][ValidateNotNullOrEmpty()][string]$ReleaseTag,[switch]$TarX64,[switch]$TarArm,[switch]$TarArm64,[switch]$FxDependent,[switch]$Alpine)$releaseTagParam = @{}if ($ReleaseTag){$releaseTagParam = @{ 'ReleaseTag' = $ReleaseTag }}Push-Locationtry {Set-Location $locationImport-Module "$location/build.psm1"Import-Module "$location/tools/packaging"Start-PSBootstrap -Package -NoSudo$buildParams = @{ Configuration = 'Release'; PSModuleRestore = $true}if($FxDependent.IsPresent) {$projectAssetsZipName = 'linuxFxDependantProjectAssetssymbols.zip'$buildParams.Add("Runtime", "fxdependent")} elseif ($Alpine.IsPresent) {$projectAssetsZipName = 'linuxAlpineProjectAssetssymbols.zip'$buildParams.Add("Runtime", 'alpine-x64')} else {$projectAssetsZipName = "linuxProjectAssets-$((get-date).Ticks)-symbols.zip"$buildParams.Add("Crossgen", $true)}Start-PSBuild @buildParams @releaseTagParamif($FxDependent) {Start-PSPackage -Type 'fxdependent' @releaseTagParam} elseif ($Alpine) {Start-PSPackage -Type 'tar-alpine' @releaseTagParam} else {Start-PSPackage @releaseTagParam}if ($TarX64) { Start-PSPackage -Type tar @releaseTagParam }if ($TarArm) {Start-PSBuild -Configuration Release -Restore -Runtime linux-arm -PSModuleRestore @releaseTagParamStart-PSPackage -Type tar-arm @releaseTagParam}if ($TarArm64) {Start-PSBuild -Configuration Release -Restore -Runtime linux-arm64 -PSModuleRestore @releaseTagParamStart-PSPackage -Type tar-arm64 @releaseTagParam}}finally{Pop-Location}$linuxPackages = Get-ChildItem "$location/powershell*" -Include *.deb,*.rpm,*.tar.gzforeach ($linuxPackage in $linuxPackages){$filePath = $linuxPackage.FullNameWrite-Verbose "Copying $filePath to $destination" -VerboseCopy-Item -Path $filePath -Destination $destination -force}Write-Verbose "Exporting project.assets files ..." -verbose$projectAssetsCounter = 1$projectAssetsFolder = Join-Path -Path $destination -ChildPath 'projectAssets'$projectAssetsZip = Join-Path -Path $destination -ChildPath $projectAssetsZipNameGet-ChildItem $location\project.assets.json -Recurse | ForEach-Object {$subfolder = $_.FullName.Replace($location,'')$subfolder.Replace('project.assets.json','')$itemDestination = Join-Path -Path $projectAssetsFolder -ChildPath $subfolderNew-Item -Path $itemDestination -ItemType Directory -Force$file = $_.FullNameWrite-Verbose "Copying $file to $itemDestination" -verboseCopy-Item -Path $file -Destination "$itemDestination\" -Force$projectAssetsCounter++}Compress-Archive -Path $projectAssetsFolder -DestinationPath $projectAssetsZipRemove-Item -Path $projectAssetsFolder -Recurse -Force -ErrorAction SilentlyContinue