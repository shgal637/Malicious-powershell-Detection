function Test-ExpressRouteBGPServiceCommunities{$communities = Get-AzBgpServiceCommunityAssert-NotNull $communities$crmOnlineCommunity = $communities | Where-Object {$_.ServiceName -match "CRMOnline"}Assert-NotNull $crmOnlineCommunity.BgpCommunitiesAssert-AreEqual true $crmOnlineCommunity.BgpCommunities[0].IsAuthorizedToUse}function Test-ExpressRouteRouteFilters{$rgname = Get-ResourceGroupName$ruleName = Get-ResourceName$filterName = Get-ResourceName$location = Get-ProviderLocation "Microsoft.Network/routeFilters" "westcentralus"try{$resourceGroup = New-AzResourceGroup -Name $rgname -Location $location$job = New-AzRouteFilter -Name $filterName -ResourceGroupName $rgname -Location $location -Force -AsJob$job | Wait-Job$filter = $job | Receive-JobAssert-AreEqual $rgName $filter.ResourceGroupNameAssert-AreEqual $filterName $filter.NameAssert-NotNull $filter.LocationAssert-AreEqual 0 @($filter.Rules).Count$rule = New-AzRouteFilterRuleConfig -Name $ruleName -Access Allow -RouteFilterRuleType Community -CommunityList "12076:5010" -Force$filter = Get-AzRouteFilter -Name $filterName -ResourceGroupName $rgname$filter.Rules.Add($rule)$job = Set-AzRouteFilter -RouteFilter $filter -Force -AsJob$job | Wait-Job$filter = $job | Receive-JobAssert-AreEqual $rgName $filter.ResourceGroupNameAssert-AreEqual $filterName $filter.NameAssert-NotNull $filter.LocationAssert-AreEqual 1 @($filter.Rules).Count$filter = Get-AzRouteFilter -Name $filterName -ResourceGroupName $rgname$filter.Rules.Clear()$filter = Set-AzRouteFilter -RouteFilter $filter -ForceAssert-AreEqual $rgName $filter.ResourceGroupNameAssert-AreEqual $filterName $filter.NameAssert-NotNull $filter.LocationAssert-AreEqual 0 @($filter.Rules).Count}finally{Clean-ResourceGroup $rgname}}function Test-ExpressRouteCircuitStageCRUD{$rgname = 'movecircuit'$circuitName = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement "Brazil South"$location = Get-ProviderLocation "Microsoft.Network/expressRouteCircuits" "Brazil South"try {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation$job = New-AzExpressRouteCircuit -Name $circuitName -Location $location -ResourceGroupName $rgname -SkuTier Standard -SkuFamily MeteredData  -ServiceProviderName "equinix" -PeeringLocation "Silicon Valley" -BandwidthInMbps 500 -AllowClassicOperations $true -AsJob$job | Wait-Job$circuit = $job | Receive-Job$circuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname$circuit.AllowClassicOperations = $false$circuit = Set-AzExpressRouteCircuit -ExpressRouteCircuit $circuit$actual = Get-AzExpressRouteCircuitStats -ResourceGroupName $rgname -ExpressRouteCircuitName $circuit.Name Assert-AreEqual $actual.PrimaryBytesIn 0$job = Move-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname -Location $location -ServiceKey $circuit.ServiceKey -Force -AsJob$job | Wait-Job$job = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -name $circuitName -PassThru -Force -AsJob$job | Wait-Job$delete = $job | Receive-JobAssert-AreEqual true $delete$list = Get-AzExpressRouteCircuit -ResourceGroupName $rgnameAssert-Null ($list | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $circuitName });$list = Get-AzExpressRouteCircuit -ResourceGroupName "*"Assert-Null ($list | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $circuitName });$list = Get-AzExpressRouteCircuit -Name "*"Assert-Null ($list | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $circuitName });$list = Get-AzExpressRouteCircuit -ResourceGroupName "*" -Name "*"Assert-Null ($list | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $circuitName });}finally{Clean-ResourceGroup $rgname}}function Test-ExpressRouteCircuitCRUD{$rgname = Get-ResourceGroupName$circuitName = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$location = Get-ProviderLocation "Microsoft.Network/expressRouteCircuits" "Brazil South"try {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation$circuit = New-AzExpressRouteCircuit -Name $circuitName -Location $location -ResourceGroupName $rgname -SkuTier Standard -SkuFamily MeteredData  -ServiceProviderName "equinix" -PeeringLocation "Silicon Valley" -BandwidthInMbps 500;$getCircuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgnameAssert-AreEqual $rgName $getCircuit.ResourceGroupNameAssert-AreEqual $circuitName $getCircuit.NameAssert-NotNull $getCircuit.LocationAssert-NotNull $getCircuit.EtagAssert-AreEqual 0 @($getCircuit.Peerings).CountAssert-AreEqual "Standard_MeteredData" $getCircuit.Sku.NameAssert-AreEqual "Standard" $getCircuit.Sku.TierAssert-AreEqual "MeteredData" $getCircuit.Sku.FamilyAssert-AreEqual "equinix" $getCircuit.ServiceProviderProperties.ServiceProviderNameAssert-AreEqual "Silicon Valley" $getCircuit.ServiceProviderProperties.PeeringLocationAssert-AreEqual "500" $getCircuit.ServiceProviderProperties.BandwidthInMbps$list = Get-AzExpressRouteCircuit -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $getCircuit.ResourceGroupNameAssert-AreEqual $list[0].Name $getCircuit.NameAssert-AreEqual $list[0].Location $getCircuit.LocationAssert-AreEqual $list[0].Etag $getCircuit.EtagAssert-AreEqual @($list[0].Peerings).Count @($getCircuit.Peerings).Count$getCircuit.ServiceProviderProperties.BandwidthInMbps = 1000$getCircuit.Sku.Tier = "Premium"$getCircuit.Sku.Family = "UnlimitedData"$job = Set-AzExpressRouteCircuit -ExpressRouteCircuit $getCircuit -AsJob$job | Wait-Job$getCircuit = $job | Receive-JobAssert-AreEqual $rgName $getCircuit.ResourceGroupNameAssert-AreEqual $circuitName $getCircuit.NameAssert-NotNull $getCircuit.LocationAssert-NotNull $getCircuit.EtagAssert-AreEqual 0 @($getCircuit.Peerings).CountAssert-AreEqual "Standard_MeteredData" $getCircuit.Sku.NameAssert-AreEqual "Premium" $getCircuit.Sku.TierAssert-AreEqual "UnlimitedData" $getCircuit.Sku.FamilyAssert-AreEqual "equinix" $getCircuit.ServiceProviderProperties.ServiceProviderNameAssert-AreEqual "Silicon Valley" $getCircuit.ServiceProviderProperties.PeeringLocationAssert-AreEqual "1000" $getCircuit.ServiceProviderProperties.BandwidthInMbps$delete = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -name $circuitName -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzExpressRouteCircuit -ResourceGroupName $rgnameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-ExpressRouteCircuitPrivatePublicPeeringCRUD{$rgname = Get-ResourceGroupName$circuitName = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$location = Get-ProviderLocation "Microsoft.Network/expressRouteCircuits" "Brazil South"try {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation$peering = New-AzExpressRouteCircuitPeeringConfig -Name AzurePrivatePeering -PeeringType AzurePrivatePeering -PeerASN 100 -PrimaryPeerAddressPrefix "192.168.1.0/30" -SecondaryPeerAddressPrefix "192.168.2.0/30" -VlanId 22$circuit = New-AzExpressRouteCircuit -Name $circuitName -Location $location -ResourceGroupName $rgname -SkuTier Standard -SkuFamily MeteredData  -ServiceProviderName "equinix" -PeeringLocation "Silicon Valley" -BandwidthInMbps 1000 -Peering $peeringAssert-AreEqual $rgName $circuit.ResourceGroupNameAssert-AreEqual $circuitName $circuit.NameAssert-NotNull $circuit.LocationAssert-NotNull $circuit.EtagAssert-AreEqual 1 @($circuit.Peerings).CountAssert-AreEqual "Standard_MeteredData" $circuit.Sku.NameAssert-AreEqual "Standard" $circuit.Sku.TierAssert-AreEqual "MeteredData" $circuit.Sku.FamilyAssert-AreEqual "equinix" $circuit.ServiceProviderProperties.ServiceProviderNameAssert-AreEqual "Silicon Valley" $circuit.ServiceProviderProperties.PeeringLocationAssert-AreEqual "1000" $circuit.ServiceProviderProperties.BandwidthInMbpsAssert-AreEqual "AzurePrivatePeering" $circuit.Peerings[0].NameAssert-AreEqual "AzurePrivatePeering" $circuit.Peerings[0].PeeringTypeAssert-AreEqual "100" $circuit.Peerings[0].PeerASNAssert-AreEqual "192.168.1.0/30" $circuit.Peerings[0].PrimaryPeerAddressPrefixAssert-AreEqual "192.168.2.0/30" $circuit.Peerings[0].SecondaryPeerAddressPrefixAssert-AreEqual "22" $circuit.Peerings[0].VlanId$stats = Get-AzExpressRouteCircuitStats -ResourceGroupName $rgname -ExpressRouteCircuitName $circuit.Name -PeeringType AzurePrivatePeeringAssert-AreEqual $stats.PrimaryBytesIn 0Get-AzExpressRouteCircuitARPTable -ResourceGroupName $rgname -ExpressRouteCircuitName $circuit.Name -PeeringType AzurePrivatePeering -DevicePath PrimaryGet-AzExpressRouteCircuitRouteTableSummary -ResourceGroupName $rgname -ExpressRouteCircuitName $circuit.Name -PeeringType AzurePrivatePeering -DevicePath PrimaryGet-AzExpressRouteCircuitRouteTable -ResourceGroupName $rgname -ExpressRouteCircuitName $circuit.Name -PeeringType AzurePrivatePeering -DevicePath Primary$p = $circuit | Get-AzExpressRouteCircuitPeeringConfig -Name AzurePrivatePeeringAssert-AreEqual "AzurePrivatePeering" $p.NameAssert-AreEqual "AzurePrivatePeering" $p.PeeringTypeAssert-AreEqual "100" $p.PeerASNAssert-AreEqual "192.168.1.0/30" $p.PrimaryPeerAddressPrefixAssert-AreEqual "192.168.2.0/30" $p.SecondaryPeerAddressPrefixAssert-AreEqual "22" $p.VlanIdAssert-Null $p.MicrosoftPeeringConfig$listPeering = $circuit | Get-AzExpressRouteCircuitPeeringConfigAssert-AreEqual 1 @($listPeering).Count$delete = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -name $circuitName -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzExpressRouteCircuit -ResourceGroupName $rgnameAssert-AreEqual 0 @($list).Count	}finally{Clean-ResourceGroup $rgname}}function Test-ExpressRouteCircuitMicrosoftPeeringCRUD{$rgname = Get-ResourceGroupName$circuitName = Get-ResourceName$filterName = "filter"$ruleName = "rule"$rglocation = Get-ProviderLocation ResourceManagement$location = Get-ProviderLocation "Microsoft.Network/expressRouteCircuits" "Brazil South"try {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation    $peering = New-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeering -PeeringType MicrosoftPeering -PeerASN 33 -PrimaryPeerAddressPrefix "192.171.1.0/30" -SecondaryPeerAddressPrefix "192.171.2.0/30" -VlanId 224 -MicrosoftConfigAdvertisedPublicPrefixes @("11.2.3.4/30", "12.2.3.4/30") -MicrosoftConfigCustomerAsn 1000 -MicrosoftConfigRoutingRegistryName AFRINIC -LegacyMode $true $circuit = New-AzExpressRouteCircuit -Name $circuitName -Location $location -ResourceGroupName $rgname -SkuTier Premium -SkuFamily MeteredData  -ServiceProviderName "equinix" -PeeringLocation "Silicon Valley" -BandwidthInMbps 1000 -Peering $peering	Assert-AreEqual $rgName $circuit.ResourceGroupNameAssert-AreEqual $circuitName $circuit.NameAssert-NotNull $circuit.LocationAssert-NotNull $circuit.EtagAssert-AreEqual 1 @($circuit.Peerings).CountAssert-AreEqual "Premium_MeteredData" $circuit.Sku.NameAssert-AreEqual "Premium" $circuit.Sku.TierAssert-AreEqual "MeteredData" $circuit.Sku.FamilyAssert-AreEqual "equinix" $circuit.ServiceProviderProperties.ServiceProviderNameAssert-AreEqual "Silicon Valley" $circuit.ServiceProviderProperties.PeeringLocationAssert-AreEqual "1000" $circuit.ServiceProviderProperties.BandwidthInMbpsAssert-AreEqual "MicrosoftPeering" $circuit.Peerings[0].NameAssert-AreEqual "MicrosoftPeering" $circuit.Peerings[0].PeeringTypeAssert-AreEqual "192.171.1.0/30" $circuit.Peerings[0].PrimaryPeerAddressPrefixAssert-AreEqual "192.171.2.0/30" $circuit.Peerings[0].SecondaryPeerAddressPrefixAssert-AreEqual "224" $circuit.Peerings[0].VlanIdAssert-NotNull $circuit.Peerings[0].MicrosoftPeeringConfigAssert-AreEqual "1000" $circuit.Peerings[0].MicrosoftPeeringConfig.CustomerASNAssert-AreEqual "AFRINIC" $circuit.Peerings[0].MicrosoftPeeringConfig.RoutingRegistryNameAssert-AreEqual 2 @($circuit.Peerings[0].MicrosoftPeeringConfig.AdvertisedPublicPrefixes).CountAssert-NotNull $circuit.Peerings[0].MicrosoftPeeringConfig.AdvertisedPublicPrefixesState$rule = New-AzRouteFilterRuleConfig -Name $ruleName -Access Allow -RouteFilterRuleType Community -CommunityList "12076:5010" -Force	$filter = New-AzRouteFilter -Name $filterName -ResourceGroupName $rgname -Location $location -Rule $rule -Force$circuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname$circuit.Peerings[0].RouteFilter = $filterSet-AzExpressRouteCircuit -ExpressRouteCircuit $circuit$p = $circuit | Get-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeeringAssert-AreEqual "MicrosoftPeering" $p.NameAssert-AreEqual "MicrosoftPeering" $p.PeeringTypeAssert-AreEqual "192.171.1.0/30" $p.PrimaryPeerAddressPrefixAssert-AreEqual "192.171.2.0/30" $p.SecondaryPeerAddressPrefixAssert-AreEqual "224" $p.VlanIdAssert-NotNull $p.MicrosoftPeeringConfigAssert-AreEqual "1000" $p.MicrosoftPeeringConfig.CustomerASNAssert-AreEqual "AFRINIC" $p.MicrosoftPeeringConfig.RoutingRegistryNameAssert-AreEqual 2 @($p.MicrosoftPeeringConfig.AdvertisedPublicPrefixes).CountAssert-NotNull $p.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState$listPeering = $circuit | Get-AzExpressRouteCircuitPeeringConfigAssert-AreEqual 1 @($listPeering).Count$circuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname | Set-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeering -PeeringType MicrosoftPeering -PeerASN 44 -PrimaryPeerAddressPrefix "192.171.1.0/30" -SecondaryPeerAddressPrefix "192.171.2.0/30" -VlanId 555 -MicrosoftConfigAdvertisedPublicPrefixes @("11.2.3.4/30", "12.2.3.4/30") -MicrosoftConfigCustomerAsn 1000 -MicrosoftConfigRoutingRegistryName AFRINIC | Set-AzExpressRouteCircuit $p = $circuit | Get-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeeringAssert-AreEqual "MicrosoftPeering" $p.NameAssert-AreEqual "MicrosoftPeering" $p.PeeringTypeAssert-AreEqual "44" $p.PeerASNAssert-AreEqual "192.171.1.0/30" $p.PrimaryPeerAddressPrefixAssert-AreEqual "192.171.2.0/30" $p.SecondaryPeerAddressPrefixAssert-AreEqual "555" $p.VlanIdAssert-NotNull $p.MicrosoftPeeringConfigAssert-AreEqual "1000" $p.MicrosoftPeeringConfig.CustomerASNAssert-AreEqual "AFRINIC" $p.MicrosoftPeeringConfig.RoutingRegistryNameAssert-AreEqual 2 @($p.MicrosoftPeeringConfig.AdvertisedPublicPrefixes).CountAssert-NotNull $p.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState$primaryPeerAddressPrefixV6 = "fc00::/126";$secondaryPeerAddressPrefixV6 = "fc00::/126";$customerAsnV6 = 2000;$routingRegistryNameV6 = "RADB";$advertisedPublicPrefixesV6 = "fc02::1/128";$circuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname | Set-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeering -PeeringType MicrosoftPeering -PeerASN 44 -PrimaryPeerAddressPrefix $primaryPeerAddressPrefixV6 -SecondaryPeerAddressPrefix $secondaryPeerAddressPrefixV6 -VlanId 555 -MicrosoftConfigAdvertisedPublicPrefixes @($advertisedPublicPrefixesV6) -MicrosoftConfigCustomerAsn $customerAsnV6 -MicrosoftConfigRoutingRegistryName $routingRegistryNameV6 -PeerAddressType IPv6 | Set-AzExpressRouteCircuit $p = $circuit | Get-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeeringAssert-AreEqual "MicrosoftPeering" $p.NameAssert-AreEqual "MicrosoftPeering" $p.PeeringTypeAssert-AreEqual "44" $p.PeerASNAssert-AreEqual $primaryPeerAddressPrefixV6 $p.Ipv6PeeringConfig.PrimaryPeerAddressPrefixAssert-AreEqual $secondaryPeerAddressPrefixV6 $p.Ipv6PeeringConfig.SecondaryPeerAddressPrefixAssert-AreEqual "555" $p.VlanIdAssert-NotNull $p.Ipv6PeeringConfig.MicrosoftPeeringConfigAssert-AreEqual $customerAsnV6 $p.Ipv6PeeringConfig.MicrosoftPeeringConfig.CustomerASNAssert-AreEqual $routingRegistryNameV6 $p.Ipv6PeeringConfig.MicrosoftPeeringConfig.RoutingRegistryNameAssert-AreEqual 1 @($p.Ipv6PeeringConfig.MicrosoftPeeringConfig.AdvertisedPublicPrefixes).CountAssert-NotNull $p.Ipv6PeeringConfig.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState$listPeering = $circuit | Get-AzExpressRouteCircuitPeeringConfigAssert-AreEqual 1 @($listPeering).Count$deletePeering = Remove-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeering -ExpressRouteCircuit $circuit -PeerAddressType All | Set-AzExpressRouteCircuit $circuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname $listPeering = $circuit | Get-AzExpressRouteCircuitPeeringConfigAssert-AreEqual 0 @($listPeering).Count$primaryPeerAddressPrefixV6 = "fc00::/126";$secondaryPeerAddressPrefixV6 = "fc00::/126";$customerAsnV6 = 2000;$routingRegistryNameV6 = "RADB";$advertisedPublicPrefixesV6 = "fc02::1/128";$circuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname | Add-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeering -PeeringType MicrosoftPeering -PeerASN 44 -PrimaryPeerAddressPrefix $primaryPeerAddressPrefixV6 -SecondaryPeerAddressPrefix $secondaryPeerAddressPrefixV6 -VlanId 555 -MicrosoftConfigAdvertisedPublicPrefixes @($advertisedPublicPrefixesV6) -MicrosoftConfigCustomerAsn $customerAsnV6 -MicrosoftConfigRoutingRegistryName $routingRegistryNameV6 -PeerAddressType IPv6 | Set-AzExpressRouteCircuit $p = $circuit | Get-AzExpressRouteCircuitPeeringConfig -Name MicrosoftPeeringAssert-AreEqual "MicrosoftPeering" $p.NameAssert-AreEqual "MicrosoftPeering" $p.PeeringTypeAssert-AreEqual "44" $p.PeerASNAssert-AreEqual $primaryPeerAddressPrefixV6 $p.Ipv6PeeringConfig.PrimaryPeerAddressPrefixAssert-AreEqual $secondaryPeerAddressPrefixV6 $p.Ipv6PeeringConfig.SecondaryPeerAddressPrefixAssert-AreEqual "555" $p.VlanIdAssert-NotNull $p.Ipv6PeeringConfig.MicrosoftPeeringConfigAssert-AreEqual $customerAsnV6 $p.Ipv6PeeringConfig.MicrosoftPeeringConfig.CustomerASNAssert-AreEqual $routingRegistryNameV6 $p.Ipv6PeeringConfig.MicrosoftPeeringConfig.RoutingRegistryNameAssert-AreEqual 1 @($p.Ipv6PeeringConfig.MicrosoftPeeringConfig.AdvertisedPublicPrefixes).CountAssert-NotNull $p.Ipv6PeeringConfig.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState$delete = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -name $circuitName -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzExpressRouteCircuit -ResourceGroupName $rgnameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-ExpressRouteCircuitAuthorizationCRUD{$rgname = Get-ResourceGroupName$circuitName = Get-ResourceName$authorizationName = "testkey"$rglocation = Get-ProviderLocation ResourceManagement$location = Get-ProviderLocation "Microsoft.Network/expressRouteCircuits" "Brazil South"try {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation$authorization = New-AzExpressRouteCircuitAuthorization -Name $authorizationName$circuit = New-AzExpressRouteCircuit -Name $circuitName -Location $location -ResourceGroupName $rgname -SkuTier Standard -SkuFamily MeteredData  -ServiceProviderName "equinix" -PeeringLocation "Silicon Valley" -BandwidthInMbps 500 -Authorization $authorizationAssert-AreEqual $rgName $circuit.ResourceGroupNameAssert-AreEqual $circuitName $circuit.NameAssert-NotNull $circuit.LocationAssert-NotNull $circuit.EtagAssert-AreEqual 1 @($circuit.Authorizations).CountAssert-AreEqual "Standard_MeteredData" $circuit.Sku.NameAssert-AreEqual "Standard" $circuit.Sku.TierAssert-AreEqual "MeteredData" $circuit.Sku.FamilyAssert-AreEqual "equinix" $circuit.ServiceProviderProperties.ServiceProviderNameAssert-AreEqual "Silicon Valley" $circuit.ServiceProviderProperties.PeeringLocationAssert-AreEqual "500" $circuit.ServiceProviderProperties.BandwidthInMbpsAssert-AreEqual $authorizationName $circuit.Authorizations[0].Name$a = $circuit | Get-AzExpressRouteCircuitAuthorization -Name $authorizationNameAssert-AreEqual $authorizationName $a.Name$circuit = Get-AzExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname | Add-AzExpressRouteCircuitAuthorization -Name "testkey2" | Set-AzExpressRouteCircuit$a = $circuit | Get-AzExpressRouteCircuitAuthorization -Name "testkey2"Assert-AreEqual "testkey2" $a.Name$listAuthorization = $circuit | Get-AzExpressRouteCircuitAuthorizationAssert-AreEqual 2 @($listAuthorization).Count$delete = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -name $circuitName -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzExpressRouteCircuit -ResourceGroupName $rgnameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-ExpressRouteCircuitConnectionCRUD{$initCircuitName = Get-ResourceName$peerCircuitName = Get-ResourceName$rgname = Get-ResourceGroupName$resourceTypeParent = "Microsoft.Network/expressRouteCircuits"$rglocation = Get-ProviderLocation $resourceTypeParent "Brazil South"$connectionName = Get-ResourceName$addressPrefix = "30.0.0.0/29"try{$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation$initpeering = New-AzExpressRouteCircuitPeeringConfig -Name AzurePrivatePeering -PeeringType AzurePrivatePeering -PeerASN 100 -PrimaryPeerAddressPrefix "192.168.1.0/30" -SecondaryPeerAddressPrefix "192.168.2.0/30" -VlanId 22$initckt = New-AzExpressRouteCircuit -Name $initCircuitName -Location $rglocation -ResourceGroupName $rgname -SkuTier Standard -SkuFamily MeteredData  -ServiceProviderName "equinix" -PeeringLocation "Silicon Valley" -BandwidthInMbps 1000 -Peering $initpeering$initckt = Get-AzExpressRouteCircuit -Name $initCircuitName -ResourceGroupName $rgname$initcktAssert-AreEqual $rgName $initckt.ResourceGroupNameAssert-AreEqual $initCircuitName $initckt.NameAssert-NotNull $initckt.LocationAssert-NotNull $initckt.EtagAssert-AreEqual 1 @($initckt.Peerings).CountAssert-AreEqual "Standard_MeteredData" $initckt.Sku.NameAssert-AreEqual "Standard" $initckt.Sku.TierAssert-AreEqual "MeteredData" $initckt.Sku.FamilyAssert-AreEqual "equinix" $initckt.ServiceProviderProperties.ServiceProviderNameAssert-AreEqual "Silicon Valley" $initckt.ServiceProviderProperties.PeeringLocationAssert-AreEqual "1000" $initckt.ServiceProviderProperties.BandwidthInMbps$peerpeering = New-AzExpressRouteCircuitPeeringConfig -Name AzurePrivatePeering -PeeringType AzurePrivatePeering -PeerASN 200 -PrimaryPeerAddressPrefix "192.168.3.0/30" -SecondaryPeerAddressPrefix "192.168.4.0/30" -VlanId 44$peerckt = New-AzExpressRouteCircuit -Name $peerCircuitName -Location $rglocation -ResourceGroupName $rgname -SkuTier Standard -SkuFamily MeteredData  -ServiceProviderName "equinix" -PeeringLocation "Chicago" -BandwidthInMbps 1000 -Peering $peerpeering$peerckt = Get-AzExpressRouteCircuit -Name $peerCircuitName -ResourceGroupName $rgname$peercktAssert-AreEqual $rgName $peerckt.ResourceGroupNameAssert-AreEqual $peerCircuitName $peerckt.NameAssert-NotNull $peerckt.LocationAssert-NotNull $peerckt.EtagAssert-AreEqual 1 @($peerckt.Peerings).CountAssert-AreEqual "Standard_MeteredData" $peerckt.Sku.NameAssert-AreEqual "Standard" $peerckt.Sku.TierAssert-AreEqual "MeteredData" $peerckt.Sku.FamilyAssert-AreEqual "equinix" $peerckt.ServiceProviderProperties.ServiceProviderNameAssert-AreEqual "Chicago" $peerckt.ServiceProviderProperties.PeeringLocationAssert-AreEqual "1000" $peerckt.ServiceProviderProperties.BandwidthInMbpsAdd-AzExpressRouteCircuitConnectionConfig -Name $connectionName -ExpressRouteCircuit $initckt -PeerExpressRouteCircuitPeering $peerckt.Peerings[0].Id -AddressPrefix $addressPrefix -AuthorizationKey testSet-AzExpressRouteCircuit -ExpressRouteCircuit $initckt$initckt = Get-AzExpressRouteCircuit -Name $initCircuitName -ResourceGroupName $rgname$initcktAssert-AreEqual $connectionName $initckt.Peerings[0].Connections[0].NameAssert-AreEqual "Succeeded" $initckt.Peerings[0].Connections[0].ProvisioningStateAssert-AreEqual "Connected" $initckt.Peerings[0].Connections[0].CircuitConnectionStatusAssert-AreEqual 1 $initckt.Peerings[0].Connections.Count$initckt = Get-AzExpressRouteCircuit -Name $initCircuitName -ResourceGroupName $rgnameAssert-AreEqual $true $initckt.GlobalReachEnabled$connection = Get-AzureRmExpressRouteCircuitConnectionConfig -Name $connectionName -ExpressRouteCircuit $initcktAssert-AreEqual $connectionName $connection.NameAssert-AreEqual "Succeeded" $connection.ProvisioningStateAssert-AreEqual "Connected" $connection.CircuitConnectionStatus$connections = Get-AzureRmExpressRouteCircuitConnectionConfig -ExpressRouteCircuit $initcktAssert-NotNull $connectionsAssert-AreEqual 1 $connections.Count$initckt = Get-AzExpressRouteCircuit -Name $initCircuitName -ResourceGroupName $rgname$peerckt = Get-AzExpressRouteCircuit -Name $peerCircuitName -ResourceGroupName $rgnameAssert-AreEqual $true $peerckt.GlobalReachEnabledAssert-AreEqual 1 $peerckt.Peerings[0].PeeredConnections.CountAssert-AreEqual $initckt.ServiceKey $peerckt.Peerings[0].PeeredConnections[0].NameAssert-AreEqual $connectionName $peerckt.Peerings[0].PeeredConnections[0].ConnectionNameAssert-AreEqual "Succeeded" $peerckt.Peerings[0].PeeredConnections[0].ProvisioningStateAssert-AreEqual "Connected" $peerckt.Peerings[0].PeeredConnections[0].CircuitConnectionStatusRemove-AzExpressRouteCircuitConnectionConfig -Name $connectionName -ExpressRouteCircuit $initcktSet-AzExpressRouteCircuit -ExpressRouteCircuit $initckt$initckt = Get-AzExpressRouteCircuit -Name $initCircuitName -ResourceGroupName $rgname$initcktAssert-AreEqual $false $initckt.GlobalReachEnabledAssert-AreEqual 0 $initckt.Peerings[0].Connections.Count$peerckt = Get-AzExpressRouteCircuit -Name $peerCircuitName -ResourceGroupName $rgnameAssert-AreEqual $false $peerckt.GlobalReachEnabledAssert-AreEqual 0 $peerckt.Peerings[0].PeeredConnections.CountRemove-AzureRmExpressRouteCircuitPeeringConfig -ExpressRouteCircuit $initckt -Name AzurePrivatePeering$initckt = Set-AzureRmExpressRouteCircuit -ExpressRouteCircuit $initcktAssert-ThrowsLike { Get-AzureRmExpressRouteCircuitConnectionConfig -ExpressRouteCircuit $initckt } "*does not exist*"Assert-ThrowsLike { Add-AzureRmExpressRouteCircuitConnectionConfig -Name $connectionName -ExpressRouteCircuit $initckt -PeerExpressRouteCircuitPeering $peerckt.Peerings[0].Id -AddressPrefix $addressPrefix } "*needs to be configured*"Assert-ThrowsLike { Remove-AzureRmExpressRouteCircuitConnectionConfig -ExpressRouteCircuit $initckt -Name $connectionName } "*does not exist*"$deleteinit = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -name $initCircuitName -PassThru -ForceAssert-AreEqual true $deleteinit$deletepeer = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -name $peerCircuitName -PassThru -ForceAssert-AreEqual true $deletepeer$list = Get-AzExpressRouteCircuit -ResourceGroupName $rgnameAssert-AreEqual 0 @($list).Count	}finally{Clean-ResourceGroup $rgname}}function Test-ExpressRouteCircuitPeeringWithRouteFilter{$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$location = Get-ProviderLocation "Microsoft.Network/expressRouteCircuits"$ruleName = Get-ResourceName$filterName = Get-ResourceName$circuitName = Get-ResourceName$peeringName = "MicrosoftPeering"try{$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation$rule = New-AzRouteFilterRuleConfig -Name $ruleName -Access "Allow" -RouteFilterRuleType "Community" -CommunityList "12076:5010" -ForceAssert-AreEqual $ruleName $rule.Name$filter = New-AzRouteFilter -ResourceGroupName $rgname -Name $filterName -Location $location -Rule $rule -ForceAssert-AreEqual $filterName $filter.NameAssert-AreEqual 1 @($filter.Rules).CountAssert-AreEqual $ruleName $filter.Rules[0].NameAssert-AreEqual $true $filter.Rules[0].Id.EndsWith($ruleName)$peering = New-AzExpressRouteCircuitPeeringConfig -Name $peeringName -RouteFilter $filter -PeeringType $peeringName -PeerASN 33 -PrimaryPeerAddressPrefix "192.171.1.0/30" -SecondaryPeerAddressPrefix "192.171.2.0/30" -VlanId 224 -MicrosoftConfigAdvertisedPublicPrefixes @("11.2.3.4/30", "12.2.3.4/30") -MicrosoftConfigCustomerAsn 1000 -MicrosoftConfigRoutingRegistryName "AFRINIC" -LegacyMode $trueAssert-AreEqual $peeringName $peering.NameAssert-NotNull $peering.RouteFilterAssert-AreEqual $true $peering.RouteFilter.Id.EndsWith($filterName) $circuit = New-AzExpressRouteCircuit -ResourceGroupName $rgname -Name $circuitName -Location $location -Peering $peering -SkuTier "Premium" -SkuFamily "MeteredData" -ServiceProviderName "equinix" -PeeringLocation "Atlanta" -BandwidthInMbps 1000Assert-AreEqual $circuitName $circuit.NameAssert-AreEqual 1 @($circuit.Peerings).CountAssert-AreEqual $peeringName $circuit.Peerings[0].NameAssert-AreEqual $true $circuit.Peerings[0].Id.EndsWith($peeringName)$deletion = Remove-AzExpressRouteCircuit -ResourceGroupName $rgname -Name $circuitName -PassThru -ForceAssert-AreEqual $true $deletionAssert-ThrowsLike { Get-AzExpressRouteCircuit -ResourceGroupName $rgname -Name $circuitName } "*${circuitName}*not found*"$deletion = Remove-AzRouteFilter -ResourceGroupName $rgname -Name $filterName -PassThru -ForceAssert-AreEqual $true $deletionAssert-ThrowsLike { Get-AzRouteFilter -ResourceGroupName $rgname -Name $filterName } "*${filterName}*not found*"}finally{Clean-ResourceGroup $rgname}}