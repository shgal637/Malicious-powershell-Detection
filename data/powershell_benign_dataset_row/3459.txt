function Test-SelfHosted-IntegrationRuntime{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname `-Name $dfname `-Location $dflocation `-Force$irname = "selfhosted-test-integrationruntime"   $actual = Set-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irname `-Type 'SelfHosted' `-ForceAssert-AreEqual $actual.Name $irname$expected = Get-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irnameAssert-AreEqual $actual.Name $expected.Name$expected = Get-AzDataFactoryV2IntegrationRuntime -ResourceId $actual.IdAssert-AreEqual $actual.Name $expected.Name$status = Get-AzDataFactoryV2IntegrationRuntime -ResourceId $actual.Id -StatusAssert-NotNull $status$metric = Get-AzDataFactoryV2IntegrationRuntimeMetric -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irnameAssert-NotNull $metric$description = "description"$result = Set-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irname `-Description $description `-ForceAssert-AreEqual $result.Description $descriptionRemove-AzDataFactoryV2IntegrationRuntime -ResourceId $actual.Id -Force}finally{CleanUp $rgname $dfname}}function Test-SsisAzure-IntegrationRuntime{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname `-Name $dfname `-Location $dflocation `-Force$proxyIrName = "proxy-selfhosted-integrationruntime"   $actualProxyIr = Set-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $proxyIrName `-Type 'SelfHosted' `-ForceAssert-AreEqual $actualProxyIr.Name $proxyIrName$lsname = "proxy-linkedservice"$actualProxyLs = Set-AzDataFactoryV2LinkedService -ResourceGroupName $rgname -DataFactoryName $dfname -Name $lsname -File .\Resources\linkedService.json -ForceAssert-AreEqual $actualProxyLs.Name $lsname$irname = "ssis-azure-ir"$description = "SSIS-Azure integration runtime"$catalogServerEndpoint = $Env:CatalogServerEndpoint$catalogAdminUsername = $Env:CatalogAdminUsername$catalogAdminPassword = $Env:CatalogAdminPasswordif ($catalogServerEndpoint -eq $null){$catalogServerEndpoint = 'fakeserver'}if ($catalogAdminUsername -eq $null){$catalogAdminUsername = 'fakeuser'}if ($catalogAdminPassword -eq $null){$catalogAdminPassword = 'fakepassord'}$secpasswd = ConvertTo-SecureString $catalogAdminPassword -AsPlainText -Force$mycreds = New-Object System.Management.Automation.PSCredential($catalogAdminUsername, $secpasswd)$actual = Set-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irname `-Description $description `-Type Managed `-Location 'East US' `-NodeSize Standard_A4_v2 `-NodeCount 1 `-CatalogServerEndpoint $catalogServerEndpoint `-CatalogAdminCredential $mycreds `-CatalogPricingTier 'Basic' `-MaxParallelExecutionsPerNode 1 `-LicenseType LicenseIncluded `-Edition Enterprise `-DataProxyIntegrationRuntimeName $proxyIrName `-DataProxyStagingLinkedServiceName $lsname `-Force$expected = Get-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irnameAssert-AreEqual $actual.Name $expected.NameStart-AzDataFactoryV2IntegrationRuntime -ResourceId $actual.Id -Force$status = Get-AzDataFactoryV2IntegrationRuntime -ResourceId $actual.Id -StatusStop-AzDataFactoryV2IntegrationRuntime -ResourceId $actual.Id -ForceWait-Seconds 15Remove-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname -DataFactoryName $dfname -Name $irname -ForceRemove-AzDataFactoryV2LinkedService -ResourceGroupName $rgname -DataFactoryName $dfname -Name $lsname -ForceRemove-AzDataFactoryV2IntegrationRuntime -ResourceId $actualProxyIr.Id -Force}finally{CleanUp $rgname $dfname}}function Test-Azure-IntegrationRuntime{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname `-Name $dfname `-Location $dflocation `-Force$irname = "test-ManagedElastic-integrationruntime"$description = "ManagedElastic"$actual = Set-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irname `-Type Managed `-Description $description `-Force$expected = Get-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irnameAssert-AreEqual $actual.Name $expected.NameGet-AzDataFactoryV2IntegrationRuntime -ResourceId $actual.Id -StatusRemove-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname -DataFactoryName $dfname -Name $irname -Force}finally{CleanUp $rgname $dfname}}function Test-IntegrationRuntime-Piping{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{$datafactory = Set-AzDataFactoryV2 -ResourceGroupName $rgname `-Name $dfname `-Location $dflocation `-Force$irname = "test-integrationruntime-for-piping"$result = Set-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irname `-Type 'SelfHosted' `-Force | Get-AzDataFactoryV2IntegrationRuntime$result | Get-AzDataFactoryV2IntegrationRuntime$result | Get-AzDataFactoryV2IntegrationRuntimeKey$result | New-AzDataFactoryV2IntegrationRuntimeKey -KeyName AuthKey1 -Force$result | Get-AzDataFactoryV2IntegrationRuntimeMetric$result | Remove-AzDataFactoryV2IntegrationRuntime -Force}finally{CleanUp $rgname $dfname}}function Test-Shared-IntegrationRuntime{$dfname = Get-DataFactoryName$linkeddfname = $dfname + '-linked'$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{Set-AzDataFactoryV2 -ResourceGroupName $rgname `-Name $dfname `-Location $dflocation `-Force$linkeddf = Set-AzDataFactoryV2 -ResourceGroupName $rgname `-Name $linkeddfname `-Location $dflocation `-ForceWait-Seconds 10$irname = "selfhosted-test-integrationruntime"$description = "description"$shared = Set-AzDataFactoryV2IntegrationRuntime -ResourceGroupName $rgname `-DataFactoryName $dfname `-Name $irname `-Type 'SelfHosted' `-ForceNew-AzRoleAssignmentWithId `-ObjectId $linkeddf.Identity.PrincipalId `-RoleDefinitionId 'b24988ac-6180-42a0-ab88-20f7382dd24c' `-Scope $shared.Id `-RoleAssignmentId 6558f9a7-689c-41d3-93bd-3281fbe3d26fWait-Seconds 20$linkedIrName = 'LinkedIntegrationRuntime'$linked = Set-AzDataFactoryV2IntegrationRuntime `-ResourceGroupName $rgname `-DataFactoryName $linkeddfname `-Name $linkedIrName `-Type SelfHosted `-Description 'This is a linked integration runtime' `-SharedIntegrationRuntimeResourceId $shared.Id `-Force$metric = Get-AzDataFactoryV2IntegrationRuntimeMetric -ResourceGroupName $rgname `-DataFactoryName $linkeddfname `-Name $linkedIrNameAssert-NotNull $metric$status = Get-AzDataFactoryV2IntegrationRuntime -ResourceId $linked.Id -StatusAssert-NotNull $statusRemove-AzDataFactoryV2IntegrationRuntime -ResourceId $shared.Id -LinkedDataFactoryName $linkeddfname -ForceRemove-AzRoleAssignment `-ObjectId $linkeddf.Identity.PrincipalId `-RoleDefinitionId 'b24988ac-6180-42a0-ab88-20f7382dd24c' `-Scope $shared.IdRemove-AzDataFactoryV2IntegrationRuntime -ResourceId $linked.Id -ForceRemove-AzDataFactoryV2IntegrationRuntime -ResourceId $shared.Id -ForceRemove-AzDataFactoryV2 -ResourceGroupName $rgname -Name $linkeddfname -Force}finally{CleanUp $rgname $dfname}}