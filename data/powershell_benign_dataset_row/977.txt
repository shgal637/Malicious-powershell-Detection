$subscriptionId = '<SubscriptionID>'$randomIdentifier = $(Get-Random)$resourceGroupName = "myResourceGroup-$randomIdentifier"$location = "West US 2"$adminLogin = "azureuser"$password = "PWD27!"+(New-Guid).Guid$serverName = "mysqlserver-$randomIdentifier"$databaseName = "mySampleDatabase"$drLocation = "East US 2"$drServerName = "mysqlsecondary-$randomIdentifier"$failoverGroupName = "failovergrouptutorial-$randomIdentifier"$startIp = "0.0.0.0"$endIp = "0.0.0.0"Write-host "Resource group name is" $resourceGroupName Write-host "Password is" $password  Write-host "Server name is" $serverName Write-host "DR Server name is" $drServerName Write-host "Failover group name is" $failoverGroupNameSet-AzContext -SubscriptionId $subscriptionIdWrite-host "Creating resource group..."$resourceGroup = New-AzResourceGroup -Name $resourceGroupName -Location $location -Tag @{Owner="SQLDB-Samples"}$resourceGroupWrite-host "Creating primary logical server..."$server = New-AzSqlServer -ResourceGroupName $resourceGroupName `-ServerName $serverName `-Location $location `-SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential `-ArgumentList $adminLogin, $(ConvertTo-SecureString -String $password -AsPlainText -Force))$serverWrite-host "Configuring firewall for primary logical server..."$serverFirewallRule = New-AzSqlServerFirewallRule -ResourceGroupName $resourceGroupName `-ServerName $serverName `-FirewallRuleName "AllowedIPs" -StartIpAddress $startIp -EndIpAddress $endIp$serverFirewallRuleWrite-host "Creating a gen5 2 vCore database..."$database = New-AzSqlDatabase  -ResourceGroupName $resourceGroupName `-ServerName $serverName `-DatabaseName $databaseName `-Edition GeneralPurpose `-VCore 2 `-ComputeGeneration Gen5 `-MinimumCapacity 2 `-SampleName "AdventureWorksLT"$databaseWrite-host "Creating a secondary logical server in the failover region..."$drServer = New-AzSqlServer -ResourceGroupName $resourceGroupName `-ServerName $drServerName `-Location $drLocation `-SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential `-ArgumentList $adminlogin, $(ConvertTo-SecureString -String $password -AsPlainText -Force))$drServer$failovergroup = Write-host "Creating a failover group between the primary and secondary server..."New-AzSqlDatabaseFailoverGroup `–ResourceGroupName $resourceGroupName `-ServerName $serverName `-PartnerServerName $drServerName  `–FailoverGroupName $failoverGroupName `–FailoverPolicy Automatic `-GracePeriodWithDataLossHours 2$failovergroupWrite-host "Adding the database to the failover group..." Get-AzSqlDatabase `-ResourceGroupName $resourceGroupName `-ServerName $serverName `-DatabaseName $databaseName | `Add-AzSqlDatabaseToFailoverGroup `-ResourceGroupName $resourceGroupName `-ServerName $serverName `-FailoverGroupName $failoverGroupNameWrite-host "Successfully added the database to the failover group..." Write-host "Confirming the secondary replica is secondary...." (Get-AzSqlDatabaseFailoverGroup `-FailoverGroupName $failoverGroupName `-ResourceGroupName $resourceGroupName `-ServerName $drServerName).ReplicationRoleWrite-host "Failing over failover group to the secondary..." Switch-AzSqlDatabaseFailoverGroup `-ResourceGroupName $resourceGroupName `-ServerName $drServerName `-FailoverGroupName $failoverGroupNameWrite-host "Failed failover group successfully to" $drServerName Write-host "Failing over failover group to the primary...." Switch-AzSqlDatabaseFailoverGroup `-ResourceGroupName $resourceGroupName `-ServerName $serverName `-FailoverGroupName $failoverGroupNameWrite-host "Failed failover group successfully back to" $serverNameWrite-host "Resource group name is" $resourceGroupName Write-host "Password is" $password  Write-host "Server name is" $serverName Write-host "DR Server name is" $drServerName Write-host "Failover group name is" $failoverGroupName