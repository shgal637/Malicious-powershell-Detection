function Backup-AllSQLDBs{[CmdletBinding()]param([Parameter(Mandatory=$false)][String]$Server = $env:COMPUTERNAME,[Parameter(Mandatory=$true)][String]$Instance,[Parameter(Mandatory=$true)][String]$Path)if((Get-PSSnapin "SqlServerCmdletSnapin100" -ErrorAction SilentlyContinue) -eq $Null){Add-PSSnapin "SqlServerCmdletSnapin100"}if((Get-PSSnapin "SqlServerProviderSnapin100" -ErrorAction SilentlyContinue) -eq $Null){Add-PSSnapin "SqlServerProviderSnapin100"}Push-Location	$SQLInstance = "SQLServer:\SQL\$Server\$Instance\Databases"set-Location $SQLInstanceGet-ChildItem $SQLInstance | select name | %{$BackupPath = $Path + "\" + $_.Nameif(! (Test-Path $BackupPath)){mkdir $BackupPath}}$SQLQuery = @"DECLARE @Name VARCHAR(250)DECLARE @Path VARCHAR(250)DECLARE @FileName VARCHAR(250)DECLARE @TimeStamp VARCHAR(30)SET @Path = '$Path'SELECT @TimeStamp = REPLACE(CONVERT(VARCHAR(26),getdate(),120),':','-')DECLARE db_cursor CURSOR FORSELECT nameFROM master.dbo.sysdatabasesWHERE name NOT IN ('master','model','msdb','tempdb')OPEN db_cursorFETCH NEXT FROM db_cursor INTO @NameWHILE @@FETCH_STATUS = 0BEGINSET @FileName = @Path + '\' + @Name + '\' + @Name + 'PRINT @FileNameBACKUP DATABASE @Name TO DISK = @FileNameFETCH NEXT FROM db_cursor INTO @NameENDCLOSE db_cursorDEALLOCATE db_cursor"@Invoke-Sqlcmd -Query $SQLQuery -QueryTimeout 1000Pop-Location}