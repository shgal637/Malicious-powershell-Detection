function Test-CrudApiManagement {$location = Get-ProviderLocation "Microsoft.ApiManagement/service"$resourceGroupName = Get-ResourceGroupName$apiManagementName = Get-ApiManagementServiceName$organization = "apimpowershellorg"$adminEmail = "apim@powershell.org"$secondApiManagementName = Get-ApiManagementServiceName$secondOrganization = "second.apimpowershellorg"$secondAdminEmail = "second.apim@powershell.org"$secondSku = "Basic"$secondSkuCapacity = 2$enableTls=@{"Tls10" = "True"}$enable3DES=@{"TripleDes168" = "True"}$thirdApiManagementName = Get-ApiManagementServiceName$thirdSku = "Consumption"$thirdServiceLocation = "West Europe"try {New-AzResourceGroup -Name $resourceGroupName -Location $location$sslSetting = New-AzApiManagementSslSetting -FrontendProtocol $enableTls -CipherSuite $enable3DES$result = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $location -Name $apiManagementName -Organization $organization -AdminEmail $adminEmail -SslSetting $sslSettingAssert-AreEqual $resourceGroupName $result.ResourceGroupNameAssert-AreEqual $apiManagementName $result.NameAssert-AreEqual $location $result.LocationAssert-AreEqual "Developer" $result.SkuAssert-AreEqual 1 $result.CapacityAssert-AreEqual "None" $result.VpnTypeAssert-NotNull $result.SslSettingAssert-AreEqual "True" $result.SslSetting.FrontendProtocol["Tls10"]Assert-AreEqual "True" $result.SslSetting.CipherSuite["TripleDes168"]$token = Get-AzApiManagementSsoToken -ResourceGroupName $resourceGroupName -Name $apiManagementNameAssert-NotNull $token$apimServicesInGroup = Get-AzApiManagement -ResourceGroupName $resourceGroupNameAssert-True {$apimServicesInGroup.Count -ge 1}$secondResult = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $location -Name $secondApiManagementName -Organization $secondOrganization -AdminEmail $secondAdminEmail -Sku $secondSku -Capacity $secondSkuCapacityAssert-AreEqual $resourceGroupName $secondResult.ResourceGroupNameAssert-AreEqual $secondApiManagementName $secondResult.NameAssert-AreEqual $location $secondResult.LocationAssert-AreEqual $secondSku $secondResult.SkuAssert-AreEqual $secondSkuCapacity $secondResult.Capacity$secondToken = Get-AzApiManagementSsoToken -ResourceGroupName $resourceGroupName -Name $secondApiManagementNameAssert-NotNull $secondToken$allServices = Get-AzApiManagementAssert-True {$allServices.Count -ge 2}$thirdResult = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $thirdServiceLocation -Name $thirdApiManagementName -Organization $secondOrganization -AdminEmail $secondAdminEmail -Sku $thirdSkuAssert-AreEqual $resourceGroupName $thirdResult.ResourceGroupNameAssert-AreEqual $thirdApiManagementName $thirdResult.NameAssert-AreEqual $thirdServiceLocation $thirdResult.LocationAssert-AreEqual $thirdSku $thirdResult.Sku$allServices = Get-AzApiManagementAssert-True {$allServices.Count -ge 3}$found = 0for ($i = 0; $i -lt $allServices.Count; $i++) {if ($allServices[$i].Name -eq $apiManagementName) {$found = $found + 1Assert-AreEqual $location $allServices[$i].LocationAssert-AreEqual $resourceGroupName $allServices[$i].ResourceGroupNameAssert-AreEqual "Developer" $allServices[$i].SkuAssert-AreEqual 1 $allServices[$i].Capacity}if ($allServices[$i].Name -eq $secondApiManagementName) {$found = $found + 1Assert-AreEqual $location $allServices[$i].LocationAssert-AreEqual $resourceGroupName $allServices[$i].ResourceGroupNameAssert-AreEqual $secondSku $allServices[$i].SkuAssert-AreEqual $secondSkuCapacity $allServices[$i].Capacity}if ($allServices[$i].Name -eq $thirdApiManagementName) {$found = $found + 1Assert-AreEqual $thirdServiceLocation $allServices[$i].LocationAssert-AreEqual $resourceGroupName $allServices[$i].ResourceGroupNameAssert-AreEqual $thirdSku $allServices[$i].Sku}}Assert-True {$found -eq 3} "Api Management services created earlier is not found."Get-AzApiManagement -ResourceGroupName $resourceGroupName | Remove-AzApiManagement$allServices = Get-AzApiManagement -ResourceGroupName $resourceGroupNameAssert-AreEqual 0 $allServices.Count}finally {Clean-ResourceGroup $resourceGroupName}}function Test-BackupRestoreApiManagement {$location = Get-ProviderLocation "Microsoft.ApiManagement/service"$resourceGroupName = Get-ResourceGroupName$storageLocation = Get-ProviderLocation "Microsoft.ClassicStorage/storageAccounts"$storageAccountName = Get-ApiManagementServiceName$apiManagementName = Get-ApiManagementServiceName$organization = "apimpowershellorg"$adminEmail = "apim@powershell.org"$containerName = "backups"$backupName = $apiManagementName + ".apimbackup"try {New-AzResourceGroup -Name $resourceGroupName -Location $location -ForceNew-AzStorageAccount -StorageAccountName $storageAccountName -Location $storageLocation -ResourceGroupName $resourceGroupName -Type Standard_LRS$storageKey = (Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -StorageAccountName $storageAccountName).Key1$storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageKey$apiManagementService = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $location -Name $apiManagementName -Organization $organization -AdminEmail $adminEmailBackup-AzApiManagement -ResourceGroupName $resourceGroupName -Name $apiManagementName -StorageContext $storageContext -TargetContainerName $containerName -TargetBlobName $backupName$restoreResult = Restore-AzApiManagement -ResourceGroupName $resourceGroupName -Name $apiManagementName -StorageContext $storageContext -SourceContainerName $containerName -SourceBlobName $backupName -PassThruAssert-AreEqual $resourceGroupName $restoreResult.ResourceGroupNameAssert-AreEqual $apiManagementName $restoreResult.NameAssert-AreEqual $location $restoreResult.LocationAssert-AreEqual "Developer" $restoreResult.SkuAssert-AreEqual 1 $restoreResult.CapacityAssert-AreEqual "Succeeded" $restoreResult.ProvisioningState}finally {Clean-ResourceGroup $resourceGroupName    }   }function Test-ApiManagementVirtualNetworkCRUD {$primarylocation = "North Central US"$secondarylocation = "South Central US"$resourceGroupName = Get-ResourceGroupName    $apiManagementName = Get-ApiManagementServiceName$organization = "apimpowershellorg"$adminEmail = "apim@powershell.org"$sku = "Developer"$capacity = 1$primarySubnetResourceId = "/subscriptions/a200340d-6b82-494d-9dbf-687ba6e33f9e/resourceGroups/powershelltest/providers/Microsoft.Network/virtualNetworks/powershellvnetncu/subnets/default"$additionalSubnetResourceId = "/subscriptions/a200340d-6b82-494d-9dbf-687ba6e33f9e/resourceGroups/powershelltest/providers/Microsoft.Network/virtualNetworks/powershellvnetscu/subnets/default"$vpnType = "External" try {New-AzResourceGroup -Name $resourceGroupName -Location $primarylocation$virtualNetwork = New-AzApiManagementVirtualNetwork -SubnetResourceId $primarySubnetResourceId$result = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $primarylocation -Name $apiManagementName -Organization $organization -AdminEmail $adminEmail -VpnType $vpnType -VirtualNetwork $virtualNetwork -Sku $sku -Capacity $capacityAssert-AreEqual $resourceGroupName $result.ResourceGroupNameAssert-AreEqual $apiManagementName $result.NameAssert-AreEqual $primarylocation $result.LocationAssert-AreEqual $sku $result.SkuAssert-AreEqual 1 $result.CapacityAssert-AreEqual $vpnType $result.VpnTypeAssert-Null $result.PrivateIPAddressesAssert-NotNull $result.PublicIPAddressesAssert-AreEqual $primarySubnetResourceId $result.VirtualNetwork.SubnetResourceId$networkStatus = Get-AzApiManagementNetworkStatus -ResourceGroupName $resourceGroupName -Name $apiManagementNameAssert-NotNull $networkStatusAssert-NotNull $networkStatus.DnsServersAssert-NotNull $networkStatus.ConnectivityStatus$service = Get-AzApiManagement -ResourceGroupName $resourceGroupName -Name $apiManagementName$vpnType = "Internal"$service.VirtualNetwork = $virtualNetwork$service.VpnType = $vpnType$sku = "Premium"$service.Sku = $sku$additionalRegionVirtualNetwork = New-AzApiManagementVirtualNetwork -SubnetResourceId $additionalSubnetResourceId$service = Add-AzApiManagementRegion -ApiManagement $service -Location $secondarylocation -VirtualNetwork $additionalRegionVirtualNetwork$service = Set-AzApiManagement -InputObject $service -PassThruAssert-AreEqual $resourceGroupName $service.ResourceGroupNameAssert-AreEqual $apiManagementName $service.NameAssert-AreEqual $sku $service.SkuAssert-AreEqual $primarylocation $service.LocationAssert-AreEqual "Succeeded" $service.ProvisioningStateAssert-AreEqual $vpnType $service.VpnTypeAssert-NotNull $service.VirtualNetworkAssert-NotNull $service.VirtualNetwork.SubnetResourceIdAssert-NotNull $service.PrivateIPAddressesAssert-NotNull $service.PublicIPAddressesAssert-AreEqual $primarySubnetResourceId $service.VirtualNetwork.SubnetResourceIdAssert-AreEqual 1 $service.AdditionalRegions.Count$found = 0for ($i = 0; $i -lt $service.AdditionalRegions.Count; $i++) {if ($service.AdditionalRegions[$i].Location -eq $secondarylocation) {$found = $found + 1Assert-AreEqual $sku $service.AdditionalRegions[$i].SkuAssert-AreEqual 1 $service.AdditionalRegions[$i].CapacityAssert-NotNull $service.AdditionalRegions[$i].VirtualNetworkAssert-AreEqual $additionalSubnetResourceId $service.AdditionalRegions[$i].VirtualNetwork.SubnetResourceIdAssert-NotNull $service.AdditionalRegions[$i].PrivateIPAddressesAssert-NotNull $service.AdditionalRegions[$i].PublicIPAddresses}}Assert-True {$found -eq 1} "Api Management regions created earlier is not found."$networkStatus = Get-AzApiManagementNetworkStatus -ApiManagementObject $serviceAssert-NotNull $networkStatusAssert-NotNull $networkStatus.DnsServersAssert-NotNull $networkStatus.ConnectivityStatus}finally {Clean-ResourceGroup $resourceGroupName    }}function Test-ApiManagementHostnamesCRUD {$location = "North Central US"$certFilePath = "$TestOutputRoot/powershelltest.pfx";$certPassword = "Password";$certSubject = "CN=*.msitesting.net"$certThumbprint = "8E989652CABCF585ACBFCB9C2C91F1D174FDB3A2"$portalHostName = "portalsdk.msitesting.net"$proxyHostName1 = "gateway1.msitesting.net"$proxyHostName2 = "gateway2.msitesting.net"$managementHostName = "mgmt.msitesting.net"$resourceGroupName = Get-ResourceGroupName$apiManagementName = Get-ApiManagementServiceName$organization = "apimpowershellorg"$adminEmail = "apim@powershell.org"$sku = "Premium" $capacity = 1try {New-AzResourceGroup -Name $resourceGroupName -Location $location$securePfxPassword = ConvertTo-SecureString $certPassword -AsPlainText -Force$customProxy1 = New-AzApiManagementCustomHostnameConfiguration -Hostname $proxyHostName1 -HostnameType Proxy -PfxPath $certFilePath -PfxPassword $securePfxPassword -DefaultSslBinding$customProxy2 = New-AzApiManagementCustomHostnameConfiguration -Hostname $proxyHostName2 -HostnameType Proxy -PfxPath $certFilePath -PfxPassword $securePfxPassword$customPortal = New-AzApiManagementCustomHostnameConfiguration -Hostname $portalHostName -HostnameType Portal -PfxPath $certFilePath -PfxPassword $securePfxPassword$customMgmt = New-AzApiManagementCustomHostnameConfiguration -Hostname $managementHostName -HostnameType Management -PfxPath $certFilePath -PfxPassword $securePfxPassword$customHostnames = @($customProxy1, $customProxy2, $customPortal, $customMgmt)$result = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $location -Name $apiManagementName -Organization $organization -AdminEmail $adminEmail -Sku $sku -Capacity $capacity -CustomHostnameConfiguration $customHostnamesAssert-AreEqual $resourceGroupName $result.ResourceGroupNameAssert-AreEqual $apiManagementName $result.NameAssert-AreEqual $location $result.LocationAssert-AreEqual $sku $result.SkuAssert-AreEqual 1 $result.CapacityAssert-AreEqual "None" $result.VpnTypeAssert-NotNull $result.ProxyCustomHostnameConfigurationAssert-AreEqual 3 $result.ProxyCustomHostnameConfiguration.Countfor ($i = 0; $i -lt $result.ProxyCustomHostnameConfiguration.Count; $i++) {if ($result.ProxyCustomHostnameConfiguration[$i].Hostname -eq $proxyHostName1) {$found = $found + 1Assert-AreEqual Proxy $result.ProxyCustomHostnameConfiguration[$i].HostnameTypeAssert-AreEqual $certThumbprint $result.ProxyCustomHostnameConfiguration[$i].CertificateInformation.ThumbprintAssert-True {$result.ProxyCustomHostnameConfiguration[$i].DefaultSslBinding}Assert-False {$result.ProxyCustomHostnameConfiguration[$i].NegotiateClientCertificate}Assert-Null $result.ProxyCustomHostnameConfiguration[$i].KeyVaultId}if ($result.ProxyCustomHostnameConfiguration[$i].Hostname -eq $proxyHostName2) {$found = $found + 1Assert-AreEqual Proxy $result.ProxyCustomHostnameConfiguration[$i].HostnameTypeAssert-AreEqual $certThumbprint $result.ProxyCustomHostnameConfiguration[$i].CertificateInformation.ThumbprintAssert-True {$result.ProxyCustomHostnameConfiguration[$i].DefaultSslBinding}Assert-False {$result.ProxyCustomHostnameConfiguration[$i].NegotiateClientCertificate}Assert-Null $result.ProxyCustomHostnameConfiguration[$i].KeyVaultId}}Assert-NotNull $result.PortalCustomHostnameConfigurationAssert-AreEqual $portalHostName $result.PortalCustomHostnameConfiguration.HostnameAssert-AreEqual Portal $result.PortalCustomHostnameConfiguration.HostnameTypeAssert-AreEqual $certThumbprint $result.PortalCustomHostnameConfiguration.CertificateInformation.ThumbprintAssert-NotNull $result.ManagementCustomHostnameConfigurationAssert-AreEqual $managementHostName $result.ManagementCustomHostnameConfiguration.HostnameAssert-AreEqual Management $result.ManagementCustomHostnameConfiguration.HostnameTypeAssert-AreEqual $certThumbprint $result.ManagementCustomHostnameConfiguration.CertificateInformation.ThumbprintAssert-Null $result.ScmCustomHostnameConfiguration$result.ManagementCustomHostnameConfiguration = $null$result.PortalCustomHostnameConfiguration = $null$result.ProxyCustomHostnameConfiguration = @($customProxy1)$certificateStoreLocation = "CertificateAuthority"$systemCert = New-AzApiManagementSystemCertificate -StoreName $certificateStoreLocation -PfxPath $certFilePath -PfxPassword $securePfxPassword$result.SystemCertificates = @($systemCert)$result = Set-AzApiManagement -InputObject $result -PassThru Assert-AreEqual $resourceGroupName $result.ResourceGroupNameAssert-AreEqual $apiManagementName $result.NameAssert-AreEqual $location $result.LocationAssert-AreEqual $sku $result.SkuAssert-AreEqual 1 $result.CapacityAssert-AreEqual "None" $result.VpnTypeAssert-NotNull $result.ProxyCustomHostnameConfigurationAssert-AreEqual 2 $result.ProxyCustomHostnameConfiguration.Countfor ($i = 0; $i -lt $result.ProxyCustomHostnameConfiguration.Count; $i++) {if ($result.ProxyCustomHostnameConfiguration[$i].Hostname -eq $proxyHostName1) {$found = $found + 1Assert-AreEqual Proxy $result.ProxyCustomHostnameConfiguration[$i].HostnameTypeAssert-AreEqual $certThumbprint $result.ProxyCustomHostnameConfiguration[$i].CertificateInformation.ThumbprintAssert-True {$result.ProxyCustomHostnameConfiguration[$i].DefaultSslBinding}Assert-False {$result.ProxyCustomHostnameConfiguration[$i].NegotiateClientCertificate}Assert-Null $result.ProxyCustomHostnameConfiguration[$i].KeyVaultId}}Assert-Null $result.PortalCustomHostnameConfigurationAssert-Null $result.ManagementCustomHostnameConfigurationAssert-Null $result.ScmCustomHostnameConfigurationAssert-NotNull $result.SystemCertificatesAssert-AreEqual 1 $result.SystemCertificates.CountAssert-AreEqual $certificateStoreLocation $result.SystemCertificates.StoreNameAssert-AreEqual $certThumbprint $result.SystemCertificates.CertificateInformation.Thumbprint}finally {Clean-ResourceGroup $resourceGroupName   }}function Test-ApiManagementWithAdditionalRegionsCRUD {$location = Get-ProviderLocation "Microsoft.ApiManagement/service"  $resourceGroupName = Get-ResourceGroupName    $apiManagementName = Get-ApiManagementServiceName$organization = "apimpowershellorg"$adminEmail = "apim@powershell.org"$sku = "Premium"$capacity = 1$firstAdditionalRegionLocation = "East US"$secondAdditionalRegionLocation = "South Central US"try {New-AzResourceGroup -Name $resourceGroupName -Location $location$firstAdditionalRegion = New-AzApiManagementRegion -Location $firstAdditionalRegionLocation$secondAdditionalRegion = New-AzApiManagementRegion -Location $secondAdditionalRegionLocation$regions = @($firstAdditionalRegion, $secondAdditionalRegion)$result = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $location -Name $apiManagementName -Organization $organization -AdminEmail $adminEmail -Sku $sku -Capacity $capacity -AdditionalRegions $regionsAssert-AreEqual $resourceGroupName $result.ResourceGroupNameAssert-AreEqual $apiManagementName $result.NameAssert-AreEqual $location $result.LocationAssert-AreEqual $sku $result.SkuAssert-AreEqual $capacity $result.CapacityAssert-AreEqual "None" $result.VpnTypeAssert-AreEqual 2 $result.AdditionalRegions.Count$found = 0for ($i = 0; $i -lt $result.AdditionalRegions.Count; $i++) {if ($result.AdditionalRegions[$i].Location.Replace(" ", "") -eq $firstAdditionalRegionLocation.Replace(" ", "")) {$found = $found + 1Assert-AreEqual $sku $result.AdditionalRegions[$i].SkuAssert-AreEqual 1 $result.AdditionalRegions[$i].CapacityAssert-Null $result.AdditionalRegions[$i].VirtualNetwork}if ($result.AdditionalRegions[$i].Location.Replace(" ", "") -eq $secondAdditionalRegionLocation.Replace(" ", "")) {$found = $found + 1Assert-AreEqual $sku $result.AdditionalRegions[$i].SkuAssert-AreEqual 1 $result.AdditionalRegions[$i].CapacityAssert-Null $result.AdditionalRegions[$i].VirtualNetwork}}$newAdditionalRegionCapacity = 2$apimService = Get-AzApiManagement -ResourceGroupName $resourceGroupName -Name $apiManagementName$apimService = Remove-AzApiManagementRegion -ApiManagement $apimService -Location $firstAdditionalRegionLocation$apimService = Update-AzApiManagementRegion -ApiManagement $apimService -Location $secondAdditionalRegionLocation -Capacity $newAdditionalRegionCapacity -Sku $sku$updatedService = Set-AzApiManagement -InputObject $apimService -AssignIdentity -PassThruAssert-AreEqual $resourceGroupName $updatedService.ResourceGroupNameAssert-AreEqual $apiManagementName $updatedService.NameAssert-AreEqual $location $updatedService.LocationAssert-AreEqual $sku $updatedService.SkuAssert-AreEqual $capacity $updatedService.CapacityAssert-AreEqual "None" $updatedService.VpnTypeAssert-AreEqual 1 $updatedService.AdditionalRegions.Count$found = 0for ($i = 0; $i -lt $updatedService.AdditionalRegions.Count; $i++) {            if ($updatedService.AdditionalRegions[$i].Location.Replace(" ", "") -eq $secondAdditionalRegionLocation.Replace(" ", "")) {$found = $found + 1Assert-AreEqual $sku $updatedService.AdditionalRegions[$i].SkuAssert-AreEqual $newAdditionalRegionCapacity $updatedService.AdditionalRegions[$i].CapacityAssert-Null $updatedService.AdditionalRegions[$i].VirtualNetwork}}Assert-AreEqual "SystemAssigned" $updatedService.Identity.Type;Assert-NotNull $updatedService.Identity.PrincipalId;Assert-NotNull $updatedService.Identity.TenantId;}finally {Clean-ResourceGroup $resourceGroupName}}function Test-CrudApiManagementWithExternalVpn {$location = "North Central US"    $resourceGroupName = Get-ResourceGroupName    $apiManagementName = Get-ApiManagementServiceName$organization = "apimpowershellorg"$adminEmail = "apim@powershell.org"$sku = "Developer"$capacity = 1$subnetResourceId = "/subscriptions/20010222-2b48-4245-a95c-090db6312d5f/resourceGroups/powershelltest/providers/Microsoft.Network/virtualNetworks/apimvnettest/subnets/default"$vpnType = "External"try {New-AzResourceGroup -Name $resourceGroupName -Location $location$virtualNetwork = New-AzApiManagementVirtualNetwork -Location $location -SubnetResourceId $subnetResourceId$result = New-AzApiManagement -ResourceGroupName $resourceGroupName -Location $location -Name $apiManagementName -Organization $organization -AdminEmail $adminEmail -VpnType $vpnType -VirtualNetwork $virtualNetwork -Sku $sku -Capacity $capacityAssert-AreEqual $resourceGroupName $result.ResourceGroupNameAssert-AreEqual $apiManagementName $result.NameAssert-AreEqual $location $result.LocationAssert-AreEqual $sku $result.SkuAssert-AreEqual 1 $result.CapacityAssert-AreEqual $vpnType $result.VpnTypeAssert-AreEqual $subnetResourceId $result.VirtualNetwork.SubnetResourceIdGet-AzApiManagement -ResourceGroupName $resourceGroupName | Remove-AzApiManagement$allServices = Get-AzApiManagement -ResourceGroupName $resourceGroupNameAssert-AreEqual 0 $allServices.Count}finally {Clean-ResourceGroup $resourceGroupName}}