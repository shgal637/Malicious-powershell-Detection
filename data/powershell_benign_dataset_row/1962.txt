using namespace System.Diagnosticsfunction Invoke-AppleScript{param([string]$Script,[switch]$PassThru)Write-Verbose "running applescript: $Script"$result = $Script | osascriptif($PassThru.IsPresent){return $result}}function Get-WindowCountMacOS {param([string]$Name)$processCount = @(Get-Process $Name -ErrorAction Ignore).Countif($processCount -eq 0){return 0}$title = Get-WindowsTitleMacOS -name $Nameif(!$title){return 0}$windowCount = [int](Invoke-AppleScript -Script ('tell application "{0}" to count of windows' -f $Name) -PassThru)return $windowCount}function Get-WindowsTitleMacOS {param([string]$Name)return Invoke-AppleScript -Script ('tell application "{0}" to get name of front window' -f $Name) -PassThru}function Stop-ProcessMacOS {param([string]$Name,[switch]$QuitFirst)if($QuitFirst.IsPresent){Invoke-AppleScript -Script ('tell application "{0}" to quit' -f $Name)}Get-Process -Name $Name -ErrorAction Ignore | Stop-Process -Force}Describe "Invoke-Item basic tests" -Tags "Feature" {BeforeAll {$powershell = Join-Path $PSHOME -ChildPath pwsh$testFile1 = Join-Path -Path $TestDrive -ChildPath "text1.txt"New-Item -Path $testFile1 -ItemType File -Force > $null$testFolder = Join-Path -Path $TestDrive -ChildPath "My Folder"New-Item -Path $testFolder -ItemType Directory -Force > $null$testFile2 = Join-Path -Path $testFolder -ChildPath "text2.txt"New-Item -Path $testFile2 -ItemType File -Force > $null$textFileTestCases = @(@{ TestFile = $testFile1; Name='file in root' },@{ TestFile = $testFile2; Name='file in subDirectory' })}Context "Invoke a text file on Unix" {BeforeEach {$redirectErr = Join-Path -Path $TestDrive -ChildPath "error.txt"if($IsMacOS){Stop-ProcessMacOs -Name TextEdit -QuitFirst}}AfterEach {Remove-Item -Path $redirectErr -Force -ErrorAction SilentlyContinue}AfterAll{if($IsMacOS){Stop-ProcessMacOs -Name TextEdit}}It "Should invoke text file '<Name>' without error on Mac" -Pending -TestCases $textFileTestCases {param($TestFile)$expectedTitle = Split-Path $TestFile -Leafopen -F -a TextEdit$beforeCount = Get-WindowCountMacOS -Name TextEditInvoke-Item -Path $TestFile$startTime = Get-Date$title = [String]::Emptywhile (((Get-Date) - $startTime).TotalSeconds -lt 30 -and ($title -ne $expectedTitle)){Start-Sleep -Milliseconds 100$title = Get-WindowsTitleMacOS -name TextEdit}$afterCount = Get-WindowCountMacOS -Name TextEdit$afterCount | Should -Be ($beforeCount + 1) -Because "There should be one more 'textEdit' windows open than when the tests started and there was $beforeCount"$title | Should -Be $expectedTitleInvoke-AppleScript -Script ('tell application "{0}" to close window "{1}"' -f 'TextEdit', $expectedTitle)}}It "Should invoke an executable file without error" {$ping = (Get-Command "ping" -CommandType Application | Select-Object -First 1).Source$redirectFile = Join-Path -Path $TestDrive -ChildPath "redirect2.txt"if ($IsWindows) {if ([System.Management.Automation.Platform]::IsNanoServer -or [System.Management.Automation.Platform]::IsIoT) {& $powershell -noprofile -c "Invoke-Item '$ping'" > $redirectFileGet-Content $redirectFile -Raw | Should -Match "usage: ping"} else {$notepad = Get-Command "notepad.exe" -CommandType Application | ForEach-Object Source$notepadProcessName = "notepad"Get-Process -Name $notepadProcessName | Stop-Process -ForceInvoke-Item -Path $notepad$notepadProcess = Get-Process -Name $notepadProcessName$notepadProcess.Name | Should -BeIn $notepadProcessNameStop-Process -InputObject $notepadProcess}} else {& $powershell -noprofile -c "Invoke-Item '$ping'" 2> $redirectFileGet-Content $redirectFile -Raw | Should -Match "usage: ping|ping:"}}Context "Invoke a folder" {BeforeAll {$supportedEnvironment = $trueif ($IsLinux){$appFolder = "$HOME/.local/share/applications"if (Test-Path $appFolder){$mimeDefault = xdg-mime query default inode/directoryRemove-Item $HOME/InvokeItemTest.Success -Force -ErrorAction SilentlyContinueSet-Content -Path "$appFolder/InvokeItemTest.desktop" -Force -Value @"[Desktop Entry]Version=1.0Name=InvokeItemTestComment=Validate Invoke-Item for directoryExec=/bin/sh -c 'echo %u > ~/InvokeItemTest.Success'Icon=utilities-terminalTerminal=trueType=ApplicationCategories=Application;"@xdg-mime default InvokeItemTest.desktop inode/directory}else{$supportedEnvironment = $false}}}AfterAll {if ($IsLinux -and $supportedEnvironment){xdg-mime default $mimeDefault inode/directoryRemove-Item $appFolder/InvokeItemTest.desktop -Force -ErrorAction SilentlyContinueRemove-Item $HOME/InvokeItemTest.Success -Force -ErrorAction SilentlyContinue}}BeforeEach {if($IsMacOS){Get-Process -Name Finder | Stop-Process -Force}}AfterAll{if($IsMacOS){Stop-ProcessMacOs -Name Finder}}It "Should invoke a folder without error" -Skip:(!$supportedEnvironment) {if ($IsWindows){$shell = New-Object -ComObject "Shell.Application"$windows = $shell.Windows()$before = $windows.CountInvoke-Item -Path ~Wait-UntilTrue -sb { $windows.Count -gt $before } -TimeoutInMilliseconds (10*1000) -IntervalInMilliseconds 100 | Should -BeTrue$after = $windows.Count$before + 1 | Should -Be $after$item = $windows.Item($after - 1)$item.LocationURL | Should -Match ((Resolve-Path ~) -replace '\\', '/')$item.Quit()}elseif ($IsLinux){Invoke-Item -Path $PSHOMEWait-FileToBePresent -File "$HOME/InvokeItemTest.Success" -TimeoutInSeconds 10 -IntervalInMilliseconds 100 | Should -BeTrueGet-Content $HOME/InvokeItemTest.Success | Should -Be $PSHOME}else{Set-TestInconclusive -Message "AppleScript is not currently reliable on Az Pipelines"$beforeCount = Get-WindowCountMacOS -Name FinderInvoke-Item -Path $PSHOME$startTime = Get-Date$expectedTitle = Split-Path $PSHOME -Leaf$title = [String]::Emptywhile (((Get-Date) - $startTime).TotalSeconds -lt 10 -and ($title -ne $expectedTitle)){Start-Sleep -Milliseconds 100$title = 'tell application "Finder" to get name of front window' | osascript}$afterCount = [int]('tell application "Finder" to count of windows' | osascript)$afterCount | Should -Be ($beforeCount + 1)$title | Should -Be $expectedTitle'tell application "Finder" to close front window' | osascript}}}}Describe "Invoke-Item tests on Windows" -Tags "CI","RequireAdminOnWindows" {BeforeAll {$isNanoServer = [System.Management.Automation.Platform]::IsNanoServer$isIot = [System.Management.Automation.Platform]::IsIoT$isFullWin = $IsWindows -and !$isNanoServer -and !$isIotif ($isFullWin) {$testfilename = "testfile.!!testext!!"$testfilepath = Join-Path $TestDrive $testfilename$renamedtestfilename = "renamedtestfile.!!testext!!"$renamedtestfilepath = Join-Path $TestDrive $renamedtestfilenamecmd.exe /c assoc .!!testext!!=!!testext!!.FileType | Out-Nullcmd.exe /c ftype !!testext!!.FileType=cmd.exe /c rename $testfilepath $renamedtestfilename | Out-Null}}AfterAll {if ($IsWindows) {cmd.exe /c assoc !!testext!!=cmd.exe /c ftype !!testext!!.FileType=}}BeforeEach {New-Item $testfilepath -ItemType File | Out-Null}AfterEach {Remove-Item $testfilepath -ErrorAction SilentlyContinueRemove-Item $renamedtestfilepath -ErrorAction SilentlyContinue}It "Should invoke a file without error on Windows full SKUs" -Skip:(-not $isFullWin) {invoke-item $testfilepath{$startTime = [Datetime]::Nowwhile (-not (test-path $renamedtestfilepath)){Start-Sleep -Milliseconds 100if (([Datetime]::Now - $startTime) -ge [timespan]"00:00:05") { throw "Timeout exception" }}} | Should -Not -throw}It "Should start a file without error on Windows full SKUs" -Skip:(-not $isFullWin) {Start-Process $testfilepath -WaitTest-Path $renamedtestfilepath | Should -BeTrue}}