function Test-CreateServer{$rg = Create-ResourceGroupForTest$serverName = Get-ServerName$version = "12.0"$serverLogin = "testusername"$serverPassword = "t357ingP@s5w0rd!"$credentials = new-object System.Management.Automation.PSCredential($serverLogin, ($serverPassword | ConvertTo-SecureString -asPlainText -Force)) try{$job = New-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $serverName `-Location $rg.Location -ServerVersion $version -SqlAdministratorCredentials $credentials -AsJob$job | Wait-Job$server1 = $job.OutputAssert-AreEqual $server1.ServerName $serverNameAssert-AreEqual $server1.ServerVersion $versionAssert-AreEqual $server1.SqlAdministratorLogin $serverLoginAssert-StartsWith ($server1.ServerName + ".") $server1.FullyQualifiedDomainName}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateServer{$rg = Create-ResourceGroupForTest$server = Create-ServerForTest $rgtry{$serverPassword = "n3wc00lP@55w0rd"$secureString = ConvertTo-SecureString $serverPassword -AsPlainText -Force$server1 = Set-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName `-SqlAdministratorPassword $secureStringAssert-AreEqual $server1.ServerName $server.ServerNameAssert-AreEqual $server1.ServerVersion $server.ServerVersionAssert-AreEqual $server1.SqlAdministratorLogin $server.SqlAdministratorLoginAssert-StartsWith ($server1.ServerName + ".") $server1.FullyQualifiedDomainName$serverPassword = "n3wc00lP@55w0rd!!!"$secureString = ConvertTo-SecureString $serverPassword -AsPlainText -Force$server2 = $server | Set-AzSqlServer -SqlAdministratorPassword $secureStringAssert-AreEqual $server2.ServerName $server.ServerNameAssert-AreEqual $server2.ServerVersion $server.ServerVersionAssert-AreEqual $server2.SqlAdministratorLogin $server.SqlAdministratorLoginAssert-StartsWith ($server1.ServerName + ".") $server1.FullyQualifiedDomainName}finally{Remove-ResourceGroupForTest $rg}}function Test-GetServer{$rg = Create-ResourceGroupForTest$rg1 = Create-ResourceGroupForTest$server1 = Create-ServerForTest $rg$server2 = Create-ServerForTest $rg$server3 = Create-ServerForTest $rg1try{$resp1 = Get-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $server1.ServerNameAssert-AreEqual $server1.ServerName $resp1.ServerNameAssert-AreEqual $server1.SqlAdministratorLogin $resp1.SqlAdministratorLoginAssert-StartsWith ($server1.ServerName + ".") $server1.FullyQualifiedDomainName$resp2 = $server2 | Get-AzSqlServerAssert-AreEqual $server2.ServerName $resp2.ServerNameAssert-AreEqual $server2.SqlAdministratorLogin $resp2.SqlAdministratorLoginAssert-StartsWith ($server1.ServerName + ".") $server1.FullyQualifiedDomainName$all = Get-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -Name *Assert-AreEqual 2 $all.Count$all2 = Get-AzSqlServer -ResourceGroupName *($server1, $server2, $server3) | ForEach-Object { Assert-True {$_.ServerName -in $all2.ServerName} }}finally{Remove-ResourceGroupForTest $rgRemove-ResourceGroupForTest $rg1}}function Test-RemoveServer{$rg = Create-ResourceGroupForTest$server1 = Create-ServerForTest $rg$server2 = Create-ServerForTest $rgtry{Remove-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $server1.ServerName -Force$server2 | Remove-AzSqlServer -Force$all = Get-AzSqlServer -ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $all.Count 0}finally{Remove-ResourceGroupForTest $rg}}function Test-CreateServerWithIdentity{$rg = Create-ResourceGroupForTest$serverName = Get-ServerName$serverLogin = "testusername"$serverPassword = "t357ingP@s5w0rd!"$credentials = new-object System.Management.Automation.PSCredential($serverLogin, ($serverPassword | ConvertTo-SecureString -asPlainText -Force)) try{$server1 = New-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $serverName -Location "northeurope" -SqlAdministratorCredentials $credentials -AssignIdentityAssert-AreEqual $server1.ServerName $serverNameAssert-AreEqual $server1.Identity.Type SystemAssignedAssert-NotNull $server1.Identity.PrincipalId}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateServerWithIdentity{$rg = Create-ResourceGroupForTest$location = "westeurope"$server = Create-ServerForTest $rg $locationtry{$serverPassword = "n3wc00lP@55w0rd"$secureString = ConvertTo-SecureString $serverPassword -AsPlainText -Force$server1 = Set-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $server.ServerName -SqlAdministratorPassword $secureString -AssignIdentityAssert-AreEqual $server1.ServerName $server.ServerNameAssert-AreEqual $server1.Identity.Type SystemAssignedAssert-NotNull $server1.Identity.PrincipalId}finally{Remove-ResourceGroupForTest $rg}}function Test-UpdateServerWithoutIdentity{$rg = Create-ResourceGroupForTest$serverName = Get-ServerName$serverLogin = "testusername"$serverPassword = "t357ingP@s5w0rd!"$credentials = new-object System.Management.Automation.PSCredential($serverLogin, ($serverPassword | ConvertTo-SecureString -asPlainText -Force)) try{$server1 = New-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $serverName -Location "northeurope" -SqlAdministratorCredentials $credentials -AssignIdentityAssert-AreEqual $server1.ServerName $serverNameAssert-AreEqual $server1.Identity.Type SystemAssignedAssert-NotNull $server1.Identity.PrincipalId$newPassword = "n3wc00lP@55w0rd"$secureString = ConvertTo-SecureString $newPassword -AsPlainText -Force$server2 = Set-AzSqlServer -ResourceGroupName $rg.ResourceGroupName -ServerName $server1.ServerName -SqlAdministratorPassword $secureStringAssert-AreEqual $server2.Identity.Type SystemAssignedAssert-NotNull $server2.Identity.PrincipalId}finally{Remove-ResourceGroupForTest $rg}}