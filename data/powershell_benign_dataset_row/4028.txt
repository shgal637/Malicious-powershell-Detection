function Test-CreatesNewSimpleResource{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$location = Get-Location "Microsoft.Sql" "servers" "West US"$apiversion = "2014-04-01"$resourceType = "Microsoft.Sql/servers"New-AzResourceGroup -Name $rgname -Location $rglocation$actual = New-AzResource -Name $rname -Location $location -Tags @{ testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"administratorLogin" = "adminuser"; "administratorLoginPassword" = "P@ssword1"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion$expected = Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceType -ApiVersion $apiversion$list = Get-AzResource -ResourceGroupName $rgnameAssert-AreEqual $expected.Name $actual.NameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $expected.ResourceType $actual.ResourceTypeAssert-AreEqual 1 @($list).CountAssert-AreEqual $expected.Name $list[0].NameAssert-AreEqual $expected.Sku $actual.Sku}function Test-CreatesNewComplexResource{$rgname = Get-ResourceGroupName$rnameParent = Get-ResourceName$rnameChild = Get-ResourceName$resourceTypeChild = "Microsoft.Sql/servers/databases"$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$location = Get-Location "Microsoft.Sql" "servers" "West US"$apiversion = "2014-04-01"New-AzResourceGroup -Name $rgname -Location $rglocation$actualParent = New-AzResource -Name $rnameParent -Location $location -ResourceGroupName $rgname -ResourceType $resourceTypeParent -PropertyObject @{"administratorLogin" = "adminuser"; "administratorLoginPassword" = "P@ssword1"} -ApiVersion $apiversion$expectedParent = Get-AzResource -Name $rnameParent -ResourceGroupName $rgname -ResourceType $resourceTypeParent -ApiVersion $apiversion$actualChild = New-AzResource -Name $rnameChild -Location $location -ResourceGroupName $rgname -ResourceType $resourceTypeChild -ParentResource servers/$rnameParent -PropertyObject @{"edition" = "Web"; "collation" = "SQL_Latin1_General_CP1_CI_AS"; "maxSizeBytes" = "1073741824"} -ApiVersion $apiversion$expectedChild = Get-AzResource -Name $rnameChild -ResourceGroupName $rgname -ResourceType $resourceTypeChild -ParentResource servers/$rnameParent -ApiVersion $apiversion$list = Get-AzResource -ResourceGroupName $rgname$parentFromList = $list | where {$_.ResourceType -eq $resourceTypeParent} | Select-Object -First 1$childFromList = $list | where {$_.ResourceType -eq $resourceTypeChild} | Select-Object -First 1$listOfServers = Get-AzResource -ResourceType $resourceTypeParent -ResourceGroupName $rgname$listOfDatabases = Get-AzResource -ResourceType $resourceTypeChild -ResourceGroupName $rgnameAssert-AreEqual $expectedParent.Name $actualParent.NameAssert-AreEqual $expectedChild.Name $actualChild.NameAssert-AreEqual $expectedParent.ResourceType $actualParent.ResourceTypeAssert-AreEqual $expectedChild.ResourceType $actualChild.ResourceTypeAssert-AreEqual 2 @($list).CountAssert-AreEqual $expectedParent.Name $parentFromList.NameAssert-AreEqual $expectedChild.Name $childFromList.NameAssert-AreEqual $expectedParent.ResourceType $parentFromList.ResourceTypeAssert-AreEqual $expectedChild.ResourceType $childFromList.ResourceTypeAssert-AreEqual 1 @($listOfServers).CountAssert-AreEqual 1 @($listOfDatabases).Count}function Test-GetResourcesViaPiping{$rgname = Get-ResourceGroupName$rnameParent = Get-ResourceName$rnameChild = Get-ResourceName$resourceTypeChild = "Microsoft.Sql/servers/databases"$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$location = Get-Location "Microsoft.Sql" "servers" "West US"$apiversion = "2014-04-01"New-AzResourceGroup -Name $rgname -Location $rglocationNew-AzResource -Name $rnameParent -Location $location -ResourceGroupName $rgname -ResourceType $resourceTypeParent -PropertyObject @{"administratorLogin" = "adminuser"; "administratorLoginPassword" = "P@ssword1"} -ApiVersion $apiversionNew-AzResource -Name $rnameChild -Location $location -ResourceGroupName $rgname -ResourceType $resourceTypeChild -ParentResource servers/$rnameParent -PropertyObject @{"edition" = "Web"; "collation" = "SQL_Latin1_General_CP1_CI_AS"; "maxSizeBytes" = "1073741824"} -ApiVersion $apiversion$list = Get-AzResourceGroup -Name $rgname | Get-AzResource$serverFromList = $list | where {$_.ResourceType -eq $resourceTypeParent} | Select-Object -First 1$databaseFromList = $list | where {$_.ResourceType -eq $resourceTypeChild} | Select-Object -First 1Assert-AreEqual 2 @($list).CountAssert-AreEqual $rnameParent $serverFromList.NameAssert-AreEqual $rnameChild $databaseFromList.NameAssert-AreEqual $resourceTypeParent $serverFromList.ResourceTypeAssert-AreEqual $resourceTypeChild $databaseFromList.ResourceType}function Test-GetResourcesFromEmptyGroup{$rgname = Get-ResourceGroupName$location = Get-Location "Microsoft.Resources" "resourceGroups" "West US"New-AzResourceGroup -Name $rgname -Location $location$listViaPiping = Get-AzResourceGroup -Name $rgname | Get-AzResource$listViaDirect = Get-AzResource -ResourceGroupName $rgnameAssert-AreEqual 0 @($listViaPiping).CountAssert-AreEqual 0 @($listViaDirect).Count}function Test-GetResourcesFromNonExisingGroup{$rgname = Get-ResourceGroupNameAssert-Throws { Get-AzResource -ResourceGroupName $rgname } "Provided resource group does not exist."}function Test-GetResourcesForNonExisingType{$list = Get-AzResource -ResourceType 'Non-Existing'Assert-AreEqual 0 @($list).Count}function Test-GetResourceForNonExisingResource{$rgname = Get-ResourceGroupName$rname = Get-ResourceGroupName$location = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$resourceTypeWeb = "Microsoft.Web/sites"$resourceTypeSql = "Microsoft.Sql/servers"$apiversion = "2014-04-01"New-AzResourceGroup -Name $rgname -Location $locationAssert-Throws { Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceTypeWeb -ApiVersion $apiversion } "Provided resource does not exist."Assert-Throws { Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceTypeSql -ApiVersion $apiversion } "Provided resource does not exist."Assert-Throws { Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType 'Microsoft.Fake/nonexisting' -ApiVersion $apiversion } "Provided resource does not exist."}function Test-GetResourcesViaPipingFromAnotherResource{$rgname = Get-ResourceGroupName$rnameParent = Get-ResourceName$rnameChild = Get-ResourceName$resourceTypeChild = "Microsoft.Sql/servers/databases"$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$location = Get-Location "Microsoft.Sql" "servers" "West US"$apiversion = "2014-04-01"New-AzResourceGroup -Name $rgname -Location $rglocationNew-AzResource -Name $rnameParent -Location $location -ResourceGroupName $rgname -ResourceType $resourceTypeParent -PropertyObject @{"administratorLogin" = "adminuser"; "administratorLoginPassword" = "P@ssword1"} -ApiVersion $apiversionNew-AzResource -Name $rnameChild -Location $location -ResourceGroupName $rgname -ResourceType $resourceTypeChild -ParentResource servers/$rnameParent -PropertyObject @{"edition" = "Web"; "collation" = "SQL_Latin1_General_CP1_CI_AS"; "maxSizeBytes" = "1073741824"} -ApiVersion $apiversion$list = Get-AzResource -ResourceGroupName $rgname | Get-AzResource -ApiVersion $apiversionAssert-AreEqual 2 @($list).Count}function Test-MoveAResource{$rgname = Get-ResourceGroupName$rgname2 = Get-ResourceGroupName + "test3"$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocationNew-AzResourceGroup -Name $rgname2 -Location $rglocation$resource = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -ApiVersion $apiversion -ForceMove-AzResource -ResourceId $resource.ResourceId -DestinationResourceGroupName $rgname2 -Force$movedResource = Get-AzResource -ResourceGroupName $rgname2 -ResourceName $rname -ResourceType $resourceTypeAssert-AreEqual $movedResource.Name $resource.NameAssert-AreEqual $movedResource.ResourceGroupName $rgname2Assert-AreEqual $movedResource.ResourceType $resource.ResourceType}finally{Clean-ResourceGroup $rgnameClean-ResourceGroup $rgname2}}function Test-MoveResourceFailed{$exceptionMessage = "At least one valid resource Id must be provided.";Assert-Throws { Get-AzResource | Where-Object { $PSItem.Name -eq "NonExistingResource" } | Move-AzResource -DestinationResourceGroupName "AnyResourceGroup" } $exceptionMessage$resourceId1 = "/subscriptions/fb3a3d6b-44c8-44f5-88c9-b20917c9b96b/resourceGroups/tianorg1/providers/Microsoft.Storage/storageAccounts/temp1"$resourceId2 = "/subscriptions/fb3a3d6b-44c8-44f5-88c9-b20917c9b96b/resourceGroups/tianorg2/providers/Microsoft.Storage/storageAccounts/temp1"$exceptionMessage = "The resources being moved must all reside in the same resource group. The resources: *"Assert-ThrowsLike { Move-AzResource -DestinationResourceGroupName "AnyGroup" -ResourceId @($resourceId1, $resourceId2) } $exceptionMessage}function Test-SetAResource{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocation$resource = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$oldSku = $resource.Sku.psobject$oldSkuNameProperty = $oldSku.PropertiesAssert-AreEqual $oldSkuNameProperty.Name "name"Assert-AreEqual $resource.SKu.Name "A0"Set-AzResource -ResourceGroupName $rgname -ResourceName $rname -ResourceType $resourceType -Properties @{"key2" = "value2"} -Force$job = Set-AzResource -ResourceGroupName $rgname -ResourceName $rname -ResourceType $resourceType -SkuObject @{ Name = "A1" }  -Force -AsJob$job | Wait-Job$modifiedResource = Get-AzResource -ResourceGroupName $rgname -ResourceName $rname -ResourceType $resourceTypeAssert-AreEqual $modifiedResource.Properties.key2 "value2"Assert-AreEqual $modifiedResource.Sku.Name "A1"}finally{Clean-ResourceGroup $rgname}}function Test-SetAResourceUsingPiping{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocationNew-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$resource = Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceTypeAssert-AreEqual $resource.Name $rnameAssert-AreEqual $resource.ResourceGroupName $rgnameAssert-AreEqual $resource.ResourceType $resourceTypeAssert-AreEqual $resource.Sku.Name "A0"Assert-AreEqual $resource.Tags["testtag"] "testval"Assert-AreEqual $resource.Properties.key "value"$setResource = $resource | Set-AzResource -ForceAssert-NotNull $setResourceAssert-AreEqual $setResource.Name $rnameAssert-AreEqual $setResource.ResourceGroupName $rgnameAssert-AreEqual $setResource.ResourceType $resourceTypeAssert-AreEqual $setResource.Sku.Name "A0"Assert-AreEqual $setResource.Tags["testtag"] "testval"Assert-AreEqual $setResource.Properties.key "value"$resource.Tags.Add("testtag1", "testval1")$resource.Sku.Name = "A1"$setResource = $resource | Set-AzResource -ForceAssert-NotNull $setResourceAssert-AreEqual $setResource.Name $rnameAssert-AreEqual $setResource.ResourceGroupName $rgnameAssert-AreEqual $setResource.ResourceType $resourceTypeAssert-AreEqual $setResource.Sku.Name "A1"Assert-AreEqual $setResource.Tags["testtag"] "testval"Assert-AreEqual $setResource.Tags["testtag1"] "testval1"Assert-AreEqual $setResource.Properties.key "value"$modifiedResource = Get-AzResource -ResourceGroupName $rgname -ResourceName $rname -ResourceType $resourceTypeAssert-NotNull $modifiedResourceAssert-AreEqual $modifiedResource.Name $rnameAssert-AreEqual $modifiedResource.ResourceGroupName $rgnameAssert-AreEqual $modifiedResource.ResourceType $resourceTypeAssert-AreEqual $modifiedResource.Sku.Name "A1"Assert-AreEqual $modifiedResource.Tags["testtag"] "testval"Assert-AreEqual $modifiedResource.Tags["testtag1"] "testval1"Assert-AreEqual $modifiedResource.Properties.key "value"}finally{Clean-ResourceGroup $rgname}}function Test-SetAResourceWithPatch{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"New-AzResourceGroup -Name $rgname -Location $rglocation$resource = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -ForceSet-AzResource -ResourceGroupName $rgname -ResourceName $rname -ResourceType $resourceType -Properties @{"key2" = "value2"} -ForceSet-AzResource -ResourceGroupName $rgname -ResourceName $rname -ResourceType $resourceType -SkuObject @{ Name = "A1" } -UsePatchSemantics -Force$modifiedResource = Get-AzResource -ResourceGroupName $rgname -ResourceName $rname -ResourceType $resourceTypeAssert-AreEqual $modifiedResource.Properties.key2 "value2"Assert-AreEqual $modifiedResource.Sku.Name "A1"}function Test-FindAResource{$rgname = Get-ResourceGroupName$rname = "testname"$rname2 = "test2name"$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocation$actual = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$expected = Get-AzResource -ResourceName "*test*" -ResourceGroupName "*$rgname*"Assert-NotNull $expectedAssert-AreEqual $actual.ResourceId $expected[0].ResourceId$expected = Get-AzResource -ResourceType $resourceType -ResourceGroupName "*$rgName*"Assert-NotNull $expectedAssert-AreEqual $actual.ResourceId $expected[0].ResourceIdNew-AzResource -Name $rname2 -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$expected = Get-AzResource -ResourceName "*test*" -ResourceGroupName "*$rgname*"Assert-AreEqual 2 @($expected).Count$expected = Get-AzResource -ResourceGroupName $rgname -ResourceName $rnameAssert-NotNull $expectedAssert-AreEqual $actual.ResourceId $expected[0].ResourceId}finally{Clean-ResourceGroup $rgname}}function Test-FindAResource-ByTag{$rgname = Get-ResourceGroupName$rname = "testname"$rname2 = "test2name"$rname3 = "test3name"$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocation$actual1 = New-AzResource -Name $rname -Location $rglocation -Tags @{ScenarioTestTag = "ScenarioTestVal"} -ResourceGroupName $rgname -ResourceType $resourceType -ApiVersion $apiversion -Force$actual2 = New-AzResource -Name $rname2 -Location $rglocation -Tags @{ScenarioTestTag = $null} -ResourceGroupName $rgname -ResourceType $resourceType -ApiVersion $apiversion -Force$actual3 = New-AzResource -Name $rname3 -Location $rglocation -Tags @{ScenarioTestTag = "RandomTestVal"; RandomTestVal = "ScenarioTestVal"} -ResourceGroupName $rgname -ResourceType $resourceType -ApiVersion $apiversion -Force$expected = Get-AzResource -Tag @{ScenarioTestTag = "ScenarioTestVal"}Assert-NotNull $expectedAssert-AreEqual $expected.Count 1Assert-AreEqual $actual1.ResourceId $expected[0].ResourceId$expected = Get-AzResource -TagName "ScenarioTestTag" -TagValue "ScenarioTestVal"Assert-NotNull $expectedAssert-AreEqual $expected.Count 1Assert-AreEqual $actual1.ResourceId $expected[0].ResourceId$expected = Get-AzResource -Tag @{ScenarioTestTag = $null}Assert-NotNull $expectedAssert-AreEqual $expected.Count 3Assert-NotNull { $expected | where { $_.ResourceId -eq $actual1.ResourceId } }Assert-NotNull { $expected | where { $_.ResourceId -eq $actual2.ResourceId } }Assert-NotNull { $expected | where { $_.ResourceId -eq $actual3.ResourceId } }$expected = Get-AzResource -TagName "ScenarioTestTag"Assert-NotNull $expectedAssert-AreEqual $expected.Count 3Assert-NotNull { $expected | where { $_.ResourceId -eq $actual1.ResourceId } }Assert-NotNull { $expected | where { $_.ResourceId -eq $actual2.ResourceId } }Assert-NotNull { $expected | where { $_.ResourceId -eq $actual3.ResourceId } }$expected = Get-AzResource -TagValue "ScenarioTestVal"Assert-NotNull $expectedAssert-AreEqual $expected.Count 2Assert-NotNull { $expected | where { $_.ResourceId -eq $actual1.ResourceId } }Assert-NotNull { $expected | where { $_.ResourceId -eq $actual3.ResourceId } }}finally{Clean-ResourceGroup $rgname}}function Test-GetResourceExpandProperties{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocation$resource = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$resourceGet = Get-AzResource -ResourceName $rname -ResourceGroupName $rgname -ExpandProperties$properties = $resourceGet.Properties.psobject$keyProperty = $properties.PropertiesAssert-AreEqual $keyProperty.Name "key"Assert-AreEqual $resourceGet.Properties.key "value"}finally{Clean-ResourceGroup $rgname}}function Test-GetResourceByIdAndProperties{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocation$resource = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$resourceGet = Get-AzResource -ResourceId $resource.ResourceIdAssert-NotNull $resourceGetAssert-AreEqual $resourceGet.Name $rnameAssert-AreEqual $resourceGet.ResourceGroupName $rgnameAssert-AreEqual $resourceGet.ResourceType $resourceType$properties = $resourceGet.PropertiesAssert-NotNull $propertiesAssert-NotNull $properties.keyAssert-AreEqual $properties.key "value"}finally{Clean-ResourceGroup $rgname}}function Test-GetChildResourcesById{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$location = "West US 2"$siteType = "Microsoft.Web/sites"$slotType = "Microsoft.Web/sites/slots"try{New-AzResourceGroup -Name $rgname -Location $location$deployment = New-AzResourceGroupDeployment -Name $rname -ResourceGroupName $rgname -TemplateFile webapp-with-slots-azuredeploy.json -TemplateParameterFile webapp-with-slots-azuredeploy.parameters.jsonAssert-AreEqual Succeeded $deployment.ProvisioningState$sites = Get-AzResource -ResourceGroupName $rgname -ResourceType $siteType$slots = Get-AzResource -ResourceGroupName $rgname -ResourceType $slotTypeAssert-NotNull $sitesAssert-NotNull $slotsAssert-AreEqual $sites.Count 1Assert-AreEqual $slots.Count 4$resourceId = $sites.ResourceId + "/slots"$slots = Get-AzResource -ResourceId $resourceIdAssert-NotNull $slotsAssert-AreEqual $slots.Count 4}finally{Clean-ResourceGroup $rgname}}function Test-SetNestedResourceByPiping{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$location = "West US 2"$siteType = "Microsoft.Web/sites"$configType = "Microsoft.Web/sites/config"$apiVersion = "2018-02-01"try{New-AzResourceGroup -Name $rgname -Location $location$deployment = New-AzResourceGroupDeployment -Name $rname -ResourceGroupName $rgname -TemplateFile webapp-with-slots-azuredeploy.json -TemplateParameterFile webapp-with-slots-azuredeploy.parameters.jsonAssert-AreEqual Succeeded $deployment.ProvisioningState$sites = Get-AzResource -ResourceGroupName $rgname -ResourceType $siteTypeAssert-NotNull $sites$siteName = $sites.Name$config = Get-AzResource -ResourceGroupName $rgname -ResourceType $configType -Name $siteName -ApiVersion $apiVersionAssert-NotNull $config$result = $config | Set-AzResource -ApiVersion $apiVersion -ForceAssert-NotNull $result}finally{Clean-ResourceGroup $rgname}}function Test-GetResourceByComponentsAndProperties{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"try{New-AzResourceGroup -Name $rgname -Location $rglocation$resource = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$resourceGet = Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceTypeAssert-NotNull $resourceGetAssert-AreEqual $resourceGet.Name $rnameAssert-AreEqual $resourceGet.ResourceGroupName $rgnameAssert-AreEqual $resourceGet.ResourceType $resourceType$properties = $resourceGet.PropertiesAssert-NotNull $propertiesAssert-NotNull $properties.keyAssert-AreEqual $properties.key "value"}finally{Clean-ResourceGroup $rgname}}function Test-ManageResourceWithZones{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$location = "Central US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"New-AzResourceGroup -Name $rgname -Location $rglocation$created = New-AzResource -Name $rname -Location $location -Tags @{ testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -Zones @("2") -ForceAssert-NotNull $createdAssert-AreEqual $created.Zones.Length 1Assert-AreEqual $created.Zones[0] "2"$resourceGet = Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceTypeAssert-NotNull $resourceGetAssert-AreEqual $resourceGet.Zones.Length 1Assert-AreEqual $resourceGet.Zones[0] "2"$resourceSet = set-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceType -Zones @("3") -ForceAssert-NotNull $resourceSetAssert-AreEqual $resourceSet.Zones.Length 1Assert-AreEqual $resourceSet.Zones[0] "3"$resourceGet = Get-AzResource -Name $rname -ResourceGroupName $rgname -ResourceType $resourceTypeAssert-NotNull $resourceGetAssert-AreEqual $resourceGet.Zones.Length 1Assert-AreEqual $resourceGet.Zones[0] "3"}function Test-RemoveAResource{$rgname = Get-ResourceGroupName$rname = "testname"$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"New-AzResourceGroup -Name $rgname -Location $rglocation$job = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force -AsJob$job | Wait-Job$actual = $job | Receive-JobWait-Seconds 2$expected = Get-AzResource -ResourceName $rname -ResourceGroupName $rgnameAssert-NotNull $expectedAssert-AreEqual $actual.ResourceId $expected[0].ResourceId$job = Remove-AzResource -ResourceId $expected[0].ResourceId -Force -AsJob$job | Wait-Job$expected = Get-AzResource -ResourceName $rname -ResourceGroupName $rgnameAssert-Null $expected}function Test-RemoveASetOfResources{$rgname = Get-ResourceGroupName$rname = "testname"$rname2 = "test2name"$rglocation = Get-Location "Microsoft.Resources" "resourceGroups" "West US"$apiversion = "2014-04-01"$resourceType = "Providers.Test/statefulResources"New-AzResourceGroup -Name $rgname -Location $rglocation$actual = New-AzResource -Name $rname -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$expected = Get-AzResource -ResourceName "*test*" -ResourceGroupName "*$rgname*"Assert-NotNull $expectedAssert-AreEqual $actual.ResourceId $expected[0].ResourceId$expected = Get-AzResource -ResourceType $resourceType -ResourceGroupName "*$rgName*"Assert-NotNull $expectedAssert-AreEqual $actual.ResourceId $expected[0].ResourceIdNew-AzResource -Name $rname2 -Location $rglocation -Tags @{testtag = "testval"} -ResourceGroupName $rgname -ResourceType $resourceType -PropertyObject @{"key" = "value"} -SkuObject @{ Name = "A0" } -ApiVersion $apiversion -Force$expected = Get-AzResource -ResourceName "*test*" -ResourceGroupName "*$rgname*"Assert-AreEqual 2 @($expected).CountGet-AzResource -ResourceName "*test*" -ResourceGroupName "*$rgname*" | Remove-AzResource -Force$expected = Get-AzResource -ResourceName "*test*" -ResourceGroupName "*$rgname*"Assert-Null $expected}