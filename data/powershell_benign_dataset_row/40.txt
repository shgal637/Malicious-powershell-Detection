function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory = $true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if ($AadModule.count -gt 1) {$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if ($AadModule.count -gt 1) {$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI, $clientId, $redirectUri, $platformParameters, $userId).Resultif ($authResult.AccessToken) {$authHeader = @{'Content-Type'  = 'application/json''Authorization' = "Bearer " + $authResult.AccessToken'ExpiresOn'     = $authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Add-DeviceManagementScript() {[cmdletbinding()]Param ([Parameter(Mandatory = $true)][string]$File,[Parameter(Mandatory = $false)][string]$Description,[Parameter(Mandatory = $false)][switch][bool]$URL = $false)if ($URL -eq $true) {$FileName = $File -split "/"$FileName = $FileName[-1]$OutFile = "$env:TEMP\$FileName"try {Invoke-WebRequest -Uri $File -UseBasicParsing -OutFile $OutFile}catch {Write-Host "Could not download file from URL: $File" -ForegroundColor Redbreak}$File = $OutFileif (!(Test-Path $File)) {Write-Host "$File could not be located." -ForegroundColor Redbreak}}elseif ($URL -eq $false) {if (!(Test-Path $File)) {Write-Host "$File could not be located." -ForegroundColor Redbreak}$FileName = Get-Item $File | Select-Object -ExpandProperty Name}$B64File = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes("$File"));if ($URL -eq $true) {Remove-Item $File -Force}$JSON = @"{"@odata.type": ""displayName": "$FileName","description": "$Description","runSchedule": {"@odata.type": "microsoft.graph.runSchedule"},"scriptContent": "$B64File","runAsAccount": "system","enforceSignatureCheck": "false","fileName": "$FileName"}"@$graphApiVersion = "Beta"$DMS_resource = "deviceManagement/deviceManagementScripts"Write-Verbose "Resource: $DMS_resource"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$DMS_resource"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Add-DeviceManagementScriptAssignment() {[cmdletbinding()]param($ScriptId,$TargetGroupId)$graphApiVersion = "Beta"$Resource = "deviceManagement/deviceManagementScripts/$ScriptId/assign"try {if (!$ScriptId) {write-host "No Script Policy Id specified, specify a valid Script Policy Id" -f Redbreak}if (!$TargetGroupId) {write-host "No Target Group Id specified, specify a valid Target Group Id" -f Redbreak}$JSON = @"{"deviceManagementScriptGroupAssignments":  [{"@odata.type":  ""targetGroupId": "$TargetGroupId","id": "$ScriptId"}]}"@$uri = "https://graph.microsoft.com/$graphApiVersion/$Resource"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-AADGroup() {[cmdletbinding()]param($GroupName,$id,[switch]$Members)$graphApiVersion = "v1.0"$Group_resource = "groups"try {if ($id) {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=id eq '$id'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif ($GroupName -eq "" -or $GroupName -eq $null) {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if (!$Members) {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif ($Members) {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"$Group = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueif ($Group) {$GID = $Group.id$Group.displayNamewrite-host$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)/$GID/Members"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}write-hostif ($global:authToken) {$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif ($TokenExpires -le 0) {write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif ($User -eq $null -or $User -eq "") {$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if ($User -eq $null -or $User -eq "") {$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}$AADGroup = Read-Host -Prompt "Enter the Azure AD Group name where PowerShell scripts will be assigned"$TargetGroupId = (Get-AADGroup -GroupName "$AADGroup").idif ($TargetGroupId -eq $null -or $TargetGroupId -eq "") {Write-Host "AAD Group - '$AADGroup' doesn't exist, please specify a valid AAD Group..." -ForegroundColor RedWrite-Hostexit}Write-Host "Adding Device Management Script from 'C:\Scripts\test-script.ps1'" -ForegroundColor Yellow$Create_Local_Script = Add-DeviceManagementScript -File "C:\Scripts\test-script.ps1" -Description "Test script"Write-Host "Device Management Script created as" $Create_Local_Script.idwrite-hostwrite-host "Assigning Device Management Script to AAD Group '$AADGroup'" -f Cyan$Assign_Local_Script = Add-DeviceManagementScriptAssignment -ScriptId $Create_Local_Script.id -TargetGroupId $TargetGroupIdWrite-Host "Assigned '$AADGroup' to $($Create_Local_Script.displayName)/$($Create_Local_Script.id)"Write-HostWrite-Host "Adding Device Management Script from 'https://pathtourl/test-script.ps1'" -ForegroundColor YellowWrite-Host$Create_Web_Script = Add-DeviceManagementScript -File "https://pathtourl/test-script.ps1" -URL -Description "Test script"Write-Host "Device Management Script created as" $Create_Web_Script.idwrite-hostwrite-host "Assigning Device Management Script to AAD Group '$AADGroup'" -f Cyan$Assign_Web_Script = Add-DeviceManagementScriptAssignment -ScriptId $Create_Web_Script.id -TargetGroupId $TargetGroupIdWrite-Host "Assigned '$AADGroup' to $($Create_Web_Script.displayName)/$($Create_Web_Script.id)"Write-Host