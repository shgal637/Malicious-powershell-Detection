$script:DSCModuleName = 'DSC'$script:DSCResourceName = 'MSFT_PSRepository'$script:moduleRoot = Split-Path -Parent (Split-Path -Parent $PSScriptRoot)if ( (-not (Test-Path -Path (Join-Path -Path $script:moduleRoot -ChildPath 'DSCResource.Tests'))) -or `(-not (Test-Path -Path (Join-Path -Path $script:moduleRoot -ChildPath 'DSCResource.Tests\TestHelper.psm1'))) ) {& git @('clone', 'https://github.com/PowerShell/DscResource.Tests.git', (Join-Path -Path $script:moduleRoot -ChildPath 'DscResource.Tests'))}Import-Module -Name (Join-Path -Path $script:moduleRoot -ChildPath (Join-Path -Path 'DSCResource.Tests' -ChildPath 'TestHelper.psm1')) -Force$TestEnvironment = Initialize-TestEnvironment `-DSCModuleName $script:DSCModuleName `-DSCResourceName $script:DSCResourceName `-ResourceType 'Mof' `-TestType Unitfunction Invoke-TestSetup {}function Invoke-TestCleanup {Restore-TestEnvironment -TestEnvironment $TestEnvironment}try {Invoke-TestSetupInModuleScope $script:DSCResourceName {$mockRepositoryName = 'PSTestGallery'$mockSourceLocation = 'https://www.poshtestgallery.com/api/v2/'$mockPublishLocation = 'https://www.poshtestgallery.com/api/v2/package/'$mockScriptSourceLocation = 'https://www.poshtestgallery.com/api/v2/items/psscript/'$mockScriptPublishLocation = 'https://www.poshtestgallery.com/api/v2/package/'$mockPackageManagementProvider = 'NuGet'$mockInstallationPolicy_Trusted = 'Trusted'$mockInstallationPolicy_NotTrusted = 'Untrusted'$mockRepository = New-Object -TypeName Object |Add-Member -Name 'Name' -MemberType NoteProperty -Value $mockRepositoryName -PassThru |Add-Member -Name 'SourceLocation' -MemberType NoteProperty -Value $mockSourceLocation -PassThru |Add-Member -Name 'ScriptSourceLocation' -MemberType NoteProperty -Value $mockScriptSourceLocation  -PassThru |Add-Member -Name 'PublishLocation' -MemberType NoteProperty -Value $mockPublishLocation -PassThru |Add-Member -Name 'ScriptPublishLocation' -MemberType NoteProperty -Value $mockScriptPublishLocation -PassThru |Add-Member -Name 'InstallationPolicy' -MemberType NoteProperty -Value $mockInstallationPolicy_Trusted -PassThru |Add-Member -Name 'PackageManagementProvider' -MemberType NoteProperty -Value $mockPackageManagementProvider -PassThru |Add-Member -Name 'Trusted' -MemberType NoteProperty -Value $true -PassThru |Add-Member -Name 'Registered' -MemberType NoteProperty -Value $true -PassThru -Force$mockGetPSRepository = {return @($mockRepository)}Describe 'MSFT_PSRepository\Get-TargetResource' -Tag 'Get' {Context 'When the system is in the desired state' {Context 'When the configuration is present' {BeforeAll {Mock -CommandName Get-PSRepository -MockWith $mockGetPSRepository}It 'Should return the same values as passed as parameters' {$getTargetResourceResult = Get-TargetResource -Name $mockRepositoryName$getTargetResourceResult.Name | Should -Be $mockRepositoryNameAssert-MockCalled -CommandName Get-PSRepository -Exactly -Times 1 -Scope It}It 'Should return the correct values for the other properties' {$getTargetResourceResult = Get-TargetResource -Name $mockRepositoryName$getTargetResourceResult.Ensure | Should -Be 'Present'$getTargetResourceResult.SourceLocation | Should -Be $mockRepository.SourceLocation$getTargetResourceResult.ScriptSourceLocation | Should -Be $mockRepository.ScriptSourceLocation$getTargetResourceResult.PublishLocation | Should -Be $mockRepository.PublishLocation$getTargetResourceResult.ScriptPublishLocation | Should -Be $mockRepository.ScriptPublishLocation$getTargetResourceResult.InstallationPolicy | Should -Be $mockRepository.InstallationPolicy$getTargetResourceResult.PackageManagementProvider | Should -Be $mockRepository.PackageManagementProvider$getTargetResourceResult.Trusted | Should -Be $true$getTargetResourceResult.Registered | Should -Be $trueAssert-MockCalled -CommandName Get-PSRepository -Exactly -Times 1 -Scope It}}Context 'When the configuration is absent' {BeforeAll {Mock -CommandName Get-PSRepository}It 'Should return the same values as passed as parameters' {$getTargetResourceResult = Get-TargetResource -Name $mockRepositoryName$getTargetResourceResult.Name | Should -Be $mockRepositoryNameAssert-MockCalled -CommandName Get-PSRepository -Exactly -Times 1 -Scope It}It 'Should return the correct values for the other properties' {$getTargetResourceResult = Get-TargetResource -Name $mockRepositoryName$getTargetResourceResult.Ensure | Should -Be 'Absent'$getTargetResourceResult.SourceLocation | Should -BeNullOrEmpty$getTargetResourceResult.ScriptSourceLocation | Should -BeNullOrEmpty$getTargetResourceResult.PublishLocation | Should -BeNullOrEmpty$getTargetResourceResult.ScriptPublishLocation | Should -BeNullOrEmpty$getTargetResourceResult.InstallationPolicy | Should -BeNullOrEmpty$getTargetResourceResult.PackageManagementProvider | Should -BeNullOrEmpty$getTargetResourceResult.Trusted | Should -Be $false$getTargetResourceResult.Registered | Should -Be $falseAssert-MockCalled -CommandName Get-PSRepository -Exactly -Times 1 -Scope It}}}}Describe 'MSFT_PSRepository\Set-TargetResource' -Tag 'Set' {Context 'When the system is not in the desired state' {BeforeAll {Mock -CommandName Register-PSRepositoryMock -CommandName Unregister-PSRepositoryMock -CommandName Set-PSRepository}Context 'When the configuration should be present' {Context 'When the repository does not exist' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Absent'Name                      = $mockRepositoryNameSourceLocation            = $nullScriptSourceLocation      = $nullPublishLocation           = $nullScriptPublishLocation     = $nullInstallationPolicy        = $nullPackageManagementProvider = $nullTrusted                   = $falseRegistered                = $false}}}It 'Should return call the correct mocks' {$setTargetResourceParameters = @{Name                      = $mockRepository.NameSourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProvider}{ Set-TargetResource @setTargetResourceParameters } | Should -Not -ThrowAssert-MockCalled -CommandName Register-PSRepository -Exactly -Times 1 -Scope ItAssert-MockCalled -CommandName Unregister-PSRepository -Exactly -Times 0 -Scope ItAssert-MockCalled -CommandName Set-PSRepository -Exactly -Times 0 -Scope It}}Context 'When the repository do exist but with wrong properties' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Present'Name                      = $mockRepository.NameSourceLocation            = 'https://www.powershellgallery.com/api/v2/'ScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProviderTrusted                   = $mockRepository.TrustedRegistered                = $mockRepository.Registered}}}It 'Should return call the correct mocks' {$setTargetResourceParameters = @{Name                      = $mockRepository.NameSourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProvider}{ Set-TargetResource @setTargetResourceParameters } | Should -Not -ThrowAssert-MockCalled -CommandName Register-PSRepository -Exactly -Times 0 -Scope ItAssert-MockCalled -CommandName Unregister-PSRepository -Exactly -Times 0 -Scope ItAssert-MockCalled -CommandName Set-PSRepository -Exactly -Times 1 -Scope It}}}Context 'When the configuration should be absent' {Context 'When the repository do exist' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Present'Name                      = $mockRepository.NameSourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProviderTrusted                   = $mockRepository.TrustedRegistered                = $mockRepository.Registered}}}It 'Should return call the correct mocks' {$setTargetResourceParameters = @{Ensure = 'Absent'Name   = $mockRepositoryName}{ Set-TargetResource @setTargetResourceParameters } | Should -Not -ThrowAssert-MockCalled -CommandName Register-PSRepository -Exactly -Times 0 -Scope ItAssert-MockCalled -CommandName Unregister-PSRepository -Exactly -Times 1 -Scope ItAssert-MockCalled -CommandName Set-PSRepository -Exactly -Times 0 -Scope It}}}}}Describe 'MSFT_PSRepository\Test-TargetResource' -Tag 'Test' {Context 'When the system is in the desired state' {Context 'When the configuration is present' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Present'Name                      = $mockRepository.NameSourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProviderTrusted                   = $mockRepository.TrustedRegistered                = $mockRepository.Registered}}}It 'Should return the state as $true' {$testTargetResourceResult = Test-TargetResource -Name $mockRepositoryName$testTargetResourceResult | Should -Be $trueAssert-MockCalled -CommandName Get-TargetResource -Exactly -Times 1 -Scope It}}Context 'When the configuration is absent' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Absent'Name                      = $mockRepositoryNameSourceLocation            = $nullScriptSourceLocation      = $nullPublishLocation           = $nullScriptPublishLocation     = $nullInstallationPolicy        = $nullPackageManagementProvider = $nullTrusted                   = $falseRegistered                = $false}}}It 'Should return the state as $true' {$testTargetResourceResult = Test-TargetResource -Ensure 'Absent' -Name $mockRepositoryName$testTargetResourceResult | Should -Be $trueAssert-MockCalled -CommandName Get-TargetResource -Exactly -Times 1 -Scope It}}}Context 'When the system is not in the desired state' {Context 'When the configuration should be present' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Absent'Name                      = $mockRepositoryNameSourceLocation            = $nullScriptSourceLocation      = $nullPublishLocation           = $nullScriptPublishLocation     = $nullInstallationPolicy        = $nullPackageManagementProvider = $nullTrusted                   = $falseRegistered                = $false}}}It 'Should return the state as $false' {$testTargetResourceParameters = @{Name                      = $mockRepository.NameSourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProvider}$testTargetResourceResult = Test-TargetResource @testTargetResourceParameters$testTargetResourceResult | Should -Be $falseAssert-MockCalled -CommandName Get-TargetResource -Exactly -Times 1 -Scope It}}Context 'When a property is not in desired state' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Present'Name                      = $mockRepository.NameSourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProviderTrusted                   = $mockRepository.TrustedRegistered                = $mockRepository.Registered}}}$defaultTestCase = @{SourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProvider}$testCaseSourceLocationIsMissing = $defaultTestCase.Clone()$testCaseSourceLocationIsMissing['TestName'] = 'SourceLocation is missing'$testCaseSourceLocationIsMissing['SourceLocation'] = 'https://www.powershellgallery.com/api/v2/'$testCaseScriptSourceLocationIsMissing = $defaultTestCase.Clone()$testCaseScriptSourceLocationIsMissing['TestName'] = 'ScriptSourceLocation is missing'$testCaseScriptSourceLocationIsMissing['ScriptSourceLocation'] = 'https://www.powershellgallery.com/api/v2/items/psscript/'$testCasePublishLocationIsMissing = $defaultTestCase.Clone()$testCasePublishLocationIsMissing['TestName'] = 'PublishLocation is missing'$testCasePublishLocationIsMissing['PublishLocation'] = 'https://www.powershellgallery.com/api/v2/package/'$testCaseScriptPublishLocationIsMissing = $defaultTestCase.Clone()$testCaseScriptPublishLocationIsMissing['TestName'] = 'ScriptPublishLocation is missing'$testCaseScriptPublishLocationIsMissing['ScriptPublishLocation'] = 'https://www.powershellgallery.com/api/v2/package/'$testCaseInstallationPolicyIsMissing = $defaultTestCase.Clone()$testCaseInstallationPolicyIsMissing['TestName'] = 'InstallationPolicy is missing'$testCaseInstallationPolicyIsMissing['InstallationPolicy'] = $mockInstallationPolicy_NotTrusted$testCasePackageManagementProviderIsMissing = $defaultTestCase.Clone()$testCasePackageManagementProviderIsMissing['TestName'] = 'PackageManagementProvider is missing'$testCasePackageManagementProviderIsMissing['PackageManagementProvider'] = 'PSGallery'$testCases = @($testCaseSourceLocationIsMissing$testCaseScriptSourceLocationIsMissing$testCasePublishLocationIsMissing$testCaseScriptPublishLocationIsMissing$testCaseInstallationPolicyIsMissing$testCasePackageManagementProviderIsMissing)It 'Should return the state as $false when the correct <TestName>' -TestCases $testCases {param($SourceLocation,$ScriptSourceLocation,$PublishLocation,$ScriptPublishLocation,$InstallationPolicy,$PackageManagementProvider)$testTargetResourceParameters = @{Name                      = $mockRepositoryNameSourceLocation            = $SourceLocationScriptSourceLocation      = $ScriptSourceLocationPublishLocation           = $PublishLocationScriptPublishLocation     = $ScriptPublishLocationInstallationPolicy        = $InstallationPolicyPackageManagementProvider = $PackageManagementProvider}$testTargetResourceResult = Test-TargetResource @testTargetResourceParameters$testTargetResourceResult | Should -Be $falseAssert-MockCalled -CommandName Get-TargetResource -Exactly -Times 1 -Scope It}}Context 'When the configuration should be absent' {BeforeEach {Mock -CommandName Get-TargetResource -MockWith {return @{Ensure                    = 'Present'Name                      = $mockRepositoryNameSourceLocation            = $mockRepository.SourceLocationScriptSourceLocation      = $mockRepository.ScriptSourceLocationPublishLocation           = $mockRepository.PublishLocationScriptPublishLocation     = $mockRepository.ScriptPublishLocationInstallationPolicy        = $mockRepository.InstallationPolicyPackageManagementProvider = $mockRepository.PackageManagementProviderTrusted                   = $mockRepository.TrustedRegistered                = $mockRepository.Registered}}}It 'Should return the state as $false' {$testTargetResourceResult = Test-TargetResource -Ensure 'Absent' -Name $mockRepositoryName$testTargetResourceResult | Should -Be $falseAssert-MockCalled -CommandName Get-TargetResource -Exactly -Times 1 -Scope It}}}}}}finally {Invoke-TestCleanup}