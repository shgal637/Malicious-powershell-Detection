function Set-AzAdvisorConfigurationWithLowCpu{$propertiesCount = 4$lowCpuThresholdParameter = 20$cmdletReturnType = "Microsoft.Azure.Commands.Advisor.Cmdlets.Models.PsAzureAdvisorConfigurationData"$TypeValue = "Microsoft.Advisor/Configurations"$queryResult = Set-AzAdvisorConfiguration -LowCpuThreshold $lowCpuThresholdParameter Assert-NotNull  $queryResultAssert-IsInstance $queryResult $cmdletReturnTypefor ($i = 0; $i -lt $queryResult.Count; $i++){Assert-PropertiesCount $queryResult[$i] $propertiesCount	Assert-IsInstance $queryResult[$i].id StringAssert-NotNull $queryResult[$i].Properties.exclude StringAssert-NotNull $queryResult[$i].Properties.lowCpuThreshold StringAssert-AreEqual $queryResult[$i].Properties.lowCpuThreshold 	$lowCpuThresholdParameterAssert-AreEqual $queryResult[$i].Type $TypeValue}}function Set-AzAdvisorConfigurationBadUserInputLowCpu-Negative{$lowCpuThresholdParameter = 25Assert-ThrowsContains { Set-AzAdvisorConfiguration -LowCpuThreshold $lowCpuThresholdParameter }  "Cannot validate argument on parameter 'LowCpuThreshold'. The argument "25" does not belong to the set "0,5,10,15,20" specified by the ValidateSet attribute"}function Set-AzAdvisorConfigurationByLowCpuExclude{try{$propertiesCount = 4$lowCpuThresholdParameter = 20$cmdletReturnType = "Microsoft.Azure.Commands.Advisor.Cmdlets.Models.PsAzureAdvisorConfigurationData"$TypeValue = "Microsoft.Advisor/Configurations"$queryResult = Set-AzAdvisorConfiguration -LowCpuThreshold $lowCpuThresholdParameter -ExcludeAssert-IsInstance $queryResult $cmdletReturnTypeAssert-NotNull  $queryResultfor ($i = 0; $i -lt $queryResult.Count; $i++){Assert-PropertiesCount $queryResult[$i] $propertiesCount	Assert-IsInstance $queryResult[$i].id StringAssert-AreEqual $queryResult[$i].Properties.exclude $TrueAssert-NotNull $queryResult[$i].Properties.lowCpuThreshold StringAssert-AreEqual $queryResult[$i].Properties.lowCpuThreshold 	$lowCpuThresholdParameterAssert-AreEqual $queryResult[$i].Type $TypeValue}}Finally{$queryResult = Set-AzAdvisorConfiguration -LowCpuThreshold $lowCpuThresholdParameter}}function Set-AzAdvisorConfigurationPipelineByLowCpuExclude{try{$propertiesCount = 4$lowCpuThresholdParameter = 20$cmdletReturnType = "Microsoft.Azure.Commands.Advisor.Cmdlets.Models.PsAzureAdvisorConfigurationData"$TypeValue = "Microsoft.Advisor/Configurations"$queryResult = Get-AzAdvisorConfiguration | Set-AzAdvisorConfiguration -LowCpuThreshold $lowCpuThresholdParameter Assert-IsInstance $queryResult $cmdletReturnTypeAssert-NotNull  $queryResultfor ($i = 0; $i -lt $queryResult.Count; $i++){Assert-PropertiesCount $queryResult[$i] $propertiesCount	Assert-IsInstance $queryResult[$i].id StringAssert-NotNull $queryResult[$i].Properties.lowCpuThreshold StringAssert-AreEqual $queryResult[$i].Properties.lowCpuThreshold 	$lowCpuThresholdParameterAssert-AreEqual $queryResult[$i].Type $TypeValue}}Finally{$queryResult = Get-AzAdvisorConfiguration | Set-AzAdvisorConfiguration -LowCpuThreshold $lowCpuThresholdParameter }}function Set-AzAdvisorConfigurationWithRg{$propertiesCount = 4$RgName = "testing"$cmdletReturnType = "Microsoft.Azure.Commands.Advisor.Cmdlets.Models.PsAzureAdvisorConfigurationData"$TypeValue = "Microsoft.Advisor/Configurations"$queryResult = Set-AzAdvisorConfiguration -ResourceGroupName $RgName Assert-IsInstance $queryResult $cmdletReturnTypeAssert-NotNull  $queryResultfor ($i = 0; $i -lt $queryResult.Count; $i++){Assert-PropertiesCount $queryResult[$i] $propertiesCount	Assert-IsInstance $queryResult[$i].id StringAssert-NotNull $queryResult[$i].Properties.exclude StringAssert-Null $queryResult[$i].Properties.lowCpu StringAssert-AreEqual $queryResult[$i].Type $TypeValue}}function Set-AzAdvisorConfigurationByRgExclude{$propertiesCount = 4$RgName = "testing"$cmdletReturnType = "Microsoft.Azure.Commands.Advisor.Cmdlets.Models.PsAzureAdvisorConfigurationData"$TypeValue = "Microsoft.Advisor/Configurations"$queryResult = Set-AzAdvisorConfiguration -ResourceGroupName $RgName Assert-IsInstance $queryResult $cmdletReturnTypeAssert-NotNull  $queryResultfor ($i = 0; $i -lt $queryResult.Count; $i++){Assert-PropertiesCount $queryResult[$i] $propertiesCount	Assert-IsInstance $queryResult[$i].id StringAssert-NotNull $queryResult[$i].Properties.exclude StringAssert-Null $queryResult[$i].Properties.lowCpu StringAssert-AreEqual $queryResult[$i].Properties.exclude	$FalseAssert-AreEqual $queryResult[$i].Type $TypeValue}}