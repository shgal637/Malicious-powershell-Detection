function Test-KustoDatabaseLifecycle{try{  $RGlocation = Get-RG-Location$location = Get-Location$resourceGroupName = Get-RG-Name$clusterName = Get-Cluster-Name$sku = Get-Sku$databaseName = Get-Database-Name$resourceType =  Get-Database-Type$softDeletePeriodInDays =  Get-Soft-Delete-Period-In-Days$hotCachePeriodInDays =  Get-Hot-Cache-Period-In-Days$databaseFullName = "$clusterName/$databaseName"$expectedException = Get-Database-Not-Exist-Message -DatabaseName $databaseName$softDeletePeriodInDaysUpdated = Get-Updated-Soft-Delete-Period-In-Days$hotCachePeriodInDaysUpdated = Get-Updated-Hot-Cache-Period-In-DaysNew-AzResourceGroup -Name $resourceGroupName -Location $RGlocation$clusterCreated = New-AzKustoCluster -ResourceGroupName $resourceGroupName -Name $clusterName -Location $location -Sku $sku$databaseCreated = New-AzKustoDatabase -ResourceGroupName $resourceGroupName -ClusterName $clusterName -Name $databaseName -SoftDeletePeriodInDays $softDeletePeriodInDays -HotCachePeriodInDays $hotCachePeriodInDaysValidate_Database $databaseCreated $databaseFullName $location $type $softDeletePeriodInDays $hotCachePeriodInDays;$databaseGetItem = Get-AzKustoDatabase -ResourceGroupName $resourceGroupName -ClusterName $clusterName -Name $databaseNameValidate_Database $databaseGetItem $databaseFullName $location $type $softDeletePeriodInDays $hotCachePeriodInDays;$databaseUpdatedWithParameters = Update-AzKustoDatabase -ResourceGroupName $resourceGroupName -ClusterName $clusterName -Name $databaseName -SoftDeletePeriodInDays $softDeletePeriodInDaysUpdated -HotCachePeriodInDays $hotCachePeriodInDaysUpdatedValidate_Database $databaseUpdatedWithParameters $databaseFullName $location $type $softDeletePeriodInDaysUpdated $hotCachePeriodInDaysUpdated;$databaseUpdatedWithResourceId = Update-AzKustoDatabase -ResourceId $databaseUpdatedWithParameters.Id -SoftDeletePeriodInDays $softDeletePeriodInDays -HotCachePeriodInDays $hotCachePeriodInDaysValidate_Database $databaseUpdatedWithResourceId $databaseFullName $location $type $softDeletePeriodInDays $hotCachePeriodInDays;$databaseUpdatedObject = Update-AzKustoDatabase -InputObject $databaseUpdatedWithResourceId -SoftDeletePeriodInDays $softDeletePeriodInDaysUpdated -HotCachePeriodInDays $hotCachePeriodInDaysUpdatedValidate_Database $databaseUpdatedObject $databaseFullName $location $type $softDeletePeriodInDaysUpdated $hotCachePeriodInDaysUpdated;Remove-AzKustoDatabase -ResourceGroupName $resourceGroupName -ClusterName $clusterName -Name $databaseNameEnsure_Database_Not_Exist $resourceGroupName $clusterName $databaseName $expectedException}finally{Invoke-HandledCmdlet -Command {Remove-AzKustoCluster -ResourceGroupName $resourceGroupName -Name $clusterName -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DatabaseAddRemoveGet {try{$RGlocation = Get-RG-Location$location = Get-Location$resourceGroupName = Get-RG-Name$clusterName = Get-Cluster-Name$sku = Get-Sku$databaseName = Get-Database-Name$resourceType =  Get-Database-Type$softDeletePeriodInDays =  Get-Soft-Delete-Period-In-Days$hotCachePeriodInDays =  Get-Hot-Cache-Period-In-Days$databaseFullName = "$clusterName/$databaseName"$expectedException = Get-Database-Not-Exist-Message -DatabaseName $databaseNameNew-AzResourceGroup -Name $resourceGroupName -Location $RGlocation$clusterCreated = New-AzKustoCluster -ResourceGroupName $resourceGroupName -Name $clusterName -Location $location -Sku $sku$databaseCreated = New-AzKustoDatabase -ResourceId $clusterCreated.Id -Name $databaseName -SoftDeletePeriodInDays $softDeletePeriodInDays -HotCachePeriodInDays $hotCachePeriodInDaysValidate_Database $databaseCreated $databaseFullName $location $type $softDeletePeriodInDays $hotCachePeriodInDays;$databaseGetItem = Get-AzKustoDatabase -ResourceId $clusterCreated.Id -Name $databaseNameValidate_Database $databaseGetItem $databaseFullName $location $type $softDeletePeriodInDays $hotCachePeriodInDays;Remove-AzKustoDatabase -ResourceId $databaseGetItem.IdEnsure_Database_Not_Exist $resourceGroupName $clusterName $databaseName $expectedException$cluster = Get-AzKustoCluster -ResourceGroupName $resourceGroupName -Name $clusterName$databaseCreated = New-AzKustoDatabase -InputObject $cluster -Name $databaseName -SoftDeletePeriodInDays $softDeletePeriodInDays -HotCachePeriodInDays $hotCachePeriodInDaysValidate_Database $databaseCreated $databaseFullName $location $type $softDeletePeriodInDays $hotCachePeriodInDays;$databaseGetItem = Get-AzKustoDatabase -InputObject $cluster -Name $databaseNameValidate_Database $databaseGetItem $databaseFullName $location $type $softDeletePeriodInDays $hotCachePeriodInDays;Remove-AzKustoDatabase -InputObject $databaseCreatedEnsure_Database_Not_Exist $resourceGroupName $clusterName $databaseName $expectedException}finally{Invoke-HandledCmdlet -Command {Remove-AzKustoCluster -ResourceGroupName $resourceGroupName -Name $clusterName -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue} -IgnoreFailures}}function Validate_Database {Param ([Object]$Database,[string]$DatabaseFullName,[string]$Location,[string]$Type,[int]$SoftDeletePeriodInDays,[int]$HotCachePeriodInDays)Assert-AreEqual $DatabaseFullName $Database.NameAssert-AreEqual $Location $Database.LocationAssert-AreEqual $ResourceType $Database.TypeAssert-AreEqual $SoftDeletePeriodInDays $Database.SoftDeletePeriodInDays Assert-AreEqual $HotCachePeriodInDays $Database.HotCachePeriodInDays }function Ensure_Database_Not_Exist {Param ([String]$ResourceGroupName,[String]$ClusterName,[string]$DatabaseName,[string]$ExpectedErrorMessage)$expectedException = $false;try{$databaseGetItemDeleted = Get-AzKustoDatabase -ResourceGroupName $ResourceGroupName -ClusterName $ClusterName -Name $DatabaseName}catch{if ($_ -Match $ExpectedErrorMessage){$expectedException = $true;}}if (-not $expectedException){throw "Expected exception from calling Get-AzKustoDatabase was not caught: '$expectedErrorMessage'.";}}