function Test-AddGetListSetRemoveActionGroup{Write-Output "Starting Test-SetActivityLogAlert" $resourceGroupName = 'Default-ActivityLogAlerts'$actionGroupName = 'andygroup-donotuse'$shortName = 'andygroup'[bool]$t = $true[bool]$f = $false$emptyString=""try{Write-Verbose " ****** Creating a new email receiver with default UseCommonAlertSchema not explicitly set"$email1 = New-AzActionGroupReceiver -EmailReceiver -Name 'emailreceiver' -EmailAddress 'andyshen@microsoft.com'Assert-NotNull $email1Assert-AreEqual 'emailreceiver' $email1.NameAssert-AreEqual 'andyshen@microsoft.com' $email1.EmailAddressAssert-AreEqual false $email1.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new email receiver with  UseCommonAlertSchema  explicitly set to true"$email2 = New-AzActionGroupReceiver -EmailReceiver -Name 'emailreceiver1' -EmailAddress 'some email' -UseCommonAlertSchemaAssert-NotNull $email2Assert-AreEqual 'emailreceiver1' $email2.NameAssert-AreEqual 'some email' $email2.EmailAddressAssert-AreEqual true $email2.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new sms receiver"$sms1 = New-AzActionGroupReceiver -SmsReceiver -Name 'smsreceiver' -CountryCode '1' -PhoneNumber '4254251234'Assert-NotNull $sms1Assert-AreEqual 'smsreceiver' $sms1.NameAssert-AreEqual '1' $sms1.CountryCodeAssert-AreEqual '4254251234' $sms1.PhoneNumberWrite-Verbose " ****** Creating a new webhook receiver with default UseCommonAlertSchema not explicitly set and use aad auth not set"$webhook1 = New-AzActionGroupReceiver -WebhookReceiver -Name 'webhookreceiver' -ServiceUri 'http://test.com'Assert-NotNull $webhook1Assert-AreEqual 'webhookreceiver' $webhook1.NameAssert-AreEqual 'http://test.com' $webhook1.ServiceUriAssert-AreEqual false $webhook1.UseCommonAlertSchemaAssert-AreEqual false $webhook1.UseAadAuthAssert-AreEqual $emptyString $webhook1.ObjectIdAssert-AreEqual $emptyString $webhook1.IdentifierUriAssert-AreEqual $emptyString $webhook1.TenantIdWrite-Verbose " ****** Creating a new webhook receiver with  UseCommonAlertSchema  explicitly set and use aad auth  set"$webhook2 = New-AzActionGroupReceiver -WebhookReceiver -Name 'webhookreceiver' -ServiceUri 'http://test.com' -UseCommonAlertSchema -UseAadAuth -ObjectId 'someObjectId' -IdentifierUri 'someIdentifierUri' -TenantId 'someTenantId'Assert-NotNull $webhook1Assert-AreEqual 'webhookreceiver' $webhook2.NameAssert-AreEqual 'http://test.com' $webhook2.ServiceUriAssert-AreEqual true $webhook2.UseCommonAlertSchemaAssert-AreEqual true $webhook2.UseAadAuthAssert-AreEqual 'someObjectId' $webhook2.ObjectIdAssert-AreEqual 'someIdentifierUri' $webhook2.IdentifierUriAssert-AreEqual 'someTenantId' $webhook2.TenantIdWrite-Verbose " ****** Creating a new itsm receiver "$itsm1 = New-AzActionGroupReceiver -ItsmReceiver -Name 'itsmReceiver' -WorkspaceId 'someworkspaceId' -ConnectionId 'connectionId'  -TicketConfiguration 'ticketConfiguration' -Region 'someRegion' Assert-NotNull $itsm1Assert-AreEqual 'itsmReceiver' $itsm1.NameAssert-AreEqual 'someworkspaceId' $itsm1.WorkspaceIdAssert-AreEqual 'connectionId' $itsm1.ConnectionIdAssert-AreEqual 'ticketConfiguration' $itsm1.TicketConfigurationAssert-AreEqual 'someRegion' $itsm1.RegionWrite-Verbose " ****** Creating a new voice receiver"$voice1 = New-AzActionGroupReceiver -VoiceReceiver -Name 'VoiceReceiver' -VoiceCountryCode '1' -VoicePhoneNumber '4254251234'Assert-NotNull $voice1Assert-AreEqual 'VoiceReceiver' $voice1.NameAssert-AreEqual '1' $voice1.CountryCodeAssert-AreEqual '4254251234' $voice1.PhoneNumberWrite-Verbose " ****** Creating a new armrole receiver with default use common alert schema"$armrole1 = New-AzActionGroupReceiver -ArmRoleReceiver -Name 'armroleReceiver' -RoleId 'someRoleId' Assert-NotNull $armrole1Assert-AreEqual 'armroleReceiver' $armrole1.NameAssert-AreEqual 'someRoleId' $armrole1.RoleIdAssert-AreEqual false $armrole1.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new armrole receiver with use common alert schema explicitly set"$armrole2 = New-AzActionGroupReceiver -ArmRoleReceiver -Name 'armroleReceiver' -RoleId 'someRoleId'  -UseCommonAlertSchemaAssert-NotNull $armrole2Assert-AreEqual 'armroleReceiver' $armrole2.NameAssert-AreEqual 'someRoleId' $armrole2.RoleIdAssert-AreEqual true $armrole2.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new azure function receiver with  default use common alert schema"$azureFunc1 = New-AzActionGroupReceiver -AzureFunctionReceiver -Name 'azfunreceiver' -FunctionAppResourceId 'somereosurceid'  -FunctionName 'somefunc' -HttpTriggerUrl 'someHttpTrigUrl'Assert-NotNull $azureFunc1Assert-AreEqual 'azfunreceiver' $azureFunc1.NameAssert-AreEqual 'somereosurceid' $azureFunc1.FunctionAppResourceIdAssert-AreEqual 'somefunc' $azureFunc1.FunctionNameAssert-AreEqual 'someHttpTrigUrl' $azureFunc1.HttpTriggerUrlAssert-AreEqual false $azureFunc1.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new azure function receiver with  use common alert schema explicitly set"$azureFunc2 = New-AzActionGroupReceiver -AzureFunctionReceiver -Name 'azfunreceiver' -FunctionAppResourceId 'somereosurceid' -UseCommonAlertSchema -FunctionName 'somefunc' -HttpTriggerUrl 'someHttpTrigUrl'Assert-NotNull $azureFunc2Assert-AreEqual 'azfunreceiver' $azureFunc2.NameAssert-AreEqual 'somereosurceid' $azureFunc2.FunctionAppResourceIdAssert-AreEqual 'somefunc' $azureFunc2.FunctionNameAssert-AreEqual 'someHttpTrigUrl' $azureFunc2.HttpTriggerUrlAssert-AreEqual true $azureFunc2.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new logic app  receiver with  default use common alert schema"$logicapp1 = New-AzActionGroupReceiver -LogicAppReceiver -Name 'logicapp' -ResourceId 'somereosurceid'  -CallbackUrl 'somecallback' Assert-NotNull $logicapp1Assert-AreEqual 'logicapp' $logicapp1.NameAssert-AreEqual 'somereosurceid' $logicapp1.ResourceIdAssert-AreEqual 'somecallback' $logicapp1.CallbackUrlAssert-AreEqual false $logicapp1.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new logic app  receiver with   use common alert schema explicitly set"$logicapp2 = New-AzActionGroupReceiver -LogicAppReceiver -Name 'logicapp' -ResourceId 'somereosurceid'  -CallbackUrl 'somecallback' -UseCommonAlertSchemaAssert-NotNull $logicapp2Assert-AreEqual 'logicapp' $logicapp2.NameAssert-AreEqual 'somereosurceid' $logicapp2.ResourceIdAssert-AreEqual 'somecallback' $logicapp2.CallbackUrlAssert-AreEqual true $logicapp2.UseCommonAlertSchemaWrite-Verbose " ****** Creating a new automation run book receiver with  default use common alert schema"$runbook1 = New-AzActionGroupReceiver -AutomationRunbookReceiver -Name 'runbook' -AutomationAccountId 'accoutId'  -RunbookName 'runbook' -WebhookResourceId 'webhookresourceid' -IsGlobalRunbook  -AutomationRunbookServiceUri 'someserviceUrl'Assert-NotNull $runbook1Assert-AreEqual 'runbook' $runbook1.NameAssert-AreEqual 'accoutId' $runbook1.AutomationAccountIdAssert-AreEqual 'runbook' $runbook1.RunbookNameAssert-AreEqual 'webhookresourceid' $runbook1.WebhookResourceIdAssert-AreEqual true $runbook1.IsGlobalRunbookAssert-AreEqual false $runbook1.UseCommonAlertSchemaAssert-AreEqual 'someserviceUrl' $runbook1.ServiceUriWrite-Verbose " ****** Creating a new automation run book receiver with  use common alert schema set explicitly"$runbook2 = New-AzActionGroupReceiver -AutomationRunbookReceiver -Name 'runbook' -AutomationAccountId 'accoutId'  -RunbookName 'runbook' -WebhookResourceId 'webhookresourceid' -IsGlobalRunbook -AutomationRunbookServiceUri 'someserviceUrl' -UseCommonAlertSchemaAssert-NotNull $runbook2Assert-AreEqual 'runbook' $runbook2.NameAssert-AreEqual 'accoutId' $runbook2.AutomationAccountIdAssert-AreEqual 'runbook' $runbook2.RunbookNameAssert-AreEqual 'webhookresourceid' $runbook2.WebhookResourceIdAssert-AreEqual true $runbook2.IsGlobalRunbookAssert-AreEqual true $runbook2.UseCommonAlertSchemaAssert-AreEqual 'someserviceUrl' $runbook2.ServiceUriWrite-Verbose " ****** Creating a new app push receiver"$apppush1 = New-AzActionGroupReceiver -AzureAppPushReceiver -Name 'apppsuh' -AzureAppPushEmailAddress 'someemaild'  Assert-NotNull $apppush1Assert-AreEqual 'apppsuh' $apppush1.NameAssert-AreEqual 'someemaild' $apppush1.EmailAddressWrite-Verbose " ****** Creating a new action group"$actual =  Set-AzActionGroup -Name $actionGroupName -ResourceGroup $resourceGroupName -ShortName $shortName -Receiver $email1,$email2,$sms1,$webhook1,$webhook2,$itsm1,$voice1,$armrole1,$armrole2,$azureFunc1,$azureFunc2,$logicapp1,$logicapp2,$runbook1,$runbook2,$apppush1Assert-NotNull $actualAssert-AreEqual $actionGroupName $actual.Name$json = $actual | ConvertTo-JsonWrite-Verbose $jsonWrite-Verbose " ****** Getting the action group by name"$retrieved = Get-AzActionGroup -ResourceGroup $resourceGroupName -Name $actionGroupNameAssert-NotNull $retrievedAssert-AreEqual 1 $retrieved.LengthAssert-AreEqual $actionGroupName $retrieved[0].NameWrite-Verbose " ****** Getting the action group by subscriptionId"$retrieved = Get-AzActionGroupAssert-NotNull $retrievedAssert-AreEqual 2 $retrieved.LengthAssert-AreEqual $actionGroupName $retrieved[0].NameWrite-Verbose " ****** Getting the action group by resource group"$retrieved = Get-AzActionGroup -ResourceGroupName $resourceGroupNameAssert-NotNull $retrievedAssert-AreEqual 1 $retrieved.LengthAssert-AreEqual $actionGroupName $retrieved[0].NameWrite-Verbose " ****** Removing the action group"Remove-AzActionGroup -ResourceGroup $resourceGroupName -Name $actionGroupName}finally{}}