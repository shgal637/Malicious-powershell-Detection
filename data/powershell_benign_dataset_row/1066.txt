Set-StrictMode -Version 'Latest'& (Join-Path -Path $PSScriptRoot -ChildPath 'Initialize-CarbonTest.ps1' -Resolve)$EnvVarName = 'CarbonTestSetEnvironmentVariable'function Assert-TestEnvironmentVariableIs($ExpectedValue, $Scope, $ExpectedName = $EnvVarName, [switch]$Force){if( $Scope -eq 'Computer' ){$Scope = 'Machine'}$actualValue = [Environment]::GetEnvironmentVariable($ExpectedName, $Scope)$qualifer = ''if( -not $ExpectedValue ){$qualifer = 'not '}It ('should {0}set the environment variable in {1} scope' -f $qualifer,$Scope) {$actualValue | Should Be $ExpectedValue}if( $Scope -eq 'Process' ){if( -not $Force ){$envPath = 'env:{0}' -f $EnvVarNameIt 'should not set the variable in the env: drive' {Test-Path -Path $envPath | Should Be $false}}}        }function Assert-TestEnvironmentVariableSetInEnvDrive{param($ExpectedName = $EnvVarName,$ExpectedValue)$envPath = 'env:{0}' -f $ExpectedNameIt 'should set the variable in the env: drive' {Test-Path -Path $envPath | Should Be $true(Get-Item -Path $envPath).Value | Should Be $ExpectedValue}}function Set-TestEnvironmentVariable($Scope, $Value){$setArgs = @{ "For$Scope" = $true }Remove-EnvironmentVariable -Name $EnvVarName -ForProcess -ForUser -ForComputerSet-EnvironmentVariable -Name $EnvVarName -Value $value @setArgsAssert-TestEnvironmentVariableIs -ExpectedValue $value -Scope $Scopereturn $value}function New-TestValue{[Guid]::NewGuid().ToString()}Describe 'Set-Environment Variable when setting machine-level variable' {$value = New-TestValueSet-TestEnvironmentVariable -Scope Computer -Value $valueAssert-TestEnvironmentVariableIs -ExpectedValue $null -Scope UserAssert-TestEnvironmentVariableIs -ExpectedValue $null -Scope Process}Describe 'Set-EnvironmentVariable when setting user-level variable for current user' {$value = New-TestValueSet-TestEnvironmentVariable -Scope User -Value $valueAssert-TestEnvironmentVariableIs -ExpectedValue $null -Scope 'Computer'Assert-TestEnvironmentVariableIs -ExpectedValue $null -Scope Process}Describe 'Set-EnvironmentVariable when setting process-level variable' {$name = 'Carbon+Set-EnvironmentVariable+ForProcess'$value = New-TestValueRemove-EnvironmentVariable -Name $name -ForProcess -ForUser -ForComputerSet-EnvironmentVariable -Name $name -Value $value -ForProcesstry{Assert-TestEnvironmentVariableIs -ExpectedValue $null -Scope 'Computer' -ExpectedName $nameAssert-TestEnvironmentVariableIs -ExpectedValue $null -Scope 'User' -ExpectedName $nameAssert-TestEnvironmentVariableIs -ExpectedValue $value -Scope 'Process' -ExpectedName $nameAssert-TestEnvironmentVariableSetInEnvDrive -ExpectedValue $value  -ExpectedName $name}finally{Remove-EnvironmentVariable -Name $name -ForProcess -ForUser -ForComputer}}foreach( $scope in 'Computer','User','Process' ){Describe ('Set-Environment when forcing set at the {0} level' -f $scope) {$value = New-TestValue$scopeParam = @{ ('For{0}' -f $scope) = $true}Set-EnvironmentVariable -Name $EnvVarName -Value $value -Force @scopeParamAssert-TestEnvironmentVariableIs -ExpectedValue $value -Scope $scope -ForceAssert-TestEnvironmentVariableSetInEnvDrive -ExpectedValue $value}}Describe 'Set-EnvironmentVariable when using -WhatIf switch' {Remove-EnvironmentVariable -Name $EnvVarName -ForProcess -ForUser -ForComputerSet-EnvironmentVariable -Name $EnvVarName -Value 'Doesn''t matter.' -ForProcess -WhatIfAssert-TestEnvironmentVariableIs -ExpectedValue $null -Scope 'Computer'Assert-TestEnvironmentVariableIs -ExpectedValue $null -Scope 'User'Assert-TestEnvironmentVariableIs -ExpectedValue $null -Scope 'Process'}Describe 'Set-EnvironmentVariable when setting variable for another user' {$name = [Guid]::NewGuid().ToString()$expectedValue = New-TestValueSet-EnvironmentVariable -Name $name -Value $expectedValue -ForUser -Credential $CarbonTestUser $job = Start-Job -ScriptBlock {Get-Item -Path ('env:{0}' -f $using:name) | Select-Object -ExpandProperty 'Value'} -Credential $CarbonTestUser$actualValue = $job | Wait-Job | Receive-Job$job | Remove-Job -Force -ErrorAction IgnoreIt 'should set that user''s environment variable' {$actualValue | Should -Be $expectedValue}}Remove-EnvironmentVariable -Name $EnvVarName -ForProcess -ForUser -ForComputer