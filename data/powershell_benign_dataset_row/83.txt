function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Get-AADUser(){[cmdletbinding()]param($userPrincipalName,$Property)$graphApiVersion = "v1.0"$User_resource = "users"try {if($userPrincipalName -eq "" -or $userPrincipalName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if($Property -eq "" -or $Property -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName"Write-Verbose $uriInvoke-RestMethod -Uri $uri -Headers $authToken -Method Get}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName/$Property"Write-Verbose $uri(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-AADGroup(){[cmdletbinding()]param($GroupName,$id,[switch]$Members)$graphApiVersion = "v1.0"$Group_resource = "groups"try {if($id){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=id eq '$id'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($GroupName -eq "" -or $GroupName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if(!$Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"$Group = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueif($Group){$GID = $Group.id$Group.displayNamewrite-host$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)/$GID/Members"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-RBACRole(){$graphApiVersion = "Beta"$Resource = "deviceManagement/roleDefinitions"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-RBACRoleDefinition(){[cmdletbinding()]param($id)$graphApiVersion = "Beta"$Resource = "deviceManagement/roleDefinitions('$id')?`$expand=roleassignments"try {if(!$id){write-host "No Role ID was passed to the function, provide an ID variable" -f Redbreak}$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).roleAssignments}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-RBACRoleAssignment(){[cmdletbinding()]param($id)$graphApiVersion = "Beta"$Resource = "deviceManagement/roleAssignments('$id')"try {if(!$id){write-host "No Role Assignment ID was passed to the function, provide an ID variable" -f Redbreak}$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get)}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}write-hostwrite-host "Please specify the User Principal Name you want to query:" -f Yellow$UPN = Read-Hostif($UPN -eq $null -or $UPN -eq ""){Write-Host "Valid UPN not specified, script can't continue..." -f RedWrite-Hostbreak}$User = Get-AADUser -userPrincipalName $UPN$UserID = $User.id$UserDN = $User.displayName$UserPN = $User.userPrincipalNameWrite-Hostwrite-host "-------------------------------------------------------------------"write-hostwrite-host "Display Name:"$User.displayNamewrite-host "User ID:"$User.idwrite-host "User Principal Name:"$User.userPrincipalNamewrite-host$MemberOf = Get-AADUser -userPrincipalName $UPN -Property MemberOf$DirectoryRole = $MemberOf | ? { $_.'@odata.type' -eq "if($DirectoryRole){$DirRole = $DirectoryRole.displayNamewrite-host "Directory Role:" -f Yellow$DirectoryRole.displayNamewrite-host}else {write-host "Directory Role:" -f YellowWrite-Host "User"write-host}$AADGroups = $MemberOf | ? { $_.'@odata.type' -eq "if($AADGroups){write-host "AAD Group Membership:" -f Yellowforeach($AADGroup in $AADGroups){$GroupDN = (Get-AADGroup -id $AADGroup.id).displayName$GroupDN}write-host}else {write-host "AAD Group Membership:" -f Yellowwrite-host "No Group Membership in AAD Groups"Write-Host}write-host "-------------------------------------------------------------------"$RBAC_Roles = Get-RBACRole$Permissions = @()foreach($RBAC_Role in $RBAC_Roles){$RBAC_id = $RBAC_Role.id$RoleAssignments = Get-RBACRoleDefinition -id $RBAC_idif($RoleAssignments){$RoleAssignments | foreach {$RBAC_Role_Assignments = $_.id$Assignment = Get-RBACRoleAssignment -id $RBAC_Role_Assignments$RA_Names = @()$Members = $Assignment.members$ScopeMembers = $Assignment.scopeMembers$Members | foreach {if($AADGroups.id -contains $_){$RA_Names += (Get-AADGroup -id $_).displayName}}if($RA_Names){Write-Hostwrite-host "RBAC Role Assigned -" $RBAC_Role.displayName -ForegroundColor Cyan$Permissions += $RBAC_Role.permissions.actionsWrite-Hostwrite-host "Assignment Display Name:" $Assignment.displayName -ForegroundColor YellowWrite-HostWrite-Host "Assignment - Members:" -f Yellow $RA_NamesWrite-HostWrite-Host "Assignment - Scope (Groups):" -f Yellow$ScopeMembers | foreach {(Get-AADGroup -id $_).displayName}Write-Hostwrite-host "-------------------------------------------------------------------"}}}}if($Permissions){Write-Hostwrite-host "Effective Permissions for user:" -ForegroundColor Yellow$Permissions | select -Unique | sort}else {Write-Hostwrite-host "User isn't part of any Intune Roles..." -ForegroundColor Yellow}Write-Host