function Test-Capabilities{$location = "eastus"$all = Get-AzSqlCapability $locationValidate-Capabilities $all$default = Get-AzSqlCapability $location -DefaultsValidate-Capabilities $default$version = Get-AzSqlCapability $location -ServerVersionName "12.0"Validate-Capabilities $default$edition = Get-AzSqlCapability $location -EditionName "Premium"Validate-Capabilities $default$so = Get-AzSqlCapability $location -ServiceObjectiveName "S3"Validate-Capabilities $default}function Validate-Capabilities ($capabilities){Assert-NotNull $capabilitiesAssert-AreEqual $capabilities.Status "Default"Assert-True {$capabilities.SupportedServerVersions.Count -gt 0}foreach($version in $capabilities.SupportedServerVersions) {Assert-NotNull $versionAssert-NotNull $version.ServerVersionNameAssert-NotNull $version.StatusAssert-True {$version.SupportedEditions.Count -gt 0}foreach($edition in $version.SupportedEditions) {Assert-NotNull $editionAssert-NotNull $edition.EditionNameAssert-NotNull $edition.StatusAssert-True {$edition.SupportedServiceObjectives.Count -gt 0}foreach($so in $edition.SupportedServiceObjectives) {Assert-NotNull $soAssert-NotNull $so.ServiceObjectiveNameAssert-NotNull $so.StatusAssert-NotNull $so.IdAssert-AreNotEqual $so.Id [System.Guid]::Emptyforeach($size in $so.SupportedMaxSizes) {Assert-NotNull $sizeAssert-NotNull $size.MinValue.LimitAssert-True { $size.MinValue.Limit -gt 0 }Assert-NotNull $size.MinValue.UnitAssert-NotNull $size.MaxValue.LimitAssert-True { $size.MaxValue.Limit -gt 0 }Assert-NotNull $size.MaxValue.UnitAssert-NotNull $size.ScaleSize.LimitAssert-NotNull $size.ScaleSize.UnitAssert-NotNull $size.Status}}}}}