function Test-CortexCRUD{$rgName = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement "East US"$virtualWanName = Get-ResourceName$virtualHubName = Get-ResourceName$vpnSiteName = Get-ResourceName$vpnGatewayName = Get-ResourceName$remoteVirtualNetworkName = Get-ResourceName$vpnConnectionName = Get-ResourceName$hubVnetConnectionName = Get-ResourceName$vpnSite2Name = Get-ResourceName$vpnSiteLink1Name = Get-ResourceName$vpnSiteLink2Name = Get-ResourceName$vpnConnection2Name = Get-ResourceName$vpnLink1ConnectionName = Get-ResourceName$vpnLink2ConnectionName = Get-ResourceName$storeName = 'blob' + $rgNametry{$resourceGroup = New-AzResourceGroup -Name $rgName -Location $rglocation$createdVirtualWan = New-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -Location $rglocation -AllowVnetToVnetTraffic -AllowBranchToBranchTraffic$createdVirtualWan = Update-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -AllowVnetToVnetTraffic $false -AllowBranchToBranchTraffic $false$virtualWan = Get-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanNameAssert-AreEqual $rgName $virtualWan.ResourceGroupNameAssert-AreEqual $virtualWanName $virtualWan.NameAssert-AreEqual $false $virtualWan.AllowVnetToVnetTrafficAssert-AreEqual $false $virtualWan.AllowBranchToBranchTraffic$virtualWans = Get-AzureRmVirtualWan -ResourceGroupName $rgNameAssert-NotNull $virtualWans$virtualWansAll = Get-AzureRmVirtualWanAssert-NotNull $virtualWansAllAssert-NotNull $virtualWansAll[0].ResourceGroupName$virtualWansAll = Get-AzVirtualWan -ResourceGroupName "*"Assert-NotNull $virtualWansAll$virtualWansAll = Get-AzVirtualWan -Name "*"Assert-NotNull $virtualWansAll$virtualWansAll = Get-AzVirtualWan -ResourceGroupName "*" -Name "*"Assert-NotNull $virtualWansAll$createdVirtualHub = New-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubName -Location $rglocation -AddressPrefix "192.168.1.0/24" -VirtualWan $virtualWan$virtualHub = Get-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubNameAssert-AreEqual $rgName $virtualHub.ResourceGroupNameAssert-AreEqual $virtualHubName $virtualHub.NameAssert-AreEqual "192.168.1.0/24" $virtualHub.AddressPrefix$virtualHubs = Get-AzureRmVirtualHub -ResourceGroupName $rgNameAssert-NotNull $virtualHubs$virtualHubsAll = Get-AzureRmVirtualHubAssert-NotNull $virtualHubsAllAssert-NotNull $virtualHubsAll[0].ResourceGroupName$virtualHubsAll = Get-AzureRmVirtualHub -ResourceGroupName "*"Assert-NotNull $virtualHubsAll$virtualHubsAll = Get-AzureRmVirtualHub -Name "*"Assert-NotNull $virtualHubsAll$virtualHubsAll = Get-AzureRmVirtualHub -ResourceGroupName "*" -Name "*"Assert-NotNull $virtualHubsAll$route1 = New-AzVirtualHubRoute -AddressPrefix @("10.0.0.0/16", "11.0.0.0/16") -NextHopIpAddress "12.0.0.5"$route2 = New-AzVirtualHubRoute -AddressPrefix @("13.0.0.0/16") -NextHopIpAddress "14.0.0.5"$routeTable = New-AzVirtualHubRouteTable -Route @($route1, $route2)Update-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubName -RouteTable $routeTable$virtualHub = Get-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubNameAssert-AreEqual $rgName $virtualHub.ResourceGroupNameAssert-AreEqual $virtualHubName $virtualHub.Name$routes = $virtualHub.RouteTable.RoutesAssert-AreEqual 2 @($routes).Count$vpnSiteAddressSpaces = New-Object string[] 1$vpnSiteAddressSpaces[0] = "192.168.2.0/24"$createdVpnSite = New-AzVpnSite -ResourceGroupName $rgName -Name $vpnSiteName -Location $rglocation -VirtualWan $virtualWan -IpAddress "1.2.3.4" -AddressSpace $vpnSiteAddressSpaces -DeviceModel "SomeDevice" -DeviceVendor "SomeDeviceVendor" -LinkSpeedInMbps 10$createdVpnSite = Update-AzVpnSite -ResourceGroupName $rgName -Name $vpnSiteName -IpAddress "2.3.4.5"$vpnSite = Get-AzVpnSite -ResourceGroupName $rgName -Name $vpnSiteNameAssert-AreEqual $rgName $vpnSite.ResourceGroupNameAssert-AreEqual $vpnSiteName $vpnSite.NameAssert-AreEqual "2.3.4.5" $vpnSite.IpAddress$vpnSite2AddressSpaces = New-Object string[] 2$vpnSite2AddressSpaces[0] = "192.169.2.0/24"$vpnSite2AddressSpaces[1] = "192.169.3.0/24"$vpnSiteLink1 = New-AzVpnSiteLink -Name $vpnSiteLink1Name -IpAddress "5.5.5.5" -LinkProviderName "SomeTelecomProvider1" -LinkSpeedInMbps "10"$vpnSiteLink2 = New-AzVpnSiteLink -Name $vpnSiteLink2Name -IpAddress "5.5.5.6" -LinkProviderName "SomeTelecomProvider2" -LinkSpeedInMbps "10"$createdVpnSite2 = New-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2Name -Location $rglocation -VirtualWan $virtualWan -AddressSpace $vpnSite2AddressSpaces -DeviceModel "SomeDevice" -DeviceVendor "SomeDeviceVendor" -VpnSiteLink @($vpnSiteLink1, $vpnSiteLink2)$vpnSite2 = Get-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2NameAssert-AreEqual $rgName $vpnSite2.ResourceGroupNameAssert-AreEqual $vpnSite2Name $vpnSite2.NameAssert-AreEqual 2 $vpnSite2.VpnSiteLinks.Count$vpnSiteLink1.IpAddress = "7.3.4.5"$vpnSite2AddressSpaces = New-Object string[] 2$vpnSite2AddressSpaces[0] = "192.170.2.0/24"$vpnSite2AddressSpaces[1] = "192.170.3.0/24"Update-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2Name -VpnSiteLink @($vpnSiteLink1) -AddressSpace $vpnSite2AddressSpaces$updatedVpnSite2 = Get-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2NameAssert-AreEqual 1 $updatedVpnSite2.VpnSiteLinks.CountAssert-AreEqual "7.3.4.5" $updatedVpnSite2.VpnSiteLinks[0].IpAddressUpdate-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2Name -VpnSiteLink @($vpnSiteLink1, $vpnSiteLink2)$vpnSites = Get-AzureRmVpnSite -ResourceGroupName $rgNameAssert-NotNull $vpnSites$vpnSitesAll = Get-AzVpnSiteAssert-NotNull $vpnSitesAllAssert-NotNull $vpnSitesAll[0].ResourceGroupName$vpnSitesAll = Get-AzVpnSite -ResourceGroupName "*"Assert-NotNull $vpnSitesAll$vpnSitesAll = Get-AzVpnSite -Name "*"Assert-NotNull $vpnSitesAll$vpnSitesAll = Get-AzVpnSite -ResourceGroupName "*" -Name "*"Assert-NotNull $vpnSitesAll$createdVpnGateway = New-AzVpnGateway -ResourceGroupName $rgName -Name $vpnGatewayName -VirtualHub $virtualHub -VpnGatewayScaleUnit 3$createdVpnGateway = Update-AzVpnGateway -ResourceGroupName $rgName -Name $vpnGatewayName -VpnGatewayScaleUnit 4$vpnGateway = Get-AzVpnGateway -ResourceGroupName $rgName -Name $vpnGatewayNameAssert-AreEqual $rgName $vpnGateway.ResourceGroupNameAssert-AreEqual $vpnGatewayName $vpnGateway.NameAssert-AreEqual 4 $vpnGateway.VpnGatewayScaleUnit$vpnGateways = Get-AzVpnGatewayAssert-NotNull $vpnGatewaysAssert-NotNull $vpnGateways[0].ResourceGroupName$vpnGateways = Get-AzureRmVpnGateway -ResourceGroupName $rgNameAssert-NotNull $vpnGateways$vpnGatewaysAll = Get-AzureRmVpnGateway -ResourceGroupName "*"Assert-NotNull $vpnGatewaysAll$vpnGatewaysAll = Get-AzureRmVpnGateway -Name "*"Assert-NotNull $vpnGatewaysAll$vpnGatewaysAll = Get-AzureRmVpnGateway -ResourceGroupName "*" -Name "*"Assert-NotNull $vpnGatewaysAll$vpnGatewaysAll = Get-AzureRmVpnGatewayAssert-NotNull $vpnGatewaysAll$createdVpnConnection = New-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnectionName -VpnSite $vpnSite -ConnectionBandwidth 20 -UseLocalAzureIpAddress Assert-AreEqual $true $createdVpnConnection.UseLocalAzureIpAddress$createdVpnConnection = Update-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnectionName -ConnectionBandwidth 30 -UseLocalAzureIpAddress $false$vpnConnection = Get-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnectionNameAssert-AreEqual $vpnConnectionName $vpnConnection.NameAssert-AreEqual 30 $vpnConnection.ConnectionBandwidthAssert-AreEqual $false $vpnConnection.UseLocalAzureIpAddress $vpnSiteLinkConnection1 = New-AzVpnSiteLinkConnection -Name $vpnLink1ConnectionName -VpnSiteLink $vpnSite2.VpnSiteLinks[0] -ConnectionBandwidth 100$vpnSiteLinkConnection2 = New-AzVpnSiteLinkConnection -Name $vpnLink2ConnectionName -VpnSiteLink $vpnSite2.VpnSiteLinks[1] -ConnectionBandwidth 10$createdVpnConnection2 = New-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2Name -VpnSite $vpnSite2 -VpnSiteLinkConnection @($vpnSiteLinkConnection1, $vpnSiteLinkConnection2)$vpnConnection2 = Get-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2NameAssert-AreEqual $vpnConnection2Name $vpnConnection2.NameAssert-AreEqual 2 $vpnConnection2.VpnLinkConnections.Count$vpnSiteLinkConnection1.RoutingWeight = 10Update-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2Name -VpnSiteLinkConnection @($vpnSiteLinkConnection1)$vpnConnection2 = Get-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2NameAssert-AreEqual $vpnConnection2Name $vpnConnection2.NameAssert-AreEqual 1 $vpnConnection2.VpnLinkConnections.CountAssert-AreEqual 10 $vpnConnection2.VpnLinkConnections[0].RoutingWeight$vpnConnections = Get-AzureRmVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayNameAssert-NotNull $vpnConnections$vpnConnections = Get-AzureRmVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name "*"Assert-NotNull $vpnConnections$remoteVirtualNetwork = New-AzVirtualNetwork -ResourceGroupName $rgName -Name $remoteVirtualNetworkName -Location $rglocation -AddressPrefix "10.0.1.0/24"$createdHubVnetConnection = New-AzVirtualHubVnetConnection -ResourceGroupName $rgName -VirtualHubName $virtualHubName -Name $hubVnetConnectionName -RemoteVirtualNetwork $remoteVirtualNetwork$hubVnetConnection = Get-AzVirtualHubVnetConnection -ResourceGroupName $rgName -VirtualHubName $virtualHubName -Name $hubVnetConnectionNameAssert-AreEqual $hubVnetConnectionName $hubVnetConnection.Name$hubVnetConnections = Get-AzureRmVirtualHubVnetConnection -ResourceGroupName $rgName -VirtualHubName $virtualHubNameAssert-NotNull $hubVnetConnections$hubVnetConnections = Get-AzureRmVirtualHubVnetConnection -ResourceGroupName $rgName -VirtualHubName $virtualHubName -Name "*"Assert-NotNull $hubVnetConnections$delete = Remove-AzVirtualHubVnetConnection -ResourceGroupName $rgName -ParentResourceName $virtualHubName -Name $hubVnetConnectionName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnectionName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2Name -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnGateway -ResourceGroupName $rgName -Name $vpnGatewayName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnSite -ResourceGroupName $rgName -Name $vpnSiteName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2Name -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -Force -PassThruAssert-AreEqual $True $delete}finally{Clean-ResourceGroup $rgname}}function Test-CortexDownloadConfig{$rgName = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement "East US"$virtualWanName = Get-ResourceName$virtualHubName = Get-ResourceName$vpnSiteName = Get-ResourceName$vpnSite2Name = Get-ResourceName$vpnSiteLink1Name = Get-ResourceName$vpnSiteLink2Name = Get-ResourceName$vpnGatewayName = Get-ResourceName$remoteVirtualNetworkName = Get-ResourceName$vpnConnectionName = Get-ResourceName$vpnConnection2Name = Get-ResourceName$vpnLink1ConnectionName = Get-ResourceName$vpnLink2ConnectionName = Get-ResourceName$hubVnetConnectionName = Get-ResourceName$storeName = 'blob' + $rgNametry{$resourceGroup = New-AzResourceGroup -Name $rgName -Location $rglocation$createdVirtualWan = New-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -Location $rglocation -AllowVnetToVnetTraffic -AllowBranchToBranchTraffic$virtualWan = Get-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanNameAssert-AreEqual $rgName $virtualWan.ResourceGroupNameAssert-AreEqual $virtualWanName $virtualWan.Name$createdVirtualHub = New-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubName -Location $rglocation -AddressPrefix "192.168.1.0/24" -VirtualWan $virtualWan$virtualHub = Get-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubNameAssert-AreEqual $rgName $virtualHub.ResourceGroupNameAssert-AreEqual $virtualHubName $virtualHub.NameAssert-AreEqual "192.168.1.0/24" $virtualHub.AddressPrefix$vpnSiteAddressSpaces = New-Object string[] 1$vpnSiteAddressSpaces[0] = "192.168.2.0/24"$createdVpnSite = New-AzVpnSite -ResourceGroupName $rgName -Name $vpnSiteName -Location $rglocation -VirtualWan $virtualWan -IpAddress "1.2.3.4" -AddressSpace $vpnSiteAddressSpaces -DeviceModel "SomeDevice" -DeviceVendor "SomeDeviceVendor" -LinkSpeedInMbps 10$vpnSite = Get-AzVpnSite -ResourceGroupName $rgName -Name $vpnSiteNameAssert-AreEqual $rgName $vpnSite.ResourceGroupNameAssert-AreEqual $vpnSiteName $vpnSite.Name$vpnSite2AddressSpaces = New-Object string[] 2$vpnSite2AddressSpaces[0] = "192.169.2.0/24"$vpnSite2AddressSpaces[1] = "192.169.3.0/24"$vpnSiteLink1 = New-AzVpnSiteLink -Name $vpnSiteLink1Name -IpAddress "5.5.5.5" -LinkProviderName "SomeTelecomProvider1" -LinkSpeedInMbps "10"$vpnSiteLink2 = New-AzVpnSiteLink -Name $vpnSiteLink2Name -IpAddress "5.5.5.6" -LinkProviderName "SomeTelecomProvider2" -LinkSpeedInMbps "100"$createdVpnSite2 = New-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2Name -Location $rglocation -VirtualWan $virtualWan -AddressSpace $vpnSite2AddressSpaces -DeviceModel "SomeDevice" -DeviceVendor "SomeDeviceVendor" -VpnSiteLink @($vpnSiteLink1, $vpnSiteLink2)$vpnSite2 = Get-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2NameAssert-AreEqual $rgName $vpnSite2.ResourceGroupNameAssert-AreEqual $vpnSite2Name $vpnSite2.NameAssert-AreEqual 2 $vpnSite2.VpnSiteLinks.Count $createdVpnGateway = New-AzVpnGateway -ResourceGroupName $rgName -Name $vpnGatewayName -VirtualHub $virtualHub -VpnGatewayScaleUnit 3$vpnGateway = Get-AzVpnGateway -ResourceGroupName $rgName -Name $vpnGatewayNameAssert-AreEqual $rgName $vpnGateway.ResourceGroupNameAssert-AreEqual $vpnGatewayName $vpnGateway.Name$createdVpnConnection = New-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnectionName -VpnSite $vpnSite -ConnectionBandwidth 20$vpnConnection = Get-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnectionNameAssert-AreEqual $vpnConnectionName $vpnConnection.Name$vpnSiteLinkConnection1 = New-AzVpnSiteLinkConnection -Name $vpnLink1ConnectionName -VpnSiteLink $vpnSite2.VpnSiteLinks[0] -ConnectionBandwidth 100$vpnSiteLinkConnection2 = New-AzVpnSiteLinkConnection -Name $vpnLink2ConnectionName -VpnSiteLink $vpnSite2.VpnSiteLinks[1] -ConnectionBandwidth 10$createdVpnConnection2 = New-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2Name -VpnSite $vpnSite2 -VpnSiteLinkConnection @($vpnSiteLinkConnection1, $vpnSiteLinkConnection2)$vpnConnection2 = Get-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2NameAssert-AreEqual $vpnConnection2Name $vpnConnection2.NameAssert-AreEqual 2 $vpnConnection2.VpnLinkConnections.Count$storetype = 'Standard_GRS'$containerName = "cont$($rgName)"New-AzStorageAccount -ResourceGroupName $rgName -Name $storeName -Location $rglocation -Type $storetype$key = Get-AzStorageAccountKey -ResourceGroupName $rgName -Name $storeName$context = New-AzStorageContext -StorageAccountName $storeName -StorageAccountKey $key[0].ValueNew-AzStorageContainer -Name $containerName -Context $context$container = Get-AzStorageContainer -Name $containerName -Context $contextNew-Item -Name EmptyFile.txt -ItemType File -ForceSet-AzStorageBlobContent -File "EmptyFile.txt" -Container $containerName -Blob "emptyfile.txt" -Context $context$now=get-date$blobSasUrl = New-AzStorageBlobSASToken -Container $containerName -Blob emptyfile.txt -Context $context -Permission "rwd" -StartTime $now.AddHours(-1) -ExpiryTime $now.AddDays(1) -FullUri$vpnSitesForConfig = New-Object Microsoft.Azure.Commands.Network.Models.PSVpnSite[] 2$vpnSitesForConfig[0] = $vpnSite$vpnSitesForConfig[1] = $vpnSite2Get-AzVirtualWanVpnConfiguration -VirtualWan $virtualWan -StorageSasUrl $blobSasUrl -VpnSite $vpnSitesForConfig$delete = Remove-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnectionName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnConnection -ResourceGroupName $rgName -ParentResourceName $vpnGatewayName -Name $vpnConnection2Name -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnGateway -ResourceGroupName $rgName -Name $vpnGatewayName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnSite -ResourceGroupName $rgName -Name $vpnSiteName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVpnSite -ResourceGroupName $rgName -Name $vpnSite2Name -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -Force -PassThruAssert-AreEqual $True $delete}finally{Clean-ResourceGroup $rgname}}function Test-CortexExpressRouteCRUD{$rgName = Get-ResourceGroupName$hubRgName = Get-ResourceGroupName$rglocation = Get-ProviderLocation "ResourceManagement" "westcentralus"$virtualWanName = Get-ResourceName$virtualHubName = Get-ResourceName$expressRouteGatewayName = Get-ResourceName$circuitName = Get-ResourceName$expressRouteConnectionName = Get-ResourceNametry{$resourceGroup = New-AzureRmResourceGroup -Name $rgName -Location $rglocation$resourceGroup = New-AzureRmResourceGroup -Name $hubRgName -Location $rglocation$createdVirtualWan = New-AzureRmVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -Location $rglocation -AllowVnetToVnetTraffic -AllowBranchToBranchTraffic$virtualWan = Get-AzureRmVirtualWan -ResourceGroupName $rgName -Name $virtualWanNameWrite-Debug "Created Virtual WAN $virtualWan.Name successfully"$createdVirtualHub = New-AzureRmVirtualHub -ResourceGroupName $hubRgName -Name $virtualHubName -Location $rglocation -AddressPrefix "10.8.0.0/24" -VirtualWan $virtualWan$virtualHub = Get-AzureRmVirtualHub -ResourceGroupName $hubRgName -Name $virtualHubNameWrite-Debug "Created Virtual Hub virtualHub.Name successfully"$createdExpressRouteGateway = New-AzureRmExpressRouteGateway -ResourceGroupName $rgName -Name $expressRouteGatewayName -VirtualHub $virtualHub -MinScaleUnits 2Write-Debug "Created ExpressRoute Gateway $expressRouteGatewayName successfully"$expressRouteGateway = Get-AzureRmExpressRouteGateway -ResourceGroupName $rgName -Name $expressRouteGatewayNameAssert-NotNull $expressRouteGatewayWrite-Debug "Retrieved ExpressRoute Gateway $expressRouteGatewayName successfully"$expressRouteGateways = Get-AzureRmExpressRouteGatewayAssert-NotNull $expressRouteGatewaysAssert-True { $expressRouteGateways.Count -gt 0 }$expressRouteGateways = Get-AzureRmExpressRouteGateway -ResourceGroupName "*"Assert-NotNull $expressRouteGatewaysAssert-True { $expressRouteGateways.Count -gt 0 }$expressRouteGateways = Get-AzureRmExpressRouteGateway -Name "*"Assert-NotNull $expressRouteGatewaysAssert-True { $expressRouteGateways.Count -gt 0 }$expressRouteGateways = Get-AzureRmExpressRouteGateway -ResourceGroupName "*" -Name "*"Assert-NotNull $expressRouteGatewaysAssert-True { $expressRouteGateways.Count -gt 0 }$expressRouteGateways = Get-AzureRmExpressRouteGateway -ResourceGroupName $rgNameAssert-NotNull $expressRouteGatewaysAssert-True { $expressRouteGateways.Count -gt 0 }$peering = New-AzureRmExpressRouteCircuitPeeringConfig -Name AzurePrivatePeering -PeeringType AzurePrivatePeering -PeerASN 100 -PrimaryPeerAddressPrefix "10.2.3.4/30" -SecondaryPeerAddressPrefix "11.2.3.4/30" -VlanId 22$circuit = New-AzureRmExpressRouteCircuit -Name $circuitName -Location $rglocation -ResourceGroupName $rgname -SkuTier Premium -SkuFamily MeteredData  -ServiceProviderName "Zayo" -PeeringLocation "Denver" -BandwidthInMbps 200 -Peering $peeringWrite-Debug "Created ExpressRoute Circuit with Private Peering $circuitName successfully"$circuitResult = Get-AzureRmExpressRouteCircuit -Name $circuitName -ResourceGroupName $rgname$peeringResult = Get-AzureRmExpressRouteCircuitPeeringConfig -Name AzurePrivatePeering -ExpressRouteCircuit $circuitResultWrite-Debug "Created ExpressRoute Circuit with Private Peering $circuitName successfully"$createdExpressRouteConnection = New-AzureRmExpressRouteConnection -ResourceGroupName $rgName -ExpressRouteGatewayName $expressRouteGatewayName -Name $expressRouteConnectionName -ExpressRouteCircuitPeeringId $peeringResult.Id -RoutingWeight 10Write-Debug "Created ExpressRoute Connection with Private Peering $expressRouteConnectionName successfully"$createdExpressRouteConnection = Set-AzureRmExpressRouteConnection -ResourceGroupName $rgName -ExpressRouteGatewayName $expressRouteGatewayName -Name $expressRouteConnectionName -RoutingWeight 30Write-Debug "Updated ExpressRoute Connection with Private Peering $expressRouteConnectionName successfully"$expressRouteConnection = Get-AzureRmExpressRouteConnection -ResourceGroupName $rgName -ExpressRouteGatewayName $expressRouteGatewayName -Name $expressRouteConnectionNameAssert-NotNull $expressRouteConnectionWrite-Debug "Retrieved ExpressRoute Connection with Private Peering $expressRouteConnectionName successfully"Assert-AreEqual $expressRouteConnectionName $expressRouteConnection.NameAssert-AreEqual 30 $expressRouteConnection.RoutingWeight$expressRouteConnection = Get-AzureRmExpressRouteConnection -ResourceGroupName $rgName -ExpressRouteGatewayName $expressRouteGatewayNameAssert-NotNull $expressRouteConnectionAssert-True { $expressRouteConnection.Count -ge 0}$expressRouteConnection = Get-AzureRmExpressRouteConnection -ResourceGroupName $rgName -ExpressRouteGatewayName $expressRouteGatewayName -Name "*"Assert-NotNull $expressRouteConnectionAssert-True { $expressRouteConnection.Count -ge 0}Remove-AzureRmExpressRouteConnection -ResourceGroupName $rgName -ExpressRouteGatewayName $expressRouteGatewayName -Name $expressRouteConnectionName -ForceAssert-ThrowsLike { Get-AzureRmExpressRouteConnection -ResourceGroupName $rgName -ExpressRouteGatewayName $expressRouteGatewayName -Name $expressRouteConnectionName } "*Not*Found*"Remove-AzureRmExpressRouteGateway -ResourceGroupName $rgName -Name $expressRouteGatewayName -ForceAssert-ThrowsLike { Get-AzureRmExpressRouteGateway -ResourceGroupName $rgName -Name $expressRouteGatewayName } "*Not*Found*"Remove-AzureRmVirtualHub -ResourceGroupName $hubRgName -Name $virtualHubName -ForceRemove-AzureRmVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -ForceAssert-ThrowsLike { Get-AzureRmVirtualWan -ResourceGroupName $rgName -Name $virtualWanName } "*Not*Found*"}finally{Clean-ResourceGroup $rgname}}function Test-P2SCortexCRUD{param ( $basedir = ".\" )$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation "Microsoft.Network/VirtualWans"$virtualWanName = Get-ResourceName$virtualHubName = Get-ResourceName$VpnServerConfiguration1Name = Get-ResourceName$VpnServerConfiguration2Name = Get-ResourceName$P2SVpnGatewayName = Get-ResourceName$vpnclientAuthMethod = "EAPTLS"$storeName = 'blob' + $rgNametry{$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation$createdVirtualWan = New-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanName -Location $rglocation$virtualWan = Get-AzVirtualWan -ResourceGroupName $rgName -Name $virtualWanNameAssert-AreEqual $rgName $virtualWan.ResourceGroupNameAssert-AreEqual $virtualWanName $virtualWan.Name$createdVirtualHub = New-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubName -Location $rglocation -AddressPrefix "192.168.1.0/24" -VirtualWan $virtualWan$virtualHub = Get-AzVirtualHub -ResourceGroupName $rgName -Name $virtualHubNameAssert-AreEqual $rgName $virtualHub.ResourceGroupNameAssert-AreEqual $virtualHubName $virtualHub.NameAssert-AreEqual $virtualWan.Id $virtualhub.VirtualWan.Id$VpnServerConfigCertFilePath = Join-Path -Path $basedir -ChildPath "\ScenarioTests\Data\ApplicationGatewayAuthCert.cer"$listOfCerts = New-Object "System.Collections.Generic.List[String]"$listOfCerts.Add($VpnServerConfigCertFilePath)$vpnclientipsecpolicy1 = New-AzVpnClientIpsecPolicy -IpsecEncryption AES256 -IpsecIntegrity SHA256 -SALifeTime 86471 -SADataSize 429496 -IkeEncryption AES256 -IkeIntegrity SHA384 -DhGroup DHGroup14 -PfsGroup PFS14New-AzVpnServerConfiguration -Name $VpnServerConfiguration1Name -ResourceGroupName $rgName -VpnProtocol IkeV2 -VpnAuthenticationType Certificate -VpnClientRootCertificateFilesList $listOfCerts -VpnClientRevokedCertificateFilesList $listOfCerts -VpnClientIpsecPolicy $vpnclientipsecpolicy1 -Location $rglocation$vpnServerConfig1 = Get-AzVpnServerConfiguration -ResourceGroupName $rgName -Name $VpnServerConfiguration1NameAssert-NotNull $vpnServerConfig1Assert-AreEqual $rgName $vpnServerConfig1.ResourceGroupNameAssert-AreEqual $VpnServerConfiguration1Name $vpnServerConfig1.Name$protocols = $vpnServerConfig1.VpnProtocolsAssert-AreEqual 1 @($protocols).CountAssert-AreEqual "IkeV2" $protocols[0]$authenticationTypes = $vpnServerConfig1.VpnAuthenticationTypesAssert-AreEqual 1 @($authenticationTypes).CountAssert-AreEqual "Certificate" $authenticationTypes[0]$vpnClientAddressSpaces = New-Object string[] 2$vpnClientAddressSpaces[0] = "192.168.2.0/24"$vpnClientAddressSpaces[1] = "192.168.3.0/24"$createdP2SVpnGateway = New-AzP2sVpnGateway -ResourceGroupName $rgName -Name $P2SvpnGatewayName -VirtualHub $virtualHub -VpnGatewayScaleUnit 1 -VpnClientAddressPool $vpnClientAddressSpaces -VpnServerConfiguration $vpnServerConfig1Assert-AreEqual "Succeeded" $createdP2SVpnGateway.ProvisioningState$P2SVpnGateway = Get-AzP2sVpnGateway -ResourceGroupName $rgName -Name $P2SvpnGatewayNameAssert-AreEqual $rgName $P2SVpnGateway.ResourceGroupNameAssert-AreEqual $P2SvpnGatewayName $P2SVpnGateway.NameAssert-AreEqual $vpnServerConfig1.Id $P2SVpnGateway.VpnServerConfiguration.IdAssert-AreEqual "Succeeded" $P2SVpnGateway.ProvisioningState$associatedVpnServerConfigs = Get-AzVirtualWanVpnServerConfiguration -Name $virtualWanName -ResourceGroupName $rgNameAssert-NotNull $associatedVpnServerConfigsAssert-AreEqual 1 @($associatedVpnServerConfigs.VpnServerConfigurationResourceIds).CountAssert-AreEqual $vpnServerConfig1.Id $associatedVpnServerConfigs.VpnServerConfigurationResourceIds[0]$vpnServerConfig1 = Get-AzVpnServerConfiguration -ResourceGroupName $rgName -Name $VpnServerConfiguration1NameAssert-NotNull $vpnServerConfig1Assert-AreEqual $vpnServerConfig1.P2sVpnGateways[0].Id $P2SVpnGateway.Id$vpnServerConfigs = Get-AzVpnServerConfiguration -ResourceGroupName $rgNameAssert-NotNull $vpnServerConfigsAssert-AreEqual 1 @($vpnServerConfigs).Count$vpnProfileResponse = Get-AzP2sVpnGatewayVpnProfile -Name $P2SVpnGatewayName -ResourceGroupName $rgName -AuthenticationMethod $vpnclientAuthMethodAssert-NotNull $vpnProfileResponse.ProfileUrlAssert-AreEqual True ($vpnProfileResponse.ProfileUrl -Match "zip")$vpnProfileWanResponse = Get-AzVirtualWanVpnServerConfigurationVpnProfile -Name $virtualWanName -ResourceGroupName $rgName -AuthenticationMethod $vpnclientAuthMethod -VpnServerConfiguration $vpnServerConfig1Assert-NotNull $vpnProfileWanResponse.ProfileUrlAssert-AreEqual True ($vpnProfileWanResponse.ProfileUrl -Match "zip")$Secure_String_Pwd = ConvertTo-SecureString "TestRadiusServerPassword" -AsPlainText -ForceNew-AzVpnServerConfiguration -Name $VpnServerConfiguration2Name -ResourceGroupName $rgName -VpnProtocol IkeV2 -VpnAuthenticationType Radius -RadiusServerAddress "TestRadiusServer" -RadiusServerSecret $Secure_String_Pwd -RadiusServerRootCertificateFilesList $listOfCerts -RadiusClientRootCertificateFilesList $listOfCerts -Location $rglocation$vpnServerConfig2 = Get-AzVpnServerConfiguration -ResourceGroupName $rgName -Name $VpnServerConfiguration2NameAssert-AreEqual "Succeeded" $vpnServerConfig2.ProvisioningStateAssert-AreEqual "TestRadiusServer" $vpnServerConfig2.RadiusServerAddress$vpnServerConfigs = Get-AzVpnServerConfiguration -ResourceGroupName $rgNameAssert-NotNull $vpnServerConfigsAssert-AreEqual 2 @($vpnServerConfigs).CountUpdate-AzVpnServerConfiguration -Name $VpnServerConfiguration2Name -ResourceGroupName $rgName -RadiusServerAddress "TestRadiusServer1"$VpnServerConfig2 = Get-AzVpnServerConfiguration -Name $VpnServerConfiguration2Name -ResourceGroupName $rgNameAssert-AreEqual $VpnServerConfiguration2Name $VpnServerConfig2.NameAssert-AreEqual "TestRadiusServer1" $VpnServerConfig2.RadiusServerAddressUpdate-AzVpnServerConfiguration -ResourceId  $VpnServerConfig2.Id -RadiusServerAddress "TestRadiusServer2"			$VpnServerConfig2Get = Get-AzVpnServerConfiguration -ResourceGroupName $rgName -Name $VpnServerConfiguration2NameAssert-AreEqual "TestRadiusServer2" $VpnServerConfig2Get.RadiusServerAddressUpdate-AzVpnServerConfiguration -InputObject $VpnServerConfig2Get -RadiusServerAddress "TestRadiusServer3"$VpnServerConfig2Get = Get-AzVpnServerConfiguration -ResourceGroupName $rgName -Name $VpnServerConfiguration2NameAssert-AreEqual "TestRadiusServer3" $VpnServerConfig2Get.RadiusServerAddress$vpnClientAddressSpaces[1] = "192.168.4.0/24"$updatedP2SVpnGateway = Update-AzP2sVpnGateway -ResourceGroupName $rgName -Name $P2SvpnGatewayName -VpnClientAddressPool $vpnClientAddressSpaces$P2SVpnGateway = Get-AzP2sVpnGateway -ResourceGroupName $rgName -Name $P2SvpnGatewayNameAssert-AreEqual $P2SvpnGatewayName $P2SVpnGateway.NameAssert-AreEqual "Succeeded" $P2SVpnGateway.ProvisioningStateAssert-AreEqual $vpnServerConfig1.Id $P2SVpnGateway.VpnServerConfiguration.Id$setVpnClientAddressSpacesString = [system.String]::Join(" ", $vpnClientAddressSpaces)Assert-AreEqual $setVpnClientAddressSpacesString $P2SVpnGateway.P2SConnectionConfigurations[0].VpnClientAddressPool.AddressPrefixes$associatedVpnServerConfigs = Get-AzVirtualWanVpnServerConfiguration -ResourceId $virtualWan.IdAssert-NotNull $associatedVpnServerConfigsAssert-AreEqual 1 @($associatedVpnServerConfigs.VpnServerConfigurationResourceIds).CountAssert-AreEqual $vpnServerConfig1.Id $associatedVpnServerConfigs.VpnServerConfigurationResourceIds[0]$delete = Remove-AzVpnServerConfiguration -InputObject $VpnServerConfig2Get -Force -PassThruAssert-AreEqual $True $delete$vpnServerConfigs = Get-AzVpnServerConfiguration -ResourceGroupName $rgNameAssert-NotNull $vpnServerConfigsAssert-AreEqual 1 @($vpnServerConfigs).Count$storetype = 'Standard_GRS'$containerName = "cont$($rgName)"New-AzStorageAccount -ResourceGroupName $rgName -Name $storeName -Location $rglocation -Type $storetype$key = Get-AzStorageAccountKey -ResourceGroupName $rgName -Name $storeName$context = New-AzStorageContext -StorageAccountName $storeName -StorageAccountKey $key[0].ValueNew-AzStorageContainer -Name $containerName -Context $context$container = Get-AzStorageContainer -Name $containerName -Context $contextNew-Item -Name EmptyFile.txt -ItemType File -ForceSet-AzStorageBlobContent -File "EmptyFile.txt" -Container $containerName -Blob "emptyfile.txt" -Context $context$now=get-date$blobSasUrl = New-AzStorageBlobSASToken -Container $containerName -Blob emptyfile.txt -Context $context -Permission "rwd" -StartTime $now.AddHours(-1) -ExpiryTime $now.AddDays(1) -FullUri$detailedConnectionHealth = Get-AzP2sVpnGatewayDetailedConnectionHealth -Name $P2SvpnGatewayName -ResourceGroupName $rgName -OutputBlobSasUrl $blobSasUrlAssert-NotNull $detailedConnectionHealthAssert-NotNull $detailedConnectionHealth.SasUrlAssert-AreEqual $blobSasUrl $detailedConnectionHealth.SasUrl}finally{$delete = Remove-AzP2sVpnGateway -Name $P2SVpnGatewayName -ResourceGroupName $rgName -Force -PassThruAssert-AreEqual $True $delete$associatedVpnServerConfigs = Get-AzVirtualWanVpnServerConfiguration -Name $virtualWanName -ResourceGroupName $rgNameAssert-NotNull $associatedVpnServerConfigsAssert-AreEqual 0 @($associatedVpnServerConfigs.VpnServerConfigurationResourceIds).Count$delete = Remove-AzVpnServerConfiguration -ResourceGroupName $rgName -Name $VpnServerConfiguration1Name -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVirtualHub -ResourceGroupName $rgname -Name $virtualHubName -Force -PassThruAssert-AreEqual $True $delete$delete = Remove-AzVirtualWan -InputObject $virtualWan -Force -PassThruAssert-AreEqual $True $deleteClean-ResourceGroup $rgname}}