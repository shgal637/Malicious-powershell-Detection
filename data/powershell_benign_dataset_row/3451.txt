function Test-GetNonExistingDataFactory{	$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -ForceAssert-ThrowsContains { Get-AzDataFactory -ResourceGroupName $rgname -Name $dfname } "ResourceNotFound"    }function Test-CreateDataFactory{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Forcetry{$actual = New-AzDataFactory -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force$expected = Get-AzDataFactory -ResourceGroupName $rgname -Name $dfnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $expected.DataFactoryName $actual.DataFactoryName}finally{Clean-DataFactory $rgname $dfname}}function Test-DeleteDataFactoryWithDataFactoryParameter{$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -Force$df = New-AzDataFactory -ResourceGroupName $rgname -Name $dfname -Location $dflocation -Force        Remove-AzDataFactory -DataFactory $df -Force}function Test-DataFactoryPiping{	$dfname = Get-DataFactoryName$rgname = Get-ResourceGroupName$rglocation = Get-ProviderLocation ResourceManagement$dflocation = Get-ProviderLocation DataFactoryManagementNew-AzResourceGroup -Name $rgname -Location $rglocation -ForceNew-AzDataFactory -ResourceGroupName $rgname -Name $dfname -Location $dflocation -ForceGet-AzDataFactory -ResourceGroupName $rgname | Remove-AzDataFactory -ForceAssert-ThrowsContains { Get-AzDataFactory -ResourceGroupName $rgname -Name $dfname } "ResourceNotFound"}