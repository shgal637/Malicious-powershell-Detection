function Test-VulnerabilityAssessmentServerSettingsTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix$serverLogin = "testusername"$serverPassword = "t357ingP@s5w0rd!Sec"$credentials = new-object System.Management.Automation.PSCredential($serverLogin, ($serverPassword | ConvertTo-SecureString -asPlainText -Force))$location = "West Central US"$serverVersion = "12.0"try{Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessmentAssert-ThrowsContains -script { Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-StorageAccountName $params.storageAccount -EmailAdmins $true -NotificationEmail @("invalidMail") -RecurringScansInterval Weekly } `-message "One or more of the email addresses you entered are not valid.."Assert-ThrowsContains -script { Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-BlobStorageSasUri "https://invalid.blob.core.windows.netXXXXXXXXXXXXXXX"} `-message "Invalid BlobStorageSasUri parameter value. The value should be in format of https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX."Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-StorageAccountName $params.storageAccount$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-AreEqualArray @() $settings.NotificationEmail$testEmailAdmins = $true$testNotificationEmail = @("test1@mailTest.com", "test2@mailTest.com")$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNotificationEmail $settings.NotificationEmailClear-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmail$testScanResultsContainerName = "custom-container"$testStorageName = "storage1"$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::NoneUpdate-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$newServerName = "newServerName" +$testSuffix;$testNewNotificationEmail = @("test3@mailTest.com", "test4@mailTest.com")$testStorageName = $params.storageAccount$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::NoneNew-AzSqlServer -ResourceGroupName $params.rgname -ServerName $newServerName -Location $location -ServerVersion $serverVersion -SqlAdministratorCredentials $credentialsEnable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $newServerName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $newServerName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNewNotificationEmailGet-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $newServerName | Update-AzSqlServerVulnerabilityAssessmentSetting `-ResourceGroupName $params.rgname -ServerName $params.serverName$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Get-AzSqlServerVulnerabilityAssessmentSetting Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Clear-AzSqlServerVulnerabilityAssessmentSetting Assert-Null $settings$testEmailAdmins = $false$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-StorageAccountName $params.storageAccount -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-Null $settings.NotificationEmailClear-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverNameUpdate-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-StorageAccountName $params.storageAccount -WhatIf$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmailUpdate-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-BlobStorageSasUri $testBlobStorageSasUriClear-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-WhatIfGet-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName}finally{Remove-VulnerabilityAssessmentTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentWithSettingsNotDefinedTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffixtry{$ruleId = "VA2031"$scanId = "myCustomScanId"$baselineResults = @(@("userA", "SELECT"),@("userB", "SELECT"))Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessmentAssert-Throws { Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -BaselineResult $baselineResults }Assert-Throws { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId }Assert-Throws { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId }Assert-Throws { Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId }Assert-Throws { Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId }Assert-Throws { Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId }}finally{Remove-VulnerabilityAssessmentTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentSettingsTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffixtry{Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessmentAssert-ThrowsContains -script { Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount -EmailAdmins $true -NotificationEmail @("invalidMail") -RecurringScansInterval Weekly } `-message "One or more of the email addresses you entered are not valid.."Assert-ThrowsContains -script { Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-BlobStorageSasUri "https://invalid.blob.core.windows.netXXXXXXXXXXXXXXX"} `-message "Invalid BlobStorageSasUri parameter value. The value should be in format of https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX."Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-AreEqualArray @() $settings.NotificationEmail$testEmailAdmins = $true$testNotificationEmail = @("test1@mailTest.com", "test2@mailTest.com")$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNotificationEmail $settings.NotificationEmailClear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmail$testScanResultsContainerName = "custom-container"$testStorageName = "storage1"$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::NoneUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$newDatabaseName = "newDatabaseName";$testNewNotificationEmail = @("test3@mailTest.com", "test4@mailTest.com")$testStorageName = $params.storageAccount$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::NoneNew-AzSqlDatabase -DatabaseName $newDatabaseName -ResourceGroupName $params.rgname -ServerName $params.serverName -Edition Basic Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $newDatabaseName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNewNotificationEmailGet-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $newDatabaseName | Update-AzSqlDatabaseVulnerabilityAssessmentSetting `-ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentSetting Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Clear-AzSqlDatabaseVulnerabilityAssessmentSetting Assert-Null $settings$testEmailAdmins = $false$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-Null $settings.NotificationEmailClear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount -WhatIf$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.ServerNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmailUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-BlobStorageSasUri $testBlobStorageSasUriClear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-WhatIfGet-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName}finally{Remove-VulnerabilityAssessmentTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentBaselineTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffixtry{Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount$ruleId = "VA2108"$baselineDoesntExistsErrorMessage = "Baseline does not exist for rule 'VA2108'."Assert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageAssert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage$baselineToSet = @( 'Principal1', 'db_ddladmin', 'SQL_USER', 'None'), @( 'Principal2', 'db_ddladmin', 'SQL_USER', 'None')Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSet$baseline = Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleIdAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.ServerNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $false $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result$baselineToSet = @( 'Principal3', 'db_ddladmin', 'SQL_USER', 'None'), @( 'Principal4', 'db_ddladmin', 'SQL_USER', 'None')Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSet$baseline = Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleIdAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.ServerNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $false $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].ResultClear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleIdAssert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageAssert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageSet-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSetAssert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -RuleAppliesToMaster } -message $baselineDoesntExistsErrorMessageAssert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -RuleAppliesToMaster} -message $baselineDoesntExistsErrorMessageSet-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -RuleAppliesToMaster -BaselineResult $baselineToSet$baseline = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName`| Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -RuleId $ruleId -RuleAppliesToMasterAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.ServerNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $true $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].ResultClear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -RuleAppliesToMasterSet-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSetGet-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId | Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline$baseline = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline `-RuleId $ruleIdAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.ServerNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $false $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].ResultGet-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline `-RuleId $ruleIdAssert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageSet-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSet -WhatIfAssert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId } -message $baselineDoesntExistsErrorMessageSet-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSetClear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -WhatIfClear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId}finally{Remove-VulnerabilityAssessmentTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentScanRecordGetListTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffixtry{Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccounttry{Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName }catch{if ((Get-SqlTestMode) -eq 'Playback'){}else{throw;}}$scanId1 = "cmdletGetListScan"$scanJob = Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId1 -AsJob$scanJob | Wait-Job$scanRecord1 = $scanJob | Receive-JobAssert-AreEqual $params.rgname $scanRecord1.ResourceGroupNameAssert-AreEqual $params.serverName $scanRecord1.ServerName Assert-AreEqual $params.databaseName $scanRecord1.DatabaseName Assert-AreEqual $scanId1 $scanRecord1.ScanIdAssert-AreEqual "OnDemand" $scanRecord1.TriggerType$scanRecord1FromGet = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId1Assert-AreEqual $scanRecord1FromGet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromGet.ServerName $scanRecord1.ServerNameAssert-AreEqual $scanRecord1FromGet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromGet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromGet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromGet.State $scanRecord1.StateAssert-AreEqual $scanRecord1FromGet.StartTime $scanRecord1.StartTimeAssert-AreEqual $scanRecord1FromGet.EndTime $scanRecord1.EndTimeAssert-AreEqual $scanRecord1FromGet.Errors $scanRecord1.ErrorsAssert-AreEqual $scanRecord1FromGet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPathAssert-AreEqual $scanRecord1FromGet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks$scanRecord1FromGet = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord `-ScanId $scanId1Assert-AreEqual $scanRecord1FromGet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromGet.ServerName $scanRecord1.ServerNameAssert-AreEqual $scanRecord1FromGet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromGet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromGet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromGet.State $scanRecord1.StateAssert-AreEqual $scanRecord1FromGet.StartTime $scanRecord1.StartTimeAssert-AreEqual $scanRecord1FromGet.EndTime $scanRecord1.EndTimeAssert-AreEqual $scanRecord1FromGet.Errors $scanRecord1.ErrorsAssert-AreEqual $scanRecord1FromGet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPathAssert-AreEqual $scanRecord1FromGet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks$excpectedScanCount = 2$scanRecordList = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $excpectedScanCount $scanRecordList.Count$scanRecord1FromListCmdlet = $scanRecordList[$excpectedScanCount-1]Assert-AreEqual $scanRecord1FromListCmdlet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromListCmdlet.ServerName $scanRecord1.ServerNameAssert-AreEqual $scanRecord1FromListCmdlet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromListCmdlet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromListCmdlet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromListCmdlet.State $scanRecord1.StateAssert-AreEqual $scanRecord1FromListCmdlet.StartTime $scanRecord1.StartTimeAssert-AreEqual $scanRecord1FromListCmdlet.EndTime $scanRecord1.EndTimeAssert-AreEqual $scanRecord1FromListCmdlet.Errors $scanRecord1.ErrorsAssert-AreEqual $scanRecord1FromListCmdlet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPathAssert-AreEqual $scanRecord1FromListCmdlet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks$excpectedScanCount = $excpectedScanCount + 1Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `| Start-AzSqlDatabaseVulnerabilityAssessmentScan -ScanId $scanId1$scanRecordList = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord Assert-AreEqual $excpectedScanCount $scanRecordList.Count$scanRecord1FromListCmdlet = $scanRecordList[$excpectedScanCount-1]Assert-AreEqual $scanRecord1FromListCmdlet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromListCmdlet.ServerName $scanRecord1.ServerNameAssert-AreEqual $scanRecord1FromListCmdlet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromListCmdlet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromListCmdlet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromListCmdlet.State $scanRecord1.State$scanRecordList = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName$scansCount = $scanRecordList.CountStart-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-WhatIf$scanRecordList = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $scansCount $scanRecordList.Count}finally{Remove-VulnerabilityAssessmentTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentScanConvertTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffixtry{Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccountAssert-ThrowsContains -script { Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `-DatabaseName $params.databaseName } -message "ScanId is a required parameter for this cmdlet. Please explicitly provide it or pass the Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord output via pipe."$scanId = "cmdletConvertScan"Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId$convertScanObject = Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-ScanId $scanIdAssert-AreEqual $params.rgname $convertScanObject.ResourceGroupNameAssert-AreEqual $params.serverName $convertScanObject.ServerNameAssert-AreEqual $params.databaseName $convertScanObject.DatabaseNameAssert-True -script  { $convertScanObject.ExportedReportLocation.Contains($scanId) }Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($params.storageAccount) }$scanId = "cmdletConvertScan1"Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId$convertScanObject =  Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-ScanId $scanId | Convert-AzSqlDatabaseVulnerabilityAssessmentScanAssert-AreEqual $params.rgname $convertScanObject.ResourceGroupNameAssert-AreEqual $params.serverName $convertScanObject.ServerNameAssert-AreEqual $params.databaseName $convertScanObject.DatabaseNameAssert-True -script  { $convertScanObject.ExportedReportLocation.Contains($scanId) }Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($params.storageAccount) }$convertScanObject = Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `-ScanId $scanId -WhatIfAssert-Null $convertScanObject.ExportedReportLocationClear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseNameUpdate-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountName $params.storageAccountStart-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId}finally{Remove-VulnerabilityAssessmentTestEnvironment $testSuffix}}function Create-VulnerabilityAssessmentTestEnvironment ($testSuffix, $location = "West Central US", $serverVersion = "12.0"){$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffixCreate-TestEnvironmentWithParams $params $location $serverVersion}function Get-SqlVulnerabilityAssessmentTestEnvironmentParameters ($testSuffix){return @{ rgname = "sql-va-cmdlet-test-rg" +$testSuffix;serverName = "sql-va-cmdlet-server" +$testSuffix;databaseName = "sql-va-cmdlet-db" + $testSuffix;storageAccount = "sqlvacmdlets" +$testSuffix}}function Remove-VulnerabilityAssessmentTestEnvironment ($testSuffix){$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffixRemove-AzResourceGroup -Name $params.rgname -Force}