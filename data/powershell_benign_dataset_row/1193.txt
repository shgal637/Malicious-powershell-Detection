& (Join-Path -Path $PSScriptRoot -ChildPath '..\Initialize-CarbonTest.ps1' -Resolve)function Test-ShouldGetMsi{$msi = Get-Msi -Path (Join-Path -Path $PSScriptRoot -ChildPath 'CarbonTestInstaller.msi' -Resolve)}function Test-ShouldAcceptPipelineInput{$msi = Get-ChildItem -Path $PSScriptRoot -Filter *.msi | Get-MsiAssert-NotNull $msi$msi | ForEach-Object {  Assert-CarbonMsi $_ }}function Test-ShouldAcceptArrayOfStrings{$path = Join-Path -Path $PSScriptRoot -ChildPath 'CarbonTestInstaller.msi'$msi = Get-Msi -Path @( $path, $path )Assert-Is $msi ([object[]])foreach( $item in $msi ){Assert-CarbonMsi $item}}function Test-ShouldAcceptArrayOfFileInfo{$path = Join-Path -Path $PSScriptRoot -ChildPath 'CarbonTestInstaller.msi'$item = Get-Item -Path $path$msi = Get-Msi -Path @( $item, $item )Assert-Is $msi ([object[]])foreach( $item in $msi ){Assert-CarbonMsi $item}}function Test-ShouldSupportWildcards{$msi = Get-Msi -Path (Join-Path -Path $PSScriptRoot -ChildPath '*.msi')Assert-Is $msi ([object[]])foreach( $item in $msi ){Assert-CarbonMsi $item}}function Assert-CarbonMsi{param($msi)Assert-NotNull $msiAssert-Is $msi ([Carbon.Msi.MsiInfo])Assert-Equal 'Carbon' $msi.ManufacturerAssert-Like $msi.ProductName 'Carbon *' Assert-NotNull $msi.ProductCodeAssert-NotEqual $msi.ProductCode ([Guid]::Empty)Assert-Equal 1033 $msi.ProductLanguageAssert-Equal '1.0.0' $msi.ProductVersionAssert-NotNull $msi.PropertiesAssert-GreaterThan $msi.Properties.Count 5}