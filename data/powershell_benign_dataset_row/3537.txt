$location = "southeastasia"$resourceGroupName = "pstestFSRG1bca8f8e"$vaultName = "PSTestFSRSV1bca8f8e"$fileShareFriendlyName = "pstestfs1bca8f8e"$fileShareName = "AzureFileShare;pstestfs1bca8f8e"$saName = "pstestsa1bca8f8e"$skuName="Standard_LRS"$newPolicyName = "newFilePolicy"function Test-AzureFSPolicy{$vault = Get-AzRecoveryServicesVault -ResourceGroupName $resourceGroupName -Name $vaultName$schedulePolicy = Get-AzRecoveryServicesBackupSchedulePolicyObject -WorkloadType AzureFilesAssert-NotNull $schedulePolicy$retentionPolicy = Get-AzRecoveryServicesBackupRetentionPolicyObject -WorkloadType AzureFilesAssert-NotNull $retentionPolicy$policy = New-AzRecoveryServicesBackupProtectionPolicy `-VaultId $vault.ID `-Name $newPolicyName `-WorkloadType AzureFiles `-RetentionPolicy $retentionPolicy `-SchedulePolicy $schedulePolicyAssert-NotNull $policyAssert-AreEqual $policy.Name $newPolicyName$policy = Get-AzRecoveryServicesBackupProtectionPolicy `-VaultId $vault.ID `-Name $newPolicyNameAssert-NotNull $policyAssert-AreEqual $policy.Name $newPolicyNameAssert-NotNull $schedulePolicy$retentionPolicy = Get-AzRecoveryServicesBackupRetentionPolicyObject -WorkloadType AzureFiles$retentionPolicy.DailySchedule.DurationCountInDays = 31Assert-NotNull $retentionPolicySet-AzRecoveryServicesBackupProtectionPolicy `-VaultId $vault.ID `-RetentionPolicy $retentionPolicy `-SchedulePolicy $schedulePolicy `-Policy $policy$policy = Get-AzRecoveryServicesBackupProtectionPolicy `-VaultId $vault.ID `-Name $newPolicyNameAssert-AreEqual $policy.RetentionPolicy.DailySchedule.DurationCountInDays $retentionPolicy.DailySchedule.DurationCountInDaysRemove-AzRecoveryServicesBackupProtectionPolicy `-VaultId $vault.ID `-Policy $policy `-Force$policy = Get-AzRecoveryServicesBackupProtectionPolicy `-VaultId $vault.ID `-WorkloadType AzureFilesAssert-False { $policy.Name -contains $newPolicyName }}